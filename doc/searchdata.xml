<?xml version="1.0" encoding="UTF-8"?>
<add>
  <doc>
    <field name="type">file</field>
    <field name="name">BMatrix.h</field>
    <field name="url">BMatrix_8h.html</field>
    <field name="keywords">BMatrix.h</field>
    <field name="text">Definition file for class BMatrix</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">BSpline.h</field>
    <field name="url">BSpline_8h.html</field>
    <field name="keywords">BSpline.h</field>
    <field name="text">Function to perform a B-spline interpolation</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Bar2DL2.h</field>
    <field name="url">Bar2DL2_8h.html</field>
    <field name="keywords">Bar2DL2.h</field>
    <field name="text">Definition file for class Bar2DL2</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Beam3DL2.h</field>
    <field name="url">Beam3DL2_8h.html</field>
    <field name="keywords">Beam3DL2.h</field>
    <field name="text">Definition file for class Beam3DL2</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">BiCG.h</field>
    <field name="url">BiCG_8h.html</field>
    <field name="keywords">BiCG.h</field>
    <field name="text">Solves an unsymmetric linear system of equations using the BiConjugate Gradient method</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">BiotSavart.h</field>
    <field name="url">BiotSavart_8h.html</field>
    <field name="keywords">BiotSavart.h</field>
    <field name="text">Definition file for class BiotSavart</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">CGS.h</field>
    <field name="url">CGS_8h.html</field>
    <field name="keywords">CGS.h</field>
    <field name="text">Solves an unsymmetric linear system of equations using the Conjugate Gradient Squared method Preconditioning is possible using a preconditioning class</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">CG.h</field>
    <field name="url">CG_8h.html</field>
    <field name="keywords">CG.h</field>
    <field name="text">Functions to solve a symmetric positive definite linear system of equations using the Conjugate Gradient method Preconditioning is possible using a preconditioning class</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">DC1DL2.h</field>
    <field name="url">DC1DL2_8h.html</field>
    <field name="keywords">DC1DL2.h</field>
    <field name="text">Definition file for class DC1DL2</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">DC2DT3.h</field>
    <field name="url">DC2DT3_8h.html</field>
    <field name="keywords">DC2DT3.h</field>
    <field name="text">Definition file for class DC2DT3</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">DC2DT6.h</field>
    <field name="url">DC2DT6_8h.html</field>
    <field name="keywords">DC2DT6.h</field>
    <field name="text">Definition file for class DC2DT6</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">DC3DAT3.h</field>
    <field name="url">DC3DAT3_8h.html</field>
    <field name="keywords">DC3DAT3.h</field>
    <field name="text">Definition file for class DC3DAT3</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">DC3DT4.h</field>
    <field name="url">DC3DT4_8h.html</field>
    <field name="keywords">DC3DT4.h</field>
    <field name="text">Definition file for class DC3DT4</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">DMatrix.h</field>
    <field name="url">DMatrix_8h.html</field>
    <field name="keywords">DMatrix.h</field>
    <field name="text">Definition file for class DMatrix</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">DSMatrix.h</field>
    <field name="url">DSMatrix_8h.html</field>
    <field name="keywords">DSMatrix.h</field>
    <field name="text">Definition file for abstract class DSMatrix</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Domain.h</field>
    <field name="url">Domain_8h.html</field>
    <field name="keywords">Domain.h</field>
    <field name="text">Definition file for class Domain</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">EC2D1T3.h</field>
    <field name="url">EC2D1T3_8h.html</field>
    <field name="keywords">EC2D1T3.h</field>
    <field name="text">Definition file for class EC2D1T3</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">EC2D2T3.h</field>
    <field name="url">EC2D2T3_8h.html</field>
    <field name="keywords">EC2D2T3.h</field>
    <field name="text">Definition file for class EC2D2T3</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Edge.h</field>
    <field name="url">Edge_8h.html</field>
    <field name="keywords">Edge.h</field>
    <field name="text">Definition file for class Edge</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">EigenProblemSolver.h</field>
    <field name="url">EigenProblemSolver_8h.html</field>
    <field name="keywords">EigenProblemSolver.h</field>
    <field name="text">Definition file for class EigenProblemSolver</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Elas2DQ4.h</field>
    <field name="url">Elas2DQ4_8h.html</field>
    <field name="keywords">Elas2DQ4.h</field>
    <field name="text">Definition file for class Elas2DQ4</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Elas2DT3.h</field>
    <field name="url">Elas2DT3_8h.html</field>
    <field name="keywords">Elas2DT3.h</field>
    <field name="text">Definition file for class Elas2DT3</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Elas3DH8.h</field>
    <field name="url">Elas3DH8_8h.html</field>
    <field name="keywords">Elas3DH8.h</field>
    <field name="text">Definition file for class Elas3DH8</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Elas3DT4.h</field>
    <field name="url">Elas3DT4_8h.html</field>
    <field name="keywords">Elas3DT4.h</field>
    <field name="text">Definition file for class Elas3DT4</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Element.h</field>
    <field name="url">Element_8h.html</field>
    <field name="keywords">Element.h</field>
    <field name="text">Definition file for class Element</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Equa.h</field>
    <field name="url">Equa_8h.html</field>
    <field name="keywords">Equa.h</field>
    <field name="text">Definition file for abstract class Equa</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Equa_Acoustics.h</field>
    <field name="url">Equa__Acoustics_8h.html</field>
    <field name="keywords">Equa_Acoustics.h</field>
    <field name="text">Definition file for class Equa_Acoustics</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Equa_Electromagnetics.h</field>
    <field name="url">Equa__Electromagnetics_8h.html</field>
    <field name="keywords">Equa_Electromagnetics.h</field>
    <field name="text">Definition file for class FE_Electromagnetics</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Equa_Fluid.h</field>
    <field name="url">Equa__Fluid_8h.html</field>
    <field name="keywords">Equa_Fluid.h</field>
    <field name="text">Definition file for class Equa_Fluid</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Equa_Laplace.h</field>
    <field name="url">Equa__Laplace_8h.html</field>
    <field name="keywords">Equa_Laplace.h</field>
    <field name="text">Definition file for class Equa_Laplace</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Equa_LinearPDE.h</field>
    <field name="url">Equa__LinearPDE_8h.html</field>
    <field name="keywords">Equa_LinearPDE.h</field>
    <field name="text">Definition file for class Equa_LinearPDE</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Equa_Porous.h</field>
    <field name="url">Equa__Porous_8h.html</field>
    <field name="keywords">Equa_Porous.h</field>
    <field name="text">Definition file for class Equa_Porous</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Equa_Solid.h</field>
    <field name="url">Equa__Solid_8h.html</field>
    <field name="keywords">Equa_Solid.h</field>
    <field name="text">Definition file for class Equa_Solid</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Equa_Therm.h</field>
    <field name="url">Equa__Therm_8h.html</field>
    <field name="keywords">Equa_Therm.h</field>
    <field name="text">Definition file for class Equa_Therm</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Equation.h</field>
    <field name="url">Equation_8h.html</field>
    <field name="keywords">Equation.h</field>
    <field name="text">Definition file for class Equation</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">FEShape.h</field>
    <field name="url">FEShape_8h.html</field>
    <field name="keywords">FEShape.h</field>
    <field name="text">Definition file for class FEShape</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Figure.h</field>
    <field name="url">Figure_8h.html</field>
    <field name="keywords">Figure.h</field>
    <field name="text">Definition file for figure classes</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">FuncApprox.h</field>
    <field name="url">FuncApprox_8h.html</field>
    <field name="keywords">FuncApprox.h</field>
    <field name="text">Definition file for class FuncApprox</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Funct.h</field>
    <field name="url">Funct_8h.html</field>
    <field name="keywords">Funct.h</field>
    <field name="text">Definition file for class Funct</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">GMRes.h</field>
    <field name="url">GMRes_8h.html</field>
    <field name="keywords">GMRes.h</field>
    <field name="text">Function to solve a linear system of equations using the Generalized Minimum Residual method Preconditioning is possible using a preconditioning class</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">GS.h</field>
    <field name="url">GS_8h.html</field>
    <field name="keywords">GS.h</field>
    <field name="text">Function to solve a linear system of equations using the Gauss-Seidel method</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Gauss.h</field>
    <field name="url">Gauss_8h.html</field>
    <field name="keywords">Gauss.h</field>
    <field name="text">Definition file for struct Gauss</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">GeoModel.h</field>
    <field name="url">GeoModel_8h.html</field>
    <field name="keywords">GeoModel.h</field>
    <field name="text">Definition file for class GeoModel</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Grid.h</field>
    <field name="url">Grid_8h.html</field>
    <field name="keywords">Grid.h</field>
    <field name="text">Definition file for class Grid</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">HelmholtzBT3.h</field>
    <field name="url">HelmholtzBT3_8h.html</field>
    <field name="keywords">HelmholtzBT3.h</field>
    <field name="text">Definition file for class HelmholtzBT3</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Hexa8.h</field>
    <field name="url">Hexa8_8h.html</field>
    <field name="keywords">Hexa8.h</field>
    <field name="text">Definition file for class Hexa8</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">ICPG1D.h</field>
    <field name="url">ICPG1D_8h.html</field>
    <field name="keywords">ICPG1D.h</field>
    <field name="text">Definition file for class ICPG1D</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">ICPG2DT.h</field>
    <field name="url">ICPG2DT_8h.html</field>
    <field name="keywords">ICPG2DT.h</field>
    <field name="text">Definition file for class ICPG2DT</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">ICPG3DT.h</field>
    <field name="url">ICPG3DT_8h.html</field>
    <field name="keywords">ICPG3DT.h</field>
    <field name="text">Definition file for class ICPG3DT</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">IOField.h</field>
    <field name="url">IOField_8h.html</field>
    <field name="keywords">IOField.h</field>
    <field name="text">Definition file for class IOField</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">IPF.h</field>
    <field name="url">IPF_8h.html</field>
    <field name="keywords">IPF.h</field>
    <field name="text">Definition file for class IPF</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Integration.h</field>
    <field name="url">Integration_8h.html</field>
    <field name="keywords">Integration.h</field>
    <field name="text">Definition file for numerical integration class</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Jacobi.h</field>
    <field name="url">Jacobi_8h.html</field>
    <field name="keywords">Jacobi.h</field>
    <field name="text">Function to solve a linear system of equations using the Jacobi method</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">LCL1D.h</field>
    <field name="url">LCL1D_8h.html</field>
    <field name="keywords">LCL1D.h</field>
    <field name="text">Definition file for class LCL1D</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">LCL2DT.h</field>
    <field name="url">LCL2DT_8h.html</field>
    <field name="keywords">LCL2DT.h</field>
    <field name="text">Definition file for class LCL2DT</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">LCL3DT.h</field>
    <field name="url">LCL3DT_8h.html</field>
    <field name="keywords">LCL3DT.h</field>
    <field name="text">Definition file for class LCL3DT</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Laplace1DL2.h</field>
    <field name="url">Laplace1DL2_8h.html</field>
    <field name="keywords">Laplace1DL2.h</field>
    <field name="text">Definition file for class Laplace1DL2</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Laplace1DL3.h</field>
    <field name="url">Laplace1DL3_8h.html</field>
    <field name="keywords">Laplace1DL3.h</field>
    <field name="text">Definition file for class Laplace1DL3</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Laplace2DT3.h</field>
    <field name="url">Laplace2DT3_8h.html</field>
    <field name="keywords">Laplace2DT3.h</field>
    <field name="text">Definition file for class Laplace2DT3</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Laplace2DT6.h</field>
    <field name="url">Laplace2DT6_8h.html</field>
    <field name="keywords">Laplace2DT6.h</field>
    <field name="text">Definition file for class Laplace2DT6</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Laplace3DT4.h</field>
    <field name="url">Laplace3DT4_8h.html</field>
    <field name="keywords">Laplace3DT4.h</field>
    <field name="text">Definition file for class Laplace3DT4</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">LeastSquare.h</field>
    <field name="url">LeastSquare_8h.html</field>
    <field name="keywords">LeastSquare.h</field>
    <field name="text">Definition file for class LeastSquare</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Line2.h</field>
    <field name="url">Line2_8h.html</field>
    <field name="keywords">Line2.h</field>
    <field name="text">Definition file for class Line2</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Line3.h</field>
    <field name="url">Line3_8h.html</field>
    <field name="keywords">Line3.h</field>
    <field name="text">Definition file for class Line3</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">LinearPDE1D.h</field>
    <field name="url">LinearPDE1D_8h.html</field>
    <field name="keywords">LinearPDE1D.h</field>
    <field name="text">Definition file for class LinearPDE1D</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">LinearPDE2D.h</field>
    <field name="url">LinearPDE2D_8h.html</field>
    <field name="keywords">LinearPDE2D.h</field>
    <field name="text">Definition file for class LinearPDE2D</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">LinearPDE3D.h</field>
    <field name="url">LinearPDE3D_8h.html</field>
    <field name="keywords">LinearPDE3D.h</field>
    <field name="text">Definition file for class LinearPDE3D</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">LocalMatrix.h</field>
    <field name="url">LocalMatrix_8h.html</field>
    <field name="keywords">LocalMatrix.h</field>
    <field name="text">Definition file for class LocalMatrix</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">LocalVect.h</field>
    <field name="url">LocalVect_8h.html</field>
    <field name="keywords">LocalVect.h</field>
    <field name="text">Definition file for class LocalVect</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Material.h</field>
    <field name="url">Material_8h.html</field>
    <field name="keywords">Material.h</field>
    <field name="text">Definition file for class Material</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Matrix.h</field>
    <field name="url">Matrix_8h.html</field>
    <field name="keywords">Matrix.h</field>
    <field name="text">Definition file for abstract class Matrix</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">MeshAdapt.h</field>
    <field name="url">MeshAdapt_8h.html</field>
    <field name="keywords">MeshAdapt.h</field>
    <field name="text">Definition file for class MeshAdapt</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">MeshExtract.h</field>
    <field name="url">MeshExtract_8h.html</field>
    <field name="keywords">MeshExtract.h</field>
    <field name="text">Definition file for classes for extracting submeshes</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">MeshUtil.h</field>
    <field name="url">MeshUtil_8h.html</field>
    <field name="keywords">MeshUtil.h</field>
    <field name="text">Definitions of utility functions for meshes</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Mesh.h</field>
    <field name="url">Mesh_8h.html</field>
    <field name="keywords">Mesh.h</field>
    <field name="text">Definition file for class Mesh</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Muscl1D.h</field>
    <field name="url">Muscl1D_8h.html</field>
    <field name="keywords">Muscl1D.h</field>
    <field name="text">Definition file for class Muscl1D</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Muscl2DT.h</field>
    <field name="url">Muscl2DT_8h.html</field>
    <field name="keywords">Muscl2DT.h</field>
    <field name="text">Definition file for class Muscl2DT</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Muscl3DT.h</field>
    <field name="url">Muscl3DT_8h.html</field>
    <field name="keywords">Muscl3DT.h</field>
    <field name="text">Definition file for class Muscl3DT</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Muscl.h</field>
    <field name="url">Muscl_8h.html</field>
    <field name="keywords">Muscl.h</field>
    <field name="text">Definition file for class Muscl</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">MyNLAS.h</field>
    <field name="url">MyNLAS_8h.html</field>
    <field name="keywords">MyNLAS.h</field>
    <field name="text">Definition file for abstract class MyNLAS</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">MyOpt.h</field>
    <field name="url">MyOpt_8h.html</field>
    <field name="keywords">MyOpt.h</field>
    <field name="text">Definition file for abstract class MyOpt</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">NSP2DQ41.h</field>
    <field name="url">NSP2DQ41_8h.html</field>
    <field name="keywords">NSP2DQ41.h</field>
    <field name="text">Definition file for class NSP2DQ41</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Node.h</field>
    <field name="url">Node_8h.html</field>
    <field name="keywords">Node.h</field>
    <field name="text">Definition file for class Node</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">ODESolver.h</field>
    <field name="url">ODESolver_8h.html</field>
    <field name="keywords">ODESolver.h</field>
    <field name="text">Definition file for class ODESolver</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">OFELI.h</field>
    <field name="url">OFELI_8h.html</field>
    <field name="keywords">OFELI.h</field>
    <field name="text">Header file that includes all kernel classes of the library To be included in conjunction with problem dependent header files</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">OFELI_Config.h</field>
    <field name="url">OFELI__Config_8h.html</field>
    <field name="keywords">OFELI_Config.h</field>
    <field name="text">File that contains some macros All these macros can be modified before compiling the library</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">ElementType</field>
    <field name="url">OFELI__Config_8h.html#a16b11be27a8e9362dd122c4d879e01ae</field>
    <field name="keywords">ElementType</field>
    <field name="text">Choose finite element type</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">TETRA4</field>
    <field name="url">OFELI__Config_8h.html#a16b11be27a8e9362dd122c4d879e01aea35401d5abb91c648abdb96b5c73d47bc</field>
    <field name="keywords">TETRA4 TETRA4</field>
    <field name="text">Tetrahedral element with 4 nodes P1</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">QUAD4</field>
    <field name="url">OFELI__Config_8h.html#a16b11be27a8e9362dd122c4d879e01aea390fa17362e61ece015e2128bdbf4600</field>
    <field name="keywords">QUAD4 QUAD4</field>
    <field name="text">Quadrilateral element with 4 nodes Q1</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">LINE2</field>
    <field name="url">OFELI__Config_8h.html#a16b11be27a8e9362dd122c4d879e01aea83ee979f417e16f1d8a16a96b01ecb61</field>
    <field name="keywords">LINE2 LINE2</field>
    <field name="text">Line element with 2 nodes P1</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">HEXA8</field>
    <field name="url">OFELI__Config_8h.html#a16b11be27a8e9362dd122c4d879e01aead47895868c7ba4195e4e36e76a054d73</field>
    <field name="keywords">HEXA8 HEXA8</field>
    <field name="text">Hexahedral element with 8 nodes Q1</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">TRIANG3</field>
    <field name="url">OFELI__Config_8h.html#a16b11be27a8e9362dd122c4d879e01aeae5453b7defc0ec5f4a6ed3670e675231</field>
    <field name="keywords">TRIANG3 TRIANG3</field>
    <field name="text">Triangular element with 3 nodes P1</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">PENTA6</field>
    <field name="url">OFELI__Config_8h.html#a16b11be27a8e9362dd122c4d879e01aeafa4fa214eee8fa3df913cbd5c7c3a430</field>
    <field name="keywords">PENTA6 PENTA6</field>
    <field name="text">Pentahedral element with 6 nodes P1*Q1</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">ElementShape</field>
    <field name="url">OFELI__Config_8h.html#a3568f915ff739aa71835a21ec807322e</field>
    <field name="keywords">ElementShape</field>
    <field name="text">Enumerate list for element shapes</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">POINT</field>
    <field name="url">OFELI__Config_8h.html#a3568f915ff739aa71835a21ec807322ea15108ccafa3232b9067f889b6156f565</field>
    <field name="keywords">POINT POINT</field>
    <field name="text">Elements are single points</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">PENTAHEDRON</field>
    <field name="url">OFELI__Config_8h.html#a3568f915ff739aa71835a21ec807322ea17a4583a45c73d92c412a3ada0096133</field>
    <field name="keywords">PENTAHEDRON PENTAHEDRON</field>
    <field name="text">Elements are pentahedra</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">TRIANGLE</field>
    <field name="url">OFELI__Config_8h.html#a3568f915ff739aa71835a21ec807322ea2fd33892864d1c342d3bead2f2d9ad56</field>
    <field name="keywords">TRIANGLE TRIANGLE</field>
    <field name="text">Elements are triangles</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">PYRAMID</field>
    <field name="url">OFELI__Config_8h.html#a3568f915ff739aa71835a21ec807322ea3fcd053f6577a9c10a59c3d3595658eb</field>
    <field name="keywords">PYRAMID PYRAMID</field>
    <field name="text">Elements are pyramids</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">PRISM</field>
    <field name="url">OFELI__Config_8h.html#a3568f915ff739aa71835a21ec807322ea4cc31b3ed970e3f26bfd2d491b8d7946</field>
    <field name="keywords">PRISM PRISM</field>
    <field name="text">Elements are prisms</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">QUADRILATERAL</field>
    <field name="url">OFELI__Config_8h.html#a3568f915ff739aa71835a21ec807322ea626d2901e9e521eb60f5681ada30849c</field>
    <field name="keywords">QUADRILATERAL QUADRILATERAL</field>
    <field name="text">Elements are quadrilaterals</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">HEXAHEDRON</field>
    <field name="url">OFELI__Config_8h.html#a3568f915ff739aa71835a21ec807322eaa67bd73e46a66076a9980159f8011a02</field>
    <field name="keywords">HEXAHEDRON HEXAHEDRON</field>
    <field name="text">Elements are hexahedra bricks</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">LINE</field>
    <field name="url">OFELI__Config_8h.html#a3568f915ff739aa71835a21ec807322eab023460c84f774a219d46ccf4665994c</field>
    <field name="keywords">LINE LINE</field>
    <field name="text">Elements are segment lines</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">TETRAHEDRON</field>
    <field name="url">OFELI__Config_8h.html#a3568f915ff739aa71835a21ec807322ead447314c433c39f567ca6bd240eae16a</field>
    <field name="keywords">TETRAHEDRON TETRAHEDRON</field>
    <field name="text">Elements are tetrahedra</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">NO_ELEMENT</field>
    <field name="url">OFELI__Config_8h.html#a3568f915ff739aa71835a21ec807322eae7bdd74d766622ac9892bbe22e484ce6</field>
    <field name="keywords">NO_ELEMENT NO_ELEMENT</field>
    <field name="text">Mesh with no element</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">FieldName</field>
    <field name="url">OFELI__Config_8h.html#a4425e9e63e7d0d0c4cb1d33abdb5511b</field>
    <field name="keywords">FieldName</field>
    <field name="text">Enumerate variable that selects field</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">VELOCITY</field>
    <field name="url">OFELI__Config_8h.html#a4425e9e63e7d0d0c4cb1d33abdb5511ba06e15744a8bd69fceeeb39ab3614b3f6</field>
    <field name="keywords">VELOCITY VELOCITY</field>
    <field name="text">Velocity vector field</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">DISPLACEMENT</field>
    <field name="url">OFELI__Config_8h.html#a4425e9e63e7d0d0c4cb1d33abdb5511ba3c54d663cec525a4311244f2e34399b9</field>
    <field name="keywords">DISPLACEMENT DISPLACEMENT</field>
    <field name="text">Displacement vector field</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">MOMENTUM</field>
    <field name="url">OFELI__Config_8h.html#a4425e9e63e7d0d0c4cb1d33abdb5511ba6a6ecc006450b412792e9acc14a260f1</field>
    <field name="keywords">MOMENTUM MOMENTUM</field>
    <field name="text">Momentum</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">MAGNETIC_FIELD</field>
    <field name="url">OFELI__Config_8h.html#a4425e9e63e7d0d0c4cb1d33abdb5511ba702dbd15a7dc209c7c7a46c7d8781648</field>
    <field name="keywords">MAGNETIC_FIELD MAGNETIC_FIELD</field>
    <field name="text">Magnetic vector field</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">ELECTRIC_FIELD</field>
    <field name="url">OFELI__Config_8h.html#a4425e9e63e7d0d0c4cb1d33abdb5511ba7590ed0882deb34cdd12c0cff00c55f5</field>
    <field name="keywords">ELECTRIC_FIELD ELECTRIC_FIELD</field>
    <field name="text">Electric vector field</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">PRESSURE</field>
    <field name="url">OFELI__Config_8h.html#a4425e9e63e7d0d0c4cb1d33abdb5511ba86426522c91b417229c899ae35258a46</field>
    <field name="keywords">PRESSURE PRESSURE</field>
    <field name="text">Pressure scalar field</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">DENSITY</field>
    <field name="url">OFELI__Config_8h.html#a4425e9e63e7d0d0c4cb1d33abdb5511ba9d2cc316ab2e6e5637281696bebc6ffd</field>
    <field name="keywords">DENSITY DENSITY</field>
    <field name="text">Density</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">POTENTIAL</field>
    <field name="url">OFELI__Config_8h.html#a4425e9e63e7d0d0c4cb1d33abdb5511baaa48c246574afbd808bf13e298775dab</field>
    <field name="keywords">POTENTIAL POTENTIAL</field>
    <field name="text">Potential vector field</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">TEMPERATURE</field>
    <field name="url">OFELI__Config_8h.html#a4425e9e63e7d0d0c4cb1d33abdb5511bac4ae6787ff1d8b2d1cf0ae9aa696e56c</field>
    <field name="keywords">TEMPERATURE TEMPERATURE</field>
    <field name="text">Temperature scalar field</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">INTERNAL_ENERGY</field>
    <field name="url">OFELI__Config_8h.html#a4425e9e63e7d0d0c4cb1d33abdb5511baca4e65dd7ee00df375141143d431287e</field>
    <field name="keywords">INTERNAL_ENERGY INTERNAL_ENERGY</field>
    <field name="text">Internal energy</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">CONCENTRATION</field>
    <field name="url">OFELI__Config_8h.html#a4425e9e63e7d0d0c4cb1d33abdb5511bae4138e188ac8653e2349e02ebbacc59f</field>
    <field name="keywords">CONCENTRATION CONCENTRATION</field>
    <field name="text">Concentration field</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">STRESS</field>
    <field name="url">OFELI__Config_8h.html#a4425e9e63e7d0d0c4cb1d33abdb5511baef2af9c9f93ee0601e976c52dfeac4b6</field>
    <field name="keywords">STRESS STRESS</field>
    <field name="text">Stress vector field</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">DOFSupport</field>
    <field name="url">OFELI__Config_8h.html#a75f99f88d846522a874cf86992b7c806</field>
    <field name="keywords">DOFSupport</field>
    <field name="text">Choose Support of degrees of freedom</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EDGE_DOF</field>
    <field name="url">OFELI__Config_8h.html#a75f99f88d846522a874cf86992b7c806a2b6c75e3b28e624a7e313eb8002ffc51</field>
    <field name="keywords">EDGE_DOF EDGE_DOF</field>
    <field name="text">DOFs are supported by edges</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">SIDE_DOF</field>
    <field name="url">OFELI__Config_8h.html#a75f99f88d846522a874cf86992b7c806a318dc48513440575f37701ef37aa768b</field>
    <field name="keywords">SIDE_DOF SIDE_DOF</field>
    <field name="text">DOFs are supported by sides</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">NODE_DOF</field>
    <field name="url">OFELI__Config_8h.html#a75f99f88d846522a874cf86992b7c806a865f45c3db79bb2e3a41d320fa298887</field>
    <field name="keywords">NODE_DOF NODE_DOF</field>
    <field name="text">DOFs are supported by nodes</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">BOUNDARY_SIDE_DOF</field>
    <field name="url">OFELI__Config_8h.html#a75f99f88d846522a874cf86992b7c806ab3bb2851aadefb4f29742b97c474886b</field>
    <field name="keywords">BOUNDARY_SIDE_DOF BOUNDARY_SIDE_DOF</field>
    <field name="text">DOFs are supported by sides</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">NONE</field>
    <field name="url">OFELI__Config_8h.html#a75f99f88d846522a874cf86992b7c806ac157bdf0b85a40d2619cbc8bc1ae5fe2</field>
    <field name="keywords">NONE NONE</field>
    <field name="text">No support assigned to DOFs</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">ELEMENT_DOF</field>
    <field name="url">OFELI__Config_8h.html#a75f99f88d846522a874cf86992b7c806ae6fc89c716af3ce0669062c564711603</field>
    <field name="keywords">ELEMENT_DOF ELEMENT_DOF</field>
    <field name="text">DOFs are supported by elements</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">ExternalFileFormat</field>
    <field name="url">OFELI__Config_8h.html#a7ff72818090b4a0c3aef310f6341e2b8</field>
    <field name="keywords">ExternalFileFormat</field>
    <field name="text">ExternalFileFormat Enumerate variable that selects external file formats</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">TRIANGLE_FF</field>
    <field name="url">OFELI__Config_8h.html#a7ff72818090b4a0c3aef310f6341e2b8a00b2e76f7991d05b7a28aab5ef263dc9</field>
    <field name="keywords">TRIANGLE_FF TRIANGLE_FF</field>
    <field name="text">Triangle file format</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">MATLAB</field>
    <field name="url">OFELI__Config_8h.html#a7ff72818090b4a0c3aef310f6341e2b8a14d31a4a7a58e39d6322764fb2b00a91</field>
    <field name="keywords">MATLAB MATLAB</field>
    <field name="text">Matlab m-file</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">NETGEN</field>
    <field name="url">OFELI__Config_8h.html#a7ff72818090b4a0c3aef310f6341e2b8a162d94782cc5d2504ef5d4f5da4db450</field>
    <field name="keywords">NETGEN NETGEN</field>
    <field name="text">Netgen file format</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EASYMESH</field>
    <field name="url">OFELI__Config_8h.html#a7ff72818090b4a0c3aef310f6341e2b8a1f13c1f6b95486e20d74f95995c87ddb</field>
    <field name="keywords">EASYMESH EASYMESH</field>
    <field name="text">Easymesh file format</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">VTK</field>
    <field name="url">OFELI__Config_8h.html#a7ff72818090b4a0c3aef310f6341e2b8a37fb55ddbbe1465cec5f3d154db73e67</field>
    <field name="keywords">VTK VTK</field>
    <field name="text">VTK file format</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">TECPLOT</field>
    <field name="url">OFELI__Config_8h.html#a7ff72818090b4a0c3aef310f6341e2b8a3945c3f80004c5c802b41b0a26415dbe</field>
    <field name="keywords">TECPLOT TECPLOT</field>
    <field name="text">Tecplot file format</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">GAMBIT</field>
    <field name="url">OFELI__Config_8h.html#a7ff72818090b4a0c3aef310f6341e2b8a9b403939eadc82ac195997971e623c7f</field>
    <field name="keywords">GAMBIT GAMBIT</field>
    <field name="text">Gambit file format</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">BAMG</field>
    <field name="url">OFELI__Config_8h.html#a7ff72818090b4a0c3aef310f6341e2b8a9d3aba93b0dd42730a5148ada874871f</field>
    <field name="keywords">BAMG BAMG</field>
    <field name="text">Bamg file format</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI_FF</field>
    <field name="url">OFELI__Config_8h.html#a7ff72818090b4a0c3aef310f6341e2b8a9e08b5e79f9838b88d28d2bf3df04380</field>
    <field name="keywords">OFELI_FF OFELI_FF</field>
    <field name="text">OFELI file format</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">TETGEN</field>
    <field name="url">OFELI__Config_8h.html#a7ff72818090b4a0c3aef310f6341e2b8aba1ae5d45b7cd89121c2fc22ca229443</field>
    <field name="keywords">TETGEN TETGEN</field>
    <field name="text">Tetgen file format</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">GMSH</field>
    <field name="url">OFELI__Config_8h.html#a7ff72818090b4a0c3aef310f6341e2b8ac2853e781a94a261d7a02fbada17ae60</field>
    <field name="keywords">GMSH GMSH</field>
    <field name="text">Gmsh file format</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">GNUPLOT</field>
    <field name="url">OFELI__Config_8h.html#a7ff72818090b4a0c3aef310f6341e2b8adbfead1896658a976d0058e4a141b54b</field>
    <field name="keywords">GNUPLOT GNUPLOT</field>
    <field name="text">Gnuplot file format</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">NonLinearIter</field>
    <field name="url">OFELI__Config_8h.html#ab6f9e7ed61a436ab70e8c9cbf9b7c62f</field>
    <field name="keywords">NonLinearIter</field>
    <field name="text">Selects iteration method for solving nonlinear problems</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">BISECTION</field>
    <field name="url">OFELI__Config_8h.html#ab6f9e7ed61a436ab70e8c9cbf9b7c62fa2d8cd49cc9cfeae7012bcf3c1a527308</field>
    <field name="keywords">BISECTION BISECTION</field>
    <field name="text">Bisection method</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">REGULA_FALSI</field>
    <field name="url">OFELI__Config_8h.html#ab6f9e7ed61a436ab70e8c9cbf9b7c62fa3f60108c35f961caa1450bfca66b8652</field>
    <field name="keywords">REGULA_FALSI REGULA_FALSI</field>
    <field name="text">Regula Falsi method</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">NEWTON</field>
    <field name="url">OFELI__Config_8h.html#ab6f9e7ed61a436ab70e8c9cbf9b7c62facb672e33270b2496f98d3d6995d503f2</field>
    <field name="keywords">NEWTON NEWTON</field>
    <field name="text">Newton s method</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">PICARD</field>
    <field name="url">OFELI__Config_8h.html#ab6f9e7ed61a436ab70e8c9cbf9b7c62faecd6c260c59a5e4c6062be6491ed95e5</field>
    <field name="keywords">PICARD PICARD</field>
    <field name="text">Picard s iteration method</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">SECANT</field>
    <field name="url">OFELI__Config_8h.html#ab6f9e7ed61a436ab70e8c9cbf9b7c62faf71a361c3c01786c90e8a3fec55401c1</field>
    <field name="keywords">SECANT SECANT</field>
    <field name="text">Secant method</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">EType</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1</field>
    <field name="keywords">EType</field>
    <field name="text">Enumerate variable that selects equation data type</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EType::DDOMAIN</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1a03d51e91bbc2c91a216f629421451e07</field>
    <field name="keywords">DDOMAIN EType::DDOMAIN DDOMAIN EType::DDOMAIN</field>
    <field name="text">Domain</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EType::PROJECT</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1a1781f676dedf5767f3243db0a9738b35</field>
    <field name="keywords">PROJECT EType::PROJECT PROJECT EType::PROJECT</field>
    <field name="text">Project name</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EType::BOUNDARY_CONDITION</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1a1c0e98648dbdf04718b19825477a25d6</field>
    <field name="keywords">BOUNDARY_CONDITION EType::BOUNDARY_CONDITION BOUNDARY_CONDITION EType::BOUNDARY_CONDITION</field>
    <field name="text">Boundary condition data</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EType::NO_TYPE</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1a245d11a3709454cc69b2de7911073d57</field>
    <field name="keywords">NO_TYPE EType::NO_TYPE NO_TYPE EType::NO_TYPE</field>
    <field name="text">No type prescribed</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EType::BOUNDARY_FORCE</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1a28e7e0b368f58eca4691ded0f034757f</field>
    <field name="keywords">BOUNDARY_FORCE EType::BOUNDARY_FORCE BOUNDARY_FORCE EType::BOUNDARY_FORCE</field>
    <field name="text">Body force data</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EType::NEUMANN</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1a2f2dd8d12511598975b5475371963bd4</field>
    <field name="keywords">NEUMANN EType::NEUMANN NEUMANN EType::NEUMANN</field>
    <field name="text">Body force data</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EType::MATRIX</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1a38ef5fe49a654647519ee8c498c49664</field>
    <field name="keywords">MATRIX EType::MATRIX MATRIX EType::MATRIX</field>
    <field name="text">Matrix</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EType::DISPLACEMENT</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1a588d9cf9baadd390793d7bd46ae3d3a8</field>
    <field name="keywords">DISPLACEMENT EType::DISPLACEMENT DISPLACEMENT EType::DISPLACEMENT</field>
    <field name="text">A displacement field</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EType::MESH</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1a5b65fe46c5dd90ebcec69c472c3be1d9</field>
    <field name="keywords">MESH EType::MESH MESH EType::MESH</field>
    <field name="text">Finite element mesh</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EType::PRESSURE</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1a6753182d0065061a189bb834145e8cd1</field>
    <field name="keywords">PRESSURE EType::PRESSURE PRESSURE EType::PRESSURE</field>
    <field name="text">A pressure field</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EType::FUNCTION</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1a6a72a6a776662a244f82d31e9274a07b</field>
    <field name="keywords">FUNCTION EType::FUNCTION FUNCTION EType::FUNCTION</field>
    <field name="text">Function to define a tabulation</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EType::VELOCITY</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1a7b4354bded455eb379e3c764806cda7b</field>
    <field name="keywords">VELOCITY EType::VELOCITY VELOCITY EType::VELOCITY</field>
    <field name="text">A velocity field</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EType::VECTOR</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1a87752381b583740610f1dfeb07fdad7e</field>
    <field name="keywords">VECTOR EType::VECTOR VECTOR EType::VECTOR</field>
    <field name="text">Vector or Field</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EType::INITIAL</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1a91d26e4b2b105c74655093c9becd30b7</field>
    <field name="keywords">INITIAL EType::INITIAL INITIAL EType::INITIAL</field>
    <field name="text">Initial condition or solution</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EType::TRACTION</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1a9431394e39c2d1232d9c4bb4396f9e59</field>
    <field name="keywords">TRACTION EType::TRACTION TRACTION EType::TRACTION</field>
    <field name="text">Body force data</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EType::PRESCRIBE</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1aa5b960d0e18bfaab76689569bdb5d15b</field>
    <field name="keywords">PRESCRIBE EType::PRESCRIBE PRESCRIBE EType::PRESCRIBE</field>
    <field name="text">Prescribe data</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EType::INPUT</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1aa84cc046d48610b05c21fd3670d0c829</field>
    <field name="keywords">INPUT EType::INPUT INPUT EType::INPUT</field>
    <field name="text">Input</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EType::TEMPERATURE</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1ab976538812ef6e3e5881e245d5fc3c76</field>
    <field name="keywords">TEMPERATURE EType::TEMPERATURE TEMPERATURE EType::TEMPERATURE</field>
    <field name="text">A temperature field</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EType::GRID</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1abc899ea5d6a94a8e4e60c16244919ba0</field>
    <field name="keywords">GRID EType::GRID GRID EType::GRID</field>
    <field name="text">Grid</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EType::AUX_INPUT_FIELD_2</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1abe6ece5efccdbe5007a8c056a70ba3b6</field>
    <field name="keywords">AUX_INPUT_FIELD_2 EType::AUX_INPUT_FIELD_2 AUX_INPUT_FIELD_2 EType::AUX_INPUT_FIELD_2</field>
    <field name="text">Auxiliary input field 2</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EType::AUX_INPUT_FIELD_1</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1ac43b6761e79d82112a05f3545fa62f6c</field>
    <field name="keywords">AUX_INPUT_FIELD_1 EType::AUX_INPUT_FIELD_1 AUX_INPUT_FIELD_1 EType::AUX_INPUT_FIELD_1</field>
    <field name="text">Auxiliary input field 1</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EType::MATERIAL</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1ac740ce1ae95095daaa5eb2362f3151b3</field>
    <field name="keywords">MATERIAL EType::MATERIAL MATERIAL EType::MATERIAL</field>
    <field name="text">Material data</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EType::BODY_FORCE</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1ad4bc67443f9000c0647fe7d6b8fc0e83</field>
    <field name="keywords">BODY_FORCE EType::BODY_FORCE BODY_FORCE EType::BODY_FORCE</field>
    <field name="text">Body force data</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EType::FLUX</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1ae098247bc6652dd88c76644b275260ed</field>
    <field name="keywords">FLUX EType::FLUX FLUX EType::FLUX</field>
    <field name="text">Body force data</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EType::DIRICHLET</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1ae151350b63efc6c3bbe2e3f0d27863ba</field>
    <field name="keywords">DIRICHLET EType::DIRICHLET DIRICHLET EType::DIRICHLET</field>
    <field name="text">Boundary condition data</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EType::AUX_INPUT_FIELD_3</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1ae23ce51267779bce4ce2a3e340e2eee7</field>
    <field name="keywords">AUX_INPUT_FIELD_3 EType::AUX_INPUT_FIELD_3 AUX_INPUT_FIELD_3 EType::AUX_INPUT_FIELD_3</field>
    <field name="text">Auxiliary input field 3</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EType::SOLUTION</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1ae3d87c0113dc985c598feb409a45c552</field>
    <field name="keywords">SOLUTION EType::SOLUTION SOLUTION EType::SOLUTION</field>
    <field name="text">Initial condition or solution</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EType::SOURCE</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1ae60b4854b44ccfb2d92aa6f035171bb4</field>
    <field name="keywords">SOURCE EType::SOURCE SOURCE EType::SOURCE</field>
    <field name="text">Body force data</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EType::AUX_INPUT_FIELD_4</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1ae867b0ca963689e0d972e176e70fdb29</field>
    <field name="keywords">AUX_INPUT_FIELD_4 EType::AUX_INPUT_FIELD_4 AUX_INPUT_FIELD_4 EType::AUX_INPUT_FIELD_4</field>
    <field name="text">Auxiliary input field 4</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">EType::POINT_FORCE</field>
    <field name="url">OFELI__Config_8h.html#ad5d0e87f61ba99c47a539492df7917a1af700f8b37d34639300825d0e1296c233</field>
    <field name="keywords">POINT_FORCE EType::POINT_FORCE POINT_FORCE EType::POINT_FORCE</field>
    <field name="text">Localized at point force</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Penta6.h</field>
    <field name="url">Penta6_8h.html</field>
    <field name="keywords">Penta6.h</field>
    <field name="text">Definition file for class Penta6</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">PhaseChange.h</field>
    <field name="url">PhaseChange_8h.html</field>
    <field name="keywords">PhaseChange.h</field>
    <field name="text">Definition file for class PhaseChange and its parent abstract class</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Point2D.h</field>
    <field name="url">Point2D_8h.html</field>
    <field name="keywords">Point2D.h</field>
    <field name="text">Definition file for class Point2D</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Point.h</field>
    <field name="url">Point_8h.html</field>
    <field name="keywords">Point.h</field>
    <field name="text">Definition file and implementation for class Point</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Prec.h</field>
    <field name="url">Prec_8h.html</field>
    <field name="keywords">Prec.h</field>
    <field name="text">Definition file for preconditioning classes</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Pres1DL2.h</field>
    <field name="url">Pres1DL2_8h.html</field>
    <field name="keywords">Pres1DL2.h</field>
    <field name="text">Definition file for class PRES1DL2</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Pres2DT3.h</field>
    <field name="url">Pres2DT3_8h.html</field>
    <field name="keywords">Pres2DT3.h</field>
    <field name="text">Definition file for class Pres2DT3</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Prescription.h</field>
    <field name="url">Prescription_8h.html</field>
    <field name="keywords">Prescription.h</field>
    <field name="text">Definition file for class Prescription</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Quad4.h</field>
    <field name="url">Quad4_8h.html</field>
    <field name="keywords">Quad4.h</field>
    <field name="text">Definition file for class Quad4</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Richardson.h</field>
    <field name="url">Richardson_8h.html</field>
    <field name="keywords">Richardson.h</field>
    <field name="text">Function to solve a linear system of equations using the Richardson method</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">SSOR.h</field>
    <field name="url">SSOR_8h.html</field>
    <field name="keywords">SSOR.h</field>
    <field name="text">Function to solve a linear system of equations using the Symmetric Successive Over Relaxation method</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Side.h</field>
    <field name="url">Side_8h.html</field>
    <field name="keywords">Side.h</field>
    <field name="text">Definition file for class Side</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">SkMatrix.h</field>
    <field name="url">SkMatrix_8h.html</field>
    <field name="keywords">SkMatrix.h</field>
    <field name="text">Definition file for class SkMatrix</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">SkSMatrix.h</field>
    <field name="url">SkSMatrix_8h.html</field>
    <field name="keywords">SkSMatrix.h</field>
    <field name="text">Definition file for class SkSMatrix</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">SpMatrix.h</field>
    <field name="url">SpMatrix_8h.html</field>
    <field name="keywords">SpMatrix.h</field>
    <field name="text">Definition file for class SpMatrix</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">SpaceTime.h</field>
    <field name="url">SpaceTime_8h.html</field>
    <field name="keywords">SpaceTime.h</field>
    <field name="text">Definition file and implementation for class SpaceTime</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">SteklovPoincare2DBE.h</field>
    <field name="url">SteklovPoincare2DBE_8h.html</field>
    <field name="keywords">SteklovPoincare2DBE.h</field>
    <field name="text">Definition file for class SteklovPoincare2DBE</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">TINS2DT3S.h</field>
    <field name="url">TINS2DT3S_8h.html</field>
    <field name="keywords">TINS2DT3S.h</field>
    <field name="text">Definition file for class TINS2DT3S</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">TINS3DT4S.h</field>
    <field name="url">TINS3DT4S_8h.html</field>
    <field name="keywords">TINS3DT4S.h</field>
    <field name="text">Definition file for class TINS3DT4S</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Tabulation.h</field>
    <field name="url">Tabulation_8h.html</field>
    <field name="keywords">Tabulation.h</field>
    <field name="text">Definition file for class Tabulation</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Tetra4.h</field>
    <field name="url">Tetra4_8h.html</field>
    <field name="keywords">Tetra4.h</field>
    <field name="text">Definition file for class Tetra4</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">TimeStepping.h</field>
    <field name="url">TimeStepping_8h.html</field>
    <field name="keywords">TimeStepping.h</field>
    <field name="text">Definition file for class TimeStepping</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Timer.h</field>
    <field name="url">Timer_8h.html</field>
    <field name="keywords">Timer.h</field>
    <field name="text">Definition file for class Timer</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">TrMatrix.h</field>
    <field name="url">TrMatrix_8h.html</field>
    <field name="keywords">TrMatrix.h</field>
    <field name="text">Definition file for class TrMatrix</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Triang3.h</field>
    <field name="url">Triang3_8h.html</field>
    <field name="keywords">Triang3.h</field>
    <field name="text">Definition file for class Triang3</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">Triang6S.h</field>
    <field name="url">Triang6S_8h.html</field>
    <field name="keywords">Triang6S.h</field>
    <field name="text">Definition file for class Triang6S</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">WaterPorous1D.h</field>
    <field name="url">WaterPorous1D_8h.html</field>
    <field name="keywords">WaterPorous1D.h</field>
    <field name="text">Definition file for class WaterPorous1D</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">WaterPorous2D.h</field>
    <field name="url">WaterPorous2D_8h.html</field>
    <field name="keywords">WaterPorous2D.h</field>
    <field name="text">Definition file for class WaterPorous2D</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::BMatrix</field>
    <field name="url">classOFELI_1_1BMatrix.html</field>
    <field name="keywords">BMatrix BMatrix&lt; real_t &gt;</field>
    <field name="text">To handle band matrices This class enables storing and manipulating band matrices The matrix can have different numbers of lower and upper co-diagonals T_ Data type double float complex&lt;double&gt; Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BMatrix::BMatrix</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1BMatrix.html#a01c006d7468dd53986b09e00517bbc8e</field>
    <field name="keywords">BMatrix OFELI::BMatrix::BMatrix BMatrix&lt; T_ &gt; BMatrix OFELI::BMatrix&lt; real_t &gt;::BMatrix BMatrix&lt; real_t &gt;</field>
    <field name="text">Default constructor Initialize a zero dimension band matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BMatrix::Axpy</field>
    <field name="args">(T_ a, const BMatrix&lt; T_ &gt; &amp;x)</field>
    <field name="url">classOFELI_1_1BMatrix.html#a16fc87ee384a1c0a8f82befbb8c182a4</field>
    <field name="keywords">Axpy OFELI::BMatrix::Axpy BMatrix&lt; T_ &gt; Axpy OFELI::BMatrix&lt; real_t &gt;::Axpy BMatrix&lt; real_t &gt;</field>
    <field name="text">Add to matrix the product of a matrix by a scalar a Scalar to premultiply x Matrix by which a is multiplied The result is added to current instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BMatrix::get</field>
    <field name="args">(size_t i, size_t j) const</field>
    <field name="url">classOFELI_1_1BMatrix.html#a173c0f972c4eeca07b426587bc2108e5</field>
    <field name="keywords">get OFELI::BMatrix::get BMatrix&lt; T_ &gt; get OFELI::BMatrix&lt; real_t &gt;::get BMatrix&lt; real_t &gt;</field>
    <field name="text">Return entry i j of matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BMatrix::add</field>
    <field name="args">(size_t i, size_t j, const T_ &amp;val)</field>
    <field name="url">classOFELI_1_1BMatrix.html#a17592a65d5fb95d42c07f724dabad759</field>
    <field name="keywords">add OFELI::BMatrix::add BMatrix&lt; T_ &gt; add OFELI::BMatrix&lt; real_t &gt;::add BMatrix&lt; real_t &gt;</field>
    <field name="text">Add constant val value to an entry i j of the matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BMatrix::setLU</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1BMatrix.html#a254526dadd3fc5f1ffa120bfb2357f23</field>
    <field name="keywords">setLU OFELI::BMatrix::setLU BMatrix&lt; T_ &gt; setLU OFELI::BMatrix&lt; real_t &gt;::setLU BMatrix&lt; real_t &gt;</field>
    <field name="text">Factorize the matrix LU factorization LU factorization of the matrix is realized Note that since this is an in place factorization the contents of the matrix are modified 0 if factorization was normally performed n if the n th pivot is null A flag in this class indicates after factorization that this one has been realized so that if the member function solve is called after this no further factorization is done</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BMatrix::at</field>
    <field name="args">(size_t i, size_t j)</field>
    <field name="url">classOFELI_1_1BMatrix.html#a276ea1877b89d46c32e207248a4573d7</field>
    <field name="keywords">at OFELI::BMatrix::at BMatrix&lt; T_ &gt; at OFELI::BMatrix&lt; real_t &gt;::at BMatrix&lt; real_t &gt;</field>
    <field name="text">Return a value of a matrix entry i Row index starts at 1 j Column index starts at 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BMatrix::add</field>
    <field name="args">(size_t i, const T_ &amp;val)</field>
    <field name="url">classOFELI_1_1BMatrix.html#a3c7b029cbe1aca9bea7623ae99274795</field>
    <field name="keywords">add OFELI::BMatrix::add BMatrix&lt; T_ &gt; add OFELI::BMatrix&lt; real_t &gt;::add BMatrix&lt; real_t &gt;</field>
    <field name="text">Add val to entry i</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BMatrix::operator*=</field>
    <field name="args">(const T_ &amp;x)</field>
    <field name="url">classOFELI_1_1BMatrix.html#a5556d95853233dc0f9b7c0addfe2302f</field>
    <field name="keywords">operator*= OFELI::BMatrix::operator*= BMatrix&lt; T_ &gt; operator*= OFELI::BMatrix&lt; real_t &gt;::operator*= BMatrix&lt; real_t &gt;</field>
    <field name="text">Operator Premultiply matrix entries by constant value x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BMatrix::BMatrix</field>
    <field name="args">(size_t size, int ld, int ud)</field>
    <field name="url">classOFELI_1_1BMatrix.html#a5ca2e039cf9e7ee37f210599244d8e2c</field>
    <field name="keywords">BMatrix OFELI::BMatrix::BMatrix BMatrix&lt; T_ &gt; BMatrix OFELI::BMatrix&lt; real_t &gt;::BMatrix BMatrix&lt; real_t &gt;</field>
    <field name="text">Constructor that for a band matrix with given size and bandwidth Assign 0 to all matrix entries size Number of rows and columns ld Number of lower co-diagonals must be 0 ud Number of upper co-diagonals must be 0 Works only if ud+ld+1 size</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BMatrix::solve</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;b, Vect&lt; T_ &gt; &amp;x, bool fact=false)</field>
    <field name="url">classOFELI_1_1BMatrix.html#a60abf009c8cdb7ca5f86cf266752cb97</field>
    <field name="keywords">solve OFELI::BMatrix::solve BMatrix&lt; T_ &gt; solve OFELI::BMatrix&lt; real_t &gt;::solve BMatrix&lt; real_t &gt;</field>
    <field name="text">Solve linear system The linear system having the current instance as a matrix is solved by using the LU decomposition Solution is thus realized after a factorization step and a forward/backward substitution step The factorization step is realized only if this was not already done Note that this function modifies the matrix contents is a factorization is performed Naturally if the the matrix has been modified after using this function the user has to refactorize it using the function setLU This is because the class has no non-expensive way to detect if the matrix has been modified The function setLU realizes the factorization step only b Vect instance that contains right-hand side x Vect instance that contains solution fact Unused argument 0 if solution was normally performed n if the n th pivot is null</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BMatrix::set</field>
    <field name="args">(size_t i, size_t j, const T_ &amp;val)</field>
    <field name="url">classOFELI_1_1BMatrix.html#a61cf373a94a5fedbca306e016bc489c9</field>
    <field name="keywords">set OFELI::BMatrix::set BMatrix&lt; T_ &gt; set OFELI::BMatrix&lt; real_t &gt;::set BMatrix&lt; real_t &gt;</field>
    <field name="text">Add constant val to an entry i j of the matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BMatrix::~BMatrix</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1BMatrix.html#a70546d5bdbc7c8c4e814580bec939a60</field>
    <field name="keywords">OFELI::BMatrix::~BMatrix BMatrix&lt; T_ &gt; OFELI::BMatrix&lt; real_t &gt;::~BMatrix BMatrix&lt; real_t &gt;</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BMatrix::MultAdd</field>
    <field name="args">(T_ a, const Vect&lt; T_ &gt; &amp;x, Vect&lt; T_ &gt; &amp;y) const</field>
    <field name="url">classOFELI_1_1BMatrix.html#a7687aa6aa85cfe87635a1c3e56625876</field>
    <field name="keywords">MultAdd OFELI::BMatrix::MultAdd BMatrix&lt; T_ &gt; MultAdd OFELI::BMatrix&lt; real_t &gt;::MultAdd BMatrix&lt; real_t &gt;</field>
    <field name="text">Multiply matrix by vector a*x and add result to y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BMatrix::operator()</field>
    <field name="args">(size_t i, size_t j) const</field>
    <field name="url">classOFELI_1_1BMatrix.html#a78adc6c13ad0f1d1dedacffe0e80ce63</field>
    <field name="keywords">operator() OFELI::BMatrix::operator() BMatrix&lt; T_ &gt; operator() OFELI::BMatrix&lt; real_t &gt;::operator() BMatrix&lt; real_t &gt;</field>
    <field name="text">Operator Constant version i Row index j Column index</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BMatrix::Axpy</field>
    <field name="args">(T_ a, const Matrix&lt; T_ &gt; *x)</field>
    <field name="url">classOFELI_1_1BMatrix.html#a8c474f5353d595009b1f4328cebaaebe</field>
    <field name="keywords">Axpy OFELI::BMatrix::Axpy BMatrix&lt; T_ &gt; Axpy OFELI::BMatrix&lt; real_t &gt;::Axpy BMatrix&lt; real_t &gt;</field>
    <field name="text">Add to matrix the product of a matrix by a scalar a Scalar to premultiply x Matrix by which a is multiplied The result is added to current instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BMatrix::operator=</field>
    <field name="args">(const BMatrix&lt; T_ &gt; &amp;m)</field>
    <field name="url">classOFELI_1_1BMatrix.html#a9909ead413f8772b8b26ac31756e7995</field>
    <field name="keywords">operator= OFELI::BMatrix::operator= BMatrix&lt; T_ &gt; operator= OFELI::BMatrix&lt; real_t &gt;::operator= BMatrix&lt; real_t &gt;</field>
    <field name="text">Operator Copy matrix m to current matrix instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BMatrix::get</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1BMatrix.html#a9b901ab6d955335f6b9edcabbc59d1d1</field>
    <field name="keywords">get OFELI::BMatrix::get BMatrix&lt; T_ &gt; get OFELI::BMatrix&lt; real_t &gt;::get BMatrix&lt; real_t &gt;</field>
    <field name="text">Return C-Array</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BMatrix::BMatrix</field>
    <field name="args">(const BMatrix &amp;m)</field>
    <field name="url">classOFELI_1_1BMatrix.html#a9e0f9be2e913bf5a6c302f140fd4a74c</field>
    <field name="keywords">BMatrix OFELI::BMatrix::BMatrix BMatrix&lt; T_ &gt; BMatrix OFELI::BMatrix&lt; real_t &gt;::BMatrix BMatrix&lt; real_t &gt;</field>
    <field name="text">Copy Constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BMatrix::operator()</field>
    <field name="args">(size_t i, size_t j)</field>
    <field name="url">classOFELI_1_1BMatrix.html#aacbbe150d69a1246cb76f24419cae7ac</field>
    <field name="keywords">operator() OFELI::BMatrix::operator() BMatrix&lt; T_ &gt; operator() OFELI::BMatrix&lt; real_t &gt;::operator() BMatrix&lt; real_t &gt;</field>
    <field name="text">Operator Non constant version i Row index j Column index</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BMatrix::Mult</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;x, Vect&lt; T_ &gt; &amp;y) const</field>
    <field name="url">classOFELI_1_1BMatrix.html#abd45ada90fcf5f88e65ba7a50e36ce49</field>
    <field name="keywords">Mult OFELI::BMatrix::Mult BMatrix&lt; T_ &gt; Mult OFELI::BMatrix&lt; real_t &gt;::Mult BMatrix&lt; real_t &gt;</field>
    <field name="text">Multiply matrix by vector x and save result in y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BMatrix::solve</field>
    <field name="args">(Vect&lt; T_ &gt; &amp;b, bool fact=false)</field>
    <field name="url">classOFELI_1_1BMatrix.html#abf3df464c1118a2063447c9765725a2e</field>
    <field name="keywords">solve OFELI::BMatrix::solve BMatrix&lt; T_ &gt; solve OFELI::BMatrix&lt; real_t &gt;::solve BMatrix&lt; real_t &gt;</field>
    <field name="text">Solve linear system The linear system having the current instance as a matrix is solved by using the LU decomposition Solution is thus realized after a factorization step and a forward/backward substitution step The factorization step is realized only if this was not already done Note that this function modifies the matrix contents is a factorization is performed Naturally if the the matrix has been modified after using this function the user has to refactorize it using the function setLU This is because the class has no non-expensive way to detect if the matrix has been modified The function setLU realizes the factorization step only b Vect instance that contains right-hand side on input and solution on output fact Unused argument 0 if solution was normally performed n if the n th pivot is null</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BMatrix::operator+=</field>
    <field name="args">(const T_ &amp;x)</field>
    <field name="url">classOFELI_1_1BMatrix.html#ac836f165981e2a5c3575272f13e12e2d</field>
    <field name="keywords">operator+= OFELI::BMatrix::operator+= BMatrix&lt; T_ &gt; operator+= OFELI::BMatrix&lt; real_t &gt;::operator+= BMatrix&lt; real_t &gt;</field>
    <field name="text">Operator Add constant x to matrix entries</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BMatrix::operator=</field>
    <field name="args">(const T_ &amp;x)</field>
    <field name="url">classOFELI_1_1BMatrix.html#ae48f2908e85698af033e60bfb2790eeb</field>
    <field name="keywords">operator= OFELI::BMatrix::operator= BMatrix&lt; T_ &gt; operator= OFELI::BMatrix&lt; real_t &gt;::operator= BMatrix&lt; real_t &gt;</field>
    <field name="text">Operator Assign matrix to identity times x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BMatrix::TMult</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;x, Vect&lt; T_ &gt; &amp;y) const</field>
    <field name="url">classOFELI_1_1BMatrix.html#aedfc628db3de37e35aee052137aab9b3</field>
    <field name="keywords">TMult OFELI::BMatrix::TMult BMatrix&lt; T_ &gt; TMult OFELI::BMatrix&lt; real_t &gt;::TMult BMatrix&lt; real_t &gt;</field>
    <field name="text">Multiply transpose of matrix by vector x and save result in y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BMatrix::setSize</field>
    <field name="args">(size_t size, int ld, int ud)</field>
    <field name="url">classOFELI_1_1BMatrix.html#aeefa0af831aaed8252e71726b01c7d63</field>
    <field name="keywords">setSize OFELI::BMatrix::setSize BMatrix&lt; T_ &gt; setSize OFELI::BMatrix&lt; real_t &gt;::setSize BMatrix&lt; real_t &gt;</field>
    <field name="text">Set size number of rows and storage of matrix size Number of rows and columns ld Number of lower co-diagonals must be 0 ud Number of upper co-diagonals must be 0</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BMatrix::MultAdd</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;x, Vect&lt; T_ &gt; &amp;y) const</field>
    <field name="url">classOFELI_1_1BMatrix.html#af37985f443ba4d2746059438dfb62b6c</field>
    <field name="keywords">MultAdd OFELI::BMatrix::MultAdd BMatrix&lt; T_ &gt; MultAdd OFELI::BMatrix&lt; real_t &gt;::MultAdd BMatrix&lt; real_t &gt;</field>
    <field name="text">Multiply matrix by vector x and add result to y</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Bar2DL2</field>
    <field name="url">classOFELI_1_1Bar2DL2.html</field>
    <field name="keywords">Bar2DL2</field>
    <field name="text">To build element equations for Planar Elastic Bar element with 2 DOF Degrees of Freedom per node This class implements a planar two-dimensional elastic bar using 2 node lines Note that members calculating element arrays have as an argument a real coef that is multiplied by the contribution of the current element This makes possible testing different algorithms</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Bar2DL2::Mass</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1Bar2DL2.html#a1b558ae9bc1c76a4344c24bc78f80f44</field>
    <field name="keywords">Mass OFELI::Bar2DL2::Mass Bar2DL2</field>
    <field name="text">Add consistent mass matrix to element matrix after multiplying it by coefficient coef coef Coefficient to multiply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Bar2DL2::Stiffness</field>
    <field name="args">(real_t coef=1.)</field>
    <field name="url">classOFELI_1_1Bar2DL2.html#a1fbd7a378361e440a570aabb932b45b0</field>
    <field name="keywords">Stiffness OFELI::Bar2DL2::Stiffness Bar2DL2</field>
    <field name="text">Add element stiffness to left hand side coef Coefficient to multuply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Bar2DL2::Stress</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Bar2DL2.html#a3a22d61ac3a310bbf3a949a9fd694acc</field>
    <field name="keywords">Stress OFELI::Bar2DL2::Stress Bar2DL2</field>
    <field name="text">Return stresses in bar</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Bar2DL2::Bar2DL2</field>
    <field name="args">(Mesh &amp;ms, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1Bar2DL2.html#a52d7fffd497c54975334b8461ff8caa0</field>
    <field name="keywords">Bar2DL2 OFELI::Bar2DL2::Bar2DL2 Bar2DL2</field>
    <field name="text">Constructor using a Mesh instance and a solution vector instance ms Reference Mesh instance u Reference to solution vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Bar2DL2::setSection</field>
    <field name="args">(real_t A)</field>
    <field name="url">classOFELI_1_1Bar2DL2.html#a589c3dea2a891f453c72c56de6e904ea</field>
    <field name="keywords">setSection OFELI::Bar2DL2::setSection Bar2DL2</field>
    <field name="text">Define bar section</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Bar2DL2::build</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Bar2DL2.html#a7740c7ab195c03ac140f1f75f633470f</field>
    <field name="keywords">build OFELI::Bar2DL2::build Bar2DL2</field>
    <field name="text">Build the linear system of equations Before using this function one must have properly selected appropriate options for The choice of a steady state or transient analysis In the case of transient analysis the choice of a time integration scheme and a lumped or consistent mass matrix The choice of desired linear system solver</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Bar2DL2::getStresses</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;s)</field>
    <field name="url">classOFELI_1_1Bar2DL2.html#a7d4dd3c8ca4ff541c0ad3a543f9a7f94</field>
    <field name="keywords">getStresses OFELI::Bar2DL2::getStresses Bar2DL2</field>
    <field name="text">Return stresses in the truss structure elementwise s Vect instance containing axial stresses in elements</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Bar2DL2::LMass</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1Bar2DL2.html#a8085a436c0055d8554baaa8cb3835922</field>
    <field name="keywords">LMass OFELI::Bar2DL2::LMass Bar2DL2</field>
    <field name="text">Add lumped mass matrix to element matrix after multiplying it by coefficient coef coef Coefficient to multiply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Bar2DL2::Bar2DL2</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Bar2DL2.html#acb4cc17967f33ed560d717f317f2bde2</field>
    <field name="keywords">Bar2DL2 OFELI::Bar2DL2::Bar2DL2 Bar2DL2</field>
    <field name="text">Default Constructor Constructs an empty equation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Bar2DL2::Bar2DL2</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1Bar2DL2.html#acd73511f93636db566f7b88ab3d493db</field>
    <field name="keywords">Bar2DL2 OFELI::Bar2DL2::Bar2DL2 Bar2DL2</field>
    <field name="text">Constructor using a Mesh instance ms Reference Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Bar2DL2::~Bar2DL2</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Bar2DL2.html#afb20f0fd699cb07077df3939cb309527</field>
    <field name="keywords">OFELI::Bar2DL2::~Bar2DL2 Bar2DL2</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Beam3DL2</field>
    <field name="url">classOFELI_1_1Beam3DL2.html</field>
    <field name="keywords">Beam3DL2</field>
    <field name="text">To build element equations for 3 D beam equations using 2 node lines This class enables building finite element arrays for 3 D beam elements using 6 degrees of freedom per node and 2 Node line elements</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Beam3DL2::TwistingMoment</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;m)</field>
    <field name="url">classOFELI_1_1Beam3DL2.html#a002f1e9b6c63d65a550b004c0e924b22</field>
    <field name="keywords">TwistingMoment OFELI::Beam3DL2::TwistingMoment Beam3DL2</field>
    <field name="text">Return twisting moments m Vector containing twisting moment in each element This vector is resized in the function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Beam3DL2::getDisp</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;d)</field>
    <field name="url">classOFELI_1_1Beam3DL2.html#a021d1574713713cbdcc830cce19a7cf5</field>
    <field name="keywords">getDisp OFELI::Beam3DL2::getDisp Beam3DL2</field>
    <field name="text">Get vector of displacements at nodes d Vector containing three components for each node that are x y and z displacements</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Beam3DL2::setShear</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Beam3DL2.html#a07ba8f7a502b08cd571ca61040e9bca1</field>
    <field name="keywords">setShear OFELI::Beam3DL2::setShear Beam3DL2</field>
    <field name="text">Set shear contribution to stiffness</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Beam3DL2::~Beam3DL2</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Beam3DL2.html#a0dcb27246ff4359d6b0f8ba3f94ffb2d</field>
    <field name="keywords">OFELI::Beam3DL2::~Beam3DL2 Beam3DL2</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Beam3DL2::setReducedIntegration</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Beam3DL2.html#a151cf5126cf8340de31d51557f15d937</field>
    <field name="keywords">setReducedIntegration OFELI::Beam3DL2::setReducedIntegration Beam3DL2</field>
    <field name="text">Set reduced integration</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Beam3DL2::Stiffness</field>
    <field name="args">(real_t coef=1.)</field>
    <field name="url">classOFELI_1_1Beam3DL2.html#a1fbd7a378361e440a570aabb932b45b0</field>
    <field name="keywords">Stiffness OFELI::Beam3DL2::Stiffness Beam3DL2</field>
    <field name="text">Add element stiffness to element matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Beam3DL2::Beam3DL2</field>
    <field name="args">(Mesh &amp;ms, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1Beam3DL2.html#a26ad7dd9588199dc92836437ff4ecf2a</field>
    <field name="keywords">Beam3DL2 OFELI::Beam3DL2::Beam3DL2 Beam3DL2</field>
    <field name="text">Constructor using a Mesh instance and solution vector ms Reference to Mesh instance u Solution vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Beam3DL2::setBending</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Beam3DL2.html#a33c609197f3c6e7d2230028f5dbf8338</field>
    <field name="keywords">setBending OFELI::Beam3DL2::setBending Beam3DL2</field>
    <field name="text">Set bending contribution to stiffness</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Beam3DL2::AxialForce</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1Beam3DL2.html#a41ccb23e1a7084193640cb66d0795a48</field>
    <field name="keywords">AxialForce OFELI::Beam3DL2::AxialForce Beam3DL2</field>
    <field name="text">Return axial force in element f Vector containing axial force in each element This vector is resized in the function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Beam3DL2::Beam3DL2</field>
    <field name="args">(Mesh &amp;ms, real_t A, real_t I1, real_t I2)</field>
    <field name="url">classOFELI_1_1Beam3DL2.html#a4d878013c50a0485fd4955e57af5a2bc</field>
    <field name="keywords">Beam3DL2 OFELI::Beam3DL2::Beam3DL2 Beam3DL2</field>
    <field name="text">Constructor using mesh and constant beam properties ms Mesh instance A Section area of the beam I1 first x momentum of inertia I2 second y momentum of inertia</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Beam3DL2::Beam3DL2</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1Beam3DL2.html#a68bd74442207b8d05e111ab903cb66a1</field>
    <field name="keywords">Beam3DL2 OFELI::Beam3DL2::Beam3DL2 Beam3DL2</field>
    <field name="text">Constructor using a Mesh instance ms Reference to Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Beam3DL2::Mass</field>
    <field name="args">(real_t coef=1.)</field>
    <field name="url">classOFELI_1_1Beam3DL2.html#a6973a1f3ad79ae2b5211c3ec81c6f678</field>
    <field name="keywords">Mass OFELI::Beam3DL2::Mass Beam3DL2</field>
    <field name="text">Add element consistent Mass contribution to RHS after multiplication by coef not implemented</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Beam3DL2::build</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Beam3DL2.html#a7740c7ab195c03ac140f1f75f633470f</field>
    <field name="keywords">build OFELI::Beam3DL2::build Beam3DL2</field>
    <field name="text">Build the linear system of equations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Beam3DL2::setNoShear</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Beam3DL2.html#a8a2a56ef8ef78e3ee85f30eb59fe68e9</field>
    <field name="keywords">setNoShear OFELI::Beam3DL2::setNoShear Beam3DL2</field>
    <field name="text">Set no shear contribution</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Beam3DL2::set</field>
    <field name="args">(real_t A, real_t I1, real_t I2)</field>
    <field name="url">classOFELI_1_1Beam3DL2.html#a93af770593436e78274e3f7c74675d36</field>
    <field name="keywords">set OFELI::Beam3DL2::set Beam3DL2</field>
    <field name="text">Set constant beam properties A Section area of the beam I1 first x momentum of inertia I2 second y momentum of inertia</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Beam3DL2::buildEigen</field>
    <field name="args">(SkSMatrix&lt; real_t &gt; &amp;K, Vect&lt; real_t &gt; &amp;M)</field>
    <field name="url">classOFELI_1_1Beam3DL2.html#aaf07a32713fc7f788131f6eef3b5e0db</field>
    <field name="keywords">buildEigen OFELI::Beam3DL2::buildEigen Beam3DL2</field>
    <field name="text">Build global stiffness and mass matrices for the eigen system Case where the mass matrix is lumped K Stiffness matrix M Vector containing diagonal mass matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Beam3DL2::setAxial</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Beam3DL2.html#aaf2f4cc221f5dd8fe4e2bdca2d4dc3dd</field>
    <field name="keywords">setAxial OFELI::Beam3DL2::setAxial Beam3DL2</field>
    <field name="text">Set axial contribution to stiffness</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Beam3DL2::setNoBending</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Beam3DL2.html#ab0b9fddb3c387a6dd24c68b7bc54864f</field>
    <field name="keywords">setNoBending OFELI::Beam3DL2::setNoBending Beam3DL2</field>
    <field name="text">Set no bending contribution</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Beam3DL2::LMass</field>
    <field name="args">(real_t coef=1.)</field>
    <field name="url">classOFELI_1_1Beam3DL2.html#acd59f2981fe99c4e2b59fcc5f35e6e2e</field>
    <field name="keywords">LMass OFELI::Beam3DL2::LMass Beam3DL2</field>
    <field name="text">Add element lumped Mass contribution to element matrix after multiplication by coef</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Beam3DL2::setNoAxial</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Beam3DL2.html#ad5f3b010e82a3eab900b47f0248fdb25</field>
    <field name="keywords">setNoAxial OFELI::Beam3DL2::setNoAxial Beam3DL2</field>
    <field name="text">Set no axial contribution</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Beam3DL2::ShearForce</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;sh)</field>
    <field name="url">classOFELI_1_1Beam3DL2.html#ae5f33fdc5d8190e49abf64ff28700087</field>
    <field name="keywords">ShearForce OFELI::Beam3DL2::ShearForce Beam3DL2</field>
    <field name="text">Return shear force in element sh Vector containing shear forces 2 components in each element This vector is resized in the function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Beam3DL2::setNoTorsion</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Beam3DL2.html#ae866c941312d3a25e54b184bd2ee2828</field>
    <field name="keywords">setNoTorsion OFELI::Beam3DL2::setNoTorsion Beam3DL2</field>
    <field name="text">Set no torsion contribution</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Beam3DL2::Load</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1Beam3DL2.html#aedc2b04a2c8369ee5eacc61139eba1f8</field>
    <field name="keywords">Load OFELI::Beam3DL2::Load Beam3DL2</field>
    <field name="text">Add contributions for loads</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Beam3DL2::set</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;A, const Vect&lt; real_t &gt; &amp;I1, const Vect&lt; real_t &gt; &amp;I2)</field>
    <field name="url">classOFELI_1_1Beam3DL2.html#af15581f12d94f987670bf38ddf2105fb</field>
    <field name="keywords">set OFELI::Beam3DL2::set Beam3DL2</field>
    <field name="text">Set nonconstant beam properties A Vector containing section areas of the beam for each element I1 Vector containing first x momentum of inertia for each element I2 Vector containing second y momentum of inertia for each element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Beam3DL2::BendingMoment</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;m)</field>
    <field name="url">classOFELI_1_1Beam3DL2.html#af36cff63f99f9e0181b53bf8efa46a77</field>
    <field name="keywords">BendingMoment OFELI::Beam3DL2::BendingMoment Beam3DL2</field>
    <field name="text">Return bending moment in element m Vector containing bending moments 2 components in each element This vector is resized in the function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Beam3DL2::Beam3DL2</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Beam3DL2.html#af810eb65fda90a6e09e40c0fda187465</field>
    <field name="keywords">Beam3DL2 OFELI::Beam3DL2::Beam3DL2 Beam3DL2</field>
    <field name="text">Default Constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Beam3DL2::setTorsion</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Beam3DL2.html#af8e4e8899e3142d572e38f6b045ce18c</field>
    <field name="keywords">setTorsion OFELI::Beam3DL2::setTorsion Beam3DL2</field>
    <field name="text">Set torsion contribution to stiffness</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::BiotSavart</field>
    <field name="url">classOFELI_1_1BiotSavart.html</field>
    <field name="keywords">BiotSavart</field>
    <field name="text">Class to compute the magnetic induction from the current density using the Biot-Savart formula Given a current density vector given at elements a collection of sides of edges piecewise constant this class enables computing the magnetic induction vector continuous and piecewise linear using the Ampere equation This magnetic induction is obtained by using the Biot-Savart formula which can be either a volume surface or line formula depending on the nature of the current density vector Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BiotSavart::getBC1</field>
    <field name="args">(Point&lt; real_t &gt; x)</field>
    <field name="url">classOFELI_1_1BiotSavart.html#a00f113e94b3293722dc771c0cf134b81</field>
    <field name="keywords">getBC1 OFELI::BiotSavart::getBC1 BiotSavart</field>
    <field name="text">Compute the complex magnetic induction at a given point using the line Biot-Savart formula This function computes a complex valued magnetic induction for a complex valued current density field x Coordinates of point at which the magnetic induction is computed Value of the magnetic induction at x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BiotSavart::BiotSavart</field>
    <field name="args">(Mesh &amp;ms, const Vect&lt; real_t &gt; &amp;J, Vect&lt; real_t &gt; &amp;B, int code=0)</field>
    <field name="url">classOFELI_1_1BiotSavart.html#a0d88daea9c3485ba652646bdf699ad40</field>
    <field name="keywords">BiotSavart OFELI::BiotSavart::BiotSavart BiotSavart</field>
    <field name="text">Constructor using mesh and vector of real current density The current density is assumed piecewise constant ms Mesh instance J Sidewise vector of current density J is a real valued vector in the case of a surface supported current B Nodewise vector that contains once the member function run is used the magnetic induction code Only sides with given code support current Default 0</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BiotSavart::~BiotSavart</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1BiotSavart.html#a1353e45f7753dd3526291df7c060555f</field>
    <field name="keywords">OFELI::BiotSavart::~BiotSavart BiotSavart</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BiotSavart::setMagneticInduction</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;B)</field>
    <field name="url">classOFELI_1_1BiotSavart.html#a1fb502b62da713f88bf33fc6be17b36b</field>
    <field name="keywords">setMagneticInduction OFELI::BiotSavart::setMagneticInduction BiotSavart</field>
    <field name="text">Transmit real magnetic induction vector given at nodes B Magnetic induction vector Vect instance and real entries</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BiotSavart::setPermeability</field>
    <field name="args">(real_t mu)</field>
    <field name="url">classOFELI_1_1BiotSavart.html#a229f171658a79083da79bcc8ef85c2a3</field>
    <field name="keywords">setPermeability OFELI::BiotSavart::setPermeability BiotSavart</field>
    <field name="text">Set the magnetic permeability coefficient mu Magnetic permeability</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BiotSavart::selectCode</field>
    <field name="args">(int code)</field>
    <field name="url">classOFELI_1_1BiotSavart.html#a2ee27675e43f7ca496aa1f5ca236551b</field>
    <field name="keywords">selectCode OFELI::BiotSavart::selectCode BiotSavart</field>
    <field name="text">Choose code of faces or edges at which current density is given</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BiotSavart::BiotSavart</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1BiotSavart.html#a4cae7ebe71d5ae730e860cc9ceb547c4</field>
    <field name="keywords">BiotSavart OFELI::BiotSavart::BiotSavart BiotSavart</field>
    <field name="text">Constructor using mesh data ms Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BiotSavart::getB1</field>
    <field name="args">(Point&lt; real_t &gt; x)</field>
    <field name="url">classOFELI_1_1BiotSavart.html#a511648e25608567c39bcb065b93d10e6</field>
    <field name="keywords">getB1 OFELI::BiotSavart::getB1 BiotSavart</field>
    <field name="text">Compute the real magnetic induction at a given point using the line Biot-Savart formula This function computes a real valued magnetic induction for a real valued current density field x Coordinates of point at which the magnetic induction is computed Value of the magnetic induction at x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BiotSavart::run</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1BiotSavart.html#a58e8be2db2660128e4e6456a9c981fb5</field>
    <field name="keywords">run OFELI::BiotSavart::run BiotSavart</field>
    <field name="text">Run the calculation by the Biot-Savart formula This function computes the magnetic induction which is stored in the vector B given in the constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BiotSavart::getB3</field>
    <field name="args">(Point&lt; real_t &gt; x)</field>
    <field name="url">classOFELI_1_1BiotSavart.html#a5ec6dc3ab1ba4d93e5d793253b09c870</field>
    <field name="keywords">getB3 OFELI::BiotSavart::getB3 BiotSavart</field>
    <field name="text">Compute the real magnetic induction at a given point using the volume Biot-Savart formula This function computes a real valued magnetic induction for a real valued current density field x Coordinates of point at which the magnetic induction is computed Value of the magnetic induction at x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BiotSavart::getBC3</field>
    <field name="args">(Point&lt; real_t &gt; x)</field>
    <field name="url">classOFELI_1_1BiotSavart.html#a7b0c84879185e52323ac3034d3dd1e07</field>
    <field name="keywords">getBC3 OFELI::BiotSavart::getBC3 BiotSavart</field>
    <field name="text">Compute the complex magnetic induction at a given point using the volume Biot-Savart formula This function computes a complex valued magnetic induction for a complex valued current density field x Coordinates of point at which the magnetic induction is computed Value of the magnetic induction at x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BiotSavart::BiotSavart</field>
    <field name="args">(Mesh &amp;ms, const Vect&lt; complex_t &gt; &amp;J, Vect&lt; complex_t &gt; &amp;B, int code=0)</field>
    <field name="url">classOFELI_1_1BiotSavart.html#a99147b7b1b52966715e060a14f685a38</field>
    <field name="keywords">BiotSavart OFELI::BiotSavart::BiotSavart BiotSavart</field>
    <field name="text">Constructor using mesh and vector of complex current density The current density is assumed piecewise constant ms Mesh instance J Sidewise vector of current density J is a complex valued vector in the case of a surface supported current B Nodewise vector that contains once the member function run is used the magnetic induction code Only sides with given code support current Default 0</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BiotSavart::setCurrentDensity</field>
    <field name="args">(const Vect&lt; complex_t &gt; &amp;J)</field>
    <field name="url">classOFELI_1_1BiotSavart.html#aa6486ddc89f21a64eb25677db8ee95e6</field>
    <field name="keywords">setCurrentDensity OFELI::BiotSavart::setCurrentDensity BiotSavart</field>
    <field name="text">Set real current density given at elements The current density is assumed piecewise constant and complex valued This function can be used in the case of the volume Biot-Savart formula J Current density vector Vect instance of complex entries</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BiotSavart::setBoundary</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1BiotSavart.html#abb455bcd04e0770dc8dd5c783fa03509</field>
    <field name="keywords">setBoundary OFELI::BiotSavart::setBoundary BiotSavart</field>
    <field name="text">Choose to compute the magnetic induction at boundary nodes only By default the magnetic induction is computed using the function run at all mesh nodes This function has no effect for surface of line Biot-Savart formula</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BiotSavart::setMagneticInduction</field>
    <field name="args">(Vect&lt; complex_t &gt; &amp;B)</field>
    <field name="url">classOFELI_1_1BiotSavart.html#abdcf329af3d4c78fb5a5bc9803bc95b4</field>
    <field name="keywords">setMagneticInduction OFELI::BiotSavart::setMagneticInduction BiotSavart</field>
    <field name="text">Transmit complex magnetic induction vector given at nodes B Magnetic induction vector Vect instance and complex entries</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BiotSavart::BiotSavart</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1BiotSavart.html#ac0e498a96327647f20c907e098bfa335</field>
    <field name="keywords">BiotSavart OFELI::BiotSavart::BiotSavart BiotSavart</field>
    <field name="text">Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BiotSavart::getBC2</field>
    <field name="args">(Point&lt; real_t &gt; x)</field>
    <field name="url">classOFELI_1_1BiotSavart.html#ac8636aeb7eeaeec05af9daef4989bc9d</field>
    <field name="keywords">getBC2 OFELI::BiotSavart::getBC2 BiotSavart</field>
    <field name="text">Compute the complex magnetic induction at a given point using the surface Biot-Savart formula This function computes a complex valued magnetic induction for a complex valued current density field x Coordinates of point at which the magnetic induction is computed Value of the magnetic induction at x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BiotSavart::setCurrentDensity</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;J)</field>
    <field name="url">classOFELI_1_1BiotSavart.html#ad0ccea4feb465ba444eff028ce20feae</field>
    <field name="keywords">setCurrentDensity OFELI::BiotSavart::setCurrentDensity BiotSavart</field>
    <field name="text">Set real current density given at elements The current density is assumed piecewise constant and real valued This function can be used in the case of the volume Biot-Savart formula J Current density vector Vect instance and real entries</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BiotSavart::getB2</field>
    <field name="args">(Point&lt; real_t &gt; x)</field>
    <field name="url">classOFELI_1_1BiotSavart.html#ae4c7e04084a391c48a095fe19bbab5ff</field>
    <field name="keywords">getB2 OFELI::BiotSavart::getB2 BiotSavart</field>
    <field name="text">Compute the real magnetic induction at a given point using the surface Biot-Savart formula This function computes a real valued magnetic induction for a real valued current density field x Coordinates of point at which the magnetic induction is computed Value of the magnetic induction at x</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Brick</field>
    <field name="url">classOFELI_1_1Brick.html</field>
    <field name="keywords">Brick</field>
    <field name="text">To store and treat a brick parallelepiped figure</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Brick::operator+=</field>
    <field name="args">(real_t a)</field>
    <field name="url">classOFELI_1_1Brick.html#a1440e9205d1b3c179d00116c604e5eaa</field>
    <field name="keywords">operator+= OFELI::Brick::operator+= Brick</field>
    <field name="text">Operator Scale brick by a factor a</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Brick::getSignedDistance</field>
    <field name="args">(const Grid &amp;g, Vect&lt; real_t &gt; &amp;d) const</field>
    <field name="url">classOFELI_1_1Brick.html#a2252be7c4949c4a2bd3ee24a4fdfd722</field>
    <field name="keywords">getSignedDistance OFELI::Brick::getSignedDistance Brick</field>
    <field name="text">Calculate signed distance to current figure with respect to grid points g Grid instance d Vect instance containing calculated distance from each grid index to Figure Vector d doesn t need to be sized before invoking this function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Brick::Brick</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;bbm, const Point&lt; real_t &gt; &amp;bbM, int code=1)</field>
    <field name="url">classOFELI_1_1Brick.html#a2d87175a78ab818c015fdd92471f58d2</field>
    <field name="keywords">Brick OFELI::Brick::Brick Brick</field>
    <field name="text">Constructor bbm first point xmin ymin zmin bbM second point xmax ymax zmax code Code to assign to rectangle</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Brick::getBoundingBox1</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Brick.html#a3b9647b06653ab737148a017cc948913</field>
    <field name="keywords">getBoundingBox1 OFELI::Brick::getBoundingBox1 Brick</field>
    <field name="text">Return first point of bounding box xmin ymin zmin</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Brick::getSignedDistance</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;p) const</field>
    <field name="url">classOFELI_1_1Brick.html#a59bcb59a9fd6e717fa480630c7d3b57a</field>
    <field name="keywords">getSignedDistance OFELI::Brick::getSignedDistance Brick</field>
    <field name="text">Return signed distance from a given point to current figure p Point instance from which distance is computed</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Brick::Brick</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Brick.html#a5be15bb90ef7387068a50bbae347441d</field>
    <field name="keywords">Brick OFELI::Brick::Brick Brick</field>
    <field name="text">Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Brick::getSignedDistance</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;p) const</field>
    <field name="url">classOFELI_1_1Brick.html#a6c92f703c9cacfbfc0158713655d844a</field>
    <field name="keywords">getSignedDistance OFELI::Brick::getSignedDistance Brick</field>
    <field name="text">Return signed distance of a given point from the current brick The computed distance is negative if p lies in the brick negative if it is outside and 0 on its boundary p Point&lt;double&gt; instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Brick::operator+=</field>
    <field name="args">(Point&lt; real_t &gt; a)</field>
    <field name="url">classOFELI_1_1Brick.html#aa3da72b02b354fa9b2c907350482f617</field>
    <field name="keywords">operator+= OFELI::Brick::operator+= Brick</field>
    <field name="text">Operator Translate brick by a vector a</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Brick::getBoundingBox2</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Brick.html#ab1e798142ff5d7ca3b8adeba5147e808</field>
    <field name="keywords">getBoundingBox2 OFELI::Brick::getBoundingBox2 Brick</field>
    <field name="text">Return second point of bounding box xmax ymax zmax</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Brick::setBoundingBox</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;bbm, const Point&lt; real_t &gt; &amp;bbM)</field>
    <field name="url">classOFELI_1_1Brick.html#aebea8ead5217e3fb0ef453a9ce697647</field>
    <field name="keywords">setBoundingBox OFELI::Brick::setBoundingBox Brick</field>
    <field name="text">Assign bounding box of the brick bbm first point xmin ymin zmin bbM second point xmax ymax zmax</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Circle</field>
    <field name="url">classOFELI_1_1Circle.html</field>
    <field name="keywords">Circle</field>
    <field name="text">To store and treat a circular figure</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Circle::getSignedDistance</field>
    <field name="args">(const Grid &amp;g, Vect&lt; real_t &gt; &amp;d) const</field>
    <field name="url">classOFELI_1_1Circle.html#a2252be7c4949c4a2bd3ee24a4fdfd722</field>
    <field name="keywords">getSignedDistance OFELI::Circle::getSignedDistance Circle</field>
    <field name="text">Calculate signed distance to current figure with respect to grid points g Grid instance d Vect instance containing calculated distance from each grid index to Figure Vector d doesn t need to be sized before invoking this function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Circle::getCenter</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Circle.html#a29518c54ba3a66576ee2859724fc88cd</field>
    <field name="keywords">getCenter OFELI::Circle::getCenter Circle</field>
    <field name="text">Return coordinates of center of circle</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Circle::getSignedDistance</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;p) const</field>
    <field name="url">classOFELI_1_1Circle.html#a59bcb59a9fd6e717fa480630c7d3b57a</field>
    <field name="keywords">getSignedDistance OFELI::Circle::getSignedDistance Circle</field>
    <field name="text">Return signed distance from a given point to current figure p Point instance from which distance is computed</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Circle::getSignedDistance</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;p) const</field>
    <field name="url">classOFELI_1_1Circle.html#a6c92f703c9cacfbfc0158713655d844a</field>
    <field name="keywords">getSignedDistance OFELI::Circle::getSignedDistance Circle</field>
    <field name="text">Return signed distance of a given point from the current circle The computed distance is negative if p lies in the disk positive if it is outside and 0 on the circle p Point&lt;double&gt; instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Circle::operator+=</field>
    <field name="args">(Point&lt; real_t &gt; a)</field>
    <field name="url">classOFELI_1_1Circle.html#a786f38f6a118d32858cffb70f512c52b</field>
    <field name="keywords">operator+= OFELI::Circle::operator+= Circle</field>
    <field name="text">Operator Translate circle by a vector a</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Circle::getRadius</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Circle.html#a7e3025b296591c318448860022ff3953</field>
    <field name="keywords">getRadius OFELI::Circle::getRadius Circle</field>
    <field name="text">Return radius of circle</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Circle::operator+=</field>
    <field name="args">(real_t a)</field>
    <field name="url">classOFELI_1_1Circle.html#a89eaa9faa70287e8d9b8f059d348f147</field>
    <field name="keywords">operator+= OFELI::Circle::operator+= Circle</field>
    <field name="text">Operator Scale circle by a factor a</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Circle::setCenter</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;c)</field>
    <field name="url">classOFELI_1_1Circle.html#a9491188c2ff473596d71fc71149ddaa7</field>
    <field name="keywords">setCenter OFELI::Circle::setCenter Circle</field>
    <field name="text">Assign coordinates of center of circle</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Circle::Circle</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;c, real_t r, int code=1)</field>
    <field name="url">classOFELI_1_1Circle.html#ad2b9cc2f722a42d27fcf2b540a85fa4f</field>
    <field name="keywords">Circle OFELI::Circle::Circle Circle</field>
    <field name="text">Constructor c Coordinates of center of circle r Radius code Code to assign to the generated domain Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Circle::Circle</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Circle.html#ae813ce1ba3e11cb77e796941a3089223</field>
    <field name="keywords">Circle OFELI::Circle::Circle Circle</field>
    <field name="text">Default construcor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Circle::setRadius</field>
    <field name="args">(real_t r)</field>
    <field name="url">classOFELI_1_1Circle.html#af9771f0cb4dc4e26c459bb953122913c</field>
    <field name="keywords">setRadius OFELI::Circle::setRadius Circle</field>
    <field name="text">Assign radius of circle</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::DC1DL2</field>
    <field name="url">classOFELI_1_1DC1DL2.html</field>
    <field name="keywords">DC1DL2</field>
    <field name="text">Builds finite element arrays for thermal diffusion and convection in 1 D using 2 Node elements Note that members calculating element arrays have as an argument a real coef that will be multiplied by the contribution of the current element This makes possible testing different algorithms</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC1DL2::DC1DL2</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1DC1DL2.html#a064e9b9109b85e1f16987c1c6f4790ef</field>
    <field name="keywords">DC1DL2 OFELI::DC1DL2::DC1DL2 DC1DL2</field>
    <field name="text">Default Constructor Constructs an empty equation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC1DL2::DC1DL2</field>
    <field name="args">(Mesh &amp;ms, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1DC1DL2.html#a0d31d3f7eef7fe43e05265dfecf3339f</field>
    <field name="keywords">DC1DL2 OFELI::DC1DL2::DC1DL2 DC1DL2</field>
    <field name="text">Constructor using mesh instance and solution vector ms Mesh instance u Vect instance containing solution vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC1DL2::Convection</field>
    <field name="args">(const real_t &amp;v, real_t coef=1)</field>
    <field name="url">classOFELI_1_1DC1DL2.html#a239b889bb6edbd25f9adfb1239364a2e</field>
    <field name="keywords">Convection OFELI::DC1DL2::Convection DC1DL2</field>
    <field name="text">Add convection matrix to element matrix after multiplying it by coefficient coef v Constant velocity vector coef Coefficient to multiply by added term default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC1DL2::Flux</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1DC1DL2.html#a3a400c339dbb1f35a8179cbc99ed2f29</field>
    <field name="keywords">Flux OFELI::DC1DL2::Flux DC1DL2</field>
    <field name="text">Return constant heat flux in element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC1DL2::~DC1DL2</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1DC1DL2.html#a3ec0f1013eaa61f093fb29947b5234df</field>
    <field name="keywords">OFELI::DC1DL2::~DC1DL2 DC1DL2</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC1DL2::Convection</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1DC1DL2.html#a53e87db15fc709b78df9142c77fd26c7</field>
    <field name="keywords">Convection OFELI::DC1DL2::Convection DC1DL2</field>
    <field name="text">Add convection matrix to element matrix after multiplying it by coefficient coef Case where velocity field has been previouly defined coef Coefficient to multiply by added term default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC1DL2::Convection</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;v, real_t coef=1)</field>
    <field name="url">classOFELI_1_1DC1DL2.html#a7ea8708fa7fb4398d4decf7ca5d8e29e</field>
    <field name="keywords">Convection OFELI::DC1DL2::Convection DC1DL2</field>
    <field name="text">Add convection matrix to element matrix after multiplying it by coefficient coef Case where velocity field is given by a vector v v Velocity vector coef Coefficient to multiply by added term default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC1DL2::BodyRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1DC1DL2.html#aa6d7e87afcbeea4276573c9576d8d6ca</field>
    <field name="keywords">BodyRHS OFELI::DC1DL2::BodyRHS DC1DL2</field>
    <field name="text">Add body right-hand side term to right hand side f Vector containing source at nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC1DL2::DC1DL2</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1DC1DL2.html#ac2315eddea9c3305bb87d8d9e88ded60</field>
    <field name="keywords">DC1DL2 OFELI::DC1DL2::DC1DL2 DC1DL2</field>
    <field name="text">Constructor using mesh instance ms Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC1DL2::Diffusion</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1DC1DL2.html#ac301bba6a75b942c88f797628c141e2c</field>
    <field name="keywords">Diffusion OFELI::DC1DL2::Diffusion DC1DL2</field>
    <field name="text">Add diffusion matrix to element matrix after multiplying it by coefficient coef coef Coefficient to multiply by added term default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC1DL2::LCapacity</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1DC1DL2.html#af02cfd6af8e4585dd9f17f97597136c5</field>
    <field name="keywords">LCapacity OFELI::DC1DL2::LCapacity DC1DL2</field>
    <field name="text">Add lumped capacity matrix to element matrix after multiplying it by coefficient coef coef Coefficient to multiply by added term default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC1DL2::Capacity</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1DC1DL2.html#afa459b7f5bba5e1bc897a81c13dcee77</field>
    <field name="keywords">Capacity OFELI::DC1DL2::Capacity DC1DL2</field>
    <field name="text">Add Consistent capacity matrix to element matrix after multiplying it by coefficient coef coef Coefficient to multiply by added term default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC1DL2::setInput</field>
    <field name="args">(EType opt, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1DC1DL2.html#affbdc0fae478891f2b9f63607004026f</field>
    <field name="keywords">setInput OFELI::DC1DL2::setInput DC1DL2</field>
    <field name="text">Set equation input data opt Parameter that selects data type for input This parameter is to be chosen in the enumerated variable EqDataType INITIAL_FIELD Initial temperature BOUNDARY_CONDITION_DATA Boundary condition Dirichlet SOURCE_DATA Heat source FLUX_DATA Heat flux Neumann boundary condition VELOCITY Velocity vector for the convection term u Vector containing input data</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::DC2DT3</field>
    <field name="url">classOFELI_1_1DC2DT3.html</field>
    <field name="keywords">DC2DT3</field>
    <field name="text">Builds finite element arrays for thermal diffusion and convection in 2 D domains using 3 Node triangles Note that members calculating element arrays have as an argument a real coef that will be multiplied by the contribution of the current element This makes possible testing different algorithms</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT3::Grad</field>
    <field name="args">(Vect&lt; Point&lt; real_t &gt; &gt; &amp;g)</field>
    <field name="url">classOFELI_1_1DC2DT3.html#a190841f9068f20d5cd91c05451f5d06d</field>
    <field name="keywords">Grad OFELI::DC2DT3::Grad DC2DT3</field>
    <field name="text">Compute gradient of solution g Elementwise vector containing gradient of solution</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT3::DC2DT3</field>
    <field name="args">(Mesh &amp;ms, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1DC2DT3.html#a4560659d65882a718bae2df0ba764850</field>
    <field name="keywords">DC2DT3 OFELI::DC2DT3::DC2DT3 DC2DT3</field>
    <field name="text">Constructor using Mesh and initial condition ms Mesh instance u Vect instance containing initial solution</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT3::Flux</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1DC2DT3.html#a4d57d6f9709935f100f3aae3bb7bc508</field>
    <field name="keywords">Flux OFELI::DC2DT3::Flux DC2DT3</field>
    <field name="text">Return constant heat flux in element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT3::Convection</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1DC2DT3.html#a53e87db15fc709b78df9142c77fd26c7</field>
    <field name="keywords">Convection OFELI::DC2DT3::Convection DC2DT3</field>
    <field name="text">Add convection matrix to element matrix after multiplying it by coefficient coef Case where velocity field has been previouly defined coef Coefficient to multiply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT3::Convection</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;v, real_t coef=1)</field>
    <field name="url">classOFELI_1_1DC2DT3.html#a7ea8708fa7fb4398d4decf7ca5d8e29e</field>
    <field name="keywords">Convection OFELI::DC2DT3::Convection DC2DT3</field>
    <field name="text">Add convection matrix to element matrix after multiplying it by coefficient coef Case where velocity field is given by a vector v v Velocity vector coef Coefficient to multiply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT3::~DC2DT3</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1DC2DT3.html#a85b0886fbca9fbd761885e87c5cc5930</field>
    <field name="keywords">OFELI::DC2DT3::~DC2DT3 DC2DT3</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT3::Convection</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;v, real_t coef=1)</field>
    <field name="url">classOFELI_1_1DC2DT3.html#a8a6e5ef47ad8bf337246bcf5d05fb2cf</field>
    <field name="keywords">Convection OFELI::DC2DT3::Convection DC2DT3</field>
    <field name="text">Add convection matrix to element matrix after multiplying it by coefficient coef v Constant velocity vector coef Coefficient to multiply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT3::JouleHeating</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;sigma, const Vect&lt; real_t &gt; &amp;psi)</field>
    <field name="url">classOFELI_1_1DC2DT3.html#a8deaaf61d56f5ecead2d6436a6e983df</field>
    <field name="keywords">JouleHeating OFELI::DC2DT3::JouleHeating DC2DT3</field>
    <field name="text">Set Joule heating term as source sigma Vect instance containing electric conductivity elementwise psi Vect instance containing electric potential elementwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT3::LinearExchange</field>
    <field name="args">(real_t coef, real_t T)</field>
    <field name="url">classOFELI_1_1DC2DT3.html#a8e09c99e4cfc4b0035d9e6b46d19d7ec</field>
    <field name="keywords">LinearExchange OFELI::DC2DT3::LinearExchange DC2DT3</field>
    <field name="text">Add an edge linear exchange term to left and right-hand sides coef Coefficient of exchange T External value for exchange This assumes a constant value of T</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT3::BoundaryRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1DC2DT3.html#a9f47743e35b40517037f6c007312461c</field>
    <field name="keywords">BoundaryRHS OFELI::DC2DT3::BoundaryRHS DC2DT3</field>
    <field name="text">Add boundary right-hand side term to right hand side after multiplying it by coefficient coef f Vector containing source at nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT3::BodyRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1DC2DT3.html#aa6d7e87afcbeea4276573c9576d8d6ca</field>
    <field name="keywords">BodyRHS OFELI::DC2DT3::BodyRHS DC2DT3</field>
    <field name="text">Add body right-hand side term to right hand side f Vector containing source at nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT3::Diffusion</field>
    <field name="args">(const LocalMatrix&lt; real_t, 2, 2 &gt; &amp;diff, real_t coef=1)</field>
    <field name="url">classOFELI_1_1DC2DT3.html#aa975bf05deb2ab508cc62e932d0ccb2c</field>
    <field name="keywords">Diffusion OFELI::DC2DT3::Diffusion DC2DT3</field>
    <field name="text">Add diffusion matrix to element matrix after multiplying it by coefficient coef Case where the diffusivity matrix is given as an argument diff Diffusion matrix class LocalMatrix coef Coefficient to multiply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT3::DC2DT3</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1DC2DT3.html#ab8196ffed20368bd08665c8994261508</field>
    <field name="keywords">DC2DT3 OFELI::DC2DT3::DC2DT3 DC2DT3</field>
    <field name="text">Constructor using Mesh data ms Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT3::Diffusion</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1DC2DT3.html#ac301bba6a75b942c88f797628c141e2c</field>
    <field name="keywords">Diffusion OFELI::DC2DT3::Diffusion DC2DT3</field>
    <field name="text">Add diffusion matrix to element matrix after multiplying it by coefficient coef coef Coefficient to multiply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT3::DC2DT3</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1DC2DT3.html#acabdf8aaecac9892a332089d48492921</field>
    <field name="keywords">DC2DT3 OFELI::DC2DT3::DC2DT3 DC2DT3</field>
    <field name="text">Default Constructor Constructs an empty equation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT3::LCapacity</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1DC2DT3.html#af02cfd6af8e4585dd9f17f97597136c5</field>
    <field name="keywords">LCapacity OFELI::DC2DT3::LCapacity DC2DT3</field>
    <field name="text">Add lumped capacity matrix to element matrix after multiplying it by coefficient coef coef Coefficient to multiply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT3::BodyRHS</field>
    <field name="args">(real_t f)</field>
    <field name="url">classOFELI_1_1DC2DT3.html#af3452fd9f607e1efb0b915e90faea46f</field>
    <field name="keywords">BodyRHS OFELI::DC2DT3::BodyRHS DC2DT3</field>
    <field name="text">Add body right-hand side term to right hand side Case where the body right-hand side is piecewise constant f Value of thermal source Constant in element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT3::Grad</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;u) const</field>
    <field name="url">classOFELI_1_1DC2DT3.html#af45bbe0442fb57521bf5a98dd628e3a5</field>
    <field name="keywords">Grad OFELI::DC2DT3::Grad DC2DT3</field>
    <field name="text">Return gradient of a vector in element u Global vector for which gradient is computed Vector u has as size the total number of nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT3::Periodic</field>
    <field name="args">(real_t coef=1.e20)</field>
    <field name="url">classOFELI_1_1DC2DT3.html#af669369716d638f14a268133981dbb17</field>
    <field name="keywords">Periodic OFELI::DC2DT3::Periodic DC2DT3</field>
    <field name="text">Add contribution of periodic boundary condition by a penalty technique Boundary nodes where periodic boundary conditions are to be imposed must have codes equal to PERIODIC_A on one side and PERIODIC_B on the opposite side coef Value of penalty parameter Default 1.e20</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT3::Capacity</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1DC2DT3.html#afa459b7f5bba5e1bc897a81c13dcee77</field>
    <field name="keywords">Capacity OFELI::DC2DT3::Capacity DC2DT3</field>
    <field name="text">Add Consistent capacity matrix to element matrix after multiplying it by coefficient coef coef Coefficient to multiply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT3::BoundaryRHS</field>
    <field name="args">(real_t flux)</field>
    <field name="url">classOFELI_1_1DC2DT3.html#afc20edadf93d2135ee9873e1bd7deb4c</field>
    <field name="keywords">BoundaryRHS OFELI::DC2DT3::BoundaryRHS DC2DT3</field>
    <field name="text">Add boundary right-hand side flux to right hand side flux Vector containing source at side nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT3::setInput</field>
    <field name="args">(EType opt, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1DC2DT3.html#affbdc0fae478891f2b9f63607004026f</field>
    <field name="keywords">setInput OFELI::DC2DT3::setInput DC2DT3</field>
    <field name="text">Set equation input data opt Parameter to select type of input enumerated values INITIAL_FIELD Initial temperature BOUNDARY_CONDITION_DATA Boundary condition Dirichlet SOURCE_DATA Heat source FLUX_DATA Heat flux Neumann boundary condition VELOCITY_FIELD Velocity vector for the convection term u Vector containing input data</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::DC2DT6</field>
    <field name="url">classOFELI_1_1DC2DT6.html</field>
    <field name="keywords">DC2DT6</field>
    <field name="text">Builds finite element arrays for thermal diffusion and convection in 2 D domains using 6 Node triangles Note that members calculating element arrays have as an argument a real coef that will be multiplied by the contribution of the current element This makes possible testing different algorithms</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT6::~DC2DT6</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1DC2DT6.html#a2c80b413ff959bca09b053e7781ab478</field>
    <field name="keywords">OFELI::DC2DT6::~DC2DT6 DC2DT6</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT6::Convection</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1DC2DT6.html#a53e87db15fc709b78df9142c77fd26c7</field>
    <field name="keywords">Convection OFELI::DC2DT6::Convection DC2DT6</field>
    <field name="text">Add convection matrix to left-hand side after multiplying it by coefficient coef Case where velocity field has been previouly defined coef Coefficient to multiply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT6::DC2DT6</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1DC2DT6.html#a5a0433ffae1f4e34e03835a5d3c1bd58</field>
    <field name="keywords">DC2DT6 OFELI::DC2DT6::DC2DT6 DC2DT6</field>
    <field name="text">Constructor using Mesh data ms Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT6::Convection</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;v, real_t coef=1)</field>
    <field name="url">classOFELI_1_1DC2DT6.html#a7ea8708fa7fb4398d4decf7ca5d8e29e</field>
    <field name="keywords">Convection OFELI::DC2DT6::Convection DC2DT6</field>
    <field name="text">Add convection matrix to left-hand side after multiplying it by coefficient coef Case where velocity field is given by a vector v v Velocity vector coef Coefficient to multiply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT6::Convection</field>
    <field name="args">(Point&lt; real_t &gt; &amp;v, real_t coef=1)</field>
    <field name="url">classOFELI_1_1DC2DT6.html#a84fd2c75da0ac1bf9158410df864e028</field>
    <field name="keywords">Convection OFELI::DC2DT6::Convection DC2DT6</field>
    <field name="text">Add convection matrix to left hand side after multiplying it by coefficient coef v Constant velocity vector coef Coefficient to multiply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT6::DC2DT6</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1DC2DT6.html#a9a921747bcf0f5b5dac83bdaa65853f5</field>
    <field name="keywords">DC2DT6 OFELI::DC2DT6::DC2DT6 DC2DT6</field>
    <field name="text">Default Constructor Constructs an empty equation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT6::BoundaryRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1DC2DT6.html#a9f47743e35b40517037f6c007312461c</field>
    <field name="keywords">BoundaryRHS OFELI::DC2DT6::BoundaryRHS DC2DT6</field>
    <field name="text">Add boundary right-hand side term to right hand side after multiplying it by coefficient coef f Vector containing source at nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT6::BodyRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1DC2DT6.html#aa6d7e87afcbeea4276573c9576d8d6ca</field>
    <field name="keywords">BodyRHS OFELI::DC2DT6::BodyRHS DC2DT6</field>
    <field name="text">Add body right-hand side term to right hand side f Local vector of size 6 containing source at nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT6::Diffusion</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1DC2DT6.html#ac301bba6a75b942c88f797628c141e2c</field>
    <field name="keywords">Diffusion OFELI::DC2DT6::Diffusion DC2DT6</field>
    <field name="text">Add diffusion matrix to element matrix after multiplying it by coefficient coef coef Coefficient to multiply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT6::DC2DT6</field>
    <field name="args">(Mesh &amp;ms, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1DC2DT6.html#aea4d88a2557ffcc87cb0a688afd18f4f</field>
    <field name="keywords">DC2DT6 OFELI::DC2DT6::DC2DT6 DC2DT6</field>
    <field name="text">Constructor using Mesh data and solution vector ms Mesh instance u Vect instance containing solution vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT6::LCapacity</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1DC2DT6.html#af02cfd6af8e4585dd9f17f97597136c5</field>
    <field name="keywords">LCapacity OFELI::DC2DT6::LCapacity DC2DT6</field>
    <field name="text">Add lumped capacity matrix to element matrix after multiplying it by coefficient coef coef Coefficient to multiply by added term default value 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC2DT6::Capacity</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1DC2DT6.html#afa459b7f5bba5e1bc897a81c13dcee77</field>
    <field name="keywords">Capacity OFELI::DC2DT6::Capacity DC2DT6</field>
    <field name="text">Add Consistent capacity matrix to element matrix after multiplying it by coefficient coef coef Coefficient to multiply by added term default value 1</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::DC3DAT3</field>
    <field name="url">classOFELI_1_1DC3DAT3.html</field>
    <field name="keywords">DC3DAT3</field>
    <field name="text">Builds finite element arrays for thermal diffusion and convection in 3 D domains with axisymmetry using 3 Node triangles Note that members calculating element arrays have as an argument a real coef that will be multiplied by the contribution of the current element This makes possible testing different algorithms</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC3DAT3::Grad</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1DC3DAT3.html#a2f6b29948c529991f12c06cb26a538f4</field>
    <field name="keywords">Grad OFELI::DC3DAT3::Grad DC3DAT3</field>
    <field name="text">Return gradient of a vector in element u Vector for which gradient is computed</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC3DAT3::DC3DAT3</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1DC3DAT3.html#a76b586d89b4c7d05e5012948f16dbbef</field>
    <field name="keywords">DC3DAT3 OFELI::DC3DAT3::DC3DAT3 DC3DAT3</field>
    <field name="text">Constructor using Mesh data ms Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC3DAT3::~DC3DAT3</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1DC3DAT3.html#a8918357291806744880398cd54eab1f0</field>
    <field name="keywords">OFELI::DC3DAT3::~DC3DAT3 DC3DAT3</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC3DAT3::DC3DAT3</field>
    <field name="args">(Mesh &amp;ms, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1DC3DAT3.html#a92c2207986632bb3fcf39c51b9ca0377</field>
    <field name="keywords">DC3DAT3 OFELI::DC3DAT3::DC3DAT3 DC3DAT3</field>
    <field name="text">Constructor using Mesh data and solution vector ms Mesh instance u Vect instance containing solution vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC3DAT3::BoundaryRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1DC3DAT3.html#a9f47743e35b40517037f6c007312461c</field>
    <field name="keywords">BoundaryRHS OFELI::DC3DAT3::BoundaryRHS DC3DAT3</field>
    <field name="text">Add boundary right-hand side term to right hand side after multiplying it by coefficient coef f Vector containing source at nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC3DAT3::BodyRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1DC3DAT3.html#aa6d7e87afcbeea4276573c9576d8d6ca</field>
    <field name="keywords">BodyRHS OFELI::DC3DAT3::BodyRHS DC3DAT3</field>
    <field name="text">Add body right-hand side term to right hand side f Local vector of size 3 containing source at odes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC3DAT3::Diffusion</field>
    <field name="args">(const LocalMatrix&lt; real_t, 2, 2 &gt; &amp;diff, real_t coef=1)</field>
    <field name="url">classOFELI_1_1DC3DAT3.html#aa975bf05deb2ab508cc62e932d0ccb2c</field>
    <field name="keywords">Diffusion OFELI::DC3DAT3::Diffusion DC3DAT3</field>
    <field name="text">Add diffusion matrix to left-hand side after multiplying it by coefficient coef Case where the diffusivity matrix is given as an argument diff Instance of class DMatrix containing diffusivity matrix coef Coefficient to multiply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC3DAT3::Diffusion</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1DC3DAT3.html#ac301bba6a75b942c88f797628c141e2c</field>
    <field name="keywords">Diffusion OFELI::DC3DAT3::Diffusion DC3DAT3</field>
    <field name="text">Add diffusion matrix to left-hand side after multiplying it by coefficient coef coef Coefficient to multiply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC3DAT3::DC3DAT3</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1DC3DAT3.html#ad3c59f3d05a51ba1024fd813ab119928</field>
    <field name="keywords">DC3DAT3 OFELI::DC3DAT3::DC3DAT3 DC3DAT3</field>
    <field name="text">Default Constructor Constructs an empty equation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC3DAT3::LCapacity</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1DC3DAT3.html#af02cfd6af8e4585dd9f17f97597136c5</field>
    <field name="keywords">LCapacity OFELI::DC3DAT3::LCapacity DC3DAT3</field>
    <field name="text">Add lumped capacity matrix to element matrix after multiplying it by coefficient coef coef Coefficient to multiply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC3DAT3::Capacity</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1DC3DAT3.html#afa459b7f5bba5e1bc897a81c13dcee77</field>
    <field name="keywords">Capacity OFELI::DC3DAT3::Capacity DC3DAT3</field>
    <field name="text">Add Consistent capacity matrix to element matrix after multiplying it by coefficient coef coef Coefficient to multiply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC3DAT3::BoundaryRHS</field>
    <field name="args">(real_t flux)</field>
    <field name="url">classOFELI_1_1DC3DAT3.html#afc20edadf93d2135ee9873e1bd7deb4c</field>
    <field name="keywords">BoundaryRHS OFELI::DC3DAT3::BoundaryRHS DC3DAT3</field>
    <field name="text">Add boundary right-hand side term to right hand side flux Value of flux to impose on the side</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::DC3DT4</field>
    <field name="url">classOFELI_1_1DC3DT4.html</field>
    <field name="keywords">DC3DT4</field>
    <field name="text">Builds finite element arrays for thermal diffusion and convection in 3 D domains using 4 Node tetrahedra Note that members calculating element arrays have as an argument a real coef that will be multiplied by the contribution of the current element This makes possible testing different algorithms</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC3DT4::~DC3DT4</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1DC3DT4.html#a049e01987c2469c3b1fdc9ec6d603b1e</field>
    <field name="keywords">OFELI::DC3DT4::~DC3DT4 DC3DT4</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC3DT4::Grad</field>
    <field name="args">(Vect&lt; Point&lt; real_t &gt; &gt; &amp;g)</field>
    <field name="url">classOFELI_1_1DC3DT4.html#a190841f9068f20d5cd91c05451f5d06d</field>
    <field name="keywords">Grad OFELI::DC3DT4::Grad DC3DT4</field>
    <field name="text">Compute gradient of solution g Elementwise vector containing gradient of solution</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC3DT4::Flux</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1DC3DT4.html#a517ac185a17f5d576e56f67f1ccb380d</field>
    <field name="keywords">Flux OFELI::DC3DT4::Flux DC3DT4</field>
    <field name="text">Return constant heat flux in element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC3DT4::Convection</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1DC3DT4.html#a53e87db15fc709b78df9142c77fd26c7</field>
    <field name="keywords">Convection OFELI::DC3DT4::Convection DC3DT4</field>
    <field name="text">Add convection matrix to element matrix after multiplying it by coefficient coef Case where velocity field has been previouly defined coef Coefficient to multiply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC3DT4::DC3DT4</field>
    <field name="args">(Mesh &amp;ms, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1DC3DT4.html#a5b5136063f4407cdc7276884b9088223</field>
    <field name="keywords">DC3DT4 OFELI::DC3DT4::DC3DT4 DC3DT4</field>
    <field name="text">Constructor using Mesh and initial condition ms Mesh instance u Vect instance containing initial solution</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC3DT4::Diffusion</field>
    <field name="args">(const DMatrix&lt; real_t &gt; &amp;diff, real_t coef=1)</field>
    <field name="url">classOFELI_1_1DC3DT4.html#a7660b0e60ab63ad71dec5dca95a6acd8</field>
    <field name="keywords">Diffusion OFELI::DC3DT4::Diffusion DC3DT4</field>
    <field name="text">Add diffusion matrix to element matrix after multiplying it by coefficient coef Case where the diffusivity matrix is given as an argument diff Diffusion matrix class DMatrix coef Coefficient to multiply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC3DT4::Convection</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;v, real_t coef=1)</field>
    <field name="url">classOFELI_1_1DC3DT4.html#a8a6e5ef47ad8bf337246bcf5d05fb2cf</field>
    <field name="keywords">Convection OFELI::DC3DT4::Convection DC3DT4</field>
    <field name="text">Add convection matrix to element matrix after multiplying it by coefficient coef v Constant velocity vector coef Coefficient to multiply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC3DT4::DC3DT4</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1DC3DT4.html#a999b30924c4b2e879350a0cd90270811</field>
    <field name="keywords">DC3DT4 OFELI::DC3DT4::DC3DT4 DC3DT4</field>
    <field name="text">Default Constructor Constructs an empty equation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC3DT4::BoundaryRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1DC3DT4.html#a9f47743e35b40517037f6c007312461c</field>
    <field name="keywords">BoundaryRHS OFELI::DC3DT4::BoundaryRHS DC3DT4</field>
    <field name="text">Add boundary right-hand side term to right hand side after multiplying it by coefficient coef Case where body source is given by a vector f Vector containing source at nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC3DT4::BodyRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1DC3DT4.html#aa6d7e87afcbeea4276573c9576d8d6ca</field>
    <field name="keywords">BodyRHS OFELI::DC3DT4::BodyRHS DC3DT4</field>
    <field name="text">Add body right-hand side term to right hand side f Vector containing source at nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC3DT4::Convection</field>
    <field name="args">(const Vect&lt; Point&lt; real_t &gt; &gt; &amp;v, real_t coef=1)</field>
    <field name="url">classOFELI_1_1DC3DT4.html#aaaea5344e119249530533a278c8ff33c</field>
    <field name="keywords">Convection OFELI::DC3DT4::Convection DC3DT4</field>
    <field name="text">Add convection matrix to element matrix after multiplying it by coefficient coef Case where velocity field is given by a vector v v Velocity vector coef Coefficient to multiply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC3DT4::DC3DT4</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1DC3DT4.html#abd5e512d523baa6c9fead68c661ed71a</field>
    <field name="keywords">DC3DT4 OFELI::DC3DT4::DC3DT4 DC3DT4</field>
    <field name="text">Constructor using Mesh data ms Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC3DT4::Diffusion</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1DC3DT4.html#ac301bba6a75b942c88f797628c141e2c</field>
    <field name="keywords">Diffusion OFELI::DC3DT4::Diffusion DC3DT4</field>
    <field name="text">Add diffusion matrix to element matrix after multiplying it by coefficient coef coef Coefficient to multiply by added term default value 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC3DT4::LCapacity</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1DC3DT4.html#af02cfd6af8e4585dd9f17f97597136c5</field>
    <field name="keywords">LCapacity OFELI::DC3DT4::LCapacity DC3DT4</field>
    <field name="text">Add lumped capacity matrix to element matrix after multiplying it by coefficient coef coef Coefficient to multiply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC3DT4::Periodic</field>
    <field name="args">(real_t coef=1.e20)</field>
    <field name="url">classOFELI_1_1DC3DT4.html#af669369716d638f14a268133981dbb17</field>
    <field name="keywords">Periodic OFELI::DC3DT4::Periodic DC3DT4</field>
    <field name="text">Add contribution of periodic boundary condition by a penalty technique Boundary nodes where periodic boundary conditions are to be imposed must have codes equal to PERIODIC_A on one side and PERIODIC_B on the opposite side coef Value of penalty parameter Default 1.e20</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC3DT4::Capacity</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1DC3DT4.html#afa459b7f5bba5e1bc897a81c13dcee77</field>
    <field name="keywords">Capacity OFELI::DC3DT4::Capacity DC3DT4</field>
    <field name="text">Add consistent capacity matrix to element matrix after multiplying it by coefficient coef coef Coefficient to multiply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DC3DT4::BoundaryRHS</field>
    <field name="args">(real_t flux)</field>
    <field name="url">classOFELI_1_1DC3DT4.html#afc20edadf93d2135ee9873e1bd7deb4c</field>
    <field name="keywords">BoundaryRHS OFELI::DC3DT4::BoundaryRHS DC3DT4</field>
    <field name="text">Add boundary right-hand side flux to right hand side flux Vector containing source at side nodes</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::DG</field>
    <field name="url">classOFELI_1_1DG.html</field>
    <field name="keywords">DG</field>
    <field name="text">Enables preliminary operations and utilities for the Discontinous Galerkin method Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DG::~DG</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1DG.html#a6bab5798fe4280f5dd2631cd81f2549f</field>
    <field name="keywords">OFELI::DG::~DG DG</field>
    <field name="text">Destructor Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DG::setGraph</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1DG.html#ac48e824f9733572fae5f1b012bb69c44</field>
    <field name="keywords">setGraph OFELI::DG::setGraph DG</field>
    <field name="text">Set matrix graph Set matrix graph</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DG::DG</field>
    <field name="args">(Mesh &amp;ms, size_t degree=1)</field>
    <field name="url">classOFELI_1_1DG.html#aeb953cf746c1b45576cb767cefcbe81f</field>
    <field name="keywords">DG OFELI::DG::DG DG</field>
    <field name="text">Constructor with mesh and degree of the method ms Mesh instance degree Polynomial degree of the DG method Default 1 Constructor with mesh and degree of the method</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::DMatrix</field>
    <field name="url">classOFELI_1_1DMatrix.html</field>
    <field name="keywords">DMatrix DMatrix&lt; real_t &gt;</field>
    <field name="text">To handle dense matrices This class enables storing and manipulating general dense matrices Matrices can be square or rectangle ones T_ Data type double float complex&lt;double&gt; Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::operator+=</field>
    <field name="args">(const T_ &amp;x)</field>
    <field name="url">classOFELI_1_1DMatrix.html#a044c16cb00d4dfb3a6edb538df3bdb68</field>
    <field name="keywords">operator+= OFELI::DMatrix::operator+= DMatrix&lt; T_ &gt; operator+= OFELI::DMatrix&lt; real_t &gt;::operator+= DMatrix&lt; real_t &gt;</field>
    <field name="text">Operator Add constant value x to matrix entries</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::setQR</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1DMatrix.html#a06df703042b225fd23143f274855f5af</field>
    <field name="keywords">setQR OFELI::DMatrix::setQR DMatrix&lt; T_ &gt; setQR OFELI::DMatrix&lt; real_t &gt;::setQR DMatrix&lt; real_t &gt;</field>
    <field name="text">Construct a QR factorization of the matrix This function constructs the QR decomposition using the Householder method The upper triangular matrix R is returned in the upper triangle of the current matrix except for the diagonal elements of R which are stored in an internal vector The orthogonal matrix Q is represented as a product of n-1 Householder matrices Q1 Qn-1 where Qj 1 uj.uj The i-th component of uj is zero for i 1 j-1 while the nonzero components are returned in a i j for i j n 0 if the decomposition was successful k is the k-th row is singular The matrix can be square or rectangle</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::operator-=</field>
    <field name="args">(const DMatrix&lt; T_ &gt; &amp;m)</field>
    <field name="url">classOFELI_1_1DMatrix.html#a0c0af0e0b7ecddc1fae4db241ebb7ec2</field>
    <field name="keywords">operator-= OFELI::DMatrix::operator-= DMatrix&lt; T_ &gt; operator-= OFELI::DMatrix&lt; real_t &gt;::operator-= DMatrix&lt; real_t &gt;</field>
    <field name="text">Operator Subtract matrix m from current matrix instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::DMatrix</field>
    <field name="args">(size_t nr, size_t nc)</field>
    <field name="url">classOFELI_1_1DMatrix.html#a129bf5624725a68a0602aed6452bfe6b</field>
    <field name="keywords">DMatrix OFELI::DMatrix::DMatrix DMatrix&lt; T_ &gt; DMatrix OFELI::DMatrix&lt; real_t &gt;::DMatrix DMatrix&lt; real_t &gt;</field>
    <field name="text">Constructor for a matrix with nr rows and nc columns Matrix entries are set to 0</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::get</field>
    <field name="args">(size_t i, size_t j) const</field>
    <field name="url">classOFELI_1_1DMatrix.html#a173c0f972c4eeca07b426587bc2108e5</field>
    <field name="keywords">get OFELI::DMatrix::get DMatrix&lt; T_ &gt; get OFELI::DMatrix&lt; real_t &gt;::get DMatrix&lt; real_t &gt;</field>
    <field name="text">Return entry i j of matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::add</field>
    <field name="args">(size_t i, size_t j, const T_ &amp;val)</field>
    <field name="url">classOFELI_1_1DMatrix.html#a17592a65d5fb95d42c07f724dabad759</field>
    <field name="keywords">add OFELI::DMatrix::add DMatrix&lt; T_ &gt; add OFELI::DMatrix&lt; real_t &gt;::add DMatrix&lt; real_t &gt;</field>
    <field name="text">Add constant val to entry i j of the matrix i row index j column index val Constant to add</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::DMatrix</field>
    <field name="args">(Vect&lt; T_ &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1DMatrix.html#a21b8942efb928b84b44339b5dfba10ae</field>
    <field name="keywords">DMatrix OFELI::DMatrix::DMatrix DMatrix&lt; T_ &gt; DMatrix OFELI::DMatrix&lt; real_t &gt;::DMatrix DMatrix&lt; real_t &gt;</field>
    <field name="text">Constructor that uses a Vect instance The class uses the memory space occupied by this vector v Vector to copy</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::operator*=</field>
    <field name="args">(const T_ &amp;x)</field>
    <field name="url">classOFELI_1_1DMatrix.html#a2480412e70224a4a2fcd82c07b8e3c7b</field>
    <field name="keywords">operator*= OFELI::DMatrix::operator*= DMatrix&lt; T_ &gt; operator*= OFELI::DMatrix&lt; real_t &gt;::operator*= DMatrix&lt; real_t &gt;</field>
    <field name="text">Operator Premultiply matrix entries by constant value x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::setLU</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1DMatrix.html#a254526dadd3fc5f1ffa120bfb2357f23</field>
    <field name="keywords">setLU OFELI::DMatrix::setLU DMatrix&lt; T_ &gt; setLU OFELI::DMatrix&lt; real_t &gt;::setLU DMatrix&lt; real_t &gt;</field>
    <field name="text">Factorize the matrix LU factorization LU factorization of the matrix is realized Note that since this is an in place factorization the contents of the matrix are modified 0 if factorization was normally performed n if the n th pivot is null A flag in this class indicates after factorization that this one has been realized so that if the member function solve is called after this no further factorization is done</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::at</field>
    <field name="args">(size_t i, size_t j)</field>
    <field name="url">classOFELI_1_1DMatrix.html#a276ea1877b89d46c32e207248a4573d7</field>
    <field name="keywords">at OFELI::DMatrix::at DMatrix&lt; T_ &gt; at OFELI::DMatrix&lt; real_t &gt;::at DMatrix&lt; real_t &gt;</field>
    <field name="text">Return a value of a matrix entry i Row index starts at 1 j Column index starts at 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::solve</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;b, Vect&lt; T_ &gt; &amp;x, bool fact=true)</field>
    <field name="url">classOFELI_1_1DMatrix.html#a27c662f32ce66be2efa47871358fcf10</field>
    <field name="keywords">solve OFELI::DMatrix::solve DMatrix&lt; T_ &gt; solve OFELI::DMatrix&lt; real_t &gt;::solve DMatrix&lt; real_t &gt;</field>
    <field name="text">Solve linear system The linear system having the current instance as a matrix is solved by using the LU decomposition Solution is thus realized after a factorization step and a forward/backward substitution step The factorization step is realized only if this was not already done Note that this function modifies the matrix contents is a factorization is performed Naturally if the the matrix has been modified after using this function the user has to refactorize it using the function setLU This is because the class has no non-expensive way to detect if the matrix has been modified The function setLU realizes the factorization step only b Vect instance that contains right-hand side x Vect instance that contains solution fact Set true if matrix is to be factorized Default value false if not 0 if solution was normally performed n if the n th pivot is null</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::operator-=</field>
    <field name="args">(const T_ &amp;x)</field>
    <field name="url">classOFELI_1_1DMatrix.html#a319bbf8d06ba03d57f8fdda82680cb45</field>
    <field name="keywords">operator-= OFELI::DMatrix::operator-= DMatrix&lt; T_ &gt; operator-= OFELI::DMatrix&lt; real_t &gt;::operator-= DMatrix&lt; real_t &gt;</field>
    <field name="text">Operator Subtract constant value x from matrix entries</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::getArray</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1DMatrix.html#a373b436e2bac687e3794bea128f69e99</field>
    <field name="keywords">getArray OFELI::DMatrix::getArray DMatrix&lt; T_ &gt; getArray OFELI::DMatrix&lt; real_t &gt;::getArray DMatrix&lt; real_t &gt;</field>
    <field name="text">Return matrix as C-Array Matrix is stored row by row</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::add</field>
    <field name="args">(size_t i, const T_ &amp;val)</field>
    <field name="url">classOFELI_1_1DMatrix.html#a3c7b029cbe1aca9bea7623ae99274795</field>
    <field name="keywords">add OFELI::DMatrix::add DMatrix&lt; T_ &gt; add OFELI::DMatrix&lt; real_t &gt;::add DMatrix&lt; real_t &gt;</field>
    <field name="text">Add val to entry i</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::solveTransQR</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;b, Vect&lt; T_ &gt; &amp;x)</field>
    <field name="url">classOFELI_1_1DMatrix.html#a5c3a02f81b0cd213d97e647d75881a71</field>
    <field name="keywords">solveTransQR OFELI::DMatrix::solveTransQR DMatrix&lt; T_ &gt; solveTransQR OFELI::DMatrix&lt; real_t &gt;::solveTransQR DMatrix&lt; real_t &gt;</field>
    <field name="text">Solve a transpose linear system by QR decomposition This function constructs the QR decomposition if this was not already done by using the member function QR and solves the linear system b Right-hand side vector x Solution vector Must have been sized before using this function The same value as returned by the function QR</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::DMatrix</field>
    <field name="args">(const DMatrix&lt; T_ &gt; &amp;m)</field>
    <field name="url">classOFELI_1_1DMatrix.html#a5d49496c7c63a0512f8628d52aad20bb</field>
    <field name="keywords">DMatrix OFELI::DMatrix::DMatrix DMatrix&lt; T_ &gt; DMatrix OFELI::DMatrix&lt; real_t &gt;::DMatrix DMatrix&lt; real_t &gt;</field>
    <field name="text">Copy Constructor m Matrix to copy</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::solveQR</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;b, Vect&lt; T_ &gt; &amp;x)</field>
    <field name="url">classOFELI_1_1DMatrix.html#a5d732d89ba95b550c98b33cf1a29630f</field>
    <field name="keywords">solveQR OFELI::DMatrix::solveQR DMatrix&lt; T_ &gt; solveQR OFELI::DMatrix&lt; real_t &gt;::solveQR DMatrix&lt; real_t &gt;</field>
    <field name="text">Solve a linear system by QR decomposition This function constructs the QR decomposition if this was not already done by using the member function QR and solves the linear system b Right-hand side vector x Solution vector Must have been sized before using this function The same value as returned by the function QR</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::set</field>
    <field name="args">(size_t i, size_t j, const T_ &amp;val)</field>
    <field name="url">classOFELI_1_1DMatrix.html#a61cf373a94a5fedbca306e016bc489c9</field>
    <field name="keywords">set OFELI::DMatrix::set DMatrix&lt; T_ &gt; set OFELI::DMatrix&lt; real_t &gt;::set DMatrix&lt; real_t &gt;</field>
    <field name="text">Assign a constant value to an entry of the matrix i row index of matrix j column index of matrix val Value to assign to a(i,j)</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::getColumn</field>
    <field name="args">(size_t j) const</field>
    <field name="url">classOFELI_1_1DMatrix.html#a633c03c1a0941387fce940cb18d6bb7c</field>
    <field name="keywords">getColumn OFELI::DMatrix::getColumn DMatrix&lt; T_ &gt; getColumn OFELI::DMatrix&lt; real_t &gt;::getColumn DMatrix&lt; real_t &gt;</field>
    <field name="text">Get j th column vector j Index of column to extract Vect instance where the column is stored Vector v does not need to be sized before It is resized in the function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::setSize</field>
    <field name="args">(size_t nr, size_t nc)</field>
    <field name="url">classOFELI_1_1DMatrix.html#a6cd98f8e60c54091bc2249e99677f8c3</field>
    <field name="keywords">setSize OFELI::DMatrix::setSize DMatrix&lt; T_ &gt; setSize OFELI::DMatrix&lt; real_t &gt;::setSize DMatrix&lt; real_t &gt;</field>
    <field name="text">Set size number of rows and columns of matrix nr Number of rows nc Number of columns</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::operator=</field>
    <field name="args">(const T_ &amp;x)</field>
    <field name="url">classOFELI_1_1DMatrix.html#a7010ab81a0460214abb45b542a29ef39</field>
    <field name="keywords">operator= OFELI::DMatrix::operator= DMatrix&lt; T_ &gt; operator= OFELI::DMatrix&lt; real_t &gt;::operator= DMatrix&lt; real_t &gt;</field>
    <field name="text">Operator Assign matrix to identity times x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::MultAdd</field>
    <field name="args">(T_ a, const Vect&lt; T_ &gt; &amp;x, Vect&lt; T_ &gt; &amp;y) const</field>
    <field name="url">classOFELI_1_1DMatrix.html#a7687aa6aa85cfe87635a1c3e56625876</field>
    <field name="keywords">MultAdd OFELI::DMatrix::MultAdd DMatrix&lt; T_ &gt; MultAdd OFELI::DMatrix&lt; real_t &gt;::MultAdd DMatrix&lt; real_t &gt;</field>
    <field name="text">Multiply matrix by vector a*x and add result to y a constant to multiply by x Vector to multiply by a y on input vector to add to On output result</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::operator()</field>
    <field name="args">(size_t i, size_t j) const</field>
    <field name="url">classOFELI_1_1DMatrix.html#a78adc6c13ad0f1d1dedacffe0e80ce63</field>
    <field name="keywords">operator() OFELI::DMatrix::operator() DMatrix&lt; T_ &gt; operator() OFELI::DMatrix&lt; real_t &gt;::operator() DMatrix&lt; real_t &gt;</field>
    <field name="text">Operator Constant version Return a(i,j) i row index j column index</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::operator=</field>
    <field name="args">(DMatrix&lt; T_ &gt; &amp;m)</field>
    <field name="url">classOFELI_1_1DMatrix.html#a7a4b8c691a8de66c4041b54f92357e44</field>
    <field name="keywords">operator= OFELI::DMatrix::operator= DMatrix&lt; T_ &gt; operator= OFELI::DMatrix&lt; real_t &gt;::operator= DMatrix&lt; real_t &gt;</field>
    <field name="text">Operator Copy matrix m to current matrix instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::Axpy</field>
    <field name="args">(T_ a, const DMatrix&lt; T_ &gt; &amp;m)</field>
    <field name="url">classOFELI_1_1DMatrix.html#a7dc985b7750f99e19eb4afff8554ffee</field>
    <field name="keywords">Axpy OFELI::DMatrix::Axpy DMatrix&lt; T_ &gt; Axpy OFELI::DMatrix&lt; real_t &gt;::Axpy DMatrix&lt; real_t &gt;</field>
    <field name="text">Add to matrix the product of a matrix by a scalar a Scalar to premultiply m Matrix by which a is multiplied The result is added to current instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::solve</field>
    <field name="args">(Vect&lt; T_ &gt; &amp;b, bool fact=true)</field>
    <field name="url">classOFELI_1_1DMatrix.html#a85abe8e904adb7fd09103d7b3e8e362d</field>
    <field name="keywords">solve OFELI::DMatrix::solve DMatrix&lt; T_ &gt; solve OFELI::DMatrix&lt; real_t &gt;::solve DMatrix&lt; real_t &gt;</field>
    <field name="text">Solve linear system The linear system having the current instance as a matrix is solved by using the LU decomposition Solution is thus realized after a factorization step and a forward/backward substitution step The factorization step is realized only if this was not already done Note that this function modifies the matrix contents is a factorization is performed Naturally if the the matrix has been modified after using this function the user has to refactorize it using the function setLU This is because the class has no non-expensive way to detect if the matrix has been modified The function setLU realizes the factorization step only b Vect instance that contains right-hand side on input and solution on output fact Set true if matrix is to be factorized Default value false if not 0 if solution was normally performed n if the n th pivot is null</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::~DMatrix</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1DMatrix.html#a8d58c077392c7226d414c1391d70a6d5</field>
    <field name="keywords">OFELI::DMatrix::~DMatrix DMatrix&lt; T_ &gt; OFELI::DMatrix&lt; real_t &gt;::~DMatrix DMatrix&lt; real_t &gt;</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::setSize</field>
    <field name="args">(size_t size)</field>
    <field name="url">classOFELI_1_1DMatrix.html#a97deb13018c1b55b18bfe25a9e339e8d</field>
    <field name="keywords">setSize OFELI::DMatrix::setSize DMatrix&lt; T_ &gt; setSize OFELI::DMatrix&lt; real_t &gt;::setSize DMatrix&lt; real_t &gt;</field>
    <field name="text">Set size number of rows of matrix size Number of rows and columns</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::setTransQR</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1DMatrix.html#a99fff3cc76da3fb94123915cc10d9739</field>
    <field name="keywords">setTransQR OFELI::DMatrix::setTransQR DMatrix&lt; T_ &gt; setTransQR OFELI::DMatrix&lt; real_t &gt;::setTransQR DMatrix&lt; real_t &gt;</field>
    <field name="text">Construct a QR factorization of the transpose of the matrix This function constructs the QR decomposition using the Householder method The upper triangular matrix R is returned in the upper triangle of the current matrix except for the diagonal elements of R which are stored in an internal vector The orthogonal matrix Q is represented as a product of n-1 Householder matrices Q1 Qn-1 where Qj 1 uj.uj The i-th component of uj is zero for i 1 j-1 while the nonzero components are returned in a i j for i j n 0 if the decomposition was successful k is the k-th row is singular The matrix can be square or rectangle</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::solveTrans</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;b, Vect&lt; T_ &gt; &amp;x, bool fact=true)</field>
    <field name="url">classOFELI_1_1DMatrix.html#aa1e7f24569d9dc2dad452eb203662c62</field>
    <field name="keywords">solveTrans OFELI::DMatrix::solveTrans DMatrix&lt; T_ &gt; solveTrans OFELI::DMatrix&lt; real_t &gt;::solveTrans DMatrix&lt; real_t &gt;</field>
    <field name="text">Solve the transpose linear system The linear system having the current instance as a transpose matrix is solved by using the LU decomposition Solution is thus realized after a factorization step and a forward/backward substitution step The factorization step is realized only if this was not already done Note that this function modifies the matrix contents is a factorization is performed Naturally if the the matrix has been modified after using this function the user has to refactorize it using the function setLU This is because the class has no non-expensive way to detect if the matrix has been modified The function setLU realizes the factorization step only b Vect instance that contains right-hand side x Vect instance that contains solution fact Set true if matrix is to be factorized Default value false if not 0 if solution was normally performed n if the n th pivot is null</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::setDiag</field>
    <field name="args">(const vector&lt; T_ &gt; &amp;d)</field>
    <field name="url">classOFELI_1_1DMatrix.html#aa98bbfc7e1ef49f12a4eae45c0d0bf17</field>
    <field name="keywords">setDiag OFELI::DMatrix::setDiag DMatrix&lt; T_ &gt; setDiag OFELI::DMatrix&lt; real_t &gt;::setDiag DMatrix&lt; real_t &gt;</field>
    <field name="text">Set matrix as diagonal and assign its diagonal entries d Vector entries to assign to matrix diagonal entries</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::operator()</field>
    <field name="args">(size_t i, size_t j)</field>
    <field name="url">classOFELI_1_1DMatrix.html#aacbbe150d69a1246cb76f24419cae7ac</field>
    <field name="keywords">operator() OFELI::DMatrix::operator() DMatrix&lt; T_ &gt; operator() OFELI::DMatrix&lt; real_t &gt;::operator() DMatrix&lt; real_t &gt;</field>
    <field name="text">Operator Non constant version Return a(i,j) i row index j column index</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::getRow</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1DMatrix.html#ab003b67a3b106d85cfba3a314f5c6f5b</field>
    <field name="keywords">getRow OFELI::DMatrix::getRow DMatrix&lt; T_ &gt; getRow OFELI::DMatrix&lt; real_t &gt;::getRow DMatrix&lt; real_t &gt;</field>
    <field name="text">Get i th row vector i Index of row to extract Vect instance where the row is stored Vector v does not need to be sized before It is resized in the function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::getColumn</field>
    <field name="args">(size_t j, Vect&lt; T_ &gt; &amp;v) const</field>
    <field name="url">classOFELI_1_1DMatrix.html#ab6da597628711c731d2795d7929c19bf</field>
    <field name="keywords">getColumn OFELI::DMatrix::getColumn DMatrix&lt; T_ &gt; getColumn OFELI::DMatrix&lt; real_t &gt;::getColumn DMatrix&lt; real_t &gt;</field>
    <field name="text">Get j th column vector j Index of column to extract v Reference to Vect instance where the column is stored Vector v does not need to be sized before It is resized in the function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::Mult</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;x, Vect&lt; T_ &gt; &amp;y) const</field>
    <field name="url">classOFELI_1_1DMatrix.html#abd45ada90fcf5f88e65ba7a50e36ce49</field>
    <field name="keywords">Mult OFELI::DMatrix::Mult DMatrix&lt; T_ &gt; Mult OFELI::DMatrix&lt; real_t &gt;::Mult DMatrix&lt; real_t &gt;</field>
    <field name="text">Multiply matrix by vector x and save result in y x Vector to add to y y Result</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::solveTrans</field>
    <field name="args">(Vect&lt; T_ &gt; &amp;b, bool fact=true)</field>
    <field name="url">classOFELI_1_1DMatrix.html#abd8ceb5529d6626cf6cbb2bd4b227cee</field>
    <field name="keywords">solveTrans OFELI::DMatrix::solveTrans DMatrix&lt; T_ &gt; solveTrans OFELI::DMatrix&lt; real_t &gt;::solveTrans DMatrix&lt; real_t &gt;</field>
    <field name="text">Solve the transpose linear system The linear system having the current instance as a transpose matrix is solved by using the LU decomposition Solution is thus realized after a factorization step and a forward/backward substitution step The factorization step is realized only if this was not already done Note that this function modifies the matrix contents is a factorization is performed Naturally if the the matrix has been modified after using this function the user has to refactorize it using the function setLU This is because the class has no non-expensive way to detect if the matrix has been modified The function setLU realizes the factorization step only b Vect instance that contains right-hand side on input and solution on output fact Set true if matrix is to be factorized Default value false if not 0 if solution was normally performed n if the n th pivot is null</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::setDiag</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1DMatrix.html#ac4e475404ab75bd6cfe18a2aeb76a7de</field>
    <field name="keywords">setDiag OFELI::DMatrix::setDiag DMatrix&lt; T_ &gt; setDiag OFELI::DMatrix&lt; real_t &gt;::setDiag DMatrix&lt; real_t &gt;</field>
    <field name="text">Store diagonal entries in a separate internal vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::Axpy</field>
    <field name="args">(T_ a, const Matrix&lt; T_ &gt; *m)</field>
    <field name="url">classOFELI_1_1DMatrix.html#ac7ecd57722b088d883cdb26ac2887270</field>
    <field name="keywords">Axpy OFELI::DMatrix::Axpy DMatrix&lt; T_ &gt; Axpy OFELI::DMatrix&lt; real_t &gt;::Axpy DMatrix&lt; real_t &gt;</field>
    <field name="text">Add to matrix the product of a matrix by a scalar a Scalar to premultiply m Matrix by which a is multiplied The result is added to current instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::DMatrix</field>
    <field name="args">(Mesh &amp;mesh, size_t dof=0, int is_diagonal=false)</field>
    <field name="url">classOFELI_1_1DMatrix.html#acbb7360ae80562139b3be162f7aa6efa</field>
    <field name="keywords">DMatrix OFELI::DMatrix::DMatrix DMatrix&lt; T_ &gt; DMatrix OFELI::DMatrix&lt; real_t &gt;::DMatrix DMatrix&lt; real_t &gt;</field>
    <field name="text">Constructor using mesh to initialize structure of matrix mesh Mesh instance for which matrix graph is determined dof Option parameter with default value 0 dof 1 means that only one degree of freedom for each node or element or side is taken to determine matrix structure The value dof 0 means that matrix structure is determined using all DOFs is_diagonal Boolean argument to say is the matrix is actually a diagonal matrix or not</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::setTransLU</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1DMatrix.html#acff4d2dbffcb0aae37478fa006a65ad2</field>
    <field name="keywords">setTransLU OFELI::DMatrix::setTransLU DMatrix&lt; T_ &gt; setTransLU OFELI::DMatrix&lt; real_t &gt;::setTransLU DMatrix&lt; real_t &gt;</field>
    <field name="text">Factorize the transpose of the matrix LU factorization LU factorization of the transpose of the matrix is realized Note that since this is an in place factorization the contents of the matrix are modified 0 if factorization was normally performed n if the n th pivot is null A flag in this class indicates after factorization that this one has been realized so that if the member function solve is called after this no further factorization is done</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::getRow</field>
    <field name="args">(size_t i, Vect&lt; T_ &gt; &amp;v) const</field>
    <field name="url">classOFELI_1_1DMatrix.html#ad13c1f3109c8fa0ed08605512665553d</field>
    <field name="keywords">getRow OFELI::DMatrix::getRow DMatrix&lt; T_ &gt; getRow OFELI::DMatrix&lt; real_t &gt;::getRow DMatrix&lt; real_t &gt;</field>
    <field name="text">Get i th row vector i Index of row to extract v Reference to Vect instance where the row is stored Vector v does not need to be sized before It is resized in the function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::operator+=</field>
    <field name="args">(const DMatrix&lt; T_ &gt; &amp;m)</field>
    <field name="url">classOFELI_1_1DMatrix.html#ad1b8e980f53b98c9678c043ce0d3c432</field>
    <field name="keywords">operator+= OFELI::DMatrix::operator+= DMatrix&lt; T_ &gt; operator+= OFELI::DMatrix&lt; real_t &gt;::operator+= DMatrix&lt; real_t &gt;</field>
    <field name="text">Operator Add matrix m to current matrix instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::reset</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1DMatrix.html#ad20897c5c8bd47f5d4005989bead0e55</field>
    <field name="keywords">reset OFELI::DMatrix::reset DMatrix&lt; T_ &gt; reset OFELI::DMatrix&lt; real_t &gt;::reset DMatrix&lt; real_t &gt;</field>
    <field name="text">Set matrix to 0 and reset factorization parameter This function must be used if after a factorization the matrix has modified</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::setDiag</field>
    <field name="args">(const T_ &amp;a)</field>
    <field name="url">classOFELI_1_1DMatrix.html#ada43e388310892d120dc1e2e2f9841ea</field>
    <field name="keywords">setDiag OFELI::DMatrix::setDiag DMatrix&lt; T_ &gt; setDiag OFELI::DMatrix&lt; real_t &gt;::setDiag DMatrix&lt; real_t &gt;</field>
    <field name="text">Set matrix as diagonal and assign its diagonal entries as a constant a Value to assign to all diagonal entries</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::DMatrix</field>
    <field name="args">(size_t nr)</field>
    <field name="url">classOFELI_1_1DMatrix.html#ae6a5daf8bc8e4099e3ec44d86762c835</field>
    <field name="keywords">DMatrix OFELI::DMatrix::DMatrix DMatrix&lt; T_ &gt; DMatrix OFELI::DMatrix&lt; real_t &gt;::DMatrix DMatrix&lt; real_t &gt;</field>
    <field name="text">Constructor for a matrix with nr rows and nr columns Matrix entries are set to 0</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::TMult</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;x, Vect&lt; T_ &gt; &amp;y) const</field>
    <field name="url">classOFELI_1_1DMatrix.html#aedfc628db3de37e35aee052137aab9b3</field>
    <field name="keywords">TMult OFELI::DMatrix::TMult DMatrix&lt; T_ &gt; TMult OFELI::DMatrix&lt; real_t &gt;::TMult DMatrix&lt; real_t &gt;</field>
    <field name="text">Multiply transpose of matrix by vector x and add result in y x Vector to add to y y on input vector to add to On output result</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::setRow</field>
    <field name="args">(size_t i, const Vect&lt; T_ &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1DMatrix.html#aef0e68c1876d30d52009f2da7b70bac4</field>
    <field name="keywords">setRow OFELI::DMatrix::setRow DMatrix&lt; T_ &gt; setRow OFELI::DMatrix&lt; real_t &gt;::setRow DMatrix&lt; real_t &gt;</field>
    <field name="text">Copy a given vector to a prescribed row in the matrix i row index to be assigned v Vect instance to copy</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::MultAdd</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;x, Vect&lt; T_ &gt; &amp;y) const</field>
    <field name="url">classOFELI_1_1DMatrix.html#af37985f443ba4d2746059438dfb62b6c</field>
    <field name="keywords">MultAdd OFELI::DMatrix::MultAdd DMatrix&lt; T_ &gt; MultAdd OFELI::DMatrix&lt; real_t &gt;::MultAdd DMatrix&lt; real_t &gt;</field>
    <field name="text">Multiply matrix by vector x and add result to y x Vector to add to y y on input vector to add to On output result</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::setColumn</field>
    <field name="args">(size_t j, const Vect&lt; T_ &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1DMatrix.html#afa6676c0ae519b1521591486fdfd798c</field>
    <field name="keywords">setColumn OFELI::DMatrix::setColumn DMatrix&lt; T_ &gt; setColumn OFELI::DMatrix&lt; real_t &gt;::setColumn DMatrix&lt; real_t &gt;</field>
    <field name="text">Copy a given vector to a prescribed column in the matrix j column index to be assigned v Vect instance to copy</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DMatrix::DMatrix</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1DMatrix.html#afc239829c455123e8aac9f7cae78b968</field>
    <field name="keywords">DMatrix OFELI::DMatrix::DMatrix DMatrix&lt; T_ &gt; DMatrix OFELI::DMatrix&lt; real_t &gt;::DMatrix DMatrix&lt; real_t &gt;</field>
    <field name="text">Default constructor Initializes a zero-dimension matrix</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::DSMatrix</field>
    <field name="url">classOFELI_1_1DSMatrix.html</field>
    <field name="keywords">DSMatrix DSMatrix&lt; real_t &gt;</field>
    <field name="text">To handle symmetric dense matrices This class enables storing and manipulating symmetric dense matrices T_ Data type double float complex&lt;double&gt; Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::DSMatrix</field>
    <field name="args">(const DSMatrix&lt; T_ &gt; &amp;m)</field>
    <field name="url">classOFELI_1_1DSMatrix.html#a006340889cb6a1ae9e2c8f475a6d9789</field>
    <field name="keywords">DSMatrix OFELI::DSMatrix::DSMatrix DSMatrix&lt; T_ &gt; DSMatrix OFELI::DSMatrix&lt; real_t &gt;::DSMatrix DSMatrix&lt; real_t &gt;</field>
    <field name="text">Copy Constructor m DSMatrix instance to copy</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::DSMatrix</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1DSMatrix.html#a08ae6140469ed278cac12a8c19d2484a</field>
    <field name="keywords">DSMatrix OFELI::DSMatrix::DSMatrix DSMatrix&lt; T_ &gt; DSMatrix OFELI::DSMatrix&lt; real_t &gt;::DSMatrix DSMatrix&lt; real_t &gt;</field>
    <field name="text">Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::get</field>
    <field name="args">(size_t i, size_t j) const</field>
    <field name="url">classOFELI_1_1DSMatrix.html#a173c0f972c4eeca07b426587bc2108e5</field>
    <field name="keywords">get OFELI::DSMatrix::get DSMatrix&lt; T_ &gt; get OFELI::DSMatrix&lt; real_t &gt;::get DSMatrix&lt; real_t &gt;</field>
    <field name="text">Return entry i j of matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::add</field>
    <field name="args">(size_t i, size_t j, const T_ &amp;val)</field>
    <field name="url">classOFELI_1_1DSMatrix.html#a17592a65d5fb95d42c07f724dabad759</field>
    <field name="keywords">add OFELI::DSMatrix::add DSMatrix&lt; T_ &gt; add OFELI::DSMatrix&lt; real_t &gt;::add DSMatrix&lt; real_t &gt;</field>
    <field name="text">Add constant to an entry ofthe matrix i row index j column index val value to add to a(i,j)</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::at</field>
    <field name="args">(size_t i, size_t j)</field>
    <field name="url">classOFELI_1_1DSMatrix.html#a276ea1877b89d46c32e207248a4573d7</field>
    <field name="keywords">at OFELI::DSMatrix::at DSMatrix&lt; T_ &gt; at OFELI::DSMatrix&lt; real_t &gt;::at DSMatrix&lt; real_t &gt;</field>
    <field name="text">Return a value of a matrix entry i Row index starts at 1 j Column index starts at 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::solve</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;b, Vect&lt; T_ &gt; &amp;x, bool fact=true)</field>
    <field name="url">classOFELI_1_1DSMatrix.html#a27c662f32ce66be2efa47871358fcf10</field>
    <field name="keywords">solve OFELI::DSMatrix::solve DSMatrix&lt; T_ &gt; solve OFELI::DSMatrix&lt; real_t &gt;::solve DSMatrix&lt; real_t &gt;</field>
    <field name="text">Solve linear system The matrix is factorized using the LDLt Crout decomposition If this one is already factorized no further factorization is performed If the matrix has been modified the user has to refactorize it using the function setLDLt b Vect instance that contains right-hand side x Vect instance that contains solution fact Set true if matrix is to be factorized Default value false if not 0 if solution was normally performed n if the n th pivot is null</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::operator-=</field>
    <field name="args">(const T_ &amp;x)</field>
    <field name="url">classOFELI_1_1DSMatrix.html#a33b1df1ede7b017fa8f0569e94e19617</field>
    <field name="keywords">operator-= OFELI::DSMatrix::operator-= DSMatrix&lt; T_ &gt; operator-= OFELI::DSMatrix&lt; real_t &gt;::operator-= DSMatrix&lt; real_t &gt;</field>
    <field name="text">Operator Subtract constant value x from to all matrix entries</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::getArray</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1DSMatrix.html#a373b436e2bac687e3794bea128f69e99</field>
    <field name="keywords">getArray OFELI::DSMatrix::getArray DSMatrix&lt; T_ &gt; getArray OFELI::DSMatrix&lt; real_t &gt;::getArray DSMatrix&lt; real_t &gt;</field>
    <field name="text">Return matrix as C-Array Matrix is stored row by row Only lower triangle is stored</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::add</field>
    <field name="args">(size_t i, const T_ &amp;val)</field>
    <field name="url">classOFELI_1_1DSMatrix.html#a3c7b029cbe1aca9bea7623ae99274795</field>
    <field name="keywords">add OFELI::DSMatrix::add DSMatrix&lt; T_ &gt; add OFELI::DSMatrix&lt; real_t &gt;::add DSMatrix&lt; real_t &gt;</field>
    <field name="text">Add val to entry i</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::operator=</field>
    <field name="args">(const T_ &amp;x)</field>
    <field name="url">classOFELI_1_1DSMatrix.html#a442562f575365780ef9c6a30f0b5e62f</field>
    <field name="keywords">operator= OFELI::DSMatrix::operator= DSMatrix&lt; T_ &gt; operator= OFELI::DSMatrix&lt; real_t &gt;::operator= DSMatrix&lt; real_t &gt;</field>
    <field name="text">Operator Assign matrix to identity times x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::set</field>
    <field name="args">(size_t i, size_t j, const T_ &amp;val)</field>
    <field name="url">classOFELI_1_1DSMatrix.html#a61cf373a94a5fedbca306e016bc489c9</field>
    <field name="keywords">set OFELI::DSMatrix::set DSMatrix&lt; T_ &gt; set OFELI::DSMatrix&lt; real_t &gt;::set DSMatrix&lt; real_t &gt;</field>
    <field name="text">Assign constant to entry i j of the matrix i row index j column index val value to assign to a(i,j)</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::getColumn</field>
    <field name="args">(size_t j) const</field>
    <field name="url">classOFELI_1_1DSMatrix.html#a633c03c1a0941387fce940cb18d6bb7c</field>
    <field name="keywords">getColumn OFELI::DSMatrix::getColumn DSMatrix&lt; T_ &gt; getColumn OFELI::DSMatrix&lt; real_t &gt;::getColumn DSMatrix&lt; real_t &gt;</field>
    <field name="text">Get j th column vector j Index of column to extract Vect instance where the column is stored Vector v does not need to be sized before It is resized in the function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::Axpy</field>
    <field name="args">(T_ a, const DSMatrix&lt; T_ &gt; &amp;m)</field>
    <field name="url">classOFELI_1_1DSMatrix.html#a71951ea22c5e9d656c2ff6bcabd0850b</field>
    <field name="keywords">Axpy OFELI::DSMatrix::Axpy DSMatrix&lt; T_ &gt; Axpy OFELI::DSMatrix&lt; real_t &gt;::Axpy DSMatrix&lt; real_t &gt;</field>
    <field name="text">Add to matrix the product of a matrix by a scalar a Scalar to premultiply m Matrix by which a is multiplied The result is added to current instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::MultAdd</field>
    <field name="args">(T_ a, const Vect&lt; T_ &gt; &amp;x, Vect&lt; T_ &gt; &amp;y) const</field>
    <field name="url">classOFELI_1_1DSMatrix.html#a7687aa6aa85cfe87635a1c3e56625876</field>
    <field name="keywords">MultAdd OFELI::DSMatrix::MultAdd DSMatrix&lt; T_ &gt; MultAdd OFELI::DSMatrix&lt; real_t &gt;::MultAdd DSMatrix&lt; real_t &gt;</field>
    <field name="text">Multiply matrix by vector a*x and add to y a Constant to multiply by matrix x Vector to multiply by matrix y Vector to add to the result y contains on output the result</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::operator()</field>
    <field name="args">(size_t i, size_t j) const</field>
    <field name="url">classOFELI_1_1DSMatrix.html#a78adc6c13ad0f1d1dedacffe0e80ce63</field>
    <field name="keywords">operator() OFELI::DSMatrix::operator() DSMatrix&lt; T_ &gt; operator() OFELI::DSMatrix&lt; real_t &gt;::operator() DSMatrix&lt; real_t &gt;</field>
    <field name="text">Operator Constant version i Row index j Column index</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::DSMatrix</field>
    <field name="args">(size_t dim)</field>
    <field name="url">classOFELI_1_1DSMatrix.html#a7ba078f0db8e9655216b785022c4b1ce</field>
    <field name="keywords">DSMatrix OFELI::DSMatrix::DSMatrix DSMatrix&lt; T_ &gt; DSMatrix OFELI::DSMatrix&lt; real_t &gt;::DSMatrix DSMatrix&lt; real_t &gt;</field>
    <field name="text">Constructor that for a symmetric matrix with given number of r‡qows dim Number of rows</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::solve</field>
    <field name="args">(Vect&lt; T_ &gt; &amp;b, bool fact=true)</field>
    <field name="url">classOFELI_1_1DSMatrix.html#a85abe8e904adb7fd09103d7b3e8e362d</field>
    <field name="keywords">solve OFELI::DSMatrix::solve DSMatrix&lt; T_ &gt; solve OFELI::DSMatrix&lt; real_t &gt;::solve DSMatrix&lt; real_t &gt;</field>
    <field name="text">Solve linear system The matrix is factorized using the LDLt Crout decomposition If this one is already factorized no further factorization is performed If the matrix has been modified the user has to refactorize it using the function setLDLt b Vect instance that contains right-hand side on input and solution on output fact Set true if matrix is to be factorized Default value false if not 0 if solution was normally performed n if the n th pivot is null</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::setDiag</field>
    <field name="args">(const vector&lt; T_ &gt; &amp;d)</field>
    <field name="url">classOFELI_1_1DSMatrix.html#aa98bbfc7e1ef49f12a4eae45c0d0bf17</field>
    <field name="keywords">setDiag OFELI::DSMatrix::setDiag DSMatrix&lt; T_ &gt; setDiag OFELI::DSMatrix&lt; real_t &gt;::setDiag DSMatrix&lt; real_t &gt;</field>
    <field name="text">Set matrix as diagonal and assign its diagonal entries d Vector entries to assign to matrix diagonal entries</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::operator()</field>
    <field name="args">(size_t i, size_t j)</field>
    <field name="url">classOFELI_1_1DSMatrix.html#aacbbe150d69a1246cb76f24419cae7ac</field>
    <field name="keywords">operator() OFELI::DSMatrix::operator() DSMatrix&lt; T_ &gt; operator() OFELI::DSMatrix&lt; real_t &gt;::operator() DSMatrix&lt; real_t &gt;</field>
    <field name="text">Operator Non constant version i Row index j Column index To modify a value of an entry of the matrix it is safer not to modify both lower and upper triangles Otherwise wrong values will be assigned If not sure use the member functions set or add</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::getRow</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1DSMatrix.html#ab003b67a3b106d85cfba3a314f5c6f5b</field>
    <field name="keywords">getRow OFELI::DSMatrix::getRow DSMatrix&lt; T_ &gt; getRow OFELI::DSMatrix&lt; real_t &gt;::getRow DSMatrix&lt; real_t &gt;</field>
    <field name="text">Get i th row vector i Index of row to extract Vect instance where the row is stored Vector v does not need to be sized before It is resized in the function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::getColumn</field>
    <field name="args">(size_t j, Vect&lt; T_ &gt; &amp;v) const</field>
    <field name="url">classOFELI_1_1DSMatrix.html#ab6da597628711c731d2795d7929c19bf</field>
    <field name="keywords">getColumn OFELI::DSMatrix::getColumn DSMatrix&lt; T_ &gt; getColumn OFELI::DSMatrix&lt; real_t &gt;::getColumn DSMatrix&lt; real_t &gt;</field>
    <field name="text">Get j th column vector j Index of column to extract v Reference to Vect instance where the column is stored Vector v does not need to be sized before It is resized in the function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::Mult</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;x, Vect&lt; T_ &gt; &amp;y) const</field>
    <field name="url">classOFELI_1_1DSMatrix.html#abd45ada90fcf5f88e65ba7a50e36ce49</field>
    <field name="keywords">Mult OFELI::DSMatrix::Mult DSMatrix&lt; T_ &gt; Mult OFELI::DSMatrix&lt; real_t &gt;::Mult DSMatrix&lt; real_t &gt;</field>
    <field name="text">Multiply matrix by vector x and save result in y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::setSize</field>
    <field name="args">(size_t dim)</field>
    <field name="url">classOFELI_1_1DSMatrix.html#ac29a2810da48f84a0cc274a83c21486c</field>
    <field name="keywords">setSize OFELI::DSMatrix::setSize DSMatrix&lt; T_ &gt; setSize OFELI::DSMatrix&lt; real_t &gt;::setSize DSMatrix&lt; real_t &gt;</field>
    <field name="text">Set size number of rows of matrix dim Number of rows and columns</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::setDiag</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1DSMatrix.html#ac4e475404ab75bd6cfe18a2aeb76a7de</field>
    <field name="keywords">setDiag OFELI::DSMatrix::setDiag DSMatrix&lt; T_ &gt; setDiag OFELI::DSMatrix&lt; real_t &gt;::setDiag DSMatrix&lt; real_t &gt;</field>
    <field name="text">Store diagonal entries in a separate internal vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::Axpy</field>
    <field name="args">(T_ a, const Matrix&lt; T_ &gt; *m)</field>
    <field name="url">classOFELI_1_1DSMatrix.html#ac7ecd57722b088d883cdb26ac2887270</field>
    <field name="keywords">Axpy OFELI::DSMatrix::Axpy DSMatrix&lt; T_ &gt; Axpy OFELI::DSMatrix&lt; real_t &gt;::Axpy DSMatrix&lt; real_t &gt;</field>
    <field name="text">Add to matrix the product of a matrix by a scalar a Scalar to premultiply m Matrix by which a is multiplied The result is added to current instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::~DSMatrix</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1DSMatrix.html#acf6975daaae7752bf91aaa02626da792</field>
    <field name="keywords">OFELI::DSMatrix::~DSMatrix DSMatrix&lt; T_ &gt; OFELI::DSMatrix&lt; real_t &gt;::~DSMatrix DSMatrix&lt; real_t &gt;</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::getRow</field>
    <field name="args">(size_t i, Vect&lt; T_ &gt; &amp;v) const</field>
    <field name="url">classOFELI_1_1DSMatrix.html#ad13c1f3109c8fa0ed08605512665553d</field>
    <field name="keywords">getRow OFELI::DSMatrix::getRow DSMatrix&lt; T_ &gt; getRow OFELI::DSMatrix&lt; real_t &gt;::getRow DSMatrix&lt; real_t &gt;</field>
    <field name="text">Get i th row vector i Index of row to extract v Reference to Vect instance where the row is stored Vector v does not need to be sized before It is resized in the function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::setLDLt</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1DSMatrix.html#ad177e53c00ddc5579499a4ae8a67c1ac</field>
    <field name="keywords">setLDLt OFELI::DSMatrix::setLDLt DSMatrix&lt; T_ &gt; setLDLt OFELI::DSMatrix&lt; real_t &gt;::setLDLt DSMatrix&lt; real_t &gt;</field>
    <field name="text">Factorize matrix LDL T 0 if factorization was normally performed n if the n th pivot is null</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::operator=</field>
    <field name="args">(const DSMatrix&lt; T_ &gt; &amp;m)</field>
    <field name="url">classOFELI_1_1DSMatrix.html#ad8745bcf8d77744b35dfc21729390781</field>
    <field name="keywords">operator= OFELI::DSMatrix::operator= DSMatrix&lt; T_ &gt; operator= OFELI::DSMatrix&lt; real_t &gt;::operator= DSMatrix&lt; real_t &gt;</field>
    <field name="text">Operator Copy matrix m to current matrix instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::setDiag</field>
    <field name="args">(const T_ &amp;a)</field>
    <field name="url">classOFELI_1_1DSMatrix.html#ada43e388310892d120dc1e2e2f9841ea</field>
    <field name="keywords">setDiag OFELI::DSMatrix::setDiag DSMatrix&lt; T_ &gt; setDiag OFELI::DSMatrix&lt; real_t &gt;::setDiag DSMatrix&lt; real_t &gt;</field>
    <field name="text">Set matrix as diagonal and assign its diagonal entries as a constant a Value to assign to all diagonal entries</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::operator+=</field>
    <field name="args">(const T_ &amp;x)</field>
    <field name="url">classOFELI_1_1DSMatrix.html#ae2457f0b0153b84242c41488a232bd47</field>
    <field name="keywords">operator+= OFELI::DSMatrix::operator+= DSMatrix&lt; T_ &gt; operator+= OFELI::DSMatrix&lt; real_t &gt;::operator+= DSMatrix&lt; real_t &gt;</field>
    <field name="text">Operator Add constant value x to all matrix entries</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::TMult</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;x, Vect&lt; T_ &gt; &amp;y) const</field>
    <field name="url">classOFELI_1_1DSMatrix.html#aedfc628db3de37e35aee052137aab9b3</field>
    <field name="keywords">TMult OFELI::DSMatrix::TMult DSMatrix&lt; T_ &gt; TMult OFELI::DSMatrix&lt; real_t &gt;::TMult DSMatrix&lt; real_t &gt;</field>
    <field name="text">Multiply transpose of matrix by vector x and add result in y x Vector to add to y y on input vector to add to On output result</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::setRow</field>
    <field name="args">(size_t i, const Vect&lt; T_ &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1DSMatrix.html#aef0e68c1876d30d52009f2da7b70bac4</field>
    <field name="keywords">setRow OFELI::DSMatrix::setRow DSMatrix&lt; T_ &gt; setRow OFELI::DSMatrix&lt; real_t &gt;::setRow DSMatrix&lt; real_t &gt;</field>
    <field name="text">Copy a given vector to a prescribed row in the matrix i row index to be assigned v Vect instance to copy</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::DSMatrix</field>
    <field name="args">(Mesh &amp;mesh, size_t dof=0, int is_diagonal=false)</field>
    <field name="url">classOFELI_1_1DSMatrix.html#af1799398ea24c5d41cc3cdb1e2ecbfa4</field>
    <field name="keywords">DSMatrix OFELI::DSMatrix::DSMatrix DSMatrix&lt; T_ &gt; DSMatrix OFELI::DSMatrix&lt; real_t &gt;::DSMatrix DSMatrix&lt; real_t &gt;</field>
    <field name="text">Constructor using mesh to initialize matrix mesh Mesh instance for which matrix graph is determined dof Option parameter with default value 0 dof 1 means that only one degree of freedom for each node or element or side is taken to determine matrix structure The value dof 0 means that matrix structure is determined using all DOFs is_diagonal Boolean argument to say is the matrix is actually a diagonal matrix or not</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::MultAdd</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;x, Vect&lt; T_ &gt; &amp;y) const</field>
    <field name="url">classOFELI_1_1DSMatrix.html#af37985f443ba4d2746059438dfb62b6c</field>
    <field name="keywords">MultAdd OFELI::DSMatrix::MultAdd DSMatrix&lt; T_ &gt; MultAdd OFELI::DSMatrix&lt; real_t &gt;::MultAdd DSMatrix&lt; real_t &gt;</field>
    <field name="text">Multiply matrix by vector a*x and add result to y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DSMatrix::setColumn</field>
    <field name="args">(size_t j, const Vect&lt; T_ &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1DSMatrix.html#afa6676c0ae519b1521591486fdfd798c</field>
    <field name="keywords">setColumn OFELI::DSMatrix::setColumn DSMatrix&lt; T_ &gt; setColumn OFELI::DSMatrix&lt; real_t &gt;::setColumn DSMatrix&lt; real_t &gt;</field>
    <field name="text">Copy a given vector to a prescribed column in the matrix j column index to be assigned v Vect instance to copy</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Domain</field>
    <field name="url">classOFELI_1_1Domain.html</field>
    <field name="keywords">Domain</field>
    <field name="text">To store and treat finite element geometric information This class is essentially useful to construct data for mesh generators Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::setDim</field>
    <field name="args">(size_t d)</field>
    <field name="url">classOFELI_1_1Domain.html#a049531c926b5a08510b056179c77c596</field>
    <field name="keywords">setDim OFELI::Domain::setDim Domain</field>
    <field name="text">Set space dimension</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::getNbContours</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Domain.html#a14e46fa467756e895419ffd04655c90a</field>
    <field name="keywords">getNbContours OFELI::Domain::getNbContours Domain</field>
    <field name="text">Return number of contours</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::getNbSubDomains</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Domain.html#a182451f14c7f252dc6c75e99fd1b56cd</field>
    <field name="keywords">getNbSubDomains OFELI::Domain::getNbSubDomains Domain</field>
    <field name="text">Return number of sub-domains</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::genMesh</field>
    <field name="args">(string geo_file, string bamg_file, string mesh_file)</field>
    <field name="url">classOFELI_1_1Domain.html#a1957949b0aac281cf45762201aa35b67</field>
    <field name="keywords">genMesh OFELI::Domain::genMesh Domain</field>
    <field name="text">Generate 2 D mesh and save geo bamg and mesh file OFELI format geo_file Geo file bamg_file Bamg file mesh_file File where the generated mesh is saved</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::setFile</field>
    <field name="args">(string file)</field>
    <field name="url">classOFELI_1_1Domain.html#a21f9cb9c9b2d2b1abc8865d9d56613c7</field>
    <field name="keywords">setFile OFELI::Domain::setFile Domain</field>
    <field name="text">Set file containing Domain data</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::genGeo</field>
    <field name="args">(string file)</field>
    <field name="url">classOFELI_1_1Domain.html#a2685e5fd697a7ec8655922dd988c1c36</field>
    <field name="keywords">genGeo OFELI::Domain::genGeo Domain</field>
    <field name="text">Generate geometry file</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::insertRequiredVertex</field>
    <field name="args">(size_t v)</field>
    <field name="url">classOFELI_1_1Domain.html#a28bf621a7ee17fa80169384df280ed6c</field>
    <field name="keywords">insertRequiredVertex OFELI::Domain::insertRequiredVertex Domain</field>
    <field name="text">Insert a required imposed vertex v Label of vertex</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::getNbDOF</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Domain.html#a2e702838dc1b95944fd571e804950aa3</field>
    <field name="keywords">getNbDOF OFELI::Domain::getNbDOF Domain</field>
    <field name="text">Return number of degrees of freedom</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::getMesh</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Domain.html#a33d260bca42fe66a8536f2eac63adc64</field>
    <field name="keywords">getMesh OFELI::Domain::getMesh Domain</field>
    <field name="text">Return reference to generated Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::operator*=</field>
    <field name="args">(real_t a)</field>
    <field name="url">classOFELI_1_1Domain.html#a47cad45a3bc347bdec14b157fd0fd1e7</field>
    <field name="keywords">operator*= OFELI::Domain::operator*= Domain</field>
    <field name="text">Operator Rescale domain coordinates by myltiplying by a factor a Value to multiply by</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::getNbVertices</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Domain.html#a5750242d0acee0978dba9bf1261914cd</field>
    <field name="keywords">getNbVertices OFELI::Domain::getNbVertices Domain</field>
    <field name="text">Return number of vertices</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::insertCircle</field>
    <field name="args">(size_t n1, size_t n2, size_t n3, int c)</field>
    <field name="url">classOFELI_1_1Domain.html#a57ff86a9aade8c1088cd90d15fb62cc8</field>
    <field name="keywords">insertCircle OFELI::Domain::insertCircle Domain</field>
    <field name="text">Insert a circluar arc n1 Label of vertex defining the first end of the arc n2 Label of vertex defining the second end of the arc n3 Label of vertex defining the center of the arc c Code to associate to created nodes Dirichlet or sides Neumann if 0</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::generateMesh</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Domain.html#a621dafed5f8db79ac8d9c7c3f76bcc51</field>
    <field name="keywords">generateMesh OFELI::Domain::generateMesh Domain</field>
    <field name="text">Generate 2 D mesh using the BAMG mesh generator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::genMesh</field>
    <field name="args">(const string &amp;file)</field>
    <field name="url">classOFELI_1_1Domain.html#a6506ab0b46eef60344704e069f6ac5ed</field>
    <field name="keywords">genMesh OFELI::Domain::genMesh Domain</field>
    <field name="text">Generate 2 D mesh and save in file OFELI format file File where the generated mesh is saved</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::getMinCoord</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Domain.html#a70cb44834a0be1f298a7c85d9d700195</field>
    <field name="keywords">getMinCoord OFELI::Domain::getMinCoord Domain</field>
    <field name="text">Return minimum coordinates of vertices</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::getNbHoles</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Domain.html#a7da64df8ae3f65d9ed1ce458ff89464d</field>
    <field name="keywords">getNbHoles OFELI::Domain::getNbHoles Domain</field>
    <field name="text">Return number of holes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::get</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Domain.html#a84a9cd93622aa531274dd4c027f006ce</field>
    <field name="keywords">get OFELI::Domain::get Domain</field>
    <field name="text">Read domain data interactively</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::get</field>
    <field name="args">(const string &amp;file)</field>
    <field name="url">classOFELI_1_1Domain.html#a96eade797601af5c6580816c7e1f7c7c</field>
    <field name="keywords">get OFELI::Domain::get Domain</field>
    <field name="text">Read domain data from a data file file Input file in Domain XML format</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::Domain</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Domain.html#a9f9601f2f55637f70394aa8eea61345a</field>
    <field name="keywords">Domain OFELI::Domain::Domain Domain</field>
    <field name="text">Constructor of a null domain This constructor assigns maximal values of parameters</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::setOutputFile</field>
    <field name="args">(string file)</field>
    <field name="url">classOFELI_1_1Domain.html#aa08dd8bce7fffd6dcb0031ab96bd6063</field>
    <field name="keywords">setOutputFile OFELI::Domain::setOutputFile Domain</field>
    <field name="text">Define output mesh file file String defining output mesh file</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::getDim</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Domain.html#aa217066db3a717424604bab3fcb6ec4b</field>
    <field name="keywords">getDim OFELI::Domain::getDim Domain</field>
    <field name="text">Return space dimension</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::getMaxCoord</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Domain.html#aa72e2f9e4ced92ebb4633e3dbe46b138</field>
    <field name="keywords">getMaxCoord OFELI::Domain::getMaxCoord Domain</field>
    <field name="text">Return maximum coordinates of vertices</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::insertSubDomain</field>
    <field name="args">(size_t ln, int orient, int code)</field>
    <field name="url">classOFELI_1_1Domain.html#aaada95c40da9d4eefc85ad9b4060185c</field>
    <field name="keywords">insertSubDomain OFELI::Domain::insertSubDomain Domain</field>
    <field name="text">Insert subdomain ln Line label orient Orientation 1 or 1 code Subdomain code or reference</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::~Domain</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Domain.html#aab7e32c77383bf3d384c5c1ab492cd2c</field>
    <field name="keywords">OFELI::Domain::~Domain Domain</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::insertVertex</field>
    <field name="args">(real_t x, real_t y, real_t h, int code)</field>
    <field name="url">classOFELI_1_1Domain.html#aacbcb52c47b1aa3d879f2ed2dc70c63e</field>
    <field name="keywords">insertVertex OFELI::Domain::insertVertex Domain</field>
    <field name="text">Insert a vertex x x-coordinate of vertex y y-coordinate of vertex h mesh size around vertex code code of coordinate</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::getMinh</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Domain.html#ab9860f25b911ddec9994b13fd17f2d01</field>
    <field name="keywords">getMinh OFELI::Domain::getMinh Domain</field>
    <field name="text">Return minimal value of mesh size</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::insertRequiredEdge</field>
    <field name="args">(size_t e)</field>
    <field name="url">classOFELI_1_1Domain.html#abad127634caf5ea8f46c45b37a8e9961</field>
    <field name="keywords">insertRequiredEdge OFELI::Domain::insertRequiredEdge Domain</field>
    <field name="text">Insert a required imposed edge or line e Label of line</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::getNbLines</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Domain.html#abcd46112fe7f8a21b6ccd0f5aaba27a8</field>
    <field name="keywords">getNbLines OFELI::Domain::getNbLines Domain</field>
    <field name="text">Return number of lines</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::insertVertex</field>
    <field name="args">(real_t x, real_t y, real_t z, real_t h, int code)</field>
    <field name="url">classOFELI_1_1Domain.html#abedd32e9d3d46917571e61fa131da79f</field>
    <field name="keywords">insertVertex OFELI::Domain::insertVertex Domain</field>
    <field name="text">Insert a vertex 3 D case x x-coordinate of vertex y y-coordinate of vertex z z-coordinate of vertex h mesh size around vertex code code of coordinate</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::Domain</field>
    <field name="args">(const string &amp;file)</field>
    <field name="url">classOFELI_1_1Domain.html#ac94b4ca4829b0c0e9c372775d99989f4</field>
    <field name="keywords">Domain OFELI::Domain::Domain Domain</field>
    <field name="text">Constructor with an input file file Input file in the XML format defining the domain</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::insertLine</field>
    <field name="args">(size_t n1, size_t n2, int c)</field>
    <field name="url">classOFELI_1_1Domain.html#ad2b8b2489795fd61a4c512f2fd1d875d</field>
    <field name="keywords">insertLine OFELI::Domain::insertLine Domain</field>
    <field name="text">Insert a straight line n1 Label of the first vertex of line n2 Label of the second vertex of line c Code to associate to created nodes Dirichlet or sides Neumann if 0</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::insertSubDomain</field>
    <field name="args">(size_t n, int code)</field>
    <field name="url">classOFELI_1_1Domain.html#ad8ae5739abdc5fa019985e028675806e</field>
    <field name="keywords">insertSubDomain OFELI::Domain::insertSubDomain Domain</field>
    <field name="text">Insert subdomain n code</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::genMesh</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Domain.html#ad96253e6fb9c53182d96cba4739b20fb</field>
    <field name="keywords">genMesh OFELI::Domain::genMesh Domain</field>
    <field name="text">Generate 2 D mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::setNbDOF</field>
    <field name="args">(size_t n)</field>
    <field name="url">classOFELI_1_1Domain.html#adb53c731048031345289f952f71209f6</field>
    <field name="keywords">setNbDOF OFELI::Domain::setNbDOF Domain</field>
    <field name="text">Set number of degrees of freedom</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::setNbDOF</field>
    <field name="args">(int nb_dof)</field>
    <field name="url">classOFELI_1_1Domain.html#ae70ec2fc295b0ee386ce94a60dcfe949</field>
    <field name="keywords">setNbDOF OFELI::Domain::setNbDOF Domain</field>
    <field name="text">Set Number of degrees of freedom per node</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::insertLine</field>
    <field name="args">(size_t n1, size_t n2, int dc, int nc)</field>
    <field name="url">classOFELI_1_1Domain.html#ae9644b860a18780bd26554ca92aed2db</field>
    <field name="keywords">insertLine OFELI::Domain::insertLine Domain</field>
    <field name="text">Insert a straight line n1 Label of the first vertex of line n2 Label of the second vertex of line dc Code to associate to created nodes Dirichlet nc Code to associate to created sides Neumann</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Domain::insertCircle</field>
    <field name="args">(size_t n1, size_t n2, size_t n3, int dc, int nc)</field>
    <field name="url">classOFELI_1_1Domain.html#af5d0fcac614129292d98390e3dbeb637</field>
    <field name="keywords">insertCircle OFELI::Domain::insertCircle Domain</field>
    <field name="text">Insert a circluar arc n1 Label of vertex defining the first end of the arc n2 Label of vertex defining the second end of the arc n3 Label of vertex defining the center of the arc dc Code to associate to created nodes Dirichlet nc Code to associate to created sides Neumann</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::EC2D1T3</field>
    <field name="url">classOFELI_1_1EC2D1T3.html</field>
    <field name="keywords">EC2D1T3</field>
    <field name="text">Eddy current problems in 2 D domains using solenoidal approximation Builds finite element arrays for time harmonic eddy current problems in 2 D domains with solenoidal configurations Magnetic field has only one nonzero component Magnetic field is constant in the vacuum and then zero in the outer vacuum Uses 3 Node triangles The unknown is the time-harmonic magnetic induction complex valued but stored in 2 degree of freedom real-valued vector Therefore mesh must be defined with 2 degrees of freedom per node Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EC2D1T3::Joule</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1EC2D1T3.html#a2037770b94084f7dc2089fe3c9f799e6</field>
    <field name="keywords">Joule OFELI::EC2D1T3::Joule EC2D1T3</field>
    <field name="text">Compute Joule density in element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EC2D1T3::setData</field>
    <field name="args">(real_t omega, real_t volt)</field>
    <field name="url">classOFELI_1_1EC2D1T3.html#a29983d2bbe759ccbbf9f48d924fafd05</field>
    <field name="keywords">setData OFELI::EC2D1T3::setData EC2D1T3</field>
    <field name="text">Define data for equation omega Angular frequency volt Voltage</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EC2D1T3::IntegMF</field>
    <field name="args">(real_t &amp;vr, real_t &amp;vi)</field>
    <field name="url">classOFELI_1_1EC2D1T3.html#a67ec028eed371bb07ca3bc2dcb40f902</field>
    <field name="keywords">IntegMF OFELI::EC2D1T3::IntegMF EC2D1T3</field>
    <field name="text">Add element integral contribution</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EC2D1T3::EC2D1T3</field>
    <field name="args">(Mesh &amp;ms, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1EC2D1T3.html#a6850571c352bcc70d85144a7e5d6a190</field>
    <field name="keywords">EC2D1T3 OFELI::EC2D1T3::EC2D1T3 EC2D1T3</field>
    <field name="text">Constructor using mesh and solution vector ms Mesh instance u Reference to solution vector instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EC2D1T3::build</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1EC2D1T3.html#a7740c7ab195c03ac140f1f75f633470f</field>
    <field name="keywords">build OFELI::EC2D1T3::build EC2D1T3</field>
    <field name="text">Build the linear system of equations Before using this function one must have properly selected appropriate options for The choice of a steady state or transient analysis By default the analysis is stationary In the case of transient analysis the choice of a time integration scheme and a lumped or consistent capacity matrix If transient analysis is chosen the lumped capacity matrix option is chosen by default and the implicit Euler scheme is used by default for time integration</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EC2D1T3::EC2D1T3</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1EC2D1T3.html#ab638033b9ad8530248bbbef11dfd38a6</field>
    <field name="keywords">EC2D1T3 OFELI::EC2D1T3::EC2D1T3 EC2D1T3</field>
    <field name="text">Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EC2D1T3::VacuumArea</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1EC2D1T3.html#ad72794a6ed20f261ab690830abb3ccee</field>
    <field name="keywords">VacuumArea OFELI::EC2D1T3::VacuumArea EC2D1T3</field>
    <field name="text">Add contribution to vacuum area calculation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EC2D1T3::EC2D1T3</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1EC2D1T3.html#adaea309cdd252646e9be99bb1948bf58</field>
    <field name="keywords">EC2D1T3 OFELI::EC2D1T3::EC2D1T3 EC2D1T3</field>
    <field name="text">Constructor using mesh ms Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EC2D1T3::~EC2D1T3</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1EC2D1T3.html#adca0e5a01e47556f801da6f15297e599</field>
    <field name="keywords">OFELI::EC2D1T3::~EC2D1T3 EC2D1T3</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EC2D1T3::Electric</field>
    <field name="args">(real_t coef=1.)</field>
    <field name="url">classOFELI_1_1EC2D1T3.html#ae084a5bbc907cd30e354786d52a2ed8c</field>
    <field name="keywords">Electric OFELI::EC2D1T3::Electric EC2D1T3</field>
    <field name="text">Add electric contribution to matrix coef Coefficient to multiply by Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EC2D1T3::Magnetic</field>
    <field name="args">(real_t coef=1.)</field>
    <field name="url">classOFELI_1_1EC2D1T3.html#ae96fba287155ef1ab77778cb006efcc3</field>
    <field name="keywords">Magnetic OFELI::EC2D1T3::Magnetic EC2D1T3</field>
    <field name="text">Add magnetic contribution to matrix coef Coefficient to multiply by Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EC2D1T3::IntegND</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;h, real_t &amp;vr, real_t &amp;vi)</field>
    <field name="url">classOFELI_1_1EC2D1T3.html#af2e22ffe435f7aeaaacad73747acf585</field>
    <field name="keywords">IntegND OFELI::EC2D1T3::IntegND EC2D1T3</field>
    <field name="text">Compute integral of normal derivative on edge h Vect instance containing magnetic field at nodes vr Real part of the integral vi Imaginary part of the integral This member function is to be called within each element it detects boundary sides as the ones with nonzero code</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::EC2D2T3</field>
    <field name="url">classOFELI_1_1EC2D2T3.html</field>
    <field name="keywords">EC2D2T3</field>
    <field name="text">Eddy current problems in 2 D domains using transversal approximation Builds finite element arrays for time harmonic eddy current problems in 2 D domains with transversal configurations Magnetic field has two nonzero components Uses 3 Node triangles The unknown is the time-harmonic scalar potential complex valued Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EC2D2T3::EC2D2T3</field>
    <field name="args">(const Side *sd1, const Side *sd2)</field>
    <field name="url">classOFELI_1_1EC2D2T3.html#a259e5bf808ee8e4230eae838995bb3b9</field>
    <field name="keywords">EC2D2T3 OFELI::EC2D2T3::EC2D2T3 EC2D2T3</field>
    <field name="text">Constructor using two side data</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EC2D2T3::FEBlock</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1EC2D2T3.html#a5ff84b0bf38294da5fc00d1baf6ed51d</field>
    <field name="keywords">FEBlock OFELI::EC2D2T3::FEBlock EC2D2T3</field>
    <field name="text">Compute Finite Element Diagonal Block</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EC2D2T3::EC2D2T3</field>
    <field name="args">(Mesh &amp;ms, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1EC2D2T3.html#a6e069756e6521fe551232f1b17fc1222</field>
    <field name="keywords">EC2D2T3 OFELI::EC2D2T3::EC2D2T3 EC2D2T3</field>
    <field name="text">Constructor using mesh and solution vector ms Mesh instance u Vect instance containing solution</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EC2D2T3::EC2D2T3</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1EC2D2T3.html#a7d005aeb56db852062952db0f56bdba1</field>
    <field name="keywords">EC2D2T3 OFELI::EC2D2T3::EC2D2T3 EC2D2T3</field>
    <field name="text">Default Constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EC2D2T3::MagneticPressure</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1EC2D2T3.html#a81f4b4015cf18053353c774e0de522dd</field>
    <field name="keywords">MagneticPressure OFELI::EC2D2T3::MagneticPressure EC2D2T3</field>
    <field name="text">Compute magnetic pressure in element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EC2D2T3::RHS</field>
    <field name="args">(real_t coef=1.)</field>
    <field name="url">classOFELI_1_1EC2D2T3.html#a9ef7052de7c85f35b3e4fe2c505502e4</field>
    <field name="keywords">RHS OFELI::EC2D2T3::RHS EC2D2T3</field>
    <field name="text">Compute Contribution to Right-Hand Side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EC2D2T3::BEBlocks</field>
    <field name="args">(size_t n1, size_t n2, SpMatrix&lt; real_t &gt; &amp;L, SpMatrix&lt; real_t &gt; &amp;U, SpMatrix&lt; real_t &gt; &amp;D)</field>
    <field name="url">classOFELI_1_1EC2D2T3.html#ab51a5a5919ea40a97f7b61ebd25cf371</field>
    <field name="keywords">BEBlocks OFELI::EC2D2T3::BEBlocks EC2D2T3</field>
    <field name="text">Compute boundary element blocks</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EC2D2T3::Constant</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;u, complex_t &amp;I)</field>
    <field name="url">classOFELI_1_1EC2D2T3.html#ad6f1bb92ec6451176f2261f233c1d7d2</field>
    <field name="keywords">Constant OFELI::EC2D2T3::Constant EC2D2T3</field>
    <field name="text">Compute constant to multiply by potential</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EC2D2T3::EC2D2T3</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1EC2D2T3.html#aed2b2a1f8583202dc0d0a51a24a33825</field>
    <field name="keywords">EC2D2T3 OFELI::EC2D2T3::EC2D2T3 EC2D2T3</field>
    <field name="text">Constructor using mesh ms Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EC2D2T3::~EC2D2T3</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1EC2D2T3.html#afbd6e48693085b960528d10f5a950c04</field>
    <field name="keywords">OFELI::EC2D2T3::~EC2D2T3 EC2D2T3</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Edge</field>
    <field name="url">classOFELI_1_1Edge.html</field>
    <field name="keywords">Edge</field>
    <field name="text">To describe an edge Defines an edge of a 3 D finite element mesh The edges are given in particular by a list of nodes Each node can be accessed by the member function getPtrNode Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Edge::isOnBoundary</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Edge.html#a070f283bd5bcab578a24fab4215d8d36</field>
    <field name="keywords">isOnBoundary OFELI::Edge::isOnBoundary Edge</field>
    <field name="text">Say if current edge is a boundary edge or not Note this information is available only if boundary edges were determined See class Mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Edge::getFirstDOF</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Edge.html#a15c86d73e9480dad550d2b6ba6f45c52</field>
    <field name="keywords">getFirstDOF OFELI::Edge::getFirstDOF Edge</field>
    <field name="text">Return number of first dof of node</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Edge::setDOF</field>
    <field name="args">(size_t &amp;first_dof, size_t nb_dof)</field>
    <field name="url">classOFELI_1_1Edge.html#a256faa817829ee737c4d15145f207cf8</field>
    <field name="keywords">setDOF OFELI::Edge::setDOF Edge</field>
    <field name="text">Define number of DOF first_dof Label of the first DOF in input that is actualized nb_dof Number of DOF</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Edge::getNbDOF</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Edge.html#a2e702838dc1b95944fd571e804950aa3</field>
    <field name="keywords">getNbDOF OFELI::Edge::getNbDOF Edge</field>
    <field name="text">Return number of DOF</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Edge::getNeighborSide</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Edge.html#a39fe8c896a9d537ebaa9664c8a6107b7</field>
    <field name="keywords">getNeighborSide OFELI::Edge::getNeighborSide Edge</field>
    <field name="text">Return pointer to neighbor i-th side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Edge::AddNeighbor</field>
    <field name="args">(Side *sd)</field>
    <field name="url">classOFELI_1_1Edge.html#a45ae8aab4dc9d3563d862c5c9f4bff10</field>
    <field name="keywords">AddNeighbor OFELI::Edge::AddNeighbor Edge</field>
    <field name="text">Add side pointed by sd to list of edge sides</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Edge::Add</field>
    <field name="args">(Node *node)</field>
    <field name="url">classOFELI_1_1Edge.html#a48bb768563a8b7f456751ec92a901a25</field>
    <field name="keywords">Add OFELI::Edge::Add Edge</field>
    <field name="text">Insert a node at end of list of nodes of edge</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Edge::getDOF</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Edge.html#a5454f38fe3a796017f364246f7e3ed5a</field>
    <field name="keywords">getDOF OFELI::Edge::getDOF Edge</field>
    <field name="text">Return label of i th DOF</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Edge::setLabel</field>
    <field name="args">(size_t i)</field>
    <field name="url">classOFELI_1_1Edge.html#a55b14e23cc522bf215f3da3a47cfe74f</field>
    <field name="keywords">setLabel OFELI::Edge::setLabel Edge</field>
    <field name="text">Assign label of edge</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Edge::getCode</field>
    <field name="args">(size_t dof=1) const</field>
    <field name="url">classOFELI_1_1Edge.html#a60214933ce428b4380802fc97666ffcc</field>
    <field name="keywords">getCode OFELI::Edge::getCode Edge</field>
    <field name="text">Return code for a given DOF of node Default value is 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Edge::~Edge</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Edge.html#a6620f5394586ae49fffc5aec0d872b67</field>
    <field name="keywords">OFELI::Edge::~Edge Edge</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Edge::getNodeLabel</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Edge.html#a7acd721132e595cb11316c41a77b5bf8</field>
    <field name="keywords">getNodeLabel OFELI::Edge::getNodeLabel Edge</field>
    <field name="text">Return node label i Local label of node for which global label is returned</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Edge::getNbEq</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Edge.html#a7e81ee9c88f36ed678b711aaf77fcfb1</field>
    <field name="keywords">getNbEq OFELI::Edge::getNbEq Edge</field>
    <field name="text">Return number of edge equations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Edge::operator()</field>
    <field name="args">(size_t i)</field>
    <field name="url">classOFELI_1_1Edge.html#a814d258c0c15a61b33baa91879b800c4</field>
    <field name="keywords">operator() OFELI::Edge::operator() Edge</field>
    <field name="text">Operator Returns pointer to node of local label i</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Edge::setCode</field>
    <field name="args">(size_t dof, int code)</field>
    <field name="url">classOFELI_1_1Edge.html#a83a8351cc27666594d7d7c2850556ccf</field>
    <field name="keywords">setCode OFELI::Edge::setCode Edge</field>
    <field name="text">Assign code code to DOF number dof dof index of dof for assignment code Value of code to assign</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Edge::getLabel</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Edge.html#a893a23d685358e3dd02c8d834eafba83</field>
    <field name="keywords">getLabel OFELI::Edge::getLabel Edge</field>
    <field name="text">Return label of edge</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Edge::Edge</field>
    <field name="args">(size_t label)</field>
    <field name="url">classOFELI_1_1Edge.html#a8ff2527441ef8d5437e735b8824fa103</field>
    <field name="keywords">Edge OFELI::Edge::Edge Edge</field>
    <field name="text">Constructor with label Define an edge by giving its label</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Edge::Edge</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Edge.html#a91715a2ea8b8478224859ee6ee42ed87</field>
    <field name="keywords">Edge OFELI::Edge::Edge Edge</field>
    <field name="text">Default Constructor Initializes data to zero</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Edge::DOF</field>
    <field name="args">(size_t i, size_t dof)</field>
    <field name="url">classOFELI_1_1Edge.html#aa1a9657431763667147be7d405317a14</field>
    <field name="keywords">DOF OFELI::Edge::DOF Edge</field>
    <field name="text">Define label of DOF i DOF index dof Its label</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Edge::Edge</field>
    <field name="args">(const Edge &amp;ed)</field>
    <field name="url">classOFELI_1_1Edge.html#ac6ed88d767f39be2d2454941df2d57b6</field>
    <field name="keywords">Edge OFELI::Edge::Edge Edge</field>
    <field name="text">Copy constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Edge::n</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Edge.html#ac88f0961aa7ed7c7415550ab2cad49c8</field>
    <field name="keywords">n OFELI::Edge::n Edge</field>
    <field name="text">Return label of edge</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Edge::setOnBoundary</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Edge.html#ad742fa16927ed3e44c84a6f0b771a211</field>
    <field name="keywords">setOnBoundary OFELI::Edge::setOnBoundary Edge</field>
    <field name="text">Say that the edge is on the boundary</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Edge::getPtrNode</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Edge.html#ae588acd710c421ee332541c1d469852a</field>
    <field name="keywords">getPtrNode OFELI::Edge::getPtrNode Edge</field>
    <field name="text">List of element nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Edge::operator()</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Edge.html#ae88ca107de28ab4461295b0de66c4e7b</field>
    <field name="keywords">operator() OFELI::Edge::operator() Edge</field>
    <field name="text">Operator Return pointer to node of local label i</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Edge::setNbDOF</field>
    <field name="args">(size_t nb_dof)</field>
    <field name="url">classOFELI_1_1Edge.html#af52167e486a54757c53c69c0f50123c8</field>
    <field name="keywords">setNbDOF OFELI::Edge::setNbDOF Edge</field>
    <field name="text">Define number of DOF of edge</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Edge::setFirstDOF</field>
    <field name="args">(size_t n)</field>
    <field name="url">classOFELI_1_1Edge.html#afccb14e6bc10f074283b92506c13947d</field>
    <field name="keywords">setFirstDOF OFELI::Edge::setFirstDOF Edge</field>
    <field name="text">Define First DOF</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::EdgeList</field>
    <field name="url">classOFELI_1_1EdgeList.html</field>
    <field name="keywords">EdgeList</field>
    <field name="text">Class to construct a list of edges having some common properties This class enables choosing multiple selection criteria by using function select However the intersection of these properties must be empty Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EdgeList::~EdgeList</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1EdgeList.html#a238ba70a0778ed2a7869d5f3bdc9ea9d</field>
    <field name="keywords">OFELI::EdgeList::~EdgeList EdgeList</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EdgeList::selectCode</field>
    <field name="args">(int code, int dof=1)</field>
    <field name="url">classOFELI_1_1EdgeList.html#a35661429fc740a9ecaef16a654df272e</field>
    <field name="keywords">selectCode OFELI::EdgeList::selectCode EdgeList</field>
    <field name="text">Select edges having a given code for a given degree of freedom code Code that edges share dof Degree of Freedom label Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EdgeList::top</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1EdgeList.html#a38e8fcffc1e158b30d9d72845d92ac57</field>
    <field name="keywords">top OFELI::EdgeList::top EdgeList</field>
    <field name="text">Reset list of edges at its top position Non constant version</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EdgeList::EdgeList</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1EdgeList.html#a52af06ad481fb593d1709d46201bc2c3</field>
    <field name="keywords">EdgeList OFELI::EdgeList::EdgeList EdgeList</field>
    <field name="text">Constructor using a Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EdgeList::top</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1EdgeList.html#a6a8d8a56b30458682d94bd05d6bbf7aa</field>
    <field name="keywords">top OFELI::EdgeList::top EdgeList</field>
    <field name="text">Reset list of edges at its top position Constant version</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EdgeList::get</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1EdgeList.html#a6af2585757ef861403401b8b1bce9c18</field>
    <field name="keywords">get OFELI::EdgeList::get EdgeList</field>
    <field name="text">Return pointer to current edge and move to next one Constant version</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EdgeList::getNbEdges</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1EdgeList.html#abc3e92499595b690f4d4645e0163df96</field>
    <field name="keywords">getNbEdges OFELI::EdgeList::getNbEdges EdgeList</field>
    <field name="text">Return number of selected edges</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EdgeList::get</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1EdgeList.html#afb7647c99b09e35782607fdb76fcda60</field>
    <field name="keywords">get OFELI::EdgeList::get EdgeList</field>
    <field name="text">Return pointer to current edge and move to next one Non constant version</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EdgeList::unselectCode</field>
    <field name="args">(int code, int dof=1)</field>
    <field name="url">classOFELI_1_1EdgeList.html#afd4634dbd776b50714209695e2aafcdd</field>
    <field name="keywords">unselectCode OFELI::EdgeList::unselectCode EdgeList</field>
    <field name="text">Unselect edges having a given code for a given degree of freedom code Code of edges to exclude dof Degree of Freedom label Default 1</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::EigenProblemSolver</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html</field>
    <field name="keywords">EigenProblemSolver</field>
    <field name="text">Class to find eigenvalues and corresponding eigenvectors of a given matrix in a generalized eigenproblem i.e Find scalars l and non-null vectors v such that K v l M v where K and M are symmetric matrices The eigenproblem can be originated from a PDE For this we will refer to the matrices K and M as Stiffness and Mass matrices respectively Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::checkSturm</field>
    <field name="args">(int &amp;nb_found, int &amp;nb_lost)</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#a02be55a9e251862863a436ae28385e15</field>
    <field name="keywords">checkSturm OFELI::EigenProblemSolver::checkSturm EigenProblemSolver</field>
    <field name="text">Check how many eigenvalues have been found using Sturm sequence method nb_found number of eigenvalues actually found nb_lost number of eigenvalues missing 0 Successful completion of subroutine 1 No convergent eigenvalues found</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::SAssembly</field>
    <field name="args">(const Side &amp;sd, real_t *sK)</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#a17af543e7b85e37d57de58d955812fb2</field>
    <field name="keywords">SAssembly OFELI::EigenProblemSolver::SAssembly EigenProblemSolver</field>
    <field name="text">Assemble side arrays into global matrix and right-hand side This member function is to be called from finite element equation classes sd Reference to Side class sK Pointer to side stiffness</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::setSubspaceDimension</field>
    <field name="args">(int dim)</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#a1bf65d566473724abe4d143556354af0</field>
    <field name="keywords">setSubspaceDimension OFELI::EigenProblemSolver::setSubspaceDimension EigenProblemSolver</field>
    <field name="text">Define the subspace dimension dim Subspace dimension Must be larger or equal to the number of wanted eigenvalues By default this value will be set to the number of wanted eigenvalues</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::setNbEigv</field>
    <field name="args">(int n)</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#a1d8989efc7e98556ba20fbdaa98ff078</field>
    <field name="keywords">setNbEigv OFELI::EigenProblemSolver::setNbEigv EigenProblemSolver</field>
    <field name="text">Set number of extracted eigenvalues This function is useful for the subspace method only n Number of eigenvalues to compute Must be at most equal to the matrix size</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::getEigenValue</field>
    <field name="args">(int n, int i=1) const</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#a2149e0ac0c10d03310834b084572aa84</field>
    <field name="keywords">getEigenValue OFELI::EigenProblemSolver::getEigenValue EigenProblemSolver</field>
    <field name="text">Return the n-th eigenvalue n Index of eigenvalue must be 0 i i 1 Real part i 2 Imaginary part Default 1 Eigenvalue</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::EigenProblemSolver</field>
    <field name="args">(DMatrix&lt; real_t &gt; &amp;A, bool eigv=false)</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#a276821531cf6f90e18a70fb0d3565aed</field>
    <field name="keywords">EigenProblemSolver OFELI::EigenProblemSolver::EigenProblemSolver EigenProblemSolver</field>
    <field name="text">Constructor for a dense unsymmetric matrix that computes the eigenvalues This constructor solves in place the eigenvalues problem and stores them in a vector The eigenvectors can be obtained by calling the member function getEigenVector Eigenvalue extraction uses the reduction to Hessenberg form of the matrix A Matrix for which eigenmodes are sought eigv Switch to compute or not eigenvectors Default false All eigenvalues are extracted</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::set</field>
    <field name="args">(EigenMethod m, bool sym)</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#a448c660f6646a802de4442d8ffceeee2</field>
    <field name="keywords">set OFELI::EigenProblemSolver::set EigenProblemSolver</field>
    <field name="text">Set numerical method for eigenvalue computation m Numerical method to compute eigenvalues SUBSPACE Subspace iteration method Valid for symmetric matrices only QR QR method Reduction to Hessenberg form sym Boolean variable to say if matrix is symmetric or not</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::setMatrix</field>
    <field name="args">(SkSMatrix&lt; real_t &gt; &amp;K, SkSMatrix&lt; real_t &gt; &amp;M)</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#a4a55cb096a0f0507409268249ebd74cb</field>
    <field name="keywords">setMatrix OFELI::EigenProblemSolver::setMatrix EigenProblemSolver</field>
    <field name="text">Set matrix instances Symmetric matrices This function is to be used when the default constructor is applied Case where the mass matrix is consistent K Stiffness matrix instance M Mass matrix instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::Assembly</field>
    <field name="args">(const Element &amp;el, real_t *eK, real_t *eM)</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#a4b501ad5c2dcfbda286f87bcc7b91071</field>
    <field name="keywords">Assembly OFELI::EigenProblemSolver::Assembly EigenProblemSolver</field>
    <field name="text">Assemble element arrays into global matrices This member function is to be called from finite element equation classes el Reference to Element class eK Pointer to element stiffness or assimilated matrix eM Pointer to element mass or assimilated matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::EigenProblemSolver</field>
    <field name="args">(SkSMatrix&lt; real_t &gt; &amp;K, SkSMatrix&lt; real_t &gt; &amp;M, int n=0)</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#a4bf75d610c3ed725d26f353be0367d12</field>
    <field name="keywords">EigenProblemSolver OFELI::EigenProblemSolver::EigenProblemSolver EigenProblemSolver</field>
    <field name="text">Constructor for Symmetric Skyline Matrices K matrix M matrix n Number of eigenvalues to extract By default all eigenvalues are computed The generalized eigenvalue problem is defined by Kx aMx where K and M are referred to as stiffness and mass matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::getEigenVector</field>
    <field name="args">(int n, Vect&lt; real_t &gt; &amp;vr, Vect&lt; real_t &gt; &amp;vi) const</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#a6061edbf1f75ab71aa82061759f41faf</field>
    <field name="keywords">getEigenVector OFELI::EigenProblemSolver::getEigenVector EigenProblemSolver</field>
    <field name="text">Return the n-th eigenvector in the case of complex eigenvectors n Label of eigenvector They are stored in the order of eigenvalues vr Vect instance where the real part of the eigenvector is stored vi Vect instance where the imaginary part of the eigenvector is stored</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::EigenProblemSolver</field>
    <field name="args">(SkSMatrix&lt; real_t &gt; &amp;K, Vect&lt; real_t &gt; &amp;M, int n=0)</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#a747fde51fa6461c5491e2d477dace469</field>
    <field name="keywords">EigenProblemSolver OFELI::EigenProblemSolver::EigenProblemSolver EigenProblemSolver</field>
    <field name="text">Constructor for Symmetric Skyline Matrices K matrix M Diagonal matrix stored as a Vect instance n Number of eigenvalues to extract By default all eigenvalues are computed The generalized eigenvalue problem is defined by Kx aMx where K and M are referred to as stiffness and mass matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::runSubSpace</field>
    <field name="args">(size_t nb_eigv, size_t ss_dim=0)</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#a7dfb0fdbc4302290260c4886cb3291ea</field>
    <field name="keywords">runSubSpace OFELI::EigenProblemSolver::runSubSpace EigenProblemSolver</field>
    <field name="text">Run the subspace iteration solver This function rune the Bathe subspace iteration method nb_eigv Number of eigenvalues to be extracted ss_dim Subspace dimension Must be at least equal to the number eigenvalues to seek Default nb_eigv 1 Normal execution Convergence has been achieved 2 Convergence for eigenvalues has not been attained</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::EigenProblemSolver</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#a80c762c005679ddef39d585569ceef24</field>
    <field name="keywords">EigenProblemSolver OFELI::EigenProblemSolver::EigenProblemSolver EigenProblemSolver</field>
    <field name="text">Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::EigenProblemSolver</field>
    <field name="args">(DMatrix&lt; real_t &gt; &amp;A, Vect&lt; real_t &gt; &amp;evr, Vect&lt; real_t &gt; &amp;evi, bool eigv=false)</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#a8803de9d9d7dc547d4b683a7c04805b0</field>
    <field name="keywords">EigenProblemSolver OFELI::EigenProblemSolver::EigenProblemSolver EigenProblemSolver</field>
    <field name="text">Constructor for a dense matrix that compute the eigenvalues This constructor solves in place the eigenvalues problem and stores them separately in real and imaginary part vectors Extraction of eigenvalues and eigenvectors uses the QR method after transforming the matrix in Hessenberg form The eigenvectors can be obtained by calling the member function getEigenVector A Matrix for which eigenmodes are sought evr Vector containing real parts of eigenvalues evi Vector containing imaginary parts of eigenvalues eigv Switch to say if eigenvectors are to be computed Default false The vectors evr and evi do not need to be sized before</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::setMatrix</field>
    <field name="args">(Matrix&lt; real_t &gt; *K, Matrix&lt; real_t &gt; *M)</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#a8e69c9a65665a815ec38e61c3a949924</field>
    <field name="keywords">setMatrix OFELI::EigenProblemSolver::setMatrix EigenProblemSolver</field>
    <field name="text">Set pointers to matrix instances This function is to be used when the default constructor is applied Case where the mass matrix is consistent K Stiffness matrix instance pointer M Mass matrix instance pointer</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::setTolerance</field>
    <field name="args">(real_t eps)</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#a947407f933798b110a9135a64e2443af</field>
    <field name="keywords">setTolerance OFELI::EigenProblemSolver::setTolerance EigenProblemSolver</field>
    <field name="text">set tolerance value eps Convergence tolerance for eigenvalues Default 1.e 8</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::setMaxIter</field>
    <field name="args">(int max_it)</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#a9e6d15777f4c9d95999313bafae5e5e7</field>
    <field name="keywords">setMaxIter OFELI::EigenProblemSolver::setMaxIter EigenProblemSolver</field>
    <field name="text">set maximal number of iterations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::setMatrix</field>
    <field name="args">(SkSMatrix&lt; real_t &gt; &amp;K, Vect&lt; real_t &gt; &amp;M)</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#aa6cfb54a84ea50e8f9f19f21da1df3b3</field>
    <field name="keywords">setMatrix OFELI::EigenProblemSolver::setMatrix EigenProblemSolver</field>
    <field name="text">Set matrix instances Symmetric matrices This function is to be used when the default constructor is applied Case where the mass matrix is lumped diagonal and stored in a vector K Stiffness matrix instance M Mass matrix instance where diagonal terms are stored as a vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::EigenProblemSolver</field>
    <field name="args">(DSMatrix&lt; real_t &gt; &amp;K, int n=0)</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#aaad2bcba948bb965950a6c89302c12dc</field>
    <field name="keywords">EigenProblemSolver OFELI::EigenProblemSolver::EigenProblemSolver EigenProblemSolver</field>
    <field name="text">Constructor for a dense symmetric matrix that computes the eigenvalues This constructor solves in place the eigenvalues problem and stores them in a vector The eigenvectors can be obtained by calling the member function getEigenVector K Matrix for which eigenmodes are sought n Number of eigenvalues to extract By default all eigenvalues are computed</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::setEigenVectors</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#ab8b165bd0da7329b393b2a06c24da966</field>
    <field name="keywords">setEigenVectors OFELI::EigenProblemSolver::setEigenVectors EigenProblemSolver</field>
    <field name="text">Switch to compute or not eigenvectors as well This function is useful for the QR method BY default eigenvectors are not extracted</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::EigenProblemSolver</field>
    <field name="args">(DSMatrix&lt; real_t &gt; &amp;A, Vect&lt; real_t &gt; &amp;ev, int n=0)</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#aca9a7e31a62e24a0dbb402cc1f79d909</field>
    <field name="keywords">EigenProblemSolver OFELI::EigenProblemSolver::EigenProblemSolver EigenProblemSolver</field>
    <field name="text">Constructor for a dense symmetric matrix that compute the eigenvalues This constructor solves in place the eigenvalues problem and stores them in a vector Extraction of eigenvalues and eigenvectors uses the subspace iteration method The eigenvectors can be obtained by calling the member function getEigenVector A Matrix for which eigenmodes are sought ev Vector containing all computed real eigenvalues n Number of eigenvalues to extract By default all eigenvalues are computed The vector ev does not need to be sized before</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::setPDE</field>
    <field name="args">(Equa &amp;eq, bool lumped=true)</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#acc93ccb4c00d9710e21d93aaa8784392</field>
    <field name="keywords">setPDE OFELI::EigenProblemSolver::setPDE EigenProblemSolver</field>
    <field name="text">Define partial differential equation to solve The used equation class must have been constructed using the Mesh instance eq Reference to equation instance lumped Mass matrix is lumped true or not false Default true</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::run</field>
    <field name="args">(int nb=0, bool opt=false)</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#acf64d91bdeb5343f45cc1dd595aec042</field>
    <field name="keywords">run OFELI::EigenProblemSolver::run EigenProblemSolver</field>
    <field name="text">Run the eigenproblem solver nb Number of eigenvalues to be computed By default all eigenvalues are computed opt Toggle to compute or not corresponding eigenvectors By default no eigenvectors extracted</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::setMatrix</field>
    <field name="args">(DMatrix&lt; real_t &gt; &amp;K)</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#ad2b7e137bd6ade3323782d9ad4bb7866</field>
    <field name="keywords">setMatrix OFELI::EigenProblemSolver::setMatrix EigenProblemSolver</field>
    <field name="text">Set matrix instance This function is to be used when the default constructor is applied Case of a standard not generalized eigen problem is to be solved K Matrix instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::getNbIter</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#ad427a5facfbd7f505f7dd7ff9d512c20</field>
    <field name="keywords">getNbIter OFELI::EigenProblemSolver::getNbIter EigenProblemSolver</field>
    <field name="text">Return actual number of performed iterations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::setMatrix</field>
    <field name="args">(DSMatrix&lt; real_t &gt; &amp;K)</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#adb558b1d4548becf6e9929897d1d5145</field>
    <field name="keywords">setMatrix OFELI::EigenProblemSolver::setMatrix EigenProblemSolver</field>
    <field name="text">Set matrix instance Symmetric matrix This function is to be used when the default constructor is applied Case of a standard not generalized eigen problem is to be solved K Matrix instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::~EigenProblemSolver</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#aec9109a83111b13070b43103aacce790</field>
    <field name="keywords">OFELI::EigenProblemSolver::~EigenProblemSolver EigenProblemSolver</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::EigenProblemSolver</field>
    <field name="args">(Equa &amp;eq, bool lumped=true)</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#af2f9c7ccd681da9834129ffe2bdcacb3</field>
    <field name="keywords">EigenProblemSolver OFELI::EigenProblemSolver::EigenProblemSolver EigenProblemSolver</field>
    <field name="text">Consrtuctor using partial differential equation The used equation class must have been constructed using the Mesh instance eq Reference to equation instance lumped Mass matrix is lumped true or not false Default true</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::getEigenVector</field>
    <field name="args">(int n, Vect&lt; real_t &gt; &amp;v) const</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#afd0ed5b503aaab27ab0c8382f786dfa6</field>
    <field name="keywords">getEigenVector OFELI::EigenProblemSolver::getEigenVector EigenProblemSolver</field>
    <field name="text">Return the n-th eigenvector n Label of eigenvector They are stored in ascending order of eigenvalues v Vect instance where the eigenvector is stored</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::EigenProblemSolver::setMatrix</field>
    <field name="args">(Matrix&lt; real_t &gt; *K)</field>
    <field name="url">classOFELI_1_1EigenProblemSolver.html#afd54fd03f5862f86bfdefdbaba689a08</field>
    <field name="keywords">setMatrix OFELI::EigenProblemSolver::setMatrix EigenProblemSolver</field>
    <field name="text">Set pointer to matrix instance This function is to be used when the default constructor is applied Case where the mass matrix is consistent K Stiffness matrix pointer</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Elas2DQ4</field>
    <field name="url">classOFELI_1_1Elas2DQ4.html</field>
    <field name="keywords">Elas2DQ4</field>
    <field name="text">To build element equations for 2 D linearized elasticity using 4 node quadrilaterals This class enables building finite element arrays for linearized isotropic elasticity problem in 2 D domains using 4 Node quadrilaterals Unilateral contact is handled using a penalty function Note that members calculating element arrays have as an argument a real coef that is multiplied by the contribution of the current element This makes possible testing different algorithms</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DQ4::BodyRHS</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Elas2DQ4.html#a02b9344d3bbc428a4b8cc5671a559e41</field>
    <field name="keywords">BodyRHS OFELI::Elas2DQ4::BodyRHS Elas2DQ4</field>
    <field name="text">Add body right-hand side term to right hand side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DQ4::Elas2DQ4</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Elas2DQ4.html#a11606f57ffd5271d1f82fd53136d6120</field>
    <field name="keywords">Elas2DQ4 OFELI::Elas2DQ4::Elas2DQ4 Elas2DQ4</field>
    <field name="text">Default Constructor Constructs an empty equation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DQ4::PlaneStrain</field>
    <field name="args">(real_t E, real_t nu)</field>
    <field name="url">classOFELI_1_1Elas2DQ4.html#a3746f93d1dc32a9c89a79e7661cc3ffe</field>
    <field name="keywords">PlaneStrain OFELI::Elas2DQ4::PlaneStrain Elas2DQ4</field>
    <field name="text">Set plane strain hypothesis by giving values of Young s modulus and Poisson ratio E Young s modulus nu Poisson ratio</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DQ4::BoundaryRHS</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Elas2DQ4.html#a4b5383e9159556cc1d0f949da2a5f128</field>
    <field name="keywords">BoundaryRHS OFELI::Elas2DQ4::BoundaryRHS Elas2DQ4</field>
    <field name="text">Add boundary right-hand side term to right hand side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DQ4::PlaneStress</field>
    <field name="args">(real_t E, real_t nu)</field>
    <field name="url">classOFELI_1_1Elas2DQ4.html#a4bd31673d428480503eeb960d54ea7f5</field>
    <field name="keywords">PlaneStress OFELI::Elas2DQ4::PlaneStress Elas2DQ4</field>
    <field name="text">Set plane stress hypothesis by giving values of Young s modulus and Poisson ratio E Young s modulus nu Poisson ratio</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DQ4::Mass</field>
    <field name="args">(real_t coef=1.)</field>
    <field name="url">classOFELI_1_1Elas2DQ4.html#a6973a1f3ad79ae2b5211c3ec81c6f678</field>
    <field name="keywords">Mass OFELI::Elas2DQ4::Mass Elas2DQ4</field>
    <field name="text">Add element consistent mass contribution to matrix and right-hand side after multiplication by coef Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DQ4::Deviator</field>
    <field name="args">(real_t coef=1.)</field>
    <field name="url">classOFELI_1_1Elas2DQ4.html#a75d21703318c37a9f42eb5c692900b92</field>
    <field name="keywords">Deviator OFELI::Elas2DQ4::Deviator Elas2DQ4</field>
    <field name="text">Add element deviatoric matrix to element matrix after multiplication by coef Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DQ4::PlaneStrain</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Elas2DQ4.html#a794bbb71733d7e8637a1e1cd2c470735</field>
    <field name="keywords">PlaneStrain OFELI::Elas2DQ4::PlaneStrain Elas2DQ4</field>
    <field name="text">Set plane strain hypothesis</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DQ4::Dilatation</field>
    <field name="args">(real_t coef=1.)</field>
    <field name="url">classOFELI_1_1Elas2DQ4.html#a8212309e844b62adb46c2414a95b95a9</field>
    <field name="keywords">Dilatation OFELI::Elas2DQ4::Dilatation Elas2DQ4</field>
    <field name="text">Add element dilatational contribution to element matrix after multiplication by coef Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DQ4::BoundaryRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1Elas2DQ4.html#a9f47743e35b40517037f6c007312461c</field>
    <field name="keywords">BoundaryRHS OFELI::Elas2DQ4::BoundaryRHS Elas2DQ4</field>
    <field name="text">Add boundary right-hand side term to right hand side f Vector containing source at nodes DOF by DOF</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DQ4::BodyRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1Elas2DQ4.html#aa6d7e87afcbeea4276573c9576d8d6ca</field>
    <field name="keywords">BodyRHS OFELI::Elas2DQ4::BodyRHS Elas2DQ4</field>
    <field name="text">Add body right-hand side term to right hand side f Vector containing source at nodes DOF by DOF</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DQ4::LMass</field>
    <field name="args">(real_t coef=1.)</field>
    <field name="url">classOFELI_1_1Elas2DQ4.html#acd59f2981fe99c4e2b59fcc5f35e6e2e</field>
    <field name="keywords">LMass OFELI::Elas2DQ4::LMass Elas2DQ4</field>
    <field name="text">Add element lumped mass contribution to element matrix after multiplication by coef Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DQ4::Strain</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;eps)</field>
    <field name="url">classOFELI_1_1Elas2DQ4.html#acf79e24dc8e74b205d34cf347a360640</field>
    <field name="keywords">Strain OFELI::Elas2DQ4::Strain Elas2DQ4</field>
    <field name="text">Calculate strains at element barycenters eps Vector containing strains in elements The instance of Elas2DQ4 must have been constructed using the constructor with Mesh instance and solution vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DQ4::Stress</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;st, Vect&lt; real_t &gt; &amp;vm)</field>
    <field name="url">classOFELI_1_1Elas2DQ4.html#ad1091bb90a2903df22901d8cf6fc8ce5</field>
    <field name="keywords">Stress OFELI::Elas2DQ4::Stress Elas2DQ4</field>
    <field name="text">Calculate principal stresses and Von-Mises stress at element barycenter st Vector containing principal stresses in elements vm Vector containing Von-Mises stresses in elements The instance of Elas2DQ4 must have been constructed using the constructor with Mesh instance and solution vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DQ4::~Elas2DQ4</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Elas2DQ4.html#ad3ae35b017757f12952ea4ee70c8f0d9</field>
    <field name="keywords">OFELI::Elas2DQ4::~Elas2DQ4 Elas2DQ4</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DQ4::Elas2DQ4</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1Elas2DQ4.html#ad9a168a24ab0995ec9eec25e77d68b86</field>
    <field name="keywords">Elas2DQ4 OFELI::Elas2DQ4::Elas2DQ4 Elas2DQ4</field>
    <field name="text">Constructor using Mesh instance ms Reference to Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DQ4::PlaneStress</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Elas2DQ4.html#adc7cb1c1a33587e3bdb8bd96cdbaf8d9</field>
    <field name="keywords">PlaneStress OFELI::Elas2DQ4::PlaneStress Elas2DQ4</field>
    <field name="text">Set plane stress hypothesis</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DQ4::Stress</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;sigma, Vect&lt; real_t &gt; &amp;s, Vect&lt; real_t &gt; &amp;st)</field>
    <field name="url">classOFELI_1_1Elas2DQ4.html#af31dabaa3c91ebf47275aef29f1c6495</field>
    <field name="keywords">Stress OFELI::Elas2DQ4::Stress Elas2DQ4</field>
    <field name="text">Calculate principal stresses and Von-Mises stress at element barycenter sigma Vector containing principal stresses in elements s Vector containing principal stresses in elements st Value of Von-Mises stress in elements The instance of Elas2DQ4 must have been constructed using the constructor with Mesh instance and solution vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DQ4::Elas2DQ4</field>
    <field name="args">(Mesh &amp;ms, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1Elas2DQ4.html#afc47284c3e290faab29a5515e8e0dd6a</field>
    <field name="keywords">Elas2DQ4 OFELI::Elas2DQ4::Elas2DQ4 Elas2DQ4</field>
    <field name="text">Constructor using Mesh instance and solution vector ms Reference to Mesh instance u Solution vector</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Elas2DT3</field>
    <field name="url">classOFELI_1_1Elas2DT3.html</field>
    <field name="keywords">Elas2DT3</field>
    <field name="text">To build element equations for 2 D linearized elasticity using 3 node triangles This class enables building finite element arrays for linearized isotropic elasticity problem in 2 D domains using 3 Node triangles Unilateral contact is handled using a penalty function Note that members calculating element arrays have as an argument a real coef that is multiplied by the contribution of the current element This makes possible testing different algorithms</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DT3::BodyRHS</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Elas2DT3.html#a02b9344d3bbc428a4b8cc5671a559e41</field>
    <field name="keywords">BodyRHS OFELI::Elas2DT3::BodyRHS Elas2DT3</field>
    <field name="text">Add body right-hand side term to right hand side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DT3::~Elas2DT3</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Elas2DT3.html#a0d5a3055d92b8e7ceda64a3585465acd</field>
    <field name="keywords">OFELI::Elas2DT3::~Elas2DT3 Elas2DT3</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DT3::PlaneStrain</field>
    <field name="args">(real_t E, real_t nu)</field>
    <field name="url">classOFELI_1_1Elas2DT3.html#a3746f93d1dc32a9c89a79e7661cc3ffe</field>
    <field name="keywords">PlaneStrain OFELI::Elas2DT3::PlaneStrain Elas2DT3</field>
    <field name="text">Set plane strain hypothesis by giving values of Young s modulus E and Poisson ratio nu</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DT3::Stress</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;s, Vect&lt; real_t &gt; &amp;vm)</field>
    <field name="url">classOFELI_1_1Elas2DT3.html#a41b8b08d6f283b5bb4b15e429bc4d3a4</field>
    <field name="keywords">Stress OFELI::Elas2DT3::Stress Elas2DT3</field>
    <field name="text">Calculate principal stresses and Von-Mises stress in element s vector of principal stresses in elements vm Von-Mises stresses in elements This function can be invoked in postprocessing</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DT3::Elas2DT3</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Elas2DT3.html#a47501f28d576c24f927beb55881ae181</field>
    <field name="keywords">Elas2DT3 OFELI::Elas2DT3::Elas2DT3 Elas2DT3</field>
    <field name="text">Default Constructor Constructs an empty equation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DT3::BoundaryRHS</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Elas2DT3.html#a4b5383e9159556cc1d0f949da2a5f128</field>
    <field name="keywords">BoundaryRHS OFELI::Elas2DT3::BoundaryRHS Elas2DT3</field>
    <field name="text">Add boundary right-hand side term to right hand side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DT3::PlaneStress</field>
    <field name="args">(real_t E, real_t nu)</field>
    <field name="url">classOFELI_1_1Elas2DT3.html#a4bd31673d428480503eeb960d54ea7f5</field>
    <field name="keywords">PlaneStress OFELI::Elas2DT3::PlaneStress Elas2DT3</field>
    <field name="text">Set plane stress hypothesis by giving values of Young s modulus E and Poisson ratio nu</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DT3::Mass</field>
    <field name="args">(real_t coef=1.)</field>
    <field name="url">classOFELI_1_1Elas2DT3.html#a6973a1f3ad79ae2b5211c3ec81c6f678</field>
    <field name="keywords">Mass OFELI::Elas2DT3::Mass Elas2DT3</field>
    <field name="text">Add element consistent mass contribution to element matrix after multiplication by coef coef Coefficient to multiply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DT3::Media</field>
    <field name="args">(real_t E, real_t nu, real_t rho)</field>
    <field name="url">classOFELI_1_1Elas2DT3.html#a6a8944ba4eda7e208d547819abdee82c</field>
    <field name="keywords">Media OFELI::Elas2DT3::Media Elas2DT3</field>
    <field name="text">Set media properties Useful to override material properties deduced from mesh file</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DT3::Contact</field>
    <field name="args">(real_t coef=1.e07)</field>
    <field name="url">classOFELI_1_1Elas2DT3.html#a71ee7f52af11d971017a8111024f0a19</field>
    <field name="keywords">Contact OFELI::Elas2DT3::Contact Elas2DT3</field>
    <field name="text">Penalty Signorini contact side contribution to matrix and right-hand side coef Penalty value by which the added term is multiplied Default 1.e07 0 if no contact is achieved on this side 1 otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DT3::Deviator</field>
    <field name="args">(real_t coef=1.)</field>
    <field name="url">classOFELI_1_1Elas2DT3.html#a75d21703318c37a9f42eb5c692900b92</field>
    <field name="keywords">Deviator OFELI::Elas2DT3::Deviator Elas2DT3</field>
    <field name="text">Add element deviatoric matrix to element matrix after multiplication by coef coef Coefficient to multiply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DT3::PlaneStrain</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Elas2DT3.html#a794bbb71733d7e8637a1e1cd2c470735</field>
    <field name="keywords">PlaneStrain OFELI::Elas2DT3::PlaneStrain Elas2DT3</field>
    <field name="text">Set plane strain hypothesis</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DT3::Dilatation</field>
    <field name="args">(real_t coef=1.)</field>
    <field name="url">classOFELI_1_1Elas2DT3.html#a8212309e844b62adb46c2414a95b95a9</field>
    <field name="keywords">Dilatation OFELI::Elas2DT3::Dilatation Elas2DT3</field>
    <field name="text">Add element dilatational contribution to element matrix after multiplication by coef coef Coefficient to multiply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DT3::Reaction</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;r)</field>
    <field name="url">classOFELI_1_1Elas2DT3.html#a930a7a44692605ad2dc24caefafe418f</field>
    <field name="keywords">Reaction OFELI::Elas2DT3::Reaction Elas2DT3</field>
    <field name="text">Calculate reactions This function can be invoked in postprocessing r Reaction on the side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DT3::BoundaryRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1Elas2DT3.html#a9f47743e35b40517037f6c007312461c</field>
    <field name="keywords">BoundaryRHS OFELI::Elas2DT3::BoundaryRHS Elas2DT3</field>
    <field name="text">Add boundary right-hand side term to right hand side f Vect instance that contains constant traction to impose to side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DT3::Elas2DT3</field>
    <field name="args">(Mesh &amp;ms, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1Elas2DT3.html#a9f63d9e5f5ab3e96ab1def11651f7b78</field>
    <field name="keywords">Elas2DT3 OFELI::Elas2DT3::Elas2DT3 Elas2DT3</field>
    <field name="text">Constructor using Mesh data and solution vector ms Mesh instance u Reference to solution vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DT3::ContactPressure</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f, real_t penal, Point&lt; real_t &gt; &amp;p)</field>
    <field name="url">classOFELI_1_1Elas2DT3.html#a9f9a089ec828fe355add084b78e8af50</field>
    <field name="keywords">ContactPressure OFELI::Elas2DT3::ContactPressure Elas2DT3</field>
    <field name="text">Calculate contact pressure This function can be invoked in postprocessing f penal Penalty parameter that was used to impose contact condition p Contact pressure</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DT3::BodyRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1Elas2DT3.html#aa6d7e87afcbeea4276573c9576d8d6ca</field>
    <field name="keywords">BodyRHS OFELI::Elas2DT3::BodyRHS Elas2DT3</field>
    <field name="text">Add body right-hand side term to right hand side f Vector containing source at nodes DOF by DOF</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DT3::LMass</field>
    <field name="args">(real_t coef=1.)</field>
    <field name="url">classOFELI_1_1Elas2DT3.html#acd59f2981fe99c4e2b59fcc5f35e6e2e</field>
    <field name="keywords">LMass OFELI::Elas2DT3::LMass Elas2DT3</field>
    <field name="text">Add element lumped mass contribution to element matrix after multiplication by coef coef Coefficient to multiply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DT3::Strain</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;eps)</field>
    <field name="url">classOFELI_1_1Elas2DT3.html#acf79e24dc8e74b205d34cf347a360640</field>
    <field name="keywords">Strain OFELI::Elas2DT3::Strain Elas2DT3</field>
    <field name="text">Calculate strains in element This function can be invoked in postprocessing eps vector of strains in elements</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DT3::Elas2DT3</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1Elas2DT3.html#ad45ec9c95947043ea4af97ac80b5cea4</field>
    <field name="keywords">Elas2DT3 OFELI::Elas2DT3::Elas2DT3 Elas2DT3</field>
    <field name="text">Constructor using Mesh data ms Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DT3::PlaneStress</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Elas2DT3.html#adc7cb1c1a33587e3bdb8bd96cdbaf8d9</field>
    <field name="keywords">PlaneStress OFELI::Elas2DT3::PlaneStress Elas2DT3</field>
    <field name="text">Set plane stress hypothesis</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas2DT3::Periodic</field>
    <field name="args">(real_t coef=1.e20)</field>
    <field name="url">classOFELI_1_1Elas2DT3.html#af669369716d638f14a268133981dbb17</field>
    <field name="keywords">Periodic OFELI::Elas2DT3::Periodic Elas2DT3</field>
    <field name="text">Add contribution of periodic boundary condition by a penalty technique Boundary nodes where periodic boundary conditions are to be imposed must have codes equal to PERIODIC_A on one side and PERIODIC_B on the opposite side coef Value of penalty parameter Default 1.e20</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Elas3DH8</field>
    <field name="url">classOFELI_1_1Elas3DH8.html</field>
    <field name="keywords">Elas3DH8</field>
    <field name="text">To build element equations for 3 D linearized elasticity using 8 node hexahedra This class enables building finite element arrays for linearized isotropic elasticity problem in 3 D domains using 8 Node hexahedra Note that members calculating element arrays have as an argument a double coef that is multiplied by the contribution of the current element This makes possible testing different algorithms</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas3DH8::BodyRHS</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Elas3DH8.html#a02b9344d3bbc428a4b8cc5671a559e41</field>
    <field name="keywords">BodyRHS OFELI::Elas3DH8::BodyRHS Elas3DH8</field>
    <field name="text">Add body right-hand side term to right hand side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas3DH8::~Elas3DH8</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Elas3DH8.html#a0fe244fdc09fad3c25994a3794ae74fb</field>
    <field name="keywords">OFELI::Elas3DH8::~Elas3DH8 Elas3DH8</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas3DH8::BoundaryRHS</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Elas3DH8.html#a4b5383e9159556cc1d0f949da2a5f128</field>
    <field name="keywords">BoundaryRHS OFELI::Elas3DH8::BoundaryRHS Elas3DH8</field>
    <field name="text">Add boundary right-hand side term to right hand side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas3DH8::Elas3DH8</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Elas3DH8.html#a663ac1975ad82102b4684b64461c5125</field>
    <field name="keywords">Elas3DH8 OFELI::Elas3DH8::Elas3DH8 Elas3DH8</field>
    <field name="text">Default Constructor Constructs an empty equation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas3DH8::Mass</field>
    <field name="args">(real_t coef=1.)</field>
    <field name="url">classOFELI_1_1Elas3DH8.html#a6973a1f3ad79ae2b5211c3ec81c6f678</field>
    <field name="keywords">Mass OFELI::Elas3DH8::Mass Elas3DH8</field>
    <field name="text">Add element lumped mass contribution to element matrix and right-hand side after multiplication by coef</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas3DH8::Deviator</field>
    <field name="args">(real_t coef=1.)</field>
    <field name="url">classOFELI_1_1Elas3DH8.html#a75d21703318c37a9f42eb5c692900b92</field>
    <field name="keywords">Deviator OFELI::Elas3DH8::Deviator Elas3DH8</field>
    <field name="text">Add element deviatoric matrix to element matrix after multiplication by coef</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas3DH8::Dilatation</field>
    <field name="args">(real_t coef=1.)</field>
    <field name="url">classOFELI_1_1Elas3DH8.html#a8212309e844b62adb46c2414a95b95a9</field>
    <field name="keywords">Dilatation OFELI::Elas3DH8::Dilatation Elas3DH8</field>
    <field name="text">Add element dilatational contribution to element matrix after multiplication by coef</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas3DH8::Elas3DH8</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1Elas3DH8.html#a83c8b84d3e5b9c2b6ba54d57c9ddd499</field>
    <field name="keywords">Elas3DH8 OFELI::Elas3DH8::Elas3DH8 Elas3DH8</field>
    <field name="text">Constructor using Mesh instance ms Reference to Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas3DH8::BoundaryRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1Elas3DH8.html#a9f47743e35b40517037f6c007312461c</field>
    <field name="keywords">BoundaryRHS OFELI::Elas3DH8::BoundaryRHS Elas3DH8</field>
    <field name="text">Add boundary right-hand side term to right hand side f Vector containing traction boundary force at sides</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas3DH8::BodyRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1Elas3DH8.html#aa6d7e87afcbeea4276573c9576d8d6ca</field>
    <field name="keywords">BodyRHS OFELI::Elas3DH8::BodyRHS Elas3DH8</field>
    <field name="text">Add body right-hand side term to right hand side f Vector containing source at nodes DOF by DOF</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas3DH8::LMass</field>
    <field name="args">(real_t coef=1.)</field>
    <field name="url">classOFELI_1_1Elas3DH8.html#acd59f2981fe99c4e2b59fcc5f35e6e2e</field>
    <field name="keywords">LMass OFELI::Elas3DH8::LMass Elas3DH8</field>
    <field name="text">Add element lumped mass contribution to element matrix after multiplication by coef</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Elas3DT4</field>
    <field name="url">classOFELI_1_1Elas3DT4.html</field>
    <field name="keywords">Elas3DT4</field>
    <field name="text">To build element equations for 3 D linearized elasticity using 4 node tetrahedra This class enables building finite element arrays for linearized isotropic elasticity problem in 3 D domains using 4 Node tetrahedra</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas3DT4::BodyRHS</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Elas3DT4.html#a02b9344d3bbc428a4b8cc5671a559e41</field>
    <field name="keywords">BodyRHS OFELI::Elas3DT4::BodyRHS Elas3DT4</field>
    <field name="text">Add body right-hand side term to right hand side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas3DT4::Elas3DT4</field>
    <field name="args">(Mesh &amp;ms, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1Elas3DT4.html#a430ab502b3dcc5952aa17d4111aaa340</field>
    <field name="keywords">Elas3DT4 OFELI::Elas3DT4::Elas3DT4 Elas3DT4</field>
    <field name="text">Constructor using a Mesh instance and solution vector ms Reference to Mesh instance u Reference to solution vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas3DT4::Elas3DT4</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Elas3DT4.html#a4364774fa438fdf712c5baada7198ecb</field>
    <field name="keywords">Elas3DT4 OFELI::Elas3DT4::Elas3DT4 Elas3DT4</field>
    <field name="text">Default Constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas3DT4::BoundaryRHS</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Elas3DT4.html#a4b5383e9159556cc1d0f949da2a5f128</field>
    <field name="keywords">BoundaryRHS OFELI::Elas3DT4::BoundaryRHS Elas3DT4</field>
    <field name="text">Add boundary right-hand side term to right hand side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas3DT4::Media</field>
    <field name="args">(real_t E, real_t nu, real_t rho)</field>
    <field name="url">classOFELI_1_1Elas3DT4.html#a6a8944ba4eda7e208d547819abdee82c</field>
    <field name="keywords">Media OFELI::Elas3DT4::Media Elas3DT4</field>
    <field name="text">Set Media properties E Young s modulus nu Poisson ratio rho Density</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas3DT4::Deviator</field>
    <field name="args">(real_t coef=1.)</field>
    <field name="url">classOFELI_1_1Elas3DT4.html#a75d21703318c37a9f42eb5c692900b92</field>
    <field name="keywords">Deviator OFELI::Elas3DT4::Deviator Elas3DT4</field>
    <field name="text">Add element deviatoric matrix to element matrix after multiplication by coef</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas3DT4::LMass</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1Elas3DT4.html#a8085a436c0055d8554baaa8cb3835922</field>
    <field name="keywords">LMass OFELI::Elas3DT4::LMass Elas3DT4</field>
    <field name="text">Add element lumped mass contribution to element matrix after multiplication by coef</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas3DT4::Dilatation</field>
    <field name="args">(real_t coef=1.)</field>
    <field name="url">classOFELI_1_1Elas3DT4.html#a8212309e844b62adb46c2414a95b95a9</field>
    <field name="keywords">Dilatation OFELI::Elas3DT4::Dilatation Elas3DT4</field>
    <field name="text">Add element dilatational contribution to left-hand side after multiplication by coef</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas3DT4::BoundaryRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1Elas3DT4.html#a9f47743e35b40517037f6c007312461c</field>
    <field name="keywords">BoundaryRHS OFELI::Elas3DT4::BoundaryRHS Elas3DT4</field>
    <field name="text">Add boundary right-hand side term to right hand side f Vect instance that contains constant traction to impose to side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas3DT4::BodyRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1Elas3DT4.html#aa6d7e87afcbeea4276573c9576d8d6ca</field>
    <field name="keywords">BodyRHS OFELI::Elas3DT4::BodyRHS Elas3DT4</field>
    <field name="text">Add body right-hand side term to right hand side f Vect instance containing source at nodes DOF by DOF</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas3DT4::~Elas3DT4</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Elas3DT4.html#ad2eb69842b58793f6349535843a0b9e1</field>
    <field name="keywords">OFELI::Elas3DT4::~Elas3DT4 Elas3DT4</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Elas3DT4::Elas3DT4</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1Elas3DT4.html#aff5f71379743944dbebcb5d0b87a549d</field>
    <field name="keywords">Elas3DT4 OFELI::Elas3DT4::Elas3DT4 Elas3DT4</field>
    <field name="text">Constructor using a Mesh instance ms Reference to Mesh instance</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Element</field>
    <field name="url">classOFELI_1_1Element.html</field>
    <field name="keywords">Element</field>
    <field name="text">To store and treat finite element geometric information Class Element enables defining an element of a finite element mesh The element is given in particular by its shape and a list of nodes Each node can be accessed by the member function getPtrNode Moreover class Mesh can generate for each element its list of sides The string that defines the element shape must be chosen according to the following list Shape Shape name Dimension Min number of nodes Line line 2 2 Triangle tria 2 3 Quadrilateral quad 2 4 Tetrahedron tetra 3 4 Pentahedron penta 3 6 Hexahedron hexa 3 8 Once a Mesh instance is constructed one has access for each Element of the mesh to pointers to element sides provided the member function getAllSides of Mesh has been invoked With this an element can be tested to see if it is on the boundary i.e if it has at least one side on the boundary Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::setNbDOF</field>
    <field name="args">(size_t i)</field>
    <field name="url">classOFELI_1_1Element.html#a00f41d42c2862613b1fa09097a621524</field>
    <field name="keywords">setNbDOF OFELI::Element::setNbDOF Element</field>
    <field name="text">Set number of degrees of freedom of element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::getNbSides</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Element.html#a0252edb7d5457ec0225ffff64dcdccb2</field>
    <field name="keywords">getNbSides OFELI::Element::getNbSides Element</field>
    <field name="text">Return number of element sides Constant version</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::IsIn</field>
    <field name="args">(const Node *nd)</field>
    <field name="url">classOFELI_1_1Element.html#a03eba3fc54de9d9689aab62f1850f15f</field>
    <field name="keywords">IsIn OFELI::Element::IsIn Element</field>
    <field name="text">Check if a given node belongs to current element nd Pointer to node to locate local label of node if this one is found 0 otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::getCode</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Element.html#a09b24025428e929afa9b21488a462e20</field>
    <field name="keywords">getCode OFELI::Element::getCode Element</field>
    <field name="text">Return code of element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::Add</field>
    <field name="args">(Element *el)</field>
    <field name="url">classOFELI_1_1Element.html#a09bede292ad1986fef93ecdf07a12389</field>
    <field name="keywords">Add OFELI::Element::Add Element</field>
    <field name="text">Add a neighbor element el Pointer to Element instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::getSideLabel</field>
    <field name="args">(size_t n) const</field>
    <field name="url">classOFELI_1_1Element.html#a0faaaf348803046e9bbfca5375e81dc2</field>
    <field name="keywords">getSideLabel OFELI::Element::getSideLabel Element</field>
    <field name="text">Return global label of side of local label i</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::Element</field>
    <field name="args">(const Element &amp;el)</field>
    <field name="url">classOFELI_1_1Element.html#a10198ffd52dee8a7836e5e49b7cf89e8</field>
    <field name="keywords">Element OFELI::Element::Element Element</field>
    <field name="text">Copy constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::Element</field>
    <field name="args">(size_t label, int shape, int c)</field>
    <field name="url">classOFELI_1_1Element.html#a10b24d23ead146890e249291ab1a0825</field>
    <field name="keywords">Element OFELI::Element::Element Element</field>
    <field name="text">Constructor initializing label shape and code of element label Label to assign to element shape Shape of element See enum ElementShape in Mesh c Code to assign to element useful for media properties</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::getFirstDOF</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Element.html#a15c86d73e9480dad550d2b6ba6f45c52</field>
    <field name="keywords">getFirstDOF OFELI::Element::getFirstDOF Element</field>
    <field name="text">Return element first DOF label</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::getNeighborElement</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Element.html#a20df322863db29638b90ec7aedc4c1d5</field>
    <field name="keywords">getNeighborElement OFELI::Element::getNeighborElement Element</field>
    <field name="text">Return pointer to element Neighboring element i Index of element to look for This method returns valid information only if the Mesh member function Mesh::getElementNeighborElements() has been called before</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::getCenter</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Element.html#a29518c54ba3a66576ee2859724fc88cd</field>
    <field name="keywords">getCenter OFELI::Element::getCenter Element</field>
    <field name="text">Return coordinates of center of element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::getNbDOF</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Element.html#a2e702838dc1b95944fd571e804950aa3</field>
    <field name="keywords">getNbDOF OFELI::Element::getNbDOF Element</field>
    <field name="text">return element nb of DOF</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::isActive</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Element.html#a354c7d206ec624b9bdbb81f3b788f826</field>
    <field name="keywords">isActive OFELI::Element::isActive Element</field>
    <field name="text">Return true or false whether element is active or not</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::set</field>
    <field name="args">(Element *el, int n)</field>
    <field name="url">classOFELI_1_1Element.html#a3c26321ca5fb0ac1a9aaf30b051a15bf</field>
    <field name="keywords">set OFELI::Element::set Element</field>
    <field name="text">Add a neighbor element and set its label el Pointer to Element instance n Neighbor element number to assign</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::setCode</field>
    <field name="args">(int c)</field>
    <field name="url">classOFELI_1_1Element.html#a3d4b3343d6386b5f73a9b7b2f16b6457</field>
    <field name="keywords">setCode OFELI::Element::setCode Element</field>
    <field name="text">Define code of element c Code to assign to element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::setNode</field>
    <field name="args">(size_t i, Node *node)</field>
    <field name="url">classOFELI_1_1Element.html#a3d4c4ccc373314a2d0b069e1a4089221</field>
    <field name="keywords">setNode OFELI::Element::setNode Element</field>
    <field name="text">Assign a node given by its pointer as the i-th node of element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::Contains</field>
    <field name="args">(const Node &amp;nd) const</field>
    <field name="url">classOFELI_1_1Element.html#a3fcda90942578167b8ec79ac3e8fa5e9</field>
    <field name="keywords">Contains OFELI::Element::Contains Element</field>
    <field name="text">Say if element contains given node This function tests if the element contains a node with the same label at the sought one nd Reference to Node instance Local node label in element If 0 the element does not contain this node</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::Replace</field>
    <field name="args">(size_t label, Side *side)</field>
    <field name="url">classOFELI_1_1Element.html#a417b25baee70d6ee678fa73b68202eb3</field>
    <field name="keywords">Replace OFELI::Element::Replace Element</field>
    <field name="text">Replace a side at a given local label label Side to replace side Pointer to Side instance to copy to current instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::Add</field>
    <field name="args">(Side *sd)</field>
    <field name="url">classOFELI_1_1Element.html#a45628b3145186a0b7cb844d9d4b9bf4a</field>
    <field name="keywords">Add OFELI::Element::Add Element</field>
    <field name="text">Assign Side to Element sd Pointer to Side instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::~Element</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Element.html#a479a4daf1c3e59999be93dfd0353b7b8</field>
    <field name="keywords">OFELI::Element::~Element Element</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::Add</field>
    <field name="args">(Node *node)</field>
    <field name="url">classOFELI_1_1Element.html#a48bb768563a8b7f456751ec92a901a25</field>
    <field name="keywords">Add OFELI::Element::Add Element</field>
    <field name="text">Insert a node at end of list of nodes of element node Pointer to Node instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::setLabel</field>
    <field name="args">(size_t i)</field>
    <field name="url">classOFELI_1_1Element.html#a55b14e23cc522bf215f3da3a47cfe74f</field>
    <field name="keywords">setLabel OFELI::Element::setLabel Element</field>
    <field name="text">Define label of element i Label to assign to element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::getNbVertices</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Element.html#a5750242d0acee0978dba9bf1261914cd</field>
    <field name="keywords">getNbVertices OFELI::Element::getNbVertices Element</field>
    <field name="text">Return number of element vertices</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::getDOF</field>
    <field name="args">(size_t i=1) const</field>
    <field name="url">classOFELI_1_1Element.html#a5a8fdaa787c2b87caf8fb856881cf550</field>
    <field name="keywords">getDOF OFELI::Element::getDOF Element</field>
    <field name="text">Return element DOF label</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::Contains</field>
    <field name="args">(const Side *sd) const</field>
    <field name="url">classOFELI_1_1Element.html#a5ce055c1a7e54442f69c6372155f22ba</field>
    <field name="keywords">Contains OFELI::Element::Contains Element</field>
    <field name="text">Say if element contains given side This function tests if the element contains a side with the same pointer at the sought one sd Pointer to Side instance Local side label in element If 0 the element does not contain this side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::getParent</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Element.html#a66a3959500e6fcfbcb6b579f3cb400cb</field>
    <field name="keywords">getParent OFELI::Element::getParent Element</field>
    <field name="text">Return pointer to parent element Return null if no parent</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::setChild</field>
    <field name="args">(Element *el)</field>
    <field name="url">classOFELI_1_1Element.html#a6af4cce434b270fd1eede0838ef66f81</field>
    <field name="keywords">setChild OFELI::Element::setChild Element</field>
    <field name="text">Assign element as child of current one and assign current element as father This function is principally used when refining is invoked e.g for mesh adaption el Pointer to element to assign</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::getNbNeigElements</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Element.html#a79ef2ff21d471a6b9b7e501f17a2b7dc</field>
    <field name="keywords">getNbNeigElements OFELI::Element::getNbNeigElements Element</field>
    <field name="text">Return number of neigboring elements This method returns valid information only if the Mesh member function Mesh::getElementNeighborElements() has been called before</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::getNbEq</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Element.html#a7e81ee9c88f36ed678b711aaf77fcfb1</field>
    <field name="keywords">getNbEq OFELI::Element::getNbEq Element</field>
    <field name="text">Return number of element equations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::operator()</field>
    <field name="args">(size_t i)</field>
    <field name="url">classOFELI_1_1Element.html#a814d258c0c15a61b33baa91879b800c4</field>
    <field name="keywords">operator() OFELI::Element::operator() Element</field>
    <field name="text">Operator Return pointer to node of local label i</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::setCode</field>
    <field name="args">(size_t dof, int code)</field>
    <field name="url">classOFELI_1_1Element.html#a83a8351cc27666594d7d7c2850556ccf</field>
    <field name="keywords">setCode OFELI::Element::setCode Element</field>
    <field name="text">Assign code to a DOF dof Index of dof for assignment code Code to assign</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::getLabel</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Element.html#a893a23d685358e3dd02c8d834eafba83</field>
    <field name="keywords">getLabel OFELI::Element::getLabel Element</field>
    <field name="text">Return label of element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::isOnBoundary</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Element.html#a8a4fffdf02fa950ce2dd51ae1eec8ad3</field>
    <field name="keywords">isOnBoundary OFELI::Element::isOnBoundary Element</field>
    <field name="text">Say if current element is a boundary element or not this information is available only if boundary elements were determined i.e if member function Mesh::getBoundarySides or Mesh::getAllSides has been invoked before</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::getPtrSide</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Element.html#a8c9406f07be76c6080928910b2214e53</field>
    <field name="keywords">getPtrSide OFELI::Element::getPtrSide Element</field>
    <field name="text">Return pointer to side of label i Local labelling</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::getLevel</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Element.html#a8f44f2787dedf1e0950319c4d06d094a</field>
    <field name="keywords">getLevel OFELI::Element::getLevel Element</field>
    <field name="text">Return element level Element level decreases when element is refined starting from 0 If the level is 0 then the element has no father</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::Contains</field>
    <field name="args">(const Side &amp;sd) const</field>
    <field name="url">classOFELI_1_1Element.html#a9b5e84ba65ac486ec456efd26bf8fa54</field>
    <field name="keywords">Contains OFELI::Element::Contains Element</field>
    <field name="text">Say if element contains given side This function tests if the element contains a side with the same label at the sought one sd Reference to Side instance Local side label in element If 0 the element does not contain this side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::getShape</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Element.html#a9e8217afff8e1b47ba6901bfea655a3d</field>
    <field name="keywords">getShape OFELI::Element::getShape Element</field>
    <field name="text">Return element shape</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::getNodeLabel</field>
    <field name="args">(size_t n) const</field>
    <field name="url">classOFELI_1_1Element.html#a9fc1bc7e5f6761dc371f6333d4337bc5</field>
    <field name="keywords">getNodeLabel OFELI::Element::getNodeLabel Element</field>
    <field name="text">Return global label of node of local label i</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::getChild</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Element.html#ab6be05bcbe0eee7d8bcfea875bf8caa0</field>
    <field name="keywords">getChild OFELI::Element::getChild Element</field>
    <field name="text">Return pointer to i-th child element Return null pointer is no childs</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::Element</field>
    <field name="args">(size_t label, const string &amp;shape, int c)</field>
    <field name="url">classOFELI_1_1Element.html#ab6e8027ce7d951163808c284ba958e54</field>
    <field name="keywords">Element OFELI::Element::Element Element</field>
    <field name="text">Constructor initializing label shape and code of element label Label to assign to element shape Shape of element See class description c Code to assign to element useful for media properties</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::Element</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Element.html#ab6edd5ea4f400b450f07203f432d1c81</field>
    <field name="keywords">Element OFELI::Element::Element Element</field>
    <field name="text">Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::Replace</field>
    <field name="args">(size_t label, Node *node)</field>
    <field name="url">classOFELI_1_1Element.html#aba9961fcc23d8f88bfb8337f5032cd2f</field>
    <field name="keywords">Replace OFELI::Element::Replace Element</field>
    <field name="text">Replace a node at a given local label label Node to replace node Pointer to Node instance to copy to current instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::getMeasure</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Element.html#ac089244b160bad5ca0e20e6f92cd2fef</field>
    <field name="keywords">getMeasure OFELI::Element::getMeasure Element</field>
    <field name="text">Return measure of element This member function returns length area or volume of element In case of quadrilaterals and hexahedrals it returns determinant of Jacobian of mapping between reference and actual element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::setFirstDOF</field>
    <field name="args">(size_t i)</field>
    <field name="url">classOFELI_1_1Element.html#ac16bfc8543b575447dd715b853c1b36f</field>
    <field name="keywords">setFirstDOF OFELI::Element::setFirstDOF Element</field>
    <field name="text">Set label of first DOF in element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::n</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Element.html#ac88f0961aa7ed7c7415550ab2cad49c8</field>
    <field name="keywords">n OFELI::Element::n Element</field>
    <field name="text">Return label of element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::setDOF</field>
    <field name="args">(size_t i, size_t dof)</field>
    <field name="url">classOFELI_1_1Element.html#ad5f37eaf57f6cc69dad29913dada785c</field>
    <field name="keywords">setDOF OFELI::Element::setDOF Element</field>
    <field name="text">Define label of DOF i Index of DOF dof Label of DOF to assign</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::getUnitNormal</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Element.html#ad5fce4f113f43416aad3cfaf4f8255f1</field>
    <field name="keywords">getUnitNormal OFELI::Element::getUnitNormal Element</field>
    <field name="text">Return outward unit normal to i-th side of element Sides are ordered node_1 node_2 node_2 node_3</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::Element</field>
    <field name="args">(size_t label, const string &amp;shape)</field>
    <field name="url">classOFELI_1_1Element.html#ad9441a37383e9ce8b89b92515e035a37</field>
    <field name="keywords">Element OFELI::Element::Element Element</field>
    <field name="text">Constructor initializing label shape of element label Label to assign to element shape Shape of element See class description</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::getNbNodes</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Element.html#ade220c85ff6ecba20a6e05121f2b9257</field>
    <field name="keywords">getNbNodes OFELI::Element::getNbNodes Element</field>
    <field name="text">Return number of element nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::getPtrNode</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Element.html#ae588acd710c421ee332541c1d469852a</field>
    <field name="keywords">getPtrNode OFELI::Element::getPtrNode Element</field>
    <field name="text">Return pointer to node of label i Local labelling</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::operator()</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Element.html#ae88ca107de28ab4461295b0de66c4e7b</field>
    <field name="keywords">operator() OFELI::Element::operator() Element</field>
    <field name="text">Operator Return pointer to node of local label i</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::Contains</field>
    <field name="args">(const Node *nd) const</field>
    <field name="url">classOFELI_1_1Element.html#aeedc78ae0ded1aba0e33643f17d82902</field>
    <field name="keywords">Contains OFELI::Element::Contains Element</field>
    <field name="text">Say if element contains given node This function tests if the element contains a node with the same pointer at the sought one nd Pointer to Node instance Local node label in element If 0 the element does not contain this node</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::setSide</field>
    <field name="args">(size_t n, size_t *nd)</field>
    <field name="url">classOFELI_1_1Element.html#aef622176f0d38144aa88ee06dd333d01</field>
    <field name="keywords">setSide OFELI::Element::setSide Element</field>
    <field name="text">Initialize information on element sides This function is to be used to initialize loops over sides n Label of side nd Array of pointers to nodes of the side nd 0 nd 1 point to first second nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::Element</field>
    <field name="args">(size_t label, int shape)</field>
    <field name="url">classOFELI_1_1Element.html#aefbcf368c91eaff947cd36dc8030e5c8</field>
    <field name="keywords">Element OFELI::Element::Element Element</field>
    <field name="text">Constructor initializing label shape of element label Label to assign to element shape Shape of element See enum ElementShape in Mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Element::getNbChilds</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Element.html#afb8044c78d2743fdd88844c17957bca9</field>
    <field name="keywords">getNbChilds OFELI::Element::getNbChilds Element</field>
    <field name="text">Return number of children of element</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::ElementList</field>
    <field name="url">classOFELI_1_1ElementList.html</field>
    <field name="keywords">ElementList</field>
    <field name="text">Class to construct a list of elements having some common properties This class enables choosing multiple selection criteria by using function select However the intersection of these properties must be empty Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ElementList::selectLevel</field>
    <field name="args">(int level)</field>
    <field name="url">classOFELI_1_1ElementList.html#a1b00e78cbc4d408de0f04236d9296a76</field>
    <field name="keywords">selectLevel OFELI::ElementList::selectLevel ElementList</field>
    <field name="text">Select elements having a given level level Level of elements to select Elements having a given level for mesh adaption are selected in a list</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ElementList::get</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1ElementList.html#a20bb5752b523f02c84fd4c9205ed82b6</field>
    <field name="keywords">get OFELI::ElementList::get ElementList</field>
    <field name="text">Return pointer to current element and move to next one Non constant version</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ElementList::selectCode</field>
    <field name="args">(int code)</field>
    <field name="url">classOFELI_1_1ElementList.html#a2ee27675e43f7ca496aa1f5ca236551b</field>
    <field name="keywords">selectCode OFELI::ElementList::selectCode ElementList</field>
    <field name="text">Select elements having a given code</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ElementList::top</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1ElementList.html#a38e8fcffc1e158b30d9d72845d92ac57</field>
    <field name="keywords">top OFELI::ElementList::top ElementList</field>
    <field name="text">Reset list of elements at its top position Non constant version</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ElementList::~ElementList</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1ElementList.html#a4231ab83988e44d1fbed5394394250b6</field>
    <field name="keywords">OFELI::ElementList::~ElementList ElementList</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ElementList::top</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1ElementList.html#a6a8d8a56b30458682d94bd05d6bbf7aa</field>
    <field name="keywords">top OFELI::ElementList::top ElementList</field>
    <field name="text">Reset list of elements at its top position Constant version</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ElementList::unselectCode</field>
    <field name="args">(int code)</field>
    <field name="url">classOFELI_1_1ElementList.html#a7ba650dcd46d2b048d9eed3c8c32a301</field>
    <field name="keywords">unselectCode OFELI::ElementList::unselectCode ElementList</field>
    <field name="text">Unselect elements having a given code code Code of elements to exclude</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ElementList::getNbElements</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1ElementList.html#aab9792e6965078cdc27a88ae80cf0e67</field>
    <field name="keywords">getNbElements OFELI::ElementList::getNbElements ElementList</field>
    <field name="text">Return number of selected elements</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ElementList::get</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1ElementList.html#ae00d4d7e0f48a092658c8b6b920656b9</field>
    <field name="keywords">get OFELI::ElementList::get ElementList</field>
    <field name="text">Return pointer to current element and move to next one Constant version</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ElementList::ElementList</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1ElementList.html#ae47b365b96dde51d83146b351dcd70c8</field>
    <field name="keywords">ElementList OFELI::ElementList::ElementList ElementList</field>
    <field name="text">Constructor using a Mesh instance</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Ellipse</field>
    <field name="url">classOFELI_1_1Ellipse.html</field>
    <field name="keywords">Ellipse</field>
    <field name="text">To store and treat an ellipsoidal figure</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Ellipse::getSignedDistance</field>
    <field name="args">(const Grid &amp;g, Vect&lt; real_t &gt; &amp;d) const</field>
    <field name="url">classOFELI_1_1Ellipse.html#a2252be7c4949c4a2bd3ee24a4fdfd722</field>
    <field name="keywords">getSignedDistance OFELI::Ellipse::getSignedDistance Ellipse</field>
    <field name="text">Calculate signed distance to current figure with respect to grid points g Grid instance d Vect instance containing calculated distance from each grid index to Figure Vector d doesn t need to be sized before invoking this function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Ellipse::getSignedDistance</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;p) const</field>
    <field name="url">classOFELI_1_1Ellipse.html#a59bcb59a9fd6e717fa480630c7d3b57a</field>
    <field name="keywords">getSignedDistance OFELI::Ellipse::getSignedDistance Ellipse</field>
    <field name="text">Return signed distance from a given point to current figure p Point instance from which distance is computed</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Ellipse::getSignedDistance</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;p) const</field>
    <field name="url">classOFELI_1_1Ellipse.html#a6c92f703c9cacfbfc0158713655d844a</field>
    <field name="keywords">getSignedDistance OFELI::Ellipse::getSignedDistance Ellipse</field>
    <field name="text">Return signed distance of a given point from the current ellipse The computed distance is negative if p lies in the ellipse positive if it is outside and 0 on its boundary p Point&lt;double&gt; instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Ellipse::Ellipse</field>
    <field name="args">(Point&lt; real_t &gt; c, real_t a, real_t b, int code=1)</field>
    <field name="url">classOFELI_1_1Ellipse.html#a7b86e17e55b25da158fcdde6925b8488</field>
    <field name="keywords">Ellipse OFELI::Ellipse::Ellipse Ellipse</field>
    <field name="text">Constructor with given ellipse data c Coordinates of center a Semimajor axis b Semiminor axis code Code to assign to the generated figure Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Ellipse::operator+=</field>
    <field name="args">(real_t a)</field>
    <field name="url">classOFELI_1_1Ellipse.html#a9c1f3f60a632fd9972a47163ff7c1007</field>
    <field name="keywords">operator+= OFELI::Ellipse::operator+= Ellipse</field>
    <field name="text">Operator Scale ellipse by a factor a a Scaling value</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Ellipse::Ellipse</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Ellipse.html#a9c282b46f5f2d37b731248e9ea737785</field>
    <field name="keywords">Ellipse OFELI::Ellipse::Ellipse Ellipse</field>
    <field name="text">Default constructor Constructs an ellipse with semimajor axis 1 and semiminor axis 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Ellipse::operator+=</field>
    <field name="args">(Point&lt; real_t &gt; a)</field>
    <field name="url">classOFELI_1_1Ellipse.html#ab7bfb60cb61a39650cfa0df4df9d63c2</field>
    <field name="keywords">operator+= OFELI::Ellipse::operator+= Ellipse</field>
    <field name="text">Operator Translate ellipse by a vector a a Vector defining the translation</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Equa</field>
    <field name="url">classOFELI_1_1Equa.html</field>
    <field name="keywords">Equa</field>
    <field name="text">Mother abstract class to describe equation Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa::setMatrixType</field>
    <field name="args">(int t)</field>
    <field name="url">classOFELI_1_1Equa.html#a28dc6e37b3582dfaf59b23135fb06682</field>
    <field name="keywords">setMatrixType OFELI::Equa::setMatrixType Equa</field>
    <field name="text">Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix t Type of the used matrix To choose among the enumerated values SKYLINE SPARSE DIAGONAL TRIDIAGONAL SYMMETRIC UNSYMMETRIC IDENTITY Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix Choose type of matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa::getMesh</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Equa.html#a33d260bca42fe66a8536f2eac63adc64</field>
    <field name="keywords">getMesh OFELI::Equa::getMesh Equa</field>
    <field name="text">Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa::getLinearSolver</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa.html#a4988b63cdeb08773e2bffc3591ac3bdb</field>
    <field name="keywords">getLinearSolver OFELI::Equa::getLinearSolver Equa</field>
    <field name="text">Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance Return reference to linear solver instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa::~Equa</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa.html#a678813c91567f705fb361533d9c7f2bc</field>
    <field name="keywords">OFELI::Equa::~Equa Equa</field>
    <field name="text">Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa::solveLinearSystem</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;b, Vect&lt; real_t &gt; &amp;x)</field>
    <field name="url">classOFELI_1_1Equa.html#a7e915d3489c2fb77bd571c219d48533d</field>
    <field name="keywords">solveLinearSystem OFELI::Equa::solveLinearSystem Equa</field>
    <field name="text">Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side b Vector containing right-hand side x Vector containing initial guess of solution on input actual solution on output Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side Solve the linear system with given right-hand side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa::setMesh</field>
    <field name="args">(Mesh &amp;m)</field>
    <field name="url">classOFELI_1_1Equa.html#a82708ffcc31d4d630863187f3f137ee3</field>
    <field name="keywords">setMesh OFELI::Equa::setMesh Equa</field>
    <field name="text">Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones Define mesh and renumber DOFs after removing imposed ones</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa::setSolver</field>
    <field name="args">(Iteration ls, Preconditioner pc=IDENT_PREC)</field>
    <field name="url">classOFELI_1_1Equa.html#aa76ba7a5ad0412484df8aeaa34df03a3</field>
    <field name="keywords">setSolver OFELI::Equa::setSolver Equa</field>
    <field name="text">Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system ls Solver of the linear system To choose among the enumerated values DIRECT_SOLVER CG_SOLVER GMRES_SOLVER DIRECT_SOLVER Use a facorization solver default CG_SOLVER Conjugate Gradient iterative solver CGS_SOLVER Squared Conjugate Gradient iterative solver BICG_SOLVER BiConjugate Gradient iterative solver BICG_STAB_SOLVER BiConjugate Gradient Stabilized iterative solver GMRES_SOLVER GMRES iterative solver QMR_SOLVER QMR iterative solver pc Preconditioner to associate to the iterative solver If the direct solver was chosen for the first argument this argument is not used Otherwise choose among the enumerated values IDENT_PREC Identity preconditioner no preconditioning default DIAG_PREC Diagonal preconditioner ILU_PREC Incomplete LU factorization preconditioner Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system Choose solver for the linear system</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa::Equa</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa.html#aae7f04361ea6cc96d59317348467afa6</field>
    <field name="keywords">Equa OFELI::Equa::Equa Equa</field>
    <field name="text">Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa::solveLinearSystem</field>
    <field name="args">(Matrix&lt; real_t &gt; *A, Vect&lt; real_t &gt; &amp;b, Vect&lt; real_t &gt; &amp;x)</field>
    <field name="url">classOFELI_1_1Equa.html#abff1dbe8f0d9a00693a159e6af5b60d1</field>
    <field name="keywords">solveLinearSystem OFELI::Equa::solveLinearSystem Equa</field>
    <field name="text">Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side A Pointer to matrix of the system b Vector containing right-hand side x Vector containing initial guess of solution on input actual solution on output Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side Solve the linear system with given matrix and right-hand side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa::LinearSystemInfo</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa.html#ad25e8a8874756b7211620a56e04666c7</field>
    <field name="keywords">LinearSystemInfo OFELI::Equa::LinearSystemInfo Equa</field>
    <field name="text">Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver Print info on linear system solver</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa::getMatrix</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Equa.html#afc12eef96402127dfff92558262c07b8</field>
    <field name="keywords">getMatrix OFELI::Equa::getMatrix Equa</field>
    <field name="text">Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix Return pointer to matrix</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Equa_Acoustics</field>
    <field name="url">classOFELI_1_1Equa__Acoustics.html</field>
    <field name="keywords">Equa_Acoustics Equa_Acoustics&lt; 2, 2, 1, 1 &gt; Equa_Acoustics&lt; 3, 3, 2, 2 &gt;</field>
    <field name="text">Abstract class for Wave Finite Element classes Number of element nodes Number of element equations Number of side nodes Number of side equations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Acoustics::build</field>
    <field name="args">(TimeStepping &amp;s)</field>
    <field name="url">classOFELI_1_1Equa__Acoustics.html#a3d205a8b8188a1e0d1e07091b775bbe7</field>
    <field name="keywords">build OFELI::Equa_Acoustics::build Equa_Acoustics&lt; NEN_, NEE_, NSN_, NSE_ &gt; build OFELI::Equa_Acoustics&lt; 2, 2, 1, 1 &gt;::build Equa_Acoustics&lt; 2, 2, 1, 1 &gt; build OFELI::Equa_Acoustics&lt; 3, 3, 2, 2 &gt;::build Equa_Acoustics&lt; 3, 3, 2, 2 &gt;</field>
    <field name="text">Build the linear system of equations Before using this function one must have properly selected appropriate options for The choice of a steady state or transient analysis By default the analysis is stationary In the case of transient analysis the choice of a time integration scheme and a lumped or consistent mass matrix If transient analysis is chosen the lumped mass matrix option is chosen by default and the implicit Euler scheme is used by default for time integration s Reference to used TimeStepping instance Build the linear system of equations Build the linear system of equations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Acoustics::LMass</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1Equa__Acoustics.html#a5d56db04c7afd40bd62fbbbcaafe6559</field>
    <field name="keywords">LMass OFELI::Equa_Acoustics::LMass Equa_Acoustics&lt; NEN_, NEE_, NSN_, NSE_ &gt; LMass OFELI::Equa_Acoustics&lt; 2, 2, 1, 1 &gt;::LMass Equa_Acoustics&lt; 2, 2, 1, 1 &gt; LMass OFELI::Equa_Acoustics&lt; 3, 3, 2, 2 &gt;::LMass Equa_Acoustics&lt; 3, 3, 2, 2 &gt;</field>
    <field name="text">Add lumped mass contribution to element matrix coef coefficient to multiply by the matrix before adding Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Acoustics::Mass</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1Equa__Acoustics.html#a6d344362c30ab9e83665623bb793e0d6</field>
    <field name="keywords">Mass OFELI::Equa_Acoustics::Mass Equa_Acoustics&lt; NEN_, NEE_, NSN_, NSE_ &gt; Mass OFELI::Equa_Acoustics&lt; 2, 2, 1, 1 &gt;::Mass Equa_Acoustics&lt; 2, 2, 1, 1 &gt; Mass OFELI::Equa_Acoustics&lt; 3, 3, 2, 2 &gt;::Mass Equa_Acoustics&lt; 3, 3, 2, 2 &gt;</field>
    <field name="text">Add consistent mass contribution to left-hand side coef coefficient to multiply by the matrix before adding Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Acoustics::build</field>
    <field name="args">(EigenProblemSolver &amp;e)</field>
    <field name="url">classOFELI_1_1Equa__Acoustics.html#a707e4f7e7fe3140fd7a6fefe4774f03d</field>
    <field name="keywords">build OFELI::Equa_Acoustics::build Equa_Acoustics&lt; NEN_, NEE_, NSN_, NSE_ &gt; build OFELI::Equa_Acoustics&lt; 2, 2, 1, 1 &gt;::build Equa_Acoustics&lt; 2, 2, 1, 1 &gt; build OFELI::Equa_Acoustics&lt; 3, 3, 2, 2 &gt;::build Equa_Acoustics&lt; 3, 3, 2, 2 &gt;</field>
    <field name="text">Build the linear system for an eigenvalue problem e Reference to used EigenProblemSolver instance Build the linear system for an eigenvalue problem Build the linear system for an eigenvalue problem</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Acoustics::build</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__Acoustics.html#a7740c7ab195c03ac140f1f75f633470f</field>
    <field name="keywords">build OFELI::Equa_Acoustics::build Equa_Acoustics&lt; NEN_, NEE_, NSN_, NSE_ &gt; build OFELI::Equa_Acoustics&lt; 2, 2, 1, 1 &gt;::build Equa_Acoustics&lt; 2, 2, 1, 1 &gt; build OFELI::Equa_Acoustics&lt; 3, 3, 2, 2 &gt;::build Equa_Acoustics&lt; 3, 3, 2, 2 &gt;</field>
    <field name="text">Build the linear system of equations Before using this function one must have properly selected appropriate options for The choice of a steady state or transient analysis By default the analysis is stationary In the case of transient analysis the choice of a time integration scheme and a lumped or consistent mass matrix If transient analysis is chosen the lumped mass matrix option is chosen by default and the implicit Euler scheme is used by default for time integration Build the linear system of equations Build the linear system of equations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Acoustics::BoundaryRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1Equa__Acoustics.html#ab08651853053c5bff38e8fe3737fdc4c</field>
    <field name="keywords">BoundaryRHS OFELI::Equa_Acoustics::BoundaryRHS Equa_Acoustics&lt; NEN_, NEE_, NSN_, NSE_ &gt; BoundaryRHS OFELI::Equa_Acoustics&lt; 2, 2, 1, 1 &gt;::BoundaryRHS Equa_Acoustics&lt; 2, 2, 1, 1 &gt; BoundaryRHS OFELI::Equa_Acoustics&lt; 3, 3, 2, 2 &gt;::BoundaryRHS Equa_Acoustics&lt; 3, 3, 2, 2 &gt;</field>
    <field name="text">Add boundary right-hand side term to right-hand side f Vector containing source at nodes Add boundary right-hand side term to right-hand side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Acoustics::BodyRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1Equa__Acoustics.html#ac78bfd5e2f3f8dea4715b2e84653acec</field>
    <field name="keywords">BodyRHS OFELI::Equa_Acoustics::BodyRHS Equa_Acoustics&lt; NEN_, NEE_, NSN_, NSE_ &gt; BodyRHS OFELI::Equa_Acoustics&lt; 2, 2, 1, 1 &gt;::BodyRHS Equa_Acoustics&lt; 2, 2, 1, 1 &gt; BodyRHS OFELI::Equa_Acoustics&lt; 3, 3, 2, 2 &gt;::BodyRHS Equa_Acoustics&lt; 3, 3, 2, 2 &gt;</field>
    <field name="text">Add body right-hand side term to right-hand side f Vector containing source at nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Acoustics::setSpeed</field>
    <field name="args">(const real_t &amp;c)</field>
    <field name="url">classOFELI_1_1Equa__Acoustics.html#ac8ccfee003b20d24cfe001c21358c62e</field>
    <field name="keywords">setSpeed OFELI::Equa_Acoustics::setSpeed Equa_Acoustics&lt; NEN_, NEE_, NSN_, NSE_ &gt; setSpeed OFELI::Equa_Acoustics&lt; 2, 2, 1, 1 &gt;::setSpeed Equa_Acoustics&lt; 2, 2, 1, 1 &gt; setSpeed OFELI::Equa_Acoustics&lt; 3, 3, 2, 2 &gt;::setSpeed Equa_Acoustics&lt; 3, 3, 2, 2 &gt;</field>
    <field name="text">Set speed of sound constant Set speed of sound constant Set speed of sound constant</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Acoustics::~Equa_Acoustics</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__Acoustics.html#ae8a647acef8664dd28de63da56aa7a3c</field>
    <field name="keywords">OFELI::Equa_Acoustics::~Equa_Acoustics Equa_Acoustics&lt; NEN_, NEE_, NSN_, NSE_ &gt; OFELI::Equa_Acoustics&lt; 2, 2, 1, 1 &gt;::~Equa_Acoustics Equa_Acoustics&lt; 2, 2, 1, 1 &gt; OFELI::Equa_Acoustics&lt; 3, 3, 2, 2 &gt;::~Equa_Acoustics Equa_Acoustics&lt; 3, 3, 2, 2 &gt;</field>
    <field name="text">Destructor Destructor Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Acoustics::Equa_Acoustics</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__Acoustics.html#aebf64f678818453377e015bfe3640462</field>
    <field name="keywords">Equa_Acoustics OFELI::Equa_Acoustics::Equa_Acoustics Equa_Acoustics&lt; NEN_, NEE_, NSN_, NSE_ &gt; Equa_Acoustics OFELI::Equa_Acoustics&lt; 2, 2, 1, 1 &gt;::Equa_Acoustics Equa_Acoustics&lt; 2, 2, 1, 1 &gt; Equa_Acoustics OFELI::Equa_Acoustics&lt; 3, 3, 2, 2 &gt;::Equa_Acoustics Equa_Acoustics&lt; 3, 3, 2, 2 &gt;</field>
    <field name="text">Default constructor Constructs an empty equation Default constructor Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Acoustics::Diffusion</field>
    <field name="args">(real_t coef=1.)</field>
    <field name="url">classOFELI_1_1Equa__Acoustics.html#afb95d0bc30161960fc28d23075265630</field>
    <field name="keywords">Diffusion OFELI::Equa_Acoustics::Diffusion Equa_Acoustics&lt; NEN_, NEE_, NSN_, NSE_ &gt; Diffusion OFELI::Equa_Acoustics&lt; 2, 2, 1, 1 &gt;::Diffusion Equa_Acoustics&lt; 2, 2, 1, 1 &gt; Diffusion OFELI::Equa_Acoustics&lt; 3, 3, 2, 2 &gt;::Diffusion Equa_Acoustics&lt; 3, 3, 2, 2 &gt;</field>
    <field name="text">Add diffusion term to element matrix</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Equa_Electromagnetics</field>
    <field name="url">classOFELI_1_1Equa__Electromagnetics.html</field>
    <field name="keywords">Equa_Electromagnetics Equa_Electromagnetics&lt; 3, 6, 2, 4 &gt;</field>
    <field name="text">Abstract class for Electromagnetics Equation classes Number of element nodes Number of element equations Number of side nodes Number of side equations Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Electromagnetics::setMaterial</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__Electromagnetics.html#a381ccce0928fbad840a57b054e7eb9b0</field>
    <field name="keywords">setMaterial OFELI::Equa_Electromagnetics::setMaterial Equa_Electromagnetics&lt; NEN_, NEE_, NSN_, NSE_ &gt; setMaterial OFELI::Equa_Electromagnetics&lt; 3, 6, 2, 4 &gt;::setMaterial Equa_Electromagnetics&lt; 3, 6, 2, 4 &gt;</field>
    <field name="text">Set material properties Set material properties Set material properties Set material properties</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Electromagnetics::MagneticPermeability</field>
    <field name="args">(const string &amp;exp)</field>
    <field name="url">classOFELI_1_1Equa__Electromagnetics.html#a46e1f0f3840c0013e60118f4562895d2</field>
    <field name="keywords">MagneticPermeability OFELI::Equa_Electromagnetics::MagneticPermeability Equa_Electromagnetics&lt; NEN_, NEE_, NSN_, NSE_ &gt; MagneticPermeability OFELI::Equa_Electromagnetics&lt; 3, 6, 2, 4 &gt;::MagneticPermeability Equa_Electromagnetics&lt; 3, 6, 2, 4 &gt;</field>
    <field name="text">Set magnetic permeability given by an algebraic expression Set magnetic permeability given by an algebraic expression Set magnetic permeability given by an algebraic expression Set magnetic permeability given by an algebraic expression</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Electromagnetics::ElectricConductivity</field>
    <field name="args">(const real_t &amp;sigma)</field>
    <field name="url">classOFELI_1_1Equa__Electromagnetics.html#a5fd5e74e2b08cbd9f0a4d21582b18e48</field>
    <field name="keywords">ElectricConductivity OFELI::Equa_Electromagnetics::ElectricConductivity Equa_Electromagnetics&lt; NEN_, NEE_, NSN_, NSE_ &gt; ElectricConductivity OFELI::Equa_Electromagnetics&lt; 3, 6, 2, 4 &gt;::ElectricConductivity Equa_Electromagnetics&lt; 3, 6, 2, 4 &gt;</field>
    <field name="text">Set constant electric conductivity Set constant electric conductivity Set constant electric conductivity Set constant electric conductivity</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Electromagnetics::ElectricConductivity</field>
    <field name="args">(const string &amp;exp)</field>
    <field name="url">classOFELI_1_1Equa__Electromagnetics.html#a8f0508214458c79b1da012058364ad40</field>
    <field name="keywords">ElectricConductivity OFELI::Equa_Electromagnetics::ElectricConductivity Equa_Electromagnetics&lt; NEN_, NEE_, NSN_, NSE_ &gt; ElectricConductivity OFELI::Equa_Electromagnetics&lt; 3, 6, 2, 4 &gt;::ElectricConductivity Equa_Electromagnetics&lt; 3, 6, 2, 4 &gt;</field>
    <field name="text">set electric conductivity given by an algebraic expression set electric conductivity given by an algebraic expression set electric conductivity given by an algebraic expression set electric conductivity given by an algebraic expression</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Electromagnetics::MagneticPermeability</field>
    <field name="args">(const real_t &amp;mu)</field>
    <field name="url">classOFELI_1_1Equa__Electromagnetics.html#aaaae39e158d68b6422749643570ce498</field>
    <field name="keywords">MagneticPermeability OFELI::Equa_Electromagnetics::MagneticPermeability Equa_Electromagnetics&lt; NEN_, NEE_, NSN_, NSE_ &gt; MagneticPermeability OFELI::Equa_Electromagnetics&lt; 3, 6, 2, 4 &gt;::MagneticPermeability Equa_Electromagnetics&lt; 3, 6, 2, 4 &gt;</field>
    <field name="text">Set constant magnetic permeability Set constant magnetic permeability Set constant magnetic permeability Set constant magnetic permeability</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Equa_Fluid</field>
    <field name="url">classOFELI_1_1Equa__Fluid.html</field>
    <field name="keywords">Equa_Fluid Equa_Fluid&lt; 3, 6, 2, 4 &gt; Equa_Fluid&lt; 4, 12, 3, 9 &gt; Equa_Fluid&lt; 4, 8, 2, 4 &gt;</field>
    <field name="text">Abstract class for Fluid Dynamics Equation classes data type double float Number of element nodes Number of element equations Number of side nodes Number of side equations Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Fluid::~Equa_Fluid</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__Fluid.html#a0c516b6b144f596da1d613b11d3cc1a9</field>
    <field name="keywords">OFELI::Equa_Fluid::~Equa_Fluid Equa_Fluid&lt; NEN_, NEE_, NSN_, NSE_ &gt; OFELI::Equa_Fluid&lt; 4, 8, 2, 4 &gt;::~Equa_Fluid Equa_Fluid&lt; 4, 8, 2, 4 &gt; OFELI::Equa_Fluid&lt; 3, 6, 2, 4 &gt;::~Equa_Fluid Equa_Fluid&lt; 3, 6, 2, 4 &gt; OFELI::Equa_Fluid&lt; 4, 12, 3, 9 &gt;::~Equa_Fluid Equa_Fluid&lt; 4, 12, 3, 9 &gt;</field>
    <field name="text">Destructor Destructor Destructor Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Fluid::Viscosity</field>
    <field name="args">(const real_t &amp;visc)</field>
    <field name="url">classOFELI_1_1Equa__Fluid.html#a16f74d585baef846ec638fb02ca45ad6</field>
    <field name="keywords">Viscosity OFELI::Equa_Fluid::Viscosity Equa_Fluid&lt; NEN_, NEE_, NSN_, NSE_ &gt; Viscosity OFELI::Equa_Fluid&lt; 4, 8, 2, 4 &gt;::Viscosity Equa_Fluid&lt; 4, 8, 2, 4 &gt; Viscosity OFELI::Equa_Fluid&lt; 3, 6, 2, 4 &gt;::Viscosity Equa_Fluid&lt; 3, 6, 2, 4 &gt; Viscosity OFELI::Equa_Fluid&lt; 4, 12, 3, 9 &gt;::Viscosity Equa_Fluid&lt; 4, 12, 3, 9 &gt;</field>
    <field name="text">Set constant Viscosity Set constant Viscosity Set constant Viscosity Set constant Viscosity</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Fluid::setMaterial</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__Fluid.html#a381ccce0928fbad840a57b054e7eb9b0</field>
    <field name="keywords">setMaterial OFELI::Equa_Fluid::setMaterial Equa_Fluid&lt; NEN_, NEE_, NSN_, NSE_ &gt; setMaterial OFELI::Equa_Fluid&lt; 4, 8, 2, 4 &gt;::setMaterial Equa_Fluid&lt; 4, 8, 2, 4 &gt; setMaterial OFELI::Equa_Fluid&lt; 3, 6, 2, 4 &gt;::setMaterial Equa_Fluid&lt; 3, 6, 2, 4 &gt; setMaterial OFELI::Equa_Fluid&lt; 4, 12, 3, 9 &gt;::setMaterial Equa_Fluid&lt; 4, 12, 3, 9 &gt;</field>
    <field name="text">Set material properties Set material properties Set material properties Set material properties</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Fluid::ThermalExpansion</field>
    <field name="args">(const string &amp;exp)</field>
    <field name="url">classOFELI_1_1Equa__Fluid.html#a3b545cfd54ccd7a23473e1648dba386e</field>
    <field name="keywords">ThermalExpansion OFELI::Equa_Fluid::ThermalExpansion Equa_Fluid&lt; NEN_, NEE_, NSN_, NSE_ &gt; ThermalExpansion OFELI::Equa_Fluid&lt; 4, 8, 2, 4 &gt;::ThermalExpansion Equa_Fluid&lt; 4, 8, 2, 4 &gt; ThermalExpansion OFELI::Equa_Fluid&lt; 3, 6, 2, 4 &gt;::ThermalExpansion Equa_Fluid&lt; 3, 6, 2, 4 &gt; ThermalExpansion OFELI::Equa_Fluid&lt; 4, 12, 3, 9 &gt;::ThermalExpansion Equa_Fluid&lt; 4, 12, 3, 9 &gt;</field>
    <field name="text">Set thermal expansion coefficient given by an algebraic expression Set thermal expansion coefficient given by an algebraic expression Set thermal expansion coefficient given by an algebraic expression Set thermal expansion coefficient given by an algebraic expression</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Fluid::Density</field>
    <field name="args">(const string &amp;exp)</field>
    <field name="url">classOFELI_1_1Equa__Fluid.html#a4247308b44896f64897ca1e21ad04c44</field>
    <field name="keywords">Density OFELI::Equa_Fluid::Density Equa_Fluid&lt; NEN_, NEE_, NSN_, NSE_ &gt; Density OFELI::Equa_Fluid&lt; 4, 8, 2, 4 &gt;::Density Equa_Fluid&lt; 4, 8, 2, 4 &gt; Density OFELI::Equa_Fluid&lt; 3, 6, 2, 4 &gt;::Density Equa_Fluid&lt; 3, 6, 2, 4 &gt; Density OFELI::Equa_Fluid&lt; 4, 12, 3, 9 &gt;::Density Equa_Fluid&lt; 4, 12, 3, 9 &gt;</field>
    <field name="text">Set Density given by an algebraic expression Set Density given by an algebraic expression Set Density given by an algebraic expression Set Density given by an algebraic expression</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Fluid::Density</field>
    <field name="args">(const real_t &amp;dens)</field>
    <field name="url">classOFELI_1_1Equa__Fluid.html#a665daeb8dfba9734c2a1f611419e7b3a</field>
    <field name="keywords">Density OFELI::Equa_Fluid::Density Equa_Fluid&lt; NEN_, NEE_, NSN_, NSE_ &gt; Density OFELI::Equa_Fluid&lt; 4, 8, 2, 4 &gt;::Density Equa_Fluid&lt; 4, 8, 2, 4 &gt; Density OFELI::Equa_Fluid&lt; 3, 6, 2, 4 &gt;::Density Equa_Fluid&lt; 3, 6, 2, 4 &gt; Density OFELI::Equa_Fluid&lt; 4, 12, 3, 9 &gt;::Density Equa_Fluid&lt; 4, 12, 3, 9 &gt;</field>
    <field name="text">Set constant Viscosity Set constant Viscosity Set constant Viscosity Set constant Viscosity</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Fluid::Viscosity</field>
    <field name="args">(const string &amp;exp)</field>
    <field name="url">classOFELI_1_1Equa__Fluid.html#a91cf8d8aac8ff153f8bb1ebc92d2a82a</field>
    <field name="keywords">Viscosity OFELI::Equa_Fluid::Viscosity Equa_Fluid&lt; NEN_, NEE_, NSN_, NSE_ &gt; Viscosity OFELI::Equa_Fluid&lt; 4, 8, 2, 4 &gt;::Viscosity Equa_Fluid&lt; 4, 8, 2, 4 &gt; Viscosity OFELI::Equa_Fluid&lt; 3, 6, 2, 4 &gt;::Viscosity Equa_Fluid&lt; 3, 6, 2, 4 &gt; Viscosity OFELI::Equa_Fluid&lt; 4, 12, 3, 9 &gt;::Viscosity Equa_Fluid&lt; 4, 12, 3, 9 &gt;</field>
    <field name="text">Set viscosity given by an algebraic expression Set viscosity given by an algebraic expression Set viscosity given by an algebraic expression Set viscosity given by an algebraic expression</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Fluid::Equa_Fluid</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__Fluid.html#adbf7f6a824a1180a115155429cd53263</field>
    <field name="keywords">Equa_Fluid OFELI::Equa_Fluid::Equa_Fluid Equa_Fluid&lt; NEN_, NEE_, NSN_, NSE_ &gt; Equa_Fluid OFELI::Equa_Fluid&lt; 4, 8, 2, 4 &gt;::Equa_Fluid Equa_Fluid&lt; 4, 8, 2, 4 &gt; Equa_Fluid OFELI::Equa_Fluid&lt; 3, 6, 2, 4 &gt;::Equa_Fluid Equa_Fluid&lt; 3, 6, 2, 4 &gt; Equa_Fluid OFELI::Equa_Fluid&lt; 4, 12, 3, 9 &gt;::Equa_Fluid Equa_Fluid&lt; 4, 12, 3, 9 &gt;</field>
    <field name="text">Default constructor Constructs an empty equation Default constructor Default constructor Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Fluid::ThermalExpansion</field>
    <field name="args">(const real_t *e)</field>
    <field name="url">classOFELI_1_1Equa__Fluid.html#aeea8cf9a0f55e7d341029b4a99f9bf24</field>
    <field name="keywords">ThermalExpansion OFELI::Equa_Fluid::ThermalExpansion Equa_Fluid&lt; NEN_, NEE_, NSN_, NSE_ &gt; ThermalExpansion OFELI::Equa_Fluid&lt; 4, 8, 2, 4 &gt;::ThermalExpansion Equa_Fluid&lt; 4, 8, 2, 4 &gt; ThermalExpansion OFELI::Equa_Fluid&lt; 3, 6, 2, 4 &gt;::ThermalExpansion Equa_Fluid&lt; 3, 6, 2, 4 &gt; ThermalExpansion OFELI::Equa_Fluid&lt; 4, 12, 3, 9 &gt;::ThermalExpansion Equa_Fluid&lt; 4, 12, 3, 9 &gt;</field>
    <field name="text">Set constant thermal expansion coefficient Set constant thermal expansion coefficient Set constant thermal expansion coefficient Set constant thermal expansion coefficient</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Fluid::Reynolds</field>
    <field name="args">(const real_t &amp;Re)</field>
    <field name="url">classOFELI_1_1Equa__Fluid.html#af5426ba08e08ace1c216f86bb95eec4e</field>
    <field name="keywords">Reynolds OFELI::Equa_Fluid::Reynolds Equa_Fluid&lt; NEN_, NEE_, NSN_, NSE_ &gt; Reynolds OFELI::Equa_Fluid&lt; 4, 8, 2, 4 &gt;::Reynolds Equa_Fluid&lt; 4, 8, 2, 4 &gt; Reynolds OFELI::Equa_Fluid&lt; 3, 6, 2, 4 &gt;::Reynolds Equa_Fluid&lt; 3, 6, 2, 4 &gt; Reynolds OFELI::Equa_Fluid&lt; 4, 12, 3, 9 &gt;::Reynolds Equa_Fluid&lt; 4, 12, 3, 9 &gt;</field>
    <field name="text">Set Reynolds number Set Reynolds number Set Reynolds number Set Reynolds number</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Equa_Laplace</field>
    <field name="url">classOFELI_1_1Equa__Laplace.html</field>
    <field name="keywords">Equa_Laplace Equa_Laplace&lt; 2, 2, 1, 1 &gt; Equa_Laplace&lt; 3, 3, 1, 1 &gt; Equa_Laplace&lt; 3, 3, 2, 2 &gt; Equa_Laplace&lt; 4, 4, 3, 3 &gt; Equa_Laplace&lt; 6, 6, 3, 3 &gt;</field>
    <field name="text">Abstract class for classes about the Laplace equation T_ Data type real_t float complex&lt;real_t&gt; NEN_ Number of element nodes NEE_ Number of element equations NSN_ Number of side nodes NSE_ Number of side equations Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Laplace::BoundaryRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;h)</field>
    <field name="url">classOFELI_1_1Equa__Laplace.html#a4898e17d7619a02fda1a011da624b3af</field>
    <field name="keywords">BoundaryRHS OFELI::Equa_Laplace::BoundaryRHS Equa_Laplace&lt; NEN_, NEE_, NSN_, NSE_ &gt; BoundaryRHS OFELI::Equa_Laplace&lt; 2, 2, 1, 1 &gt;::BoundaryRHS Equa_Laplace&lt; 2, 2, 1, 1 &gt; BoundaryRHS OFELI::Equa_Laplace&lt; 3, 3, 1, 1 &gt;::BoundaryRHS Equa_Laplace&lt; 3, 3, 1, 1 &gt; BoundaryRHS OFELI::Equa_Laplace&lt; 3, 3, 2, 2 &gt;::BoundaryRHS Equa_Laplace&lt; 3, 3, 2, 2 &gt; BoundaryRHS OFELI::Equa_Laplace&lt; 6, 6, 3, 3 &gt;::BoundaryRHS Equa_Laplace&lt; 6, 6, 3, 3 &gt; BoundaryRHS OFELI::Equa_Laplace&lt; 4, 4, 3, 3 &gt;::BoundaryRHS Equa_Laplace&lt; 4, 4, 3, 3 &gt;</field>
    <field name="text">Add boundary source term to right-hand side h Vector containing the source given function at mesh nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Laplace::buildEigen</field>
    <field name="args">(int opt=0)</field>
    <field name="url">classOFELI_1_1Equa__Laplace.html#a4d5573c96d55640c2dbd525966a0cf8d</field>
    <field name="keywords">buildEigen OFELI::Equa_Laplace::buildEigen Equa_Laplace&lt; NEN_, NEE_, NSN_, NSE_ &gt; buildEigen OFELI::Equa_Laplace&lt; 2, 2, 1, 1 &gt;::buildEigen Equa_Laplace&lt; 2, 2, 1, 1 &gt; buildEigen OFELI::Equa_Laplace&lt; 3, 3, 1, 1 &gt;::buildEigen Equa_Laplace&lt; 3, 3, 1, 1 &gt; buildEigen OFELI::Equa_Laplace&lt; 3, 3, 2, 2 &gt;::buildEigen Equa_Laplace&lt; 3, 3, 2, 2 &gt; buildEigen OFELI::Equa_Laplace&lt; 6, 6, 3, 3 &gt;::buildEigen Equa_Laplace&lt; 6, 6, 3, 3 &gt; buildEigen OFELI::Equa_Laplace&lt; 4, 4, 3, 3 &gt;::buildEigen Equa_Laplace&lt; 4, 4, 3, 3 &gt;</field>
    <field name="text">Build matrices for an eigenvalue problem Build matrices for an eigenvalue problem</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Laplace::build</field>
    <field name="args">(EigenProblemSolver &amp;e)</field>
    <field name="url">classOFELI_1_1Equa__Laplace.html#a707e4f7e7fe3140fd7a6fefe4774f03d</field>
    <field name="keywords">build OFELI::Equa_Laplace::build Equa_Laplace&lt; NEN_, NEE_, NSN_, NSE_ &gt; build OFELI::Equa_Laplace&lt; 2, 2, 1, 1 &gt;::build Equa_Laplace&lt; 2, 2, 1, 1 &gt; build OFELI::Equa_Laplace&lt; 3, 3, 1, 1 &gt;::build Equa_Laplace&lt; 3, 3, 1, 1 &gt; build OFELI::Equa_Laplace&lt; 3, 3, 2, 2 &gt;::build Equa_Laplace&lt; 3, 3, 2, 2 &gt; build OFELI::Equa_Laplace&lt; 6, 6, 3, 3 &gt;::build Equa_Laplace&lt; 6, 6, 3, 3 &gt; build OFELI::Equa_Laplace&lt; 4, 4, 3, 3 &gt;::build Equa_Laplace&lt; 4, 4, 3, 3 &gt;</field>
    <field name="text">Build the linear system for an eigenvalue problem e Reference to used EigenProblemSolver instance Build the linear system for an eigenvalue problem Build the linear system for an eigenvalue problem Build the linear system for an eigenvalue problem Build the linear system for an eigenvalue problem Build the linear system for an eigenvalue problem</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Laplace::build</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__Laplace.html#a7740c7ab195c03ac140f1f75f633470f</field>
    <field name="keywords">build OFELI::Equa_Laplace::build Equa_Laplace&lt; NEN_, NEE_, NSN_, NSE_ &gt; build OFELI::Equa_Laplace&lt; 2, 2, 1, 1 &gt;::build Equa_Laplace&lt; 2, 2, 1, 1 &gt; build OFELI::Equa_Laplace&lt; 3, 3, 1, 1 &gt;::build Equa_Laplace&lt; 3, 3, 1, 1 &gt; build OFELI::Equa_Laplace&lt; 3, 3, 2, 2 &gt;::build Equa_Laplace&lt; 3, 3, 2, 2 &gt; build OFELI::Equa_Laplace&lt; 6, 6, 3, 3 &gt;::build Equa_Laplace&lt; 6, 6, 3, 3 &gt; build OFELI::Equa_Laplace&lt; 4, 4, 3, 3 &gt;::build Equa_Laplace&lt; 4, 4, 3, 3 &gt;</field>
    <field name="text">Build global matrix and right-hand side The problem matrix and right-hand side are the ones used in the constructor They are updated in this member function Build global matrix and right-hand side Build global matrix and right-hand side Build global matrix and right-hand side Build global matrix and right-hand side Build global matrix and right-hand side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Laplace::LHS</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__Laplace.html#a819098587b7f00de66c5c6a025650c9e</field>
    <field name="keywords">LHS OFELI::Equa_Laplace::LHS Equa_Laplace&lt; NEN_, NEE_, NSN_, NSE_ &gt; LHS OFELI::Equa_Laplace&lt; 2, 2, 1, 1 &gt;::LHS Equa_Laplace&lt; 2, 2, 1, 1 &gt; LHS OFELI::Equa_Laplace&lt; 3, 3, 1, 1 &gt;::LHS Equa_Laplace&lt; 3, 3, 1, 1 &gt; LHS OFELI::Equa_Laplace&lt; 3, 3, 2, 2 &gt;::LHS Equa_Laplace&lt; 3, 3, 2, 2 &gt; LHS OFELI::Equa_Laplace&lt; 6, 6, 3, 3 &gt;::LHS Equa_Laplace&lt; 6, 6, 3, 3 &gt; LHS OFELI::Equa_Laplace&lt; 4, 4, 3, 3 &gt;::LHS Equa_Laplace&lt; 4, 4, 3, 3 &gt;</field>
    <field name="text">Add finite element matrix to left-hand side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Laplace::Equa_Laplace</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__Laplace.html#a94ac4645014ffd76689253e3111e4543</field>
    <field name="keywords">Equa_Laplace OFELI::Equa_Laplace::Equa_Laplace Equa_Laplace&lt; NEN_, NEE_, NSN_, NSE_ &gt; Equa_Laplace OFELI::Equa_Laplace&lt; 2, 2, 1, 1 &gt;::Equa_Laplace Equa_Laplace&lt; 2, 2, 1, 1 &gt; Equa_Laplace OFELI::Equa_Laplace&lt; 3, 3, 1, 1 &gt;::Equa_Laplace Equa_Laplace&lt; 3, 3, 1, 1 &gt; Equa_Laplace OFELI::Equa_Laplace&lt; 3, 3, 2, 2 &gt;::Equa_Laplace Equa_Laplace&lt; 3, 3, 2, 2 &gt; Equa_Laplace OFELI::Equa_Laplace&lt; 6, 6, 3, 3 &gt;::Equa_Laplace Equa_Laplace&lt; 6, 6, 3, 3 &gt; Equa_Laplace OFELI::Equa_Laplace&lt; 4, 4, 3, 3 &gt;::Equa_Laplace Equa_Laplace&lt; 4, 4, 3, 3 &gt;</field>
    <field name="text">Default constructor Constructs an empty equation Default constructor Default constructor Default constructor Default constructor Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Laplace::~Equa_Laplace</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__Laplace.html#ab45e5524e550afac0ab1f65cafc6da67</field>
    <field name="keywords">OFELI::Equa_Laplace::~Equa_Laplace Equa_Laplace&lt; NEN_, NEE_, NSN_, NSE_ &gt; OFELI::Equa_Laplace&lt; 2, 2, 1, 1 &gt;::~Equa_Laplace Equa_Laplace&lt; 2, 2, 1, 1 &gt; OFELI::Equa_Laplace&lt; 3, 3, 1, 1 &gt;::~Equa_Laplace Equa_Laplace&lt; 3, 3, 1, 1 &gt; OFELI::Equa_Laplace&lt; 3, 3, 2, 2 &gt;::~Equa_Laplace Equa_Laplace&lt; 3, 3, 2, 2 &gt; OFELI::Equa_Laplace&lt; 6, 6, 3, 3 &gt;::~Equa_Laplace Equa_Laplace&lt; 6, 6, 3, 3 &gt; OFELI::Equa_Laplace&lt; 4, 4, 3, 3 &gt;::~Equa_Laplace Equa_Laplace&lt; 4, 4, 3, 3 &gt;</field>
    <field name="text">Destructor Destructor Destructor Destructor Destructor Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Laplace::BodyRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1Equa__Laplace.html#ac78bfd5e2f3f8dea4715b2e84653acec</field>
    <field name="keywords">BodyRHS OFELI::Equa_Laplace::BodyRHS Equa_Laplace&lt; NEN_, NEE_, NSN_, NSE_ &gt; BodyRHS OFELI::Equa_Laplace&lt; 2, 2, 1, 1 &gt;::BodyRHS Equa_Laplace&lt; 2, 2, 1, 1 &gt; BodyRHS OFELI::Equa_Laplace&lt; 3, 3, 1, 1 &gt;::BodyRHS Equa_Laplace&lt; 3, 3, 1, 1 &gt; BodyRHS OFELI::Equa_Laplace&lt; 3, 3, 2, 2 &gt;::BodyRHS Equa_Laplace&lt; 3, 3, 2, 2 &gt; BodyRHS OFELI::Equa_Laplace&lt; 6, 6, 3, 3 &gt;::BodyRHS Equa_Laplace&lt; 6, 6, 3, 3 &gt; BodyRHS OFELI::Equa_Laplace&lt; 4, 4, 3, 3 &gt;::BodyRHS Equa_Laplace&lt; 4, 4, 3, 3 &gt;</field>
    <field name="text">Add body source term to right-hand side f Vector containing the source given function at mesh nodes</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Equa_LinearPDE</field>
    <field name="url">classOFELI_1_1Equa__LinearPDE.html</field>
    <field name="keywords">Equa_LinearPDE Equa_LinearPDE&lt; 2, 1 &gt; Equa_LinearPDE&lt; 3, 2 &gt; Equa_LinearPDE&lt; 4, 3 &gt;</field>
    <field name="text">Abstract class for Finite Element classes for lienar PDEs Number of element nodes Number of side nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_LinearPDE::set_02</field>
    <field name="args">(real_t a=1.0)</field>
    <field name="url">classOFELI_1_1Equa__LinearPDE.html#a050153d8a233d5ee6f6c0ade1e6bac95</field>
    <field name="keywords">set_02 OFELI::Equa_LinearPDE::set_02 Equa_LinearPDE&lt; NEN_, NSN_ &gt; set_02 OFELI::Equa_LinearPDE&lt; 2, 1 &gt;::set_02 Equa_LinearPDE&lt; 2, 1 &gt; set_02 OFELI::Equa_LinearPDE&lt; 3, 2 &gt;::set_02 Equa_LinearPDE&lt; 3, 2 &gt; set_02 OFELI::Equa_LinearPDE&lt; 4, 3 &gt;::set_02 Equa_LinearPDE&lt; 4, 3 &gt;</field>
    <field name="text">Set coefficient for term 0 2 0 th order in time 2 nd order in space a Constant coefficient to multiply by 0 2 order term Default 1 Set coefficient for term 0 2 0 th order in time 2 nd order in space Set coefficient for term 0 2 0 th order in time 2 nd order in space</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_LinearPDE::setStab</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__LinearPDE.html#a08575c88a3e78add97b4ad20626a55e6</field>
    <field name="keywords">setStab OFELI::Equa_LinearPDE::setStab Equa_LinearPDE&lt; NEN_, NSN_ &gt; setStab OFELI::Equa_LinearPDE&lt; 2, 1 &gt;::setStab Equa_LinearPDE&lt; 2, 1 &gt; setStab OFELI::Equa_LinearPDE&lt; 3, 2 &gt;::setStab Equa_LinearPDE&lt; 3, 2 &gt; setStab OFELI::Equa_LinearPDE&lt; 4, 3 &gt;::setStab Equa_LinearPDE&lt; 4, 3 &gt;</field>
    <field name="text">Set stabilization for convection term Default is no stabilization Set stabilization for convection term Set stabilization for convection term</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_LinearPDE::setNoLumping</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__LinearPDE.html#a0b9f9c8af0dd1b16700c6a0b5b69cc6a</field>
    <field name="keywords">setNoLumping OFELI::Equa_LinearPDE::setNoLumping Equa_LinearPDE&lt; NEN_, NSN_ &gt; setNoLumping OFELI::Equa_LinearPDE&lt; 2, 1 &gt;::setNoLumping Equa_LinearPDE&lt; 2, 1 &gt; setNoLumping OFELI::Equa_LinearPDE&lt; 3, 2 &gt;::setNoLumping Equa_LinearPDE&lt; 3, 2 &gt; setNoLumping OFELI::Equa_LinearPDE&lt; 4, 3 &gt;::setNoLumping Equa_LinearPDE&lt; 4, 3 &gt;</field>
    <field name="text">Set no lumping Default is lumping Set no lumping Set no lumping</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_LinearPDE::set_20</field>
    <field name="args">(Fct &amp;f)</field>
    <field name="url">classOFELI_1_1Equa__LinearPDE.html#a1f0abe289652dfdf42e4efc603a07fa1</field>
    <field name="keywords">set_20 OFELI::Equa_LinearPDE::set_20 Equa_LinearPDE&lt; NEN_, NSN_ &gt; set_20 OFELI::Equa_LinearPDE&lt; 2, 1 &gt;::set_20 Equa_LinearPDE&lt; 2, 1 &gt; set_20 OFELI::Equa_LinearPDE&lt; 3, 2 &gt;::set_20 Equa_LinearPDE&lt; 3, 2 &gt; set_20 OFELI::Equa_LinearPDE&lt; 4, 3 &gt;::set_20 Equa_LinearPDE&lt; 4, 3 &gt;</field>
    <field name="text">Set coefficient for term 2 0 2 nd order in time 0 th order in space f Function to multiply by 2 0 order term Function of x and t Set coefficient for term 2 0 2 nd order in time 0 th order in space Set coefficient for term 2 0 2 nd order in time 0 th order in space</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_LinearPDE::set_01</field>
    <field name="args">(Fct &amp;f)</field>
    <field name="url">classOFELI_1_1Equa__LinearPDE.html#a1fdf43017d49d323bcd0fd1dc1f72f8f</field>
    <field name="keywords">set_01 OFELI::Equa_LinearPDE::set_01 Equa_LinearPDE&lt; NEN_, NSN_ &gt; set_01 OFELI::Equa_LinearPDE&lt; 2, 1 &gt;::set_01 Equa_LinearPDE&lt; 2, 1 &gt; set_01 OFELI::Equa_LinearPDE&lt; 3, 2 &gt;::set_01 Equa_LinearPDE&lt; 3, 2 &gt; set_01 OFELI::Equa_LinearPDE&lt; 4, 3 &gt;::set_01 Equa_LinearPDE&lt; 4, 3 &gt;</field>
    <field name="text">Set coefficient for term 0 1 0 th order in time 1 st order in time and space f Function to multiply by 0 1 order term Function of x and t Set coefficient for term 0 1 0 th order in time 1 st order in time and space Set coefficient for term 0 1 0 th order in time 1 st order in time and space</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_LinearPDE::Mat_01</field>
    <field name="args">(real_t coef=1.0)</field>
    <field name="url">classOFELI_1_1Equa__LinearPDE.html#a21e30d963b0c8132b1b08481ce5649d9</field>
    <field name="keywords">Mat_01 OFELI::Equa_LinearPDE::Mat_01 Equa_LinearPDE&lt; NEN_, NSN_ &gt; Mat_01 OFELI::Equa_LinearPDE&lt; 2, 1 &gt;::Mat_01 Equa_LinearPDE&lt; 2, 1 &gt; Mat_01 OFELI::Equa_LinearPDE&lt; 3, 2 &gt;::Mat_01 Equa_LinearPDE&lt; 3, 2 &gt; Mat_01 OFELI::Equa_LinearPDE&lt; 4, 3 &gt;::Mat_01 Equa_LinearPDE&lt; 4, 3 &gt;</field>
    <field name="text">Add 0 th order term in time 1 st in space to left-hand side coef coefficient to multiply by the matrix before adding Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_LinearPDE::build</field>
    <field name="args">(TimeStepping &amp;s)</field>
    <field name="url">classOFELI_1_1Equa__LinearPDE.html#a3d205a8b8188a1e0d1e07091b775bbe7</field>
    <field name="keywords">build OFELI::Equa_LinearPDE::build Equa_LinearPDE&lt; NEN_, NSN_ &gt; build OFELI::Equa_LinearPDE&lt; 2, 1 &gt;::build Equa_LinearPDE&lt; 2, 1 &gt; build OFELI::Equa_LinearPDE&lt; 3, 2 &gt;::build Equa_LinearPDE&lt; 3, 2 &gt; build OFELI::Equa_LinearPDE&lt; 4, 3 &gt;::build Equa_LinearPDE&lt; 4, 3 &gt;</field>
    <field name="text">Build the linear system of equations Before using this function one must have properly selected appropriate options for The choice of a steady state or transient analysis By default the analysis is stationary In the case of transient analysis the choice of a time integration scheme and a lumped or consistent capacity matrix If transient analysis is chosen the lumped capacity matrix option is chosen by default and the implicit Euler scheme is used by default for time integration s Reference to used TimeStepping instance Build the linear system of equations Build the linear system of equations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_LinearPDE::set_01</field>
    <field name="args">(Point&lt; real_t &gt; &amp;a)</field>
    <field name="url">classOFELI_1_1Equa__LinearPDE.html#a3d538f50e8feacc8d66647820ded4c27</field>
    <field name="keywords">set_01 OFELI::Equa_LinearPDE::set_01 Equa_LinearPDE&lt; NEN_, NSN_ &gt; set_01 OFELI::Equa_LinearPDE&lt; 2, 1 &gt;::set_01 Equa_LinearPDE&lt; 2, 1 &gt; set_01 OFELI::Equa_LinearPDE&lt; 3, 2 &gt;::set_01 Equa_LinearPDE&lt; 3, 2 &gt; set_01 OFELI::Equa_LinearPDE&lt; 4, 3 &gt;::set_01 Equa_LinearPDE&lt; 4, 3 &gt;</field>
    <field name="text">Set coefficient for term 0 1 0 th order in time 1 st order in space a Constant coefficient to multiply by 0 1 order term Default 1 Set coefficient for term 0 1 0 th order in time 1 st order in space Set coefficient for term 0 1 0 th order in time 1 st order in space</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_LinearPDE::Mat_20</field>
    <field name="args">(real_t coef=1.0)</field>
    <field name="url">classOFELI_1_1Equa__LinearPDE.html#a4c0c0af1e56b98d0799da3fa59da5815</field>
    <field name="keywords">Mat_20 OFELI::Equa_LinearPDE::Mat_20 Equa_LinearPDE&lt; NEN_, NSN_ &gt; Mat_20 OFELI::Equa_LinearPDE&lt; 2, 1 &gt;::Mat_20 Equa_LinearPDE&lt; 2, 1 &gt; Mat_20 OFELI::Equa_LinearPDE&lt; 3, 2 &gt;::Mat_20 Equa_LinearPDE&lt; 3, 2 &gt; Mat_20 OFELI::Equa_LinearPDE&lt; 4, 3 &gt;::Mat_20 Equa_LinearPDE&lt; 4, 3 &gt;</field>
    <field name="text">Add 2 nd order term in time 0 th in space to left-hand side coef coefficient to multiply by the matrix before adding Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_LinearPDE::set_02</field>
    <field name="args">(Fct &amp;f)</field>
    <field name="url">classOFELI_1_1Equa__LinearPDE.html#a637a6e5d486f466260c36d0204136095</field>
    <field name="keywords">set_02 OFELI::Equa_LinearPDE::set_02 Equa_LinearPDE&lt; NEN_, NSN_ &gt; set_02 OFELI::Equa_LinearPDE&lt; 2, 1 &gt;::set_02 Equa_LinearPDE&lt; 2, 1 &gt; set_02 OFELI::Equa_LinearPDE&lt; 3, 2 &gt;::set_02 Equa_LinearPDE&lt; 3, 2 &gt; set_02 OFELI::Equa_LinearPDE&lt; 4, 3 &gt;::set_02 Equa_LinearPDE&lt; 4, 3 &gt;</field>
    <field name="text">Set coefficient for term 0 2 0 th order in time 2 nd order in time and space f Function to multiply by 0 2 order term Function of x and t Set coefficient for term 0 2 0 th order in time 2 nd order in time and space Set coefficient for term 0 2 0 th order in time 2 nd order in time and space</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_LinearPDE::build</field>
    <field name="args">(EigenProblemSolver &amp;e)</field>
    <field name="url">classOFELI_1_1Equa__LinearPDE.html#a707e4f7e7fe3140fd7a6fefe4774f03d</field>
    <field name="keywords">build OFELI::Equa_LinearPDE::build Equa_LinearPDE&lt; NEN_, NSN_ &gt; build OFELI::Equa_LinearPDE&lt; 2, 1 &gt;::build Equa_LinearPDE&lt; 2, 1 &gt; build OFELI::Equa_LinearPDE&lt; 3, 2 &gt;::build Equa_LinearPDE&lt; 3, 2 &gt; build OFELI::Equa_LinearPDE&lt; 4, 3 &gt;::build Equa_LinearPDE&lt; 4, 3 &gt;</field>
    <field name="text">Build the linear system for an eigenvalue problem e Reference to used EigenProblemSolver instance Build the linear system for an eigenvalue problem Build the linear system for an eigenvalue problem</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_LinearPDE::build</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__LinearPDE.html#a7740c7ab195c03ac140f1f75f633470f</field>
    <field name="keywords">build OFELI::Equa_LinearPDE::build Equa_LinearPDE&lt; NEN_, NSN_ &gt; build OFELI::Equa_LinearPDE&lt; 2, 1 &gt;::build Equa_LinearPDE&lt; 2, 1 &gt; build OFELI::Equa_LinearPDE&lt; 3, 2 &gt;::build Equa_LinearPDE&lt; 3, 2 &gt; build OFELI::Equa_LinearPDE&lt; 4, 3 &gt;::build Equa_LinearPDE&lt; 4, 3 &gt;</field>
    <field name="text">Build the linear system of equations for the steady state case Build the linear system of equations for the steady state case Build the linear system of equations for the steady state case</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_LinearPDE::set_00</field>
    <field name="args">(const string &amp;f)</field>
    <field name="url">classOFELI_1_1Equa__LinearPDE.html#a7c28f7c4e2a7986954ce56dd21ce7f64</field>
    <field name="keywords">set_00 OFELI::Equa_LinearPDE::set_00 Equa_LinearPDE&lt; NEN_, NSN_ &gt; set_00 OFELI::Equa_LinearPDE&lt; 2, 1 &gt;::set_00 Equa_LinearPDE&lt; 2, 1 &gt; set_00 OFELI::Equa_LinearPDE&lt; 3, 2 &gt;::set_00 Equa_LinearPDE&lt; 3, 2 &gt; set_00 OFELI::Equa_LinearPDE&lt; 4, 3 &gt;::set_00 Equa_LinearPDE&lt; 4, 3 &gt;</field>
    <field name="text">Set coefficient for term 0 0 0 th order in time and space f Function to multiply by 0 th order term Function of x and t Set coefficient for term 0 0 0 th order in time and space Set coefficient for term 0 0 0 th order in time and space</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_LinearPDE::set_01</field>
    <field name="args">(real_t a=1.0)</field>
    <field name="url">classOFELI_1_1Equa__LinearPDE.html#a82c97c49095806753f2d961975ded977</field>
    <field name="keywords">set_01 OFELI::Equa_LinearPDE::set_01 Equa_LinearPDE&lt; NEN_, NSN_ &gt; set_01 OFELI::Equa_LinearPDE&lt; 2, 1 &gt;::set_01 Equa_LinearPDE&lt; 2, 1 &gt; set_01 OFELI::Equa_LinearPDE&lt; 3, 2 &gt;::set_01 Equa_LinearPDE&lt; 3, 2 &gt; set_01 OFELI::Equa_LinearPDE&lt; 4, 3 &gt;::set_01 Equa_LinearPDE&lt; 4, 3 &gt;</field>
    <field name="text">Set coefficient for term 0 1 0 th order in time 1 st order in space a Constant coefficient to multiply by 0 1 order term Default 1 Set coefficient for term 0 1 0 th order in time 1 st order in space Set coefficient for term 0 1 0 th order in time 1 st order in space</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_LinearPDE::Mat_02</field>
    <field name="args">(real_t coef=1.0)</field>
    <field name="url">classOFELI_1_1Equa__LinearPDE.html#a855a007284ea5445388398afd48a2aab</field>
    <field name="keywords">Mat_02 OFELI::Equa_LinearPDE::Mat_02 Equa_LinearPDE&lt; NEN_, NSN_ &gt; Mat_02 OFELI::Equa_LinearPDE&lt; 2, 1 &gt;::Mat_02 Equa_LinearPDE&lt; 2, 1 &gt; Mat_02 OFELI::Equa_LinearPDE&lt; 3, 2 &gt;::Mat_02 Equa_LinearPDE&lt; 3, 2 &gt; Mat_02 OFELI::Equa_LinearPDE&lt; 4, 3 &gt;::Mat_02 Equa_LinearPDE&lt; 4, 3 &gt;</field>
    <field name="text">Add 0 th order term in time 2 nd in space to left-hand side coef coefficient to multiply by the matrix before adding Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_LinearPDE::Mat_10</field>
    <field name="args">(real_t coef=1.0)</field>
    <field name="url">classOFELI_1_1Equa__LinearPDE.html#a923f8b1c42bfb8ef0186eafcbd261229</field>
    <field name="keywords">Mat_10 OFELI::Equa_LinearPDE::Mat_10 Equa_LinearPDE&lt; NEN_, NSN_ &gt; Mat_10 OFELI::Equa_LinearPDE&lt; 2, 1 &gt;::Mat_10 Equa_LinearPDE&lt; 2, 1 &gt; Mat_10 OFELI::Equa_LinearPDE&lt; 3, 2 &gt;::Mat_10 Equa_LinearPDE&lt; 3, 2 &gt; Mat_10 OFELI::Equa_LinearPDE&lt; 4, 3 &gt;::Mat_10 Equa_LinearPDE&lt; 4, 3 &gt;</field>
    <field name="text">Add 1 st order term in time 0 th in space to left-hand side coef coefficient to multiply by the matrix before adding Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_LinearPDE::set_20</field>
    <field name="args">(real_t a=1.0)</field>
    <field name="url">classOFELI_1_1Equa__LinearPDE.html#a940a718180655b25bc78f35bacb5dba7</field>
    <field name="keywords">set_20 OFELI::Equa_LinearPDE::set_20 Equa_LinearPDE&lt; NEN_, NSN_ &gt; set_20 OFELI::Equa_LinearPDE&lt; 2, 1 &gt;::set_20 Equa_LinearPDE&lt; 2, 1 &gt; set_20 OFELI::Equa_LinearPDE&lt; 3, 2 &gt;::set_20 Equa_LinearPDE&lt; 3, 2 &gt; set_20 OFELI::Equa_LinearPDE&lt; 4, 3 &gt;::set_20 Equa_LinearPDE&lt; 4, 3 &gt;</field>
    <field name="text">Set coefficient for term 2 0 2 nd order in time 0 th order in space a Constant coefficient to multiply by 2 0 order term Default 1 Set coefficient for term 2 0 2 nd order in time 0 th order in space Set coefficient for term 2 0 2 nd order in time 0 th order in space</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_LinearPDE::Mat_00</field>
    <field name="args">(real_t coef=1.0)</field>
    <field name="url">classOFELI_1_1Equa__LinearPDE.html#a9d3cefc01b7fff35a344e15b5672d74c</field>
    <field name="keywords">Mat_00 OFELI::Equa_LinearPDE::Mat_00 Equa_LinearPDE&lt; NEN_, NSN_ &gt; Mat_00 OFELI::Equa_LinearPDE&lt; 2, 1 &gt;::Mat_00 Equa_LinearPDE&lt; 2, 1 &gt; Mat_00 OFELI::Equa_LinearPDE&lt; 3, 2 &gt;::Mat_00 Equa_LinearPDE&lt; 3, 2 &gt; Mat_00 OFELI::Equa_LinearPDE&lt; 4, 3 &gt;::Mat_00 Equa_LinearPDE&lt; 4, 3 &gt;</field>
    <field name="text">Add 0 th order term in time and space to left-hand side coef coefficient to multiply by the matrix before adding Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_LinearPDE::set_01</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;a)</field>
    <field name="url">classOFELI_1_1Equa__LinearPDE.html#aaf230b96bd29041f283d88b5b142518a</field>
    <field name="keywords">set_01 OFELI::Equa_LinearPDE::set_01 Equa_LinearPDE&lt; NEN_, NSN_ &gt; set_01 OFELI::Equa_LinearPDE&lt; 2, 1 &gt;::set_01 Equa_LinearPDE&lt; 2, 1 &gt; set_01 OFELI::Equa_LinearPDE&lt; 3, 2 &gt;::set_01 Equa_LinearPDE&lt; 3, 2 &gt; set_01 OFELI::Equa_LinearPDE&lt; 4, 3 &gt;::set_01 Equa_LinearPDE&lt; 4, 3 &gt;</field>
    <field name="text">Set coefficient for term 0 1 0 th order in time 1 st order in space a Constant coefficient to multiply by 0 1 order term Default 1 Set coefficient for term 0 1 0 th order in time 1 st order in space Set coefficient for term 0 1 0 th order in time 1 st order in space</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_LinearPDE::BoundaryRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1Equa__LinearPDE.html#ab08651853053c5bff38e8fe3737fdc4c</field>
    <field name="keywords">BoundaryRHS OFELI::Equa_LinearPDE::BoundaryRHS Equa_LinearPDE&lt; NEN_, NSN_ &gt; BoundaryRHS OFELI::Equa_LinearPDE&lt; 2, 1 &gt;::BoundaryRHS Equa_LinearPDE&lt; 2, 1 &gt; BoundaryRHS OFELI::Equa_LinearPDE&lt; 3, 2 &gt;::BoundaryRHS Equa_LinearPDE&lt; 3, 2 &gt; BoundaryRHS OFELI::Equa_LinearPDE&lt; 4, 3 &gt;::BoundaryRHS Equa_LinearPDE&lt; 4, 3 &gt;</field>
    <field name="text">Add boundary right-hand side term to right-hand side f Vector containing source at nodes Add boundary right-hand side term to right-hand side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_LinearPDE::set_10</field>
    <field name="args">(Fct &amp;f)</field>
    <field name="url">classOFELI_1_1Equa__LinearPDE.html#ab61bbd29c5785b02bf116b4983191d08</field>
    <field name="keywords">set_10 OFELI::Equa_LinearPDE::set_10 Equa_LinearPDE&lt; NEN_, NSN_ &gt; set_10 OFELI::Equa_LinearPDE&lt; 2, 1 &gt;::set_10 Equa_LinearPDE&lt; 2, 1 &gt; set_10 OFELI::Equa_LinearPDE&lt; 3, 2 &gt;::set_10 Equa_LinearPDE&lt; 3, 2 &gt; set_10 OFELI::Equa_LinearPDE&lt; 4, 3 &gt;::set_10 Equa_LinearPDE&lt; 4, 3 &gt;</field>
    <field name="text">Set coefficient for term 1 0 1 st order in time 0 th order in space f Function to multiply by 1 0 order term Function of x and t Set coefficient for term 1 0 1 st order in time 0 th order in space Set coefficient for term 1 0 1 st order in time 0 th order in space</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_LinearPDE::set_10</field>
    <field name="args">(real_t a=1.0)</field>
    <field name="url">classOFELI_1_1Equa__LinearPDE.html#abdc3755b3727dc1a97a6957df376bd92</field>
    <field name="keywords">set_10 OFELI::Equa_LinearPDE::set_10 Equa_LinearPDE&lt; NEN_, NSN_ &gt; set_10 OFELI::Equa_LinearPDE&lt; 2, 1 &gt;::set_10 Equa_LinearPDE&lt; 2, 1 &gt; set_10 OFELI::Equa_LinearPDE&lt; 3, 2 &gt;::set_10 Equa_LinearPDE&lt; 3, 2 &gt; set_10 OFELI::Equa_LinearPDE&lt; 4, 3 &gt;::set_10 Equa_LinearPDE&lt; 4, 3 &gt;</field>
    <field name="text">Set coefficient for term 1 0 1 st order in time 0 th order in space a Constant coefficient to multiply by 1 0 order term Default 1 Set coefficient for term 1 0 1 st order in time 0 th order in space Set coefficient for term 1 0 1 st order in time 0 th order in space</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_LinearPDE::Equa_LinearPDE</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__LinearPDE.html#ac6be6366c8bcc4bbe08c54d732db2180</field>
    <field name="keywords">Equa_LinearPDE OFELI::Equa_LinearPDE::Equa_LinearPDE Equa_LinearPDE&lt; NEN_, NSN_ &gt; Equa_LinearPDE OFELI::Equa_LinearPDE&lt; 2, 1 &gt;::Equa_LinearPDE Equa_LinearPDE&lt; 2, 1 &gt; Equa_LinearPDE OFELI::Equa_LinearPDE&lt; 3, 2 &gt;::Equa_LinearPDE Equa_LinearPDE&lt; 3, 2 &gt; Equa_LinearPDE OFELI::Equa_LinearPDE&lt; 4, 3 &gt;::Equa_LinearPDE Equa_LinearPDE&lt; 4, 3 &gt;</field>
    <field name="text">Default constructor Constructs an empty equation Default constructor Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_LinearPDE::BodyRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1Equa__LinearPDE.html#ac78bfd5e2f3f8dea4715b2e84653acec</field>
    <field name="keywords">BodyRHS OFELI::Equa_LinearPDE::BodyRHS Equa_LinearPDE&lt; NEN_, NSN_ &gt; BodyRHS OFELI::Equa_LinearPDE&lt; 2, 1 &gt;::BodyRHS Equa_LinearPDE&lt; 2, 1 &gt; BodyRHS OFELI::Equa_LinearPDE&lt; 3, 2 &gt;::BodyRHS Equa_LinearPDE&lt; 3, 2 &gt; BodyRHS OFELI::Equa_LinearPDE&lt; 4, 3 &gt;::BodyRHS Equa_LinearPDE&lt; 4, 3 &gt;</field>
    <field name="text">Add body right-hand side term to right-hand side f Vector containing source at nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_LinearPDE::~Equa_LinearPDE</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__LinearPDE.html#aca5c447c46ca6101fac1323503a516a5</field>
    <field name="keywords">OFELI::Equa_LinearPDE::~Equa_LinearPDE Equa_LinearPDE&lt; NEN_, NSN_ &gt; OFELI::Equa_LinearPDE&lt; 2, 1 &gt;::~Equa_LinearPDE Equa_LinearPDE&lt; 2, 1 &gt; OFELI::Equa_LinearPDE&lt; 3, 2 &gt;::~Equa_LinearPDE Equa_LinearPDE&lt; 3, 2 &gt; OFELI::Equa_LinearPDE&lt; 4, 3 &gt;::~Equa_LinearPDE Equa_LinearPDE&lt; 4, 3 &gt;</field>
    <field name="text">Destructor Destructor Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_LinearPDE::set_00</field>
    <field name="args">(real_t a=1.0)</field>
    <field name="url">classOFELI_1_1Equa__LinearPDE.html#ad0b945022dfdb41e467ce4bcf1d14633</field>
    <field name="keywords">set_00 OFELI::Equa_LinearPDE::set_00 Equa_LinearPDE&lt; NEN_, NSN_ &gt; set_00 OFELI::Equa_LinearPDE&lt; 2, 1 &gt;::set_00 Equa_LinearPDE&lt; 2, 1 &gt; set_00 OFELI::Equa_LinearPDE&lt; 3, 2 &gt;::set_00 Equa_LinearPDE&lt; 3, 2 &gt; set_00 OFELI::Equa_LinearPDE&lt; 4, 3 &gt;::set_00 Equa_LinearPDE&lt; 4, 3 &gt;</field>
    <field name="text">Set coefficient for term 0 0 0 th order in time and space a Constant coefficient to multiply by 0 th order term Default 1 Set coefficient for term 0 0 0 th order in time and space Set coefficient for term 0 0 0 th order in time and space</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_LinearPDE::set_00</field>
    <field name="args">(Fct &amp;f)</field>
    <field name="url">classOFELI_1_1Equa__LinearPDE.html#afac12d989022d9a13b7521b4aa43aa57</field>
    <field name="keywords">set_00 OFELI::Equa_LinearPDE::set_00 Equa_LinearPDE&lt; NEN_, NSN_ &gt; set_00 OFELI::Equa_LinearPDE&lt; 2, 1 &gt;::set_00 Equa_LinearPDE&lt; 2, 1 &gt; set_00 OFELI::Equa_LinearPDE&lt; 3, 2 &gt;::set_00 Equa_LinearPDE&lt; 3, 2 &gt; set_00 OFELI::Equa_LinearPDE&lt; 4, 3 &gt;::set_00 Equa_LinearPDE&lt; 4, 3 &gt;</field>
    <field name="text">Set coefficient for term 0 0 0 th order in time and space f Function to multiply by 0 th order term Function of x and t Set coefficient for term 0 0 0 th order in time and space Set coefficient for term 0 0 0 th order in time and space</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Equa_Porous</field>
    <field name="url">classOFELI_1_1Equa__Porous.html</field>
    <field name="keywords">Equa_Porous Equa_Porous&lt; 2, 2, 1, 1 &gt; Equa_Porous&lt; 3, 3, 2, 2 &gt;</field>
    <field name="text">Abstract class for Porous Media Finite Element classes data type real_t float Number of element nodes Number of element equations Number of side nodes Number of side equations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Porous::BoundaryRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;sf)</field>
    <field name="url">classOFELI_1_1Equa__Porous.html#a0c6ef2f4383b0dbf335c197f290f508f</field>
    <field name="keywords">BoundaryRHS OFELI::Equa_Porous::BoundaryRHS Equa_Porous&lt; NEN_, NEE_, NSN_, NSE_ &gt; BoundaryRHS OFELI::Equa_Porous&lt; 2, 2, 1, 1 &gt;::BoundaryRHS Equa_Porous&lt; 2, 2, 1, 1 &gt; BoundaryRHS OFELI::Equa_Porous&lt; 3, 3, 2, 2 &gt;::BoundaryRHS Equa_Porous&lt; 3, 3, 2, 2 &gt;</field>
    <field name="text">Add boundary right-hand side term to right-hand side sf Vector containing source at nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Porous::Mu</field>
    <field name="args">(const string &amp;exp)</field>
    <field name="url">classOFELI_1_1Equa__Porous.html#a361540d92ccffb977940130e35ffcd3a</field>
    <field name="keywords">Mu OFELI::Equa_Porous::Mu Equa_Porous&lt; NEN_, NEE_, NSN_, NSE_ &gt; Mu OFELI::Equa_Porous&lt; 2, 2, 1, 1 &gt;::Mu Equa_Porous&lt; 2, 2, 1, 1 &gt; Mu OFELI::Equa_Porous&lt; 3, 3, 2, 2 &gt;::Mu Equa_Porous&lt; 3, 3, 2, 2 &gt;</field>
    <field name="text">Set viscosity given by an algebraic expression Set viscosity given by an algebraic expression</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Porous::setMaterial</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__Porous.html#a381ccce0928fbad840a57b054e7eb9b0</field>
    <field name="keywords">setMaterial OFELI::Equa_Porous::setMaterial Equa_Porous&lt; NEN_, NEE_, NSN_, NSE_ &gt; setMaterial OFELI::Equa_Porous&lt; 2, 2, 1, 1 &gt;::setMaterial Equa_Porous&lt; 2, 2, 1, 1 &gt; setMaterial OFELI::Equa_Porous&lt; 3, 3, 2, 2 &gt;::setMaterial Equa_Porous&lt; 3, 3, 2, 2 &gt;</field>
    <field name="text">Set material properties Set material properties</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Porous::build</field>
    <field name="args">(TimeStepping &amp;s)</field>
    <field name="url">classOFELI_1_1Equa__Porous.html#a3d205a8b8188a1e0d1e07091b775bbe7</field>
    <field name="keywords">build OFELI::Equa_Porous::build Equa_Porous&lt; NEN_, NEE_, NSN_, NSE_ &gt; build OFELI::Equa_Porous&lt; 2, 2, 1, 1 &gt;::build Equa_Porous&lt; 2, 2, 1, 1 &gt; build OFELI::Equa_Porous&lt; 3, 3, 2, 2 &gt;::build Equa_Porous&lt; 3, 3, 2, 2 &gt;</field>
    <field name="text">Build the linear system of equations Before using this function one must have properly selected appropriate options for The choice of a steady state or transient analysis By default the analysis is stationary In the case of transient analysis the choice of a time integration scheme If transient analysis is chosen the implicit Euler scheme is used by default for time integration s Reference to used TimeStepping instance Build the linear system of equations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Porous::Equa_Porous</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__Porous.html#a4828a4a25bb1d319095e492290d3a756</field>
    <field name="keywords">Equa_Porous OFELI::Equa_Porous::Equa_Porous Equa_Porous&lt; NEN_, NEE_, NSN_, NSE_ &gt; Equa_Porous OFELI::Equa_Porous&lt; 2, 2, 1, 1 &gt;::Equa_Porous Equa_Porous&lt; 2, 2, 1, 1 &gt; Equa_Porous OFELI::Equa_Porous&lt; 3, 3, 2, 2 &gt;::Equa_Porous Equa_Porous&lt; 3, 3, 2, 2 &gt;</field>
    <field name="text">Default constructor Constructs an empty equation Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Porous::BodyRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;bf)</field>
    <field name="url">classOFELI_1_1Equa__Porous.html#a4a93a6ae518606a36e7a099ac170483c</field>
    <field name="keywords">BodyRHS OFELI::Equa_Porous::BodyRHS Equa_Porous&lt; NEN_, NEE_, NSN_, NSE_ &gt; BodyRHS OFELI::Equa_Porous&lt; 2, 2, 1, 1 &gt;::BodyRHS Equa_Porous&lt; 2, 2, 1, 1 &gt; BodyRHS OFELI::Equa_Porous&lt; 3, 3, 2, 2 &gt;::BodyRHS Equa_Porous&lt; 3, 3, 2, 2 &gt;</field>
    <field name="text">Add source right-hand side term to right-hand side bf Vector containing source at nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Porous::Mass</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__Porous.html#a4b5788aa0557f7b6698712490fe5dbfa</field>
    <field name="keywords">Mass OFELI::Equa_Porous::Mass Equa_Porous&lt; NEN_, NEE_, NSN_, NSE_ &gt; Mass OFELI::Equa_Porous&lt; 2, 2, 1, 1 &gt;::Mass Equa_Porous&lt; 2, 2, 1, 1 &gt; Mass OFELI::Equa_Porous&lt; 3, 3, 2, 2 &gt;::Mass Equa_Porous&lt; 3, 3, 2, 2 &gt;</field>
    <field name="text">Add porosity term to the 1 st order element matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Porous::run</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__Porous.html#a58e8be2db2660128e4e6456a9c981fb5</field>
    <field name="keywords">run OFELI::Equa_Porous::run Equa_Porous&lt; NEN_, NEE_, NSN_, NSE_ &gt; run OFELI::Equa_Porous&lt; 2, 2, 1, 1 &gt;::run Equa_Porous&lt; 2, 2, 1, 1 &gt; run OFELI::Equa_Porous&lt; 3, 3, 2, 2 &gt;::run Equa_Porous&lt; 3, 3, 2, 2 &gt;</field>
    <field name="text">Run the equation If the analysis see function setAnalysis is STEADY_STATE then the function solves the stationary equation If the analysis is TRANSIENT then the function performs time stepping until the final time is reached Run the equation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Porous::build</field>
    <field name="args">(EigenProblemSolver &amp;e)</field>
    <field name="url">classOFELI_1_1Equa__Porous.html#a707e4f7e7fe3140fd7a6fefe4774f03d</field>
    <field name="keywords">build OFELI::Equa_Porous::build Equa_Porous&lt; NEN_, NEE_, NSN_, NSE_ &gt; build OFELI::Equa_Porous&lt; 2, 2, 1, 1 &gt;::build Equa_Porous&lt; 2, 2, 1, 1 &gt; build OFELI::Equa_Porous&lt; 3, 3, 2, 2 &gt;::build Equa_Porous&lt; 3, 3, 2, 2 &gt;</field>
    <field name="text">Build the linear system for an eigenvalue problem e Reference to used EigenProblemSolver instance Build the linear system for an eigenvalue problem</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Porous::build</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__Porous.html#a7740c7ab195c03ac140f1f75f633470f</field>
    <field name="keywords">build OFELI::Equa_Porous::build Equa_Porous&lt; NEN_, NEE_, NSN_, NSE_ &gt; build OFELI::Equa_Porous&lt; 2, 2, 1, 1 &gt;::build Equa_Porous&lt; 2, 2, 1, 1 &gt; build OFELI::Equa_Porous&lt; 3, 3, 2, 2 &gt;::build Equa_Porous&lt; 3, 3, 2, 2 &gt;</field>
    <field name="text">Build the linear system of equations Before using this function one must have properly selected appropriate options for The choice of a steady state or transient analysis By default the analysis is stationary In the case of transient analysis the choice of a time integration scheme and a lumped or consistent capacity matrix If transient analysis is chosen the lumped capacity matrix option is chosen by default and the implicit Euler scheme is used by default for time integration Build the linear system of equations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Porous::~Equa_Porous</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__Porous.html#ac34e8344a9adbe72eb497a7c9de0ccfe</field>
    <field name="keywords">OFELI::Equa_Porous::~Equa_Porous Equa_Porous&lt; NEN_, NEE_, NSN_, NSE_ &gt; OFELI::Equa_Porous&lt; 2, 2, 1, 1 &gt;::~Equa_Porous Equa_Porous&lt; 2, 2, 1, 1 &gt; OFELI::Equa_Porous&lt; 3, 3, 2, 2 &gt;::~Equa_Porous Equa_Porous&lt; 3, 3, 2, 2 &gt;</field>
    <field name="text">Destructor Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Porous::Mobility</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__Porous.html#acceb9ec981656f82b38c1a7552d73bfe</field>
    <field name="keywords">Mobility OFELI::Equa_Porous::Mobility Equa_Porous&lt; NEN_, NEE_, NSN_, NSE_ &gt; Mobility OFELI::Equa_Porous&lt; 2, 2, 1, 1 &gt;::Mobility Equa_Porous&lt; 2, 2, 1, 1 &gt; Mobility OFELI::Equa_Porous&lt; 3, 3, 2, 2 &gt;::Mobility Equa_Porous&lt; 3, 3, 2, 2 &gt;</field>
    <field name="text">Add mobility term to the 0 th order element matrix</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Equa_Solid</field>
    <field name="url">classOFELI_1_1Equa__Solid.html</field>
    <field name="keywords">Equa_Solid Equa_Solid&lt; 2, 12, 1, 6 &gt; Equa_Solid&lt; 2, 4, 1, 2 &gt; Equa_Solid&lt; 3, 6, 2, 4 &gt; Equa_Solid&lt; 4, 12, 3, 9 &gt; Equa_Solid&lt; 4, 8, 2, 4 &gt; Equa_Solid&lt; 8, 24, 4, 12 &gt;</field>
    <field name="text">Abstract class for Solid Mechanics Finite Element classes Number of element nodes Number of element equations Number of side nodes Number of side equations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Solid::Density</field>
    <field name="args">(const real_t &amp;rho)</field>
    <field name="url">classOFELI_1_1Equa__Solid.html#a0f9d20bac3529af7c6a0b4f5b049542a</field>
    <field name="keywords">Density OFELI::Equa_Solid::Density Equa_Solid&lt; NEN_, NEE_, NSN_, NSE_ &gt; Density OFELI::Equa_Solid&lt; 2, 4, 1, 2 &gt;::Density Equa_Solid&lt; 2, 4, 1, 2 &gt; Density OFELI::Equa_Solid&lt; 2, 12, 1, 6 &gt;::Density Equa_Solid&lt; 2, 12, 1, 6 &gt; Density OFELI::Equa_Solid&lt; 4, 8, 2, 4 &gt;::Density Equa_Solid&lt; 4, 8, 2, 4 &gt; Density OFELI::Equa_Solid&lt; 3, 6, 2, 4 &gt;::Density Equa_Solid&lt; 3, 6, 2, 4 &gt; Density OFELI::Equa_Solid&lt; 8, 24, 4, 12 &gt;::Density Equa_Solid&lt; 8, 24, 4, 12 &gt; Density OFELI::Equa_Solid&lt; 4, 12, 3, 9 &gt;::Density Equa_Solid&lt; 4, 12, 3, 9 &gt;</field>
    <field name="text">Set constant density Set constant density Set constant density Set constant density Set constant density Set constant density Set constant density</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Solid::setMaterial</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__Solid.html#a381ccce0928fbad840a57b054e7eb9b0</field>
    <field name="keywords">setMaterial OFELI::Equa_Solid::setMaterial Equa_Solid&lt; NEN_, NEE_, NSN_, NSE_ &gt; setMaterial OFELI::Equa_Solid&lt; 2, 4, 1, 2 &gt;::setMaterial Equa_Solid&lt; 2, 4, 1, 2 &gt; setMaterial OFELI::Equa_Solid&lt; 2, 12, 1, 6 &gt;::setMaterial Equa_Solid&lt; 2, 12, 1, 6 &gt; setMaterial OFELI::Equa_Solid&lt; 4, 8, 2, 4 &gt;::setMaterial Equa_Solid&lt; 4, 8, 2, 4 &gt; setMaterial OFELI::Equa_Solid&lt; 3, 6, 2, 4 &gt;::setMaterial Equa_Solid&lt; 3, 6, 2, 4 &gt; setMaterial OFELI::Equa_Solid&lt; 8, 24, 4, 12 &gt;::setMaterial Equa_Solid&lt; 8, 24, 4, 12 &gt; setMaterial OFELI::Equa_Solid&lt; 4, 12, 3, 9 &gt;::setMaterial Equa_Solid&lt; 4, 12, 3, 9 &gt;</field>
    <field name="text">Set material properties Set material properties Set material properties Set material properties Set material properties Set material properties Set material properties</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Solid::Young</field>
    <field name="args">(const string &amp;exp)</field>
    <field name="url">classOFELI_1_1Equa__Solid.html#a3d3f54c27b6fc52b417659d863e7eeca</field>
    <field name="keywords">Young OFELI::Equa_Solid::Young Equa_Solid&lt; NEN_, NEE_, NSN_, NSE_ &gt; Young OFELI::Equa_Solid&lt; 2, 4, 1, 2 &gt;::Young Equa_Solid&lt; 2, 4, 1, 2 &gt; Young OFELI::Equa_Solid&lt; 2, 12, 1, 6 &gt;::Young Equa_Solid&lt; 2, 12, 1, 6 &gt; Young OFELI::Equa_Solid&lt; 4, 8, 2, 4 &gt;::Young Equa_Solid&lt; 4, 8, 2, 4 &gt; Young OFELI::Equa_Solid&lt; 3, 6, 2, 4 &gt;::Young Equa_Solid&lt; 3, 6, 2, 4 &gt; Young OFELI::Equa_Solid&lt; 8, 24, 4, 12 &gt;::Young Equa_Solid&lt; 8, 24, 4, 12 &gt; Young OFELI::Equa_Solid&lt; 4, 12, 3, 9 &gt;::Young Equa_Solid&lt; 4, 12, 3, 9 &gt;</field>
    <field name="text">Set Young modulus given by an algebraic expression Set Young modulus given by an algebraic expression Set Young modulus given by an algebraic expression Set Young modulus given by an algebraic expression Set Young modulus given by an algebraic expression Set Young modulus given by an algebraic expression Set Young modulus given by an algebraic expression</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Solid::Density</field>
    <field name="args">(const string &amp;exp)</field>
    <field name="url">classOFELI_1_1Equa__Solid.html#a4247308b44896f64897ca1e21ad04c44</field>
    <field name="keywords">Density OFELI::Equa_Solid::Density Equa_Solid&lt; NEN_, NEE_, NSN_, NSE_ &gt; Density OFELI::Equa_Solid&lt; 2, 4, 1, 2 &gt;::Density Equa_Solid&lt; 2, 4, 1, 2 &gt; Density OFELI::Equa_Solid&lt; 2, 12, 1, 6 &gt;::Density Equa_Solid&lt; 2, 12, 1, 6 &gt; Density OFELI::Equa_Solid&lt; 4, 8, 2, 4 &gt;::Density Equa_Solid&lt; 4, 8, 2, 4 &gt; Density OFELI::Equa_Solid&lt; 3, 6, 2, 4 &gt;::Density Equa_Solid&lt; 3, 6, 2, 4 &gt; Density OFELI::Equa_Solid&lt; 8, 24, 4, 12 &gt;::Density Equa_Solid&lt; 8, 24, 4, 12 &gt; Density OFELI::Equa_Solid&lt; 4, 12, 3, 9 &gt;::Density Equa_Solid&lt; 4, 12, 3, 9 &gt;</field>
    <field name="text">Set density given by an algebraic expression Set density given by an algebraic expression Set density given by an algebraic expression Set density given by an algebraic expression Set density given by an algebraic expression Set density given by an algebraic expression Set density given by an algebraic expression</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Solid::Dilatation</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1Equa__Solid.html#a4799435ca241f5711959671d5851f719</field>
    <field name="keywords">Dilatation OFELI::Equa_Solid::Dilatation Equa_Solid&lt; NEN_, NEE_, NSN_, NSE_ &gt; Dilatation OFELI::Equa_Solid&lt; 2, 4, 1, 2 &gt;::Dilatation Equa_Solid&lt; 2, 4, 1, 2 &gt; Dilatation OFELI::Equa_Solid&lt; 2, 12, 1, 6 &gt;::Dilatation Equa_Solid&lt; 2, 12, 1, 6 &gt; Dilatation OFELI::Equa_Solid&lt; 4, 8, 2, 4 &gt;::Dilatation Equa_Solid&lt; 4, 8, 2, 4 &gt; Dilatation OFELI::Equa_Solid&lt; 3, 6, 2, 4 &gt;::Dilatation Equa_Solid&lt; 3, 6, 2, 4 &gt; Dilatation OFELI::Equa_Solid&lt; 8, 24, 4, 12 &gt;::Dilatation Equa_Solid&lt; 8, 24, 4, 12 &gt; Dilatation OFELI::Equa_Solid&lt; 4, 12, 3, 9 &gt;::Dilatation Equa_Solid&lt; 4, 12, 3, 9 &gt;</field>
    <field name="text">Add dilatation matrix to left-hand side taking into account time integration scheme after multiplication by coef Default 1 Add dilatation matrix to left-hand side taking into account time integration scheme after multiplication by coef Default 1 Add dilatation matrix to left-hand side taking into account time integration scheme after multiplication by coef Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Solid::Stiffness</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1Equa__Solid.html#a5b1bb6dc8310a0a1bbeec64bddcae4cd</field>
    <field name="keywords">Stiffness OFELI::Equa_Solid::Stiffness Equa_Solid&lt; NEN_, NEE_, NSN_, NSE_ &gt; Stiffness OFELI::Equa_Solid&lt; 2, 4, 1, 2 &gt;::Stiffness Equa_Solid&lt; 2, 4, 1, 2 &gt; Stiffness OFELI::Equa_Solid&lt; 2, 12, 1, 6 &gt;::Stiffness Equa_Solid&lt; 2, 12, 1, 6 &gt; Stiffness OFELI::Equa_Solid&lt; 4, 8, 2, 4 &gt;::Stiffness Equa_Solid&lt; 4, 8, 2, 4 &gt; Stiffness OFELI::Equa_Solid&lt; 3, 6, 2, 4 &gt;::Stiffness Equa_Solid&lt; 3, 6, 2, 4 &gt; Stiffness OFELI::Equa_Solid&lt; 8, 24, 4, 12 &gt;::Stiffness Equa_Solid&lt; 8, 24, 4, 12 &gt; Stiffness OFELI::Equa_Solid&lt; 4, 12, 3, 9 &gt;::Stiffness Equa_Solid&lt; 4, 12, 3, 9 &gt;</field>
    <field name="text">Add stiffness matrix to left-hand side taking into account time integration scheme after multiplication by coef Default 1 Add stiffness matrix to left-hand side taking into account time integration scheme after multiplication by coef Default 1 Add stiffness matrix to left-hand side taking into account time integration scheme after multiplication by coef Default 1 Add stiffness matrix to left-hand side taking into account time integration scheme after multiplication by coef Default 1 Add stiffness matrix to left-hand side taking into account time integration scheme after multiplication by coef Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Solid::LMass</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1Equa__Solid.html#a5d56db04c7afd40bd62fbbbcaafe6559</field>
    <field name="keywords">LMass OFELI::Equa_Solid::LMass Equa_Solid&lt; NEN_, NEE_, NSN_, NSE_ &gt; LMass OFELI::Equa_Solid&lt; 2, 4, 1, 2 &gt;::LMass Equa_Solid&lt; 2, 4, 1, 2 &gt; LMass OFELI::Equa_Solid&lt; 2, 12, 1, 6 &gt;::LMass Equa_Solid&lt; 2, 12, 1, 6 &gt; LMass OFELI::Equa_Solid&lt; 4, 8, 2, 4 &gt;::LMass Equa_Solid&lt; 4, 8, 2, 4 &gt; LMass OFELI::Equa_Solid&lt; 3, 6, 2, 4 &gt;::LMass Equa_Solid&lt; 3, 6, 2, 4 &gt; LMass OFELI::Equa_Solid&lt; 8, 24, 4, 12 &gt;::LMass Equa_Solid&lt; 8, 24, 4, 12 &gt; LMass OFELI::Equa_Solid&lt; 4, 12, 3, 9 &gt;::LMass Equa_Solid&lt; 4, 12, 3, 9 &gt;</field>
    <field name="text">Add lumped mass contribution to left-hand side coef coefficient to multiply by the matrix before adding Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Solid::~Equa_Solid</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__Solid.html#a6127bf940f0fa23ece97ceb12c2de86e</field>
    <field name="keywords">OFELI::Equa_Solid::~Equa_Solid Equa_Solid&lt; NEN_, NEE_, NSN_, NSE_ &gt; OFELI::Equa_Solid&lt; 2, 4, 1, 2 &gt;::~Equa_Solid Equa_Solid&lt; 2, 4, 1, 2 &gt; OFELI::Equa_Solid&lt; 2, 12, 1, 6 &gt;::~Equa_Solid Equa_Solid&lt; 2, 12, 1, 6 &gt; OFELI::Equa_Solid&lt; 4, 8, 2, 4 &gt;::~Equa_Solid Equa_Solid&lt; 4, 8, 2, 4 &gt; OFELI::Equa_Solid&lt; 3, 6, 2, 4 &gt;::~Equa_Solid Equa_Solid&lt; 3, 6, 2, 4 &gt; OFELI::Equa_Solid&lt; 8, 24, 4, 12 &gt;::~Equa_Solid Equa_Solid&lt; 8, 24, 4, 12 &gt; OFELI::Equa_Solid&lt; 4, 12, 3, 9 &gt;::~Equa_Solid Equa_Solid&lt; 4, 12, 3, 9 &gt;</field>
    <field name="text">Destructor Destructor Destructor Destructor Destructor Destructor Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Solid::Mass</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1Equa__Solid.html#a6d344362c30ab9e83665623bb793e0d6</field>
    <field name="keywords">Mass OFELI::Equa_Solid::Mass Equa_Solid&lt; NEN_, NEE_, NSN_, NSE_ &gt; Mass OFELI::Equa_Solid&lt; 2, 4, 1, 2 &gt;::Mass Equa_Solid&lt; 2, 4, 1, 2 &gt; Mass OFELI::Equa_Solid&lt; 2, 12, 1, 6 &gt;::Mass Equa_Solid&lt; 2, 12, 1, 6 &gt; Mass OFELI::Equa_Solid&lt; 4, 8, 2, 4 &gt;::Mass Equa_Solid&lt; 4, 8, 2, 4 &gt; Mass OFELI::Equa_Solid&lt; 3, 6, 2, 4 &gt;::Mass Equa_Solid&lt; 3, 6, 2, 4 &gt; Mass OFELI::Equa_Solid&lt; 8, 24, 4, 12 &gt;::Mass Equa_Solid&lt; 8, 24, 4, 12 &gt; Mass OFELI::Equa_Solid&lt; 4, 12, 3, 9 &gt;::Mass Equa_Solid&lt; 4, 12, 3, 9 &gt;</field>
    <field name="text">Add consistent mass contribution to left-hand side Add consistent mass contribution to left-hand side coef coefficient to multiply by the matrix before adding Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Solid::Equa_Solid</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__Solid.html#a7ea9396da22551ebe8ba2460c520ff4e</field>
    <field name="keywords">Equa_Solid OFELI::Equa_Solid::Equa_Solid Equa_Solid&lt; NEN_, NEE_, NSN_, NSE_ &gt; Equa_Solid OFELI::Equa_Solid&lt; 2, 4, 1, 2 &gt;::Equa_Solid Equa_Solid&lt; 2, 4, 1, 2 &gt; Equa_Solid OFELI::Equa_Solid&lt; 2, 12, 1, 6 &gt;::Equa_Solid Equa_Solid&lt; 2, 12, 1, 6 &gt; Equa_Solid OFELI::Equa_Solid&lt; 4, 8, 2, 4 &gt;::Equa_Solid Equa_Solid&lt; 4, 8, 2, 4 &gt; Equa_Solid OFELI::Equa_Solid&lt; 3, 6, 2, 4 &gt;::Equa_Solid Equa_Solid&lt; 3, 6, 2, 4 &gt; Equa_Solid OFELI::Equa_Solid&lt; 8, 24, 4, 12 &gt;::Equa_Solid Equa_Solid&lt; 8, 24, 4, 12 &gt; Equa_Solid OFELI::Equa_Solid&lt; 4, 12, 3, 9 &gt;::Equa_Solid Equa_Solid&lt; 4, 12, 3, 9 &gt;</field>
    <field name="text">Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Constructs an empty equation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Solid::Young</field>
    <field name="args">(const real_t &amp;E)</field>
    <field name="url">classOFELI_1_1Equa__Solid.html#a84a80b8d798b3b8a1acef0f2a241782b</field>
    <field name="keywords">Young OFELI::Equa_Solid::Young Equa_Solid&lt; NEN_, NEE_, NSN_, NSE_ &gt; Young OFELI::Equa_Solid&lt; 2, 4, 1, 2 &gt;::Young Equa_Solid&lt; 2, 4, 1, 2 &gt; Young OFELI::Equa_Solid&lt; 2, 12, 1, 6 &gt;::Young Equa_Solid&lt; 2, 12, 1, 6 &gt; Young OFELI::Equa_Solid&lt; 4, 8, 2, 4 &gt;::Young Equa_Solid&lt; 4, 8, 2, 4 &gt; Young OFELI::Equa_Solid&lt; 3, 6, 2, 4 &gt;::Young Equa_Solid&lt; 3, 6, 2, 4 &gt; Young OFELI::Equa_Solid&lt; 8, 24, 4, 12 &gt;::Young Equa_Solid&lt; 8, 24, 4, 12 &gt; Young OFELI::Equa_Solid&lt; 4, 12, 3, 9 &gt;::Young Equa_Solid&lt; 4, 12, 3, 9 &gt;</field>
    <field name="text">Set constant Young modulus Set constant Young modulus Set constant Young modulus Set constant Young modulus Set constant Young modulus Set constant Young modulus Set constant Young modulus</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Solid::Deviator</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1Equa__Solid.html#a9dcb20f3e614aa7ad26a6bfb91b582e5</field>
    <field name="keywords">Deviator OFELI::Equa_Solid::Deviator Equa_Solid&lt; NEN_, NEE_, NSN_, NSE_ &gt; Deviator OFELI::Equa_Solid&lt; 2, 4, 1, 2 &gt;::Deviator Equa_Solid&lt; 2, 4, 1, 2 &gt; Deviator OFELI::Equa_Solid&lt; 2, 12, 1, 6 &gt;::Deviator Equa_Solid&lt; 2, 12, 1, 6 &gt; Deviator OFELI::Equa_Solid&lt; 4, 8, 2, 4 &gt;::Deviator Equa_Solid&lt; 4, 8, 2, 4 &gt; Deviator OFELI::Equa_Solid&lt; 3, 6, 2, 4 &gt;::Deviator Equa_Solid&lt; 3, 6, 2, 4 &gt; Deviator OFELI::Equa_Solid&lt; 8, 24, 4, 12 &gt;::Deviator Equa_Solid&lt; 8, 24, 4, 12 &gt; Deviator OFELI::Equa_Solid&lt; 4, 12, 3, 9 &gt;::Deviator Equa_Solid&lt; 4, 12, 3, 9 &gt;</field>
    <field name="text">Add deviator matrix to left-hand side taking into account time integration scheme after multiplication by coef Default 1 Add deviator matrix to left-hand side taking into account time integration scheme after multiplication by coef Default 1 Add deviator matrix to left-hand side taking into account time integration scheme after multiplication by coef Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Solid::Poisson</field>
    <field name="args">(const string &amp;exp)</field>
    <field name="url">classOFELI_1_1Equa__Solid.html#ab0c2201708c8259c23064176e337486d</field>
    <field name="keywords">Poisson OFELI::Equa_Solid::Poisson Equa_Solid&lt; NEN_, NEE_, NSN_, NSE_ &gt; Poisson OFELI::Equa_Solid&lt; 2, 4, 1, 2 &gt;::Poisson Equa_Solid&lt; 2, 4, 1, 2 &gt; Poisson OFELI::Equa_Solid&lt; 2, 12, 1, 6 &gt;::Poisson Equa_Solid&lt; 2, 12, 1, 6 &gt; Poisson OFELI::Equa_Solid&lt; 4, 8, 2, 4 &gt;::Poisson Equa_Solid&lt; 4, 8, 2, 4 &gt; Poisson OFELI::Equa_Solid&lt; 3, 6, 2, 4 &gt;::Poisson Equa_Solid&lt; 3, 6, 2, 4 &gt; Poisson OFELI::Equa_Solid&lt; 8, 24, 4, 12 &gt;::Poisson Equa_Solid&lt; 8, 24, 4, 12 &gt; Poisson OFELI::Equa_Solid&lt; 4, 12, 3, 9 &gt;::Poisson Equa_Solid&lt; 4, 12, 3, 9 &gt;</field>
    <field name="text">Set Poisson ratio given by an algebraic expression Set Poisson ratio given by an algebraic expression Set Poisson ratio given by an algebraic expression Set Poisson ratio given by an algebraic expression Set Poisson ratio given by an algebraic expression Set Poisson ratio given by an algebraic expression Set Poisson ratio given by an algebraic expression</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Solid::Poisson</field>
    <field name="args">(const real_t &amp;nu)</field>
    <field name="url">classOFELI_1_1Equa__Solid.html#ae1595490dd8e700664c95d2bd09818dd</field>
    <field name="keywords">Poisson OFELI::Equa_Solid::Poisson Equa_Solid&lt; NEN_, NEE_, NSN_, NSE_ &gt; Poisson OFELI::Equa_Solid&lt; 2, 4, 1, 2 &gt;::Poisson Equa_Solid&lt; 2, 4, 1, 2 &gt; Poisson OFELI::Equa_Solid&lt; 2, 12, 1, 6 &gt;::Poisson Equa_Solid&lt; 2, 12, 1, 6 &gt; Poisson OFELI::Equa_Solid&lt; 4, 8, 2, 4 &gt;::Poisson Equa_Solid&lt; 4, 8, 2, 4 &gt; Poisson OFELI::Equa_Solid&lt; 3, 6, 2, 4 &gt;::Poisson Equa_Solid&lt; 3, 6, 2, 4 &gt; Poisson OFELI::Equa_Solid&lt; 8, 24, 4, 12 &gt;::Poisson Equa_Solid&lt; 8, 24, 4, 12 &gt; Poisson OFELI::Equa_Solid&lt; 4, 12, 3, 9 &gt;::Poisson Equa_Solid&lt; 4, 12, 3, 9 &gt;</field>
    <field name="text">Set constant Poisson ratio Set constant Poisson ratio Set constant Poisson ratio Set constant Poisson ratio Set constant Poisson ratio Set constant Poisson ratio Set constant Poisson ratio</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Solid::setInput</field>
    <field name="args">(EType opt, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1Equa__Solid.html#affbdc0fae478891f2b9f63607004026f</field>
    <field name="keywords">setInput OFELI::Equa_Solid::setInput Equa_Solid&lt; NEN_, NEE_, NSN_, NSE_ &gt; setInput OFELI::Equa_Solid&lt; 2, 4, 1, 2 &gt;::setInput Equa_Solid&lt; 2, 4, 1, 2 &gt; setInput OFELI::Equa_Solid&lt; 2, 12, 1, 6 &gt;::setInput Equa_Solid&lt; 2, 12, 1, 6 &gt; setInput OFELI::Equa_Solid&lt; 4, 8, 2, 4 &gt;::setInput Equa_Solid&lt; 4, 8, 2, 4 &gt; setInput OFELI::Equa_Solid&lt; 3, 6, 2, 4 &gt;::setInput Equa_Solid&lt; 3, 6, 2, 4 &gt; setInput OFELI::Equa_Solid&lt; 8, 24, 4, 12 &gt;::setInput Equa_Solid&lt; 8, 24, 4, 12 &gt; setInput OFELI::Equa_Solid&lt; 4, 12, 3, 9 &gt;::setInput Equa_Solid&lt; 4, 12, 3, 9 &gt;</field>
    <field name="text">Set specific input data to solid mechanics Set specific input data to solid mechanics Set specific input data to solid mechanics Set specific input data to solid mechanics Set specific input data to solid mechanics Set specific input data to solid mechanics Set specific input data to solid mechanics</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Equa_Therm</field>
    <field name="url">classOFELI_1_1Equa__Therm.html</field>
    <field name="keywords">Equa_Therm Equa_Therm&lt; 2, 2, 1, 1 &gt; Equa_Therm&lt; 3, 3, 2, 2 &gt; Equa_Therm&lt; 4, 4, 3, 3 &gt; Equa_Therm&lt; 6, 6, 3, 3 &gt;</field>
    <field name="text">Abstract class for Heat transfer Finite Element classes Number of element nodes Number of element equations Number of side nodes Number of side equations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Therm::Convection</field>
    <field name="args">(real_t coef=1.)</field>
    <field name="url">classOFELI_1_1Equa__Therm.html#a1b301ab8fa850054ac4d47c177ea149f</field>
    <field name="keywords">Convection OFELI::Equa_Therm::Convection Equa_Therm&lt; NEN_, NEE_, NSN_, NSE_ &gt; Convection OFELI::Equa_Therm&lt; 2, 2, 1, 1 &gt;::Convection Equa_Therm&lt; 2, 2, 1, 1 &gt; Convection OFELI::Equa_Therm&lt; 3, 3, 2, 2 &gt;::Convection Equa_Therm&lt; 3, 3, 2, 2 &gt; Convection OFELI::Equa_Therm&lt; 6, 6, 3, 3 &gt;::Convection Equa_Therm&lt; 6, 6, 3, 3 &gt; Convection OFELI::Equa_Therm&lt; 4, 4, 3, 3 &gt;::Convection Equa_Therm&lt; 4, 4, 3, 3 &gt;</field>
    <field name="text">Add convection term to element matrix Add convection term to element matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Therm::~Equa_Therm</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__Therm.html#a1f7f323ad5f5ed4d83c68556f8e7db77</field>
    <field name="keywords">OFELI::Equa_Therm::~Equa_Therm Equa_Therm&lt; NEN_, NEE_, NSN_, NSE_ &gt; OFELI::Equa_Therm&lt; 2, 2, 1, 1 &gt;::~Equa_Therm Equa_Therm&lt; 2, 2, 1, 1 &gt; OFELI::Equa_Therm&lt; 3, 3, 2, 2 &gt;::~Equa_Therm Equa_Therm&lt; 3, 3, 2, 2 &gt; OFELI::Equa_Therm&lt; 6, 6, 3, 3 &gt;::~Equa_Therm Equa_Therm&lt; 6, 6, 3, 3 &gt; OFELI::Equa_Therm&lt; 4, 4, 3, 3 &gt;::~Equa_Therm Equa_Therm&lt; 4, 4, 3, 3 &gt;</field>
    <field name="text">Destructor Destructor Destructor Destructor Destructor Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Therm::setCp</field>
    <field name="args">(const real_t &amp;cp)</field>
    <field name="url">classOFELI_1_1Equa__Therm.html#a300d076fd1a50f49f20c8acbcd68930c</field>
    <field name="keywords">setCp OFELI::Equa_Therm::setCp Equa_Therm&lt; NEN_, NEE_, NSN_, NSE_ &gt; setCp OFELI::Equa_Therm&lt; 2, 2, 1, 1 &gt;::setCp Equa_Therm&lt; 2, 2, 1, 1 &gt; setCp OFELI::Equa_Therm&lt; 3, 3, 2, 2 &gt;::setCp Equa_Therm&lt; 3, 3, 2, 2 &gt; setCp OFELI::Equa_Therm&lt; 6, 6, 3, 3 &gt;::setCp Equa_Therm&lt; 6, 6, 3, 3 &gt; setCp OFELI::Equa_Therm&lt; 4, 4, 3, 3 &gt;::setCp Equa_Therm&lt; 4, 4, 3, 3 &gt;</field>
    <field name="text">Set Specific heat constant Set Specific heat constant Set Specific heat constant Set Specific heat constant Set Specific heat constant Set Specific heat constant</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Therm::setMaterial</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__Therm.html#a381ccce0928fbad840a57b054e7eb9b0</field>
    <field name="keywords">setMaterial OFELI::Equa_Therm::setMaterial Equa_Therm&lt; NEN_, NEE_, NSN_, NSE_ &gt; setMaterial OFELI::Equa_Therm&lt; 2, 2, 1, 1 &gt;::setMaterial Equa_Therm&lt; 2, 2, 1, 1 &gt; setMaterial OFELI::Equa_Therm&lt; 3, 3, 2, 2 &gt;::setMaterial Equa_Therm&lt; 3, 3, 2, 2 &gt; setMaterial OFELI::Equa_Therm&lt; 6, 6, 3, 3 &gt;::setMaterial Equa_Therm&lt; 6, 6, 3, 3 &gt; setMaterial OFELI::Equa_Therm&lt; 4, 4, 3, 3 &gt;::setMaterial Equa_Therm&lt; 4, 4, 3, 3 &gt;</field>
    <field name="text">Set material properties Set material properties Set material properties Set material properties Set material properties Set material properties</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Therm::build</field>
    <field name="args">(TimeStepping &amp;s)</field>
    <field name="url">classOFELI_1_1Equa__Therm.html#a3d205a8b8188a1e0d1e07091b775bbe7</field>
    <field name="keywords">build OFELI::Equa_Therm::build Equa_Therm&lt; NEN_, NEE_, NSN_, NSE_ &gt; build OFELI::Equa_Therm&lt; 2, 2, 1, 1 &gt;::build Equa_Therm&lt; 2, 2, 1, 1 &gt; build OFELI::Equa_Therm&lt; 3, 3, 2, 2 &gt;::build Equa_Therm&lt; 3, 3, 2, 2 &gt; build OFELI::Equa_Therm&lt; 6, 6, 3, 3 &gt;::build Equa_Therm&lt; 6, 6, 3, 3 &gt; build OFELI::Equa_Therm&lt; 4, 4, 3, 3 &gt;::build Equa_Therm&lt; 4, 4, 3, 3 &gt;</field>
    <field name="text">Build the linear system of equations Build the linear system of equations Build the linear system of equations Build the linear system of equations Build the linear system of equations Build the linear system of equations Before using this function one must have properly selected appropriate options for The choice of a steady state or transient analysis By default the analysis is stationary In the case of transient analysis the choice of a time integration scheme and a lumped or consistent capacity matrix If transient analysis is chosen the lumped capacity matrix option is chosen by default and the implicit Euler scheme is used by default for time integration s Reference to used TimeStepping instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Therm::Equa_Therm</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__Therm.html#a594110b222528e620035b4784ddbf70b</field>
    <field name="keywords">Equa_Therm OFELI::Equa_Therm::Equa_Therm Equa_Therm&lt; NEN_, NEE_, NSN_, NSE_ &gt; Equa_Therm OFELI::Equa_Therm&lt; 2, 2, 1, 1 &gt;::Equa_Therm Equa_Therm&lt; 2, 2, 1, 1 &gt; Equa_Therm OFELI::Equa_Therm&lt; 3, 3, 2, 2 &gt;::Equa_Therm Equa_Therm&lt; 3, 3, 2, 2 &gt; Equa_Therm OFELI::Equa_Therm&lt; 6, 6, 3, 3 &gt;::Equa_Therm Equa_Therm&lt; 6, 6, 3, 3 &gt; Equa_Therm OFELI::Equa_Therm&lt; 4, 4, 3, 3 &gt;::Equa_Therm Equa_Therm&lt; 4, 4, 3, 3 &gt;</field>
    <field name="text">Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Constructs an empty equation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Therm::build</field>
    <field name="args">(EigenProblemSolver &amp;e)</field>
    <field name="url">classOFELI_1_1Equa__Therm.html#a707e4f7e7fe3140fd7a6fefe4774f03d</field>
    <field name="keywords">build OFELI::Equa_Therm::build Equa_Therm&lt; NEN_, NEE_, NSN_, NSE_ &gt; build OFELI::Equa_Therm&lt; 2, 2, 1, 1 &gt;::build Equa_Therm&lt; 2, 2, 1, 1 &gt; build OFELI::Equa_Therm&lt; 3, 3, 2, 2 &gt;::build Equa_Therm&lt; 3, 3, 2, 2 &gt; build OFELI::Equa_Therm&lt; 6, 6, 3, 3 &gt;::build Equa_Therm&lt; 6, 6, 3, 3 &gt; build OFELI::Equa_Therm&lt; 4, 4, 3, 3 &gt;::build Equa_Therm&lt; 4, 4, 3, 3 &gt;</field>
    <field name="text">Build the linear system for an eigenvalue problem Build the linear system for an eigenvalue problem Build the linear system for an eigenvalue problem Build the linear system for an eigenvalue problem Build the linear system for an eigenvalue problem Build the linear system for an eigenvalue problem e Reference to used EigenProblemSolver instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Therm::build</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__Therm.html#a7740c7ab195c03ac140f1f75f633470f</field>
    <field name="keywords">build OFELI::Equa_Therm::build Equa_Therm&lt; NEN_, NEE_, NSN_, NSE_ &gt; build OFELI::Equa_Therm&lt; 2, 2, 1, 1 &gt;::build Equa_Therm&lt; 2, 2, 1, 1 &gt; build OFELI::Equa_Therm&lt; 3, 3, 2, 2 &gt;::build Equa_Therm&lt; 3, 3, 2, 2 &gt; build OFELI::Equa_Therm&lt; 6, 6, 3, 3 &gt;::build Equa_Therm&lt; 6, 6, 3, 3 &gt; build OFELI::Equa_Therm&lt; 4, 4, 3, 3 &gt;::build Equa_Therm&lt; 4, 4, 3, 3 &gt;</field>
    <field name="text">Build the linear system of equations Build the linear system of equations Build the linear system of equations Build the linear system of equations Build the linear system of equations Build the linear system of equations Before using this function one must have properly selected appropriate options for The choice of a steady state or transient analysis By default the analysis is stationary In the case of transient analysis the choice of a time integration scheme and a lumped or consistent capacity matrix If transient analysis is chosen the lumped capacity matrix option is chosen by default and the implicit Euler scheme is used by default for time integration</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Therm::setRho</field>
    <field name="args">(const real_t &amp;rho)</field>
    <field name="url">classOFELI_1_1Equa__Therm.html#a8afc31a3a336895ff158e9ce2a5e1be1</field>
    <field name="keywords">setRho OFELI::Equa_Therm::setRho Equa_Therm&lt; NEN_, NEE_, NSN_, NSE_ &gt; setRho OFELI::Equa_Therm&lt; 2, 2, 1, 1 &gt;::setRho Equa_Therm&lt; 2, 2, 1, 1 &gt; setRho OFELI::Equa_Therm&lt; 3, 3, 2, 2 &gt;::setRho Equa_Therm&lt; 3, 3, 2, 2 &gt; setRho OFELI::Equa_Therm&lt; 6, 6, 3, 3 &gt;::setRho Equa_Therm&lt; 6, 6, 3, 3 &gt; setRho OFELI::Equa_Therm&lt; 4, 4, 3, 3 &gt;::setRho Equa_Therm&lt; 4, 4, 3, 3 &gt;</field>
    <field name="text">Set Density constant Set Density constant Set Density constant Set Density constant Set Density constant Set Density constant</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Therm::BoundaryRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1Equa__Therm.html#ab08651853053c5bff38e8fe3737fdc4c</field>
    <field name="keywords">BoundaryRHS OFELI::Equa_Therm::BoundaryRHS Equa_Therm&lt; NEN_, NEE_, NSN_, NSE_ &gt; BoundaryRHS OFELI::Equa_Therm&lt; 2, 2, 1, 1 &gt;::BoundaryRHS Equa_Therm&lt; 2, 2, 1, 1 &gt; BoundaryRHS OFELI::Equa_Therm&lt; 3, 3, 2, 2 &gt;::BoundaryRHS Equa_Therm&lt; 3, 3, 2, 2 &gt; BoundaryRHS OFELI::Equa_Therm&lt; 6, 6, 3, 3 &gt;::BoundaryRHS Equa_Therm&lt; 6, 6, 3, 3 &gt; BoundaryRHS OFELI::Equa_Therm&lt; 4, 4, 3, 3 &gt;::BoundaryRHS Equa_Therm&lt; 4, 4, 3, 3 &gt;</field>
    <field name="text">Add boundary right-hand side term to right-hand side Add boundary right-hand side term to right-hand side f Vector containing source at nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Therm::BodyRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1Equa__Therm.html#ac78bfd5e2f3f8dea4715b2e84653acec</field>
    <field name="keywords">BodyRHS OFELI::Equa_Therm::BodyRHS Equa_Therm&lt; NEN_, NEE_, NSN_, NSE_ &gt; BodyRHS OFELI::Equa_Therm&lt; 2, 2, 1, 1 &gt;::BodyRHS Equa_Therm&lt; 2, 2, 1, 1 &gt; BodyRHS OFELI::Equa_Therm&lt; 3, 3, 2, 2 &gt;::BodyRHS Equa_Therm&lt; 3, 3, 2, 2 &gt; BodyRHS OFELI::Equa_Therm&lt; 6, 6, 3, 3 &gt;::BodyRHS Equa_Therm&lt; 6, 6, 3, 3 &gt; BodyRHS OFELI::Equa_Therm&lt; 4, 4, 3, 3 &gt;::BodyRHS Equa_Therm&lt; 4, 4, 3, 3 &gt;</field>
    <field name="text">Add body right-hand side term to right-hand side f Vector containing source at nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Therm::LCapacity</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1Equa__Therm.html#ac8f8642d7d948708e9489e1d6f0444f8</field>
    <field name="keywords">LCapacity OFELI::Equa_Therm::LCapacity Equa_Therm&lt; NEN_, NEE_, NSN_, NSE_ &gt; LCapacity OFELI::Equa_Therm&lt; 2, 2, 1, 1 &gt;::LCapacity Equa_Therm&lt; 2, 2, 1, 1 &gt; LCapacity OFELI::Equa_Therm&lt; 3, 3, 2, 2 &gt;::LCapacity Equa_Therm&lt; 3, 3, 2, 2 &gt; LCapacity OFELI::Equa_Therm&lt; 6, 6, 3, 3 &gt;::LCapacity Equa_Therm&lt; 6, 6, 3, 3 &gt; LCapacity OFELI::Equa_Therm&lt; 4, 4, 3, 3 &gt;::LCapacity Equa_Therm&lt; 4, 4, 3, 3 &gt;</field>
    <field name="text">Add lumped capacity contribution to element matrix coef coefficient to multiply by the matrix before adding Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Therm::setConductivity</field>
    <field name="args">(const real_t &amp;diff)</field>
    <field name="url">classOFELI_1_1Equa__Therm.html#af41eec21645a98797a0c430e9d890431</field>
    <field name="keywords">setConductivity OFELI::Equa_Therm::setConductivity Equa_Therm&lt; NEN_, NEE_, NSN_, NSE_ &gt; setConductivity OFELI::Equa_Therm&lt; 2, 2, 1, 1 &gt;::setConductivity Equa_Therm&lt; 2, 2, 1, 1 &gt; setConductivity OFELI::Equa_Therm&lt; 3, 3, 2, 2 &gt;::setConductivity Equa_Therm&lt; 3, 3, 2, 2 &gt; setConductivity OFELI::Equa_Therm&lt; 6, 6, 3, 3 &gt;::setConductivity Equa_Therm&lt; 6, 6, 3, 3 &gt; setConductivity OFELI::Equa_Therm&lt; 4, 4, 3, 3 &gt;::setConductivity Equa_Therm&lt; 4, 4, 3, 3 &gt;</field>
    <field name="text">Set constant thermal conductivity Set constant thermal conductivity Set constant thermal conductivity Set constant thermal conductivity Set constant thermal conductivity Set constant thermal conductivity</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Therm::setStab</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equa__Therm.html#af8b8f62711060bfe1306a2fdda57f39c</field>
    <field name="keywords">setStab OFELI::Equa_Therm::setStab Equa_Therm&lt; NEN_, NEE_, NSN_, NSE_ &gt; setStab OFELI::Equa_Therm&lt; 2, 2, 1, 1 &gt;::setStab Equa_Therm&lt; 2, 2, 1, 1 &gt; setStab OFELI::Equa_Therm&lt; 3, 3, 2, 2 &gt;::setStab Equa_Therm&lt; 3, 3, 2, 2 &gt; setStab OFELI::Equa_Therm&lt; 6, 6, 3, 3 &gt;::setStab Equa_Therm&lt; 6, 6, 3, 3 &gt; setStab OFELI::Equa_Therm&lt; 4, 4, 3, 3 &gt;::setStab Equa_Therm&lt; 4, 4, 3, 3 &gt;</field>
    <field name="text">Set stabilized formulation Set stabilized formulation Set stabilized formulation Set stabilized formulation Set stabilized formulation Set stabilized formulation Stabilized variational formulations are to be used when the Péclet number is large By default no stabilization is used</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Therm::Diffusion</field>
    <field name="args">(real_t coef=1.)</field>
    <field name="url">classOFELI_1_1Equa__Therm.html#afb95d0bc30161960fc28d23075265630</field>
    <field name="keywords">Diffusion OFELI::Equa_Therm::Diffusion Equa_Therm&lt; NEN_, NEE_, NSN_, NSE_ &gt; Diffusion OFELI::Equa_Therm&lt; 2, 2, 1, 1 &gt;::Diffusion Equa_Therm&lt; 2, 2, 1, 1 &gt; Diffusion OFELI::Equa_Therm&lt; 3, 3, 2, 2 &gt;::Diffusion Equa_Therm&lt; 3, 3, 2, 2 &gt; Diffusion OFELI::Equa_Therm&lt; 6, 6, 3, 3 &gt;::Diffusion Equa_Therm&lt; 6, 6, 3, 3 &gt; Diffusion OFELI::Equa_Therm&lt; 4, 4, 3, 3 &gt;::Diffusion Equa_Therm&lt; 4, 4, 3, 3 &gt;</field>
    <field name="text">Add diffusion term to element matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equa_Therm::Capacity</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1Equa__Therm.html#afc7f97bae3637f88161ba576b1f2cd8a</field>
    <field name="keywords">Capacity OFELI::Equa_Therm::Capacity Equa_Therm&lt; NEN_, NEE_, NSN_, NSE_ &gt; Capacity OFELI::Equa_Therm&lt; 2, 2, 1, 1 &gt;::Capacity Equa_Therm&lt; 2, 2, 1, 1 &gt; Capacity OFELI::Equa_Therm&lt; 3, 3, 2, 2 &gt;::Capacity Equa_Therm&lt; 3, 3, 2, 2 &gt; Capacity OFELI::Equa_Therm&lt; 6, 6, 3, 3 &gt;::Capacity Equa_Therm&lt; 6, 6, 3, 3 &gt; Capacity OFELI::Equa_Therm&lt; 4, 4, 3, 3 &gt;::Capacity Equa_Therm&lt; 4, 4, 3, 3 &gt;</field>
    <field name="text">Add consistent capacity contribution to left-hand side coef coefficient to multiply by the matrix before adding Default 1</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Equation</field>
    <field name="url">classOFELI_1_1Equation.html</field>
    <field name="keywords">Equation Equation&lt; 3, 3, 2, 2 &gt; Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Abstract class for all equation classes Template Arguments NEN_ Number of element nodes NEE_ Number of element equations NSN_ Number of side nodes NSN_ Number of side equations Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::DGElementAssembly</field>
    <field name="args">(SkSMatrix&lt; real_t &gt; &amp;A)</field>
    <field name="url">classOFELI_1_1Equation.html#a01292e840828ce2c06b4a6a55252b632</field>
    <field name="keywords">DGElementAssembly OFELI::Equation::DGElementAssembly Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; DGElementAssembly OFELI::Equation&lt; 3, 3, 2, 2 &gt;::DGElementAssembly Equation&lt; 3, 3, 2, 2 &gt; DGElementAssembly OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::DGElementAssembly Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation A Global matrix stored as an SkSMatrix instance The element pointer is given by the global variable theElement Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::ElementSideVector</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;b, LocalVect&lt; real_t, NSE_ &gt; &amp;be)</field>
    <field name="url">classOFELI_1_1Equation.html#a04209326241354d974e626f4ea1e1f54</field>
    <field name="keywords">ElementSideVector OFELI::Equation::ElementSideVector Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; ElementSideVector OFELI::Equation&lt; 3, 3, 2, 2 &gt;::ElementSideVector Equation&lt; 3, 3, 2, 2 &gt; ElementSideVector OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::ElementSideVector Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance b Global vector to be localized be Local vector the length of which is Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::ElementNodeVectorSingleDOF</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;b, LocalVect&lt; real_t, NEN_ &gt; &amp;be)</field>
    <field name="url">classOFELI_1_1Equation.html#a0c02044890286e28df7183a9a544b2fe</field>
    <field name="keywords">ElementNodeVectorSingleDOF OFELI::Equation::ElementNodeVectorSingleDOF Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; ElementNodeVectorSingleDOF OFELI::Equation&lt; 3, 3, 2, 2 &gt;::ElementNodeVectorSingleDOF Equation&lt; 3, 3, 2, 2 &gt; ElementNodeVectorSingleDOF OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::ElementNodeVectorSingleDOF Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance b Global vector to be localized be Local vector the length of which is the total number of element equations Vector b is assumed to contain only one degree of freedom by node Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::AxbAssembly</field>
    <field name="args">(const Side &amp;sd, const Vect&lt; real_t &gt; &amp;x, Vect&lt; real_t &gt; &amp;b)</field>
    <field name="url">classOFELI_1_1Equation.html#a1245f5dce71d91e6c9c869fc02183a8e</field>
    <field name="keywords">AxbAssembly OFELI::Equation::AxbAssembly Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; AxbAssembly OFELI::Equation&lt; 3, 3, 2, 2 &gt;::AxbAssembly Equation&lt; 3, 3, 2, 2 &gt; AxbAssembly OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::AxbAssembly Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector sd Reference to Side instance x Global vector to multiply by Vect instance b Global vector Vect instance Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector Assemble product of side matrix by side vector into global vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::DiagBC</field>
    <field name="args">(DOFSupport dof_type=NODE_DOF, int dof=0)</field>
    <field name="url">classOFELI_1_1Equation.html#a16b535a4f4b4efd9ed9f74f003b7ec3c</field>
    <field name="keywords">DiagBC OFELI::Equation::DiagBC Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; DiagBC OFELI::Equation&lt; 3, 3, 2, 2 &gt;::DiagBC Equation&lt; 3, 3, 2, 2 &gt; DiagBC OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::DiagBC Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique dof_type DOF type option To choose among the enumerated values NODE_DOF DOFs are supported by nodes Default ELEMENT_DOF DOFs are supported by elements SIDE_DOF DOFs are supported by sides dof DOF setting 0 All DOFs are taken into account Default 0 Only DOF No dof is handled in the system Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique Update element matrix to impose bc by diagonalization technique</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::ElementAssembly</field>
    <field name="args">(SkSMatrix&lt; real_t &gt; &amp;A)</field>
    <field name="url">classOFELI_1_1Equation.html#a246dd245f3f43c6e2816f588df6406a4</field>
    <field name="keywords">ElementAssembly OFELI::Equation::ElementAssembly Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; ElementAssembly OFELI::Equation&lt; 3, 3, 2, 2 &gt;::ElementAssembly Equation&lt; 3, 3, 2, 2 &gt; ElementAssembly OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::ElementAssembly Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one A Global matrix stored as an SkSMatrix instance The element pointer is given by the global variable theElement Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::ElementAssembly</field>
    <field name="args">(TrMatrix&lt; real_t &gt; &amp;A)</field>
    <field name="url">classOFELI_1_1Equation.html#a25d9ff00c97c71ed3fb95085dd94f9ff</field>
    <field name="keywords">ElementAssembly OFELI::Equation::ElementAssembly Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; ElementAssembly OFELI::Equation&lt; 3, 3, 2, 2 &gt;::ElementAssembly Equation&lt; 3, 3, 2, 2 &gt; ElementAssembly OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::ElementAssembly Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one A Global matrix stored as an TrMatrix instance The element pointer is given by the global variable theElement Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::LocalNodeVector</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;b)</field>
    <field name="url">classOFELI_1_1Equation.html#a2f6dce626da066be3d9cef88059319de</field>
    <field name="keywords">LocalNodeVector OFELI::Equation::LocalNodeVector Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; LocalNodeVector OFELI::Equation&lt; 3, 3, 2, 2 &gt;::LocalNodeVector Equation&lt; 3, 3, 2, 2 &gt; LocalNodeVector OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::LocalNodeVector Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance b Reference to global vector to be localized The resulting local vector can be accessed by attribute ePrev This member function is to be used if a constructor with Element was invoked Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::ElementAssembly</field>
    <field name="args">(SpMatrix&lt; real_t &gt; &amp;A)</field>
    <field name="url">classOFELI_1_1Equation.html#a30eb3df26e986df9c6fb475f0df7c1f0</field>
    <field name="keywords">ElementAssembly OFELI::Equation::ElementAssembly Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; ElementAssembly OFELI::Equation&lt; 3, 3, 2, 2 &gt;::ElementAssembly Equation&lt; 3, 3, 2, 2 &gt; ElementAssembly OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::ElementAssembly Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one A Global matrix stored as an SpMatrix instance The element pointer is given by the global variable theElement Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::DGElementAssembly</field>
    <field name="args">(SkMatrix&lt; real_t &gt; &amp;A)</field>
    <field name="url">classOFELI_1_1Equation.html#a3208a69432f6436e13dc903289927814</field>
    <field name="keywords">DGElementAssembly OFELI::Equation::DGElementAssembly Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; DGElementAssembly OFELI::Equation&lt; 3, 3, 2, 2 &gt;::DGElementAssembly Equation&lt; 3, 3, 2, 2 &gt; DGElementAssembly OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::DGElementAssembly Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation A Global matrix stored as an SkMatrix instance The element pointer is given by the global variable theElement Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::Equation</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equation.html#a3fe274315aad1231ebd4a18ad0a66146</field>
    <field name="keywords">Equation OFELI::Equation::Equation Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; Equation OFELI::Equation&lt; 3, 3, 2, 2 &gt;::Equation Equation&lt; 3, 3, 2, 2 &gt; Equation OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::Equation Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Default constructor Constructs an equation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::SideAssembly</field>
    <field name="args">(Matrix&lt; real_t &gt; *A)</field>
    <field name="url">classOFELI_1_1Equation.html#a4168cc891eae8b5f244e872572bf3200</field>
    <field name="keywords">SideAssembly OFELI::Equation::SideAssembly Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; SideAssembly OFELI::Equation&lt; 3, 3, 2, 2 &gt;::SideAssembly Equation&lt; 3, 3, 2, 2 &gt; SideAssembly OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::SideAssembly Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one A Pointer to global matrix abstract class can be any of classes SkSMatrix SkMatrix SpMatrix The side pointer is given by the global variable theSide Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::~Equation</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equation.html#a4749911be327650948050e9f0e07ea1a</field>
    <field name="keywords">OFELI::Equation::~Equation Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; OFELI::Equation&lt; 3, 3, 2, 2 &gt;::~Equation Equation&lt; 3, 3, 2, 2 &gt; OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::~Equation Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::Equation</field>
    <field name="args">(Mesh &amp;mesh)</field>
    <field name="url">classOFELI_1_1Equation.html#a4b2452352784c6b27f28e1bfa332feb9</field>
    <field name="keywords">Equation OFELI::Equation::Equation Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; Equation OFELI::Equation&lt; 3, 3, 2, 2 &gt;::Equation Equation&lt; 3, 3, 2, 2 &gt; Equation OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::Equation Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance mesh Mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance Constructor with mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::ElementAssembly</field>
    <field name="args">(Matrix&lt; real_t &gt; *A)</field>
    <field name="url">classOFELI_1_1Equation.html#a4d0823951843e09f7b45e63a11fbb080</field>
    <field name="keywords">ElementAssembly OFELI::Equation::ElementAssembly Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; ElementAssembly OFELI::Equation&lt; 3, 3, 2, 2 &gt;::ElementAssembly Equation&lt; 3, 3, 2, 2 &gt; ElementAssembly OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::ElementAssembly Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one A Pointer to global matrix abstract class can be any of classes SkSMatrix SkMatrix SpMatrix The element pointer is given by the global variable theElement Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::SideSideVector</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;b, vector&lt; real_t &gt; &amp;bs)</field>
    <field name="url">classOFELI_1_1Equation.html#a4ee6babe8a6192e5c084d67e9222e75c</field>
    <field name="keywords">SideSideVector OFELI::Equation::SideSideVector Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; SideSideVector OFELI::Equation&lt; 3, 3, 2, 2 &gt;::SideSideVector Equation&lt; 3, 3, 2, 2 &gt; SideSideVector OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::SideSideVector Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance b Global vector to be localized bs Local constant value of vector at given side All degrees of freedom are transferred to the local vector Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::ElementAssembly</field>
    <field name="args">(SkMatrix&lt; real_t &gt; &amp;A)</field>
    <field name="url">classOFELI_1_1Equation.html#a51e8b0bceebcf635f57e1a9df6ecba1c</field>
    <field name="keywords">ElementAssembly OFELI::Equation::ElementAssembly Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; ElementAssembly OFELI::Equation&lt; 3, 3, 2, 2 &gt;::ElementAssembly Equation&lt; 3, 3, 2, 2 &gt; ElementAssembly OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::ElementAssembly Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one A Global matrix stored as an SkMatrix instance The element pointer is given by the global variable theElement Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::DGElementAssembly</field>
    <field name="args">(TrMatrix&lt; real_t &gt; &amp;A)</field>
    <field name="url">classOFELI_1_1Equation.html#a51eafc6e5c2e5d614d6933e457039153</field>
    <field name="keywords">DGElementAssembly OFELI::Equation::DGElementAssembly Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; DGElementAssembly OFELI::Equation&lt; 3, 3, 2, 2 &gt;::DGElementAssembly Equation&lt; 3, 3, 2, 2 &gt; DGElementAssembly OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::DGElementAssembly Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation A Global matrix stored as an TrMatrix instance The element pointer is given by the global variable theElement Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::setMaterialProperty</field>
    <field name="args">(const string &amp;exp, const string &amp;prop)</field>
    <field name="url">classOFELI_1_1Equation.html#a5a7bad963394968d24bff5dda9dd51ee</field>
    <field name="keywords">setMaterialProperty OFELI::Equation::setMaterialProperty Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; setMaterialProperty OFELI::Equation&lt; 3, 3, 2, 2 &gt;::setMaterialProperty Equation&lt; 3, 3, 2, 2 &gt; setMaterialProperty OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::setMaterialProperty Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression exp Algebraic expression prop Property name Return value in expression evaluation 0 Normal evaluation 0 An error message is displayed Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression Define a material property by an algebraic expression</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::ElementAssembly</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1Equation.html#a5bf3daad54c4efa7e5498430ec65101c</field>
    <field name="keywords">ElementAssembly OFELI::Equation::ElementAssembly Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; ElementAssembly OFELI::Equation&lt; 3, 3, 2, 2 &gt;::ElementAssembly Equation&lt; 3, 3, 2, 2 &gt; ElementAssembly OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::ElementAssembly Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one v Global vector Vect instance The element pointer is given by the global variable theElement Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one Assemble element vector into global one</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::SideAssembly</field>
    <field name="args">(SkSMatrix&lt; real_t &gt; &amp;A)</field>
    <field name="url">classOFELI_1_1Equation.html#a5fcc041aab78edb6cc1b69bc924fc4d0</field>
    <field name="keywords">SideAssembly OFELI::Equation::SideAssembly Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; SideAssembly OFELI::Equation&lt; 3, 3, 2, 2 &gt;::SideAssembly Equation&lt; 3, 3, 2, 2 &gt; SideAssembly OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::SideAssembly Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one A Global matrix stored as an SkSMatrix instance The side pointer is given by the global variable theSide Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::DGElementAssembly</field>
    <field name="args">(SpMatrix&lt; real_t &gt; &amp;A)</field>
    <field name="url">classOFELI_1_1Equation.html#a60f96fa2c6a0ca515551883faf7ad3b6</field>
    <field name="keywords">DGElementAssembly OFELI::Equation::DGElementAssembly Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; DGElementAssembly OFELI::Equation&lt; 3, 3, 2, 2 &gt;::DGElementAssembly Equation&lt; 3, 3, 2, 2 &gt; DGElementAssembly OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::DGElementAssembly Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation A Global matrix stored as an SpMatrix instance The element pointer is given by the global variable theElement Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::SideVector</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;b, vector&lt; real_t &gt; &amp;sb)</field>
    <field name="url">classOFELI_1_1Equation.html#a6be31ebb6ca711fe8ce0514b0955cc2b</field>
    <field name="keywords">SideVector OFELI::Equation::SideVector Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; SideVector OFELI::Equation&lt; 3, 3, 2, 2 &gt;::SideVector Equation&lt; 3, 3, 2, 2 &gt; SideVector OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::SideVector Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Localize side vector Localize side vector Localize side vector Localize side vector Localize side vector Localize side vector Localize side vector Localize side vector Localize side vector Localize side vector Localize side vector Localize side vector Localize side vector Localize side vector Localize side vector Localize side vector Localize side vector Localize side vector Localize side vector Localize side vector Localize side vector Localize side vector Localize side vector b Global vector to be localized NODE_DOF DOFs are supported by nodes default ELEMENT_DOF DOFs are supported by elements SIDE_DOF DOFs are supported by sides BOUNDARY_SIDE_DOF DOFs are supported by boundary sides sb Array in which local vector is stored The resulting local vector can be accessed by attribute ePrev This member function is to be used if a constructor with Side was invoked It uses the Side pointer _theSide Localize side vector Localize side vector Localize side vector Localize side vector Localize side vector Localize side vector Localize side vector Localize side vector Localize side vector Localize side vector Localize side vector Localize side vector Localize side vector Localize side vector Localize side vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::SideAssembly</field>
    <field name="args">(SpMatrix&lt; real_t &gt; &amp;A)</field>
    <field name="url">classOFELI_1_1Equation.html#a6c93c3b38814c22a3e7f852c46646522</field>
    <field name="keywords">SideAssembly OFELI::Equation::SideAssembly Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; SideAssembly OFELI::Equation&lt; 3, 3, 2, 2 &gt;::SideAssembly Equation&lt; 3, 3, 2, 2 &gt; SideAssembly OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::SideAssembly Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one A Global matrix stored as an SpMatrix instance The side pointer is given by the global variable theSide Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::SideNodeCoordinates</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equation.html#a70aed9ca4f8d4fcca37357cf3a57518c</field>
    <field name="keywords">SideNodeCoordinates OFELI::Equation::SideNodeCoordinates Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; SideNodeCoordinates OFELI::Equation&lt; 3, 3, 2, 2 &gt;::SideNodeCoordinates Equation&lt; 3, 3, 2, 2 &gt; SideNodeCoordinates OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::SideNodeCoordinates Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Coordinates are stored in array _x 0 _x 1 which are instances of class Point&lt;real_t&gt; This member function uses the Element pointer _theElement Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes Localize coordinates of side nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::ElementNodeVector</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;b, LocalVect&lt; real_t, NEE_ &gt; &amp;be)</field>
    <field name="url">classOFELI_1_1Equation.html#a7503bc123551fd9f80fd41ae6d5af940</field>
    <field name="keywords">ElementNodeVector OFELI::Equation::ElementNodeVector Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; ElementNodeVector OFELI::Equation&lt; 3, 3, 2, 2 &gt;::ElementNodeVector Equation&lt; 3, 3, 2, 2 &gt; ElementNodeVector OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::ElementNodeVector Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance b Global vector to be localized be Local vector the length of which is the total number of element equations All degrees of freedom are transferred to the local vector Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance Localize element vector from a Vect instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::getNbEq</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Equation.html#a7e81ee9c88f36ed678b711aaf77fcfb1</field>
    <field name="keywords">getNbEq OFELI::Equation::getNbEq Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; getNbEq OFELI::Equation&lt; 3, 3, 2, 2 &gt;::getNbEq Equation&lt; 3, 3, 2, 2 &gt; getNbEq OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::getNbEq Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations Return number of element equations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::ElementVector</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;b, DOFSupport dof_type=NODE_DOF, int flag=0)</field>
    <field name="url">classOFELI_1_1Equation.html#a8f7983cf1b6bfc812940c69985ced2ec</field>
    <field name="keywords">ElementVector OFELI::Equation::ElementVector Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; ElementVector OFELI::Equation&lt; 3, 3, 2, 2 &gt;::ElementVector Equation&lt; 3, 3, 2, 2 &gt; ElementVector OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::ElementVector Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Localize element vector Localize element vector Localize element vector Localize element vector Localize element vector Localize element vector Localize element vector Localize element vector Localize element vector Localize element vector Localize element vector Localize element vector Localize element vector Localize element vector Localize element vector Localize element vector Localize element vector Localize element vector Localize element vector Localize element vector Localize element vector Localize element vector Localize element vector b Global vector to be localized dof_type DOF type option To choose among the enumerated values NODE_DOF DOFs are supported by nodes Default ELEMENT_DOF DOFs are supported by elements SIDE_DOF DOFs are supported by sides flag Option to set 0 All DOFs are taken into account Default 0 Only DOF number dof is handled in the system The resulting local vector can be accessed by attribute ePrev This member function is to be used if a constructor with Element was invoked It uses the Element pointer _theElement Localize element vector Localize element vector Localize element vector Localize element vector Localize element vector Localize element vector Localize element vector Localize element vector Localize element vector Localize element vector Localize element vector Localize element vector Localize element vector Localize element vector Localize element vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::ElementNodeVector</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;b, LocalVect&lt; real_t, NEN_ &gt; &amp;be, int dof)</field>
    <field name="url">classOFELI_1_1Equation.html#a92cc45255f274c2a38320a9e9a3140b0</field>
    <field name="keywords">ElementNodeVector OFELI::Equation::ElementNodeVector Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; ElementNodeVector OFELI::Equation&lt; 3, 3, 2, 2 &gt;::ElementNodeVector Equation&lt; 3, 3, 2, 2 &gt; ElementNodeVector OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::ElementNodeVector Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance b Global vector to be localized be Local vector the length of which is the total number of element equations dof Degree of freedom to transfer to the local vector Only yhe dega dof is transferred to the local vector Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance Localize Element Vector from a Vect instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::DGElementAssembly</field>
    <field name="args">(Matrix&lt; real_t &gt; *A)</field>
    <field name="url">classOFELI_1_1Equation.html#a9648985c0f55dad74e45a80ec5cb1513</field>
    <field name="keywords">DGElementAssembly OFELI::Equation::DGElementAssembly Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; DGElementAssembly OFELI::Equation&lt; 3, 3, 2, 2 &gt;::DGElementAssembly Equation&lt; 3, 3, 2, 2 &gt; DGElementAssembly OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::DGElementAssembly Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation A Pointer to global matrix abstract class can be any of classes SkSMatrix SkMatrix SpMatrix The element pointer is given by the global variable theElement Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation Assemble element matrix into global one for the Discontinuous Galerkin approximation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::updateBC</field>
    <field name="args">(const Element &amp;el, const Vect&lt; real_t &gt; &amp;bc)</field>
    <field name="url">classOFELI_1_1Equation.html#a9ece7667be8c650b6e1ee623749ad492</field>
    <field name="keywords">updateBC OFELI::Equation::updateBC Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; updateBC OFELI::Equation&lt; 3, 3, 2, 2 &gt;::updateBC Equation&lt; 3, 3, 2, 2 &gt; updateBC OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::updateBC Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions el Reference to current element instance bc Vector that contains imposed values at all DOFs Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions Update Right-Hand side by taking into account essential boundary conditions</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::ElementNodeCoordinates</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Equation.html#aaaffc94bf9a5a3b25a024e524e7a29b1</field>
    <field name="keywords">ElementNodeCoordinates OFELI::Equation::ElementNodeCoordinates Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; ElementNodeCoordinates OFELI::Equation&lt; 3, 3, 2, 2 &gt;::ElementNodeCoordinates Equation&lt; 3, 3, 2, 2 &gt; ElementNodeCoordinates OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::ElementNodeCoordinates Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Coordinates are stored in array _x 0 _x 1 which are instances of class Point&lt;real_t&gt; This member function uses the Side pointer _theSide Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes Localize coordinates of element nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::AxbAssembly</field>
    <field name="args">(const Element &amp;el, const Vect&lt; real_t &gt; &amp;x, Vect&lt; real_t &gt; &amp;b)</field>
    <field name="url">classOFELI_1_1Equation.html#abfb3142e3d13b219bb94e92671c3d04a</field>
    <field name="keywords">AxbAssembly OFELI::Equation::AxbAssembly Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; AxbAssembly OFELI::Equation&lt; 3, 3, 2, 2 &gt;::AxbAssembly Equation&lt; 3, 3, 2, 2 &gt; AxbAssembly OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::AxbAssembly Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector el Reference to Element instance x Global vector to multiply by Vect instance b Global vector to add Vect instance Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector Assemble product of element matrix by element vector into global vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::SideAssembly</field>
    <field name="args">(SkMatrix&lt; real_t &gt; &amp;A)</field>
    <field name="url">classOFELI_1_1Equation.html#ac4a988dedc130d0fdca14077ed7d90bd</field>
    <field name="keywords">SideAssembly OFELI::Equation::SideAssembly Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; SideAssembly OFELI::Equation&lt; 3, 3, 2, 2 &gt;::SideAssembly Equation&lt; 3, 3, 2, 2 &gt; SideAssembly OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::SideAssembly Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one A Global matrix stored as an SkMatrix instance The side pointer is given by the global variable theSide Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one Assemble side edge or face matrix into global one</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::SideNodeVector</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;b, LocalVect&lt; real_t, NSE_ &gt; &amp;bs)</field>
    <field name="url">classOFELI_1_1Equation.html#ac9aedef9e0deffefe6ca5e8e31c8673d</field>
    <field name="keywords">SideNodeVector OFELI::Equation::SideNodeVector Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; SideNodeVector OFELI::Equation&lt; 3, 3, 2, 2 &gt;::SideNodeVector Equation&lt; 3, 3, 2, 2 &gt; SideNodeVector OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::SideNodeVector Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance b Global vector to be localized bs Local vector the length of which is the total number of side equations All degrees of freedom are transferred to the local vector Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance Localize side vector from a Vect instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::Equation</field>
    <field name="args">(Mesh &amp;mesh, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1Equation.html#ad36a659322ae81541cde11d1a5b22462</field>
    <field name="keywords">Equation OFELI::Equation::Equation Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; Equation OFELI::Equation&lt; 3, 3, 2, 2 &gt;::Equation Equation&lt; 3, 3, 2, 2 &gt; Equation OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::Equation Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector mesh Mesh instance u Vect instance containing solution Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector Constructor with mesh instance and solution vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::getNbNodes</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Equation.html#ade220c85ff6ecba20a6e05121f2b9257</field>
    <field name="keywords">getNbNodes OFELI::Equation::getNbNodes Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; getNbNodes OFELI::Equation&lt; 3, 3, 2, 2 &gt;::getNbNodes Equation&lt; 3, 3, 2, 2 &gt; getNbNodes OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::getNbNodes Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes Return number of element nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::Equation</field>
    <field name="args">(Mesh &amp;mesh, Vect&lt; real_t &gt; &amp;u, real_t &amp;init_time, real_t &amp;final_time, real_t &amp;time_step)</field>
    <field name="url">classOFELI_1_1Equation.html#af14f47080130845f507adda742a792cc</field>
    <field name="keywords">Equation OFELI::Equation::Equation Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; Equation OFELI::Equation&lt; 3, 3, 2, 2 &gt;::Equation Equation&lt; 3, 3, 2, 2 &gt; Equation OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::Equation Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side mesh Mesh instance u Vect instance containing Right-hand side init_time Initial Time value final_time Final Time value time_step Time step value Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side Constructor with mesh instance matrix and right-hand side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::ElementAssembly</field>
    <field name="args">(BMatrix&lt; real_t &gt; &amp;A)</field>
    <field name="url">classOFELI_1_1Equation.html#af2271370bd25891e124808a6fda90aac</field>
    <field name="keywords">ElementAssembly OFELI::Equation::ElementAssembly Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; ElementAssembly OFELI::Equation&lt; 3, 3, 2, 2 &gt;::ElementAssembly Equation&lt; 3, 3, 2, 2 &gt; ElementAssembly OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::ElementAssembly Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one A Global matrix stored as a BMatrix instance The element pointer is given by the global variable theElement Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one Assemble element matrix into global one</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equation::SideAssembly</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1Equation.html#af9d06a4645a4d1b67a31c90bd6c3eb01</field>
    <field name="keywords">SideAssembly OFELI::Equation::SideAssembly Equation&lt; NEN_, NEE_, NSN_, NSE_ &gt; SideAssembly OFELI::Equation&lt; 3, 3, 2, 2 &gt;::SideAssembly Equation&lt; 3, 3, 2, 2 &gt; SideAssembly OFELI::Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;::SideAssembly Equation&lt; NEN_, NEN_, NSN_, NSN_ &gt;</field>
    <field name="text">Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one v Global vector Vect instance The side pointer is given by the global variable theSide Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one Assemble side edge or face vector into global one</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Estimator</field>
    <field name="url">classOFELI_1_1Estimator.html</field>
    <field name="keywords">Estimator</field>
    <field name="text">To calculate an a posteriori estimator of the solution This class enables calculating an estimator of a solution in order to evaluate reliability Estimation uses the so-called Zienkiewicz-Zhu estimator Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Estimator::getNodeWiseIndex</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;e)</field>
    <field name="url">classOFELI_1_1Estimator.html#a19bc9a3230f3bd53b2221ad7a74810cf</field>
    <field name="keywords">getNodeWiseIndex OFELI::Estimator::getNodeWiseIndex Estimator</field>
    <field name="text">Get vector containing nodewise error index e Vector that contains once the member function setError is invoked a posteriori estimator at each node</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Estimator::getAverage</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Estimator.html#a1d8ef73d5ae5274e8c004b9b10de2da9</field>
    <field name="keywords">getAverage OFELI::Estimator::getAverage Estimator</field>
    <field name="text">Return averaged error</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Estimator::getMesh</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Estimator.html#a33d260bca42fe66a8536f2eac63adc64</field>
    <field name="keywords">getMesh OFELI::Estimator::getMesh Estimator</field>
    <field name="text">Return a reference to the finite element mesh</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">OFELI::Estimator::EstimatorType</field>
    <field name="url">classOFELI_1_1Estimator.html#a3d248e8029a03537eb6296f93345f51e</field>
    <field name="keywords">EstimatorType OFELI::Estimator::EstimatorType Estimator</field>
    <field name="text">Enumerate variable that selects an error estimator for mesh adaptation purposes</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::Estimator::ESTIM_ZZ</field>
    <field name="url">classOFELI_1_1Estimator.html#a3d248e8029a03537eb6296f93345f51ea7794313b487e60087acd23190b1ef61d</field>
    <field name="keywords">ESTIM_ZZ OFELI::Estimator::ESTIM_ZZ Estimator ESTIM_ZZ OFELI::Estimator::ESTIM_ZZ Estimator</field>
    <field name="text">Zhu-Zienckiewicz elementwise estimator</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::Estimator::ESTIM_ND_JUMP</field>
    <field name="url">classOFELI_1_1Estimator.html#a3d248e8029a03537eb6296f93345f51eaca80926339029dc37fa92e00a4341e99</field>
    <field name="keywords">ESTIM_ND_JUMP OFELI::Estimator::ESTIM_ND_JUMP Estimator ESTIM_ND_JUMP OFELI::Estimator::ESTIM_ND_JUMP Estimator</field>
    <field name="text">Normal derivative jump sidewise estimator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Estimator::getElementWiseIndex</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;e)</field>
    <field name="url">classOFELI_1_1Estimator.html#a52f5df03e050b74f199dc6e3b6b47c72</field>
    <field name="keywords">getElementWiseIndex OFELI::Estimator::getElementWiseIndex Estimator</field>
    <field name="text">Get vector containing elementwise error index e Vector that contains once the member function setError is invoked a posteriori estimator at each element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Estimator::getSideWiseIndex</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;e)</field>
    <field name="url">classOFELI_1_1Estimator.html#a60ee01b46949013e587259749c20584f</field>
    <field name="keywords">getSideWiseIndex OFELI::Estimator::getSideWiseIndex Estimator</field>
    <field name="text">Get vector containing sidewise error index e Vector that contains once the member function setError is invoked a posteriori estimator at each side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Estimator::~Estimator</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Estimator.html#a66fefe296cc283f479648d938ba05052</field>
    <field name="keywords">OFELI::Estimator::~Estimator Estimator</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Estimator::setType</field>
    <field name="args">(EstimatorType t=ESTIM_ZZ)</field>
    <field name="url">classOFELI_1_1Estimator.html#a97ceb23cb630a1d1e445d786bc04edf9</field>
    <field name="keywords">setType OFELI::Estimator::setType Estimator</field>
    <field name="text">Select type of a posteriori estimator t Type of estimator It has to be chosen among the enumerated values ESTIM_ZZ The Zhu-Zienckiewicz estimator Default value ESTIM_ND_JUMP An estimator based on the jump of normal derivatives of the solution across mesh sides</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Estimator::Estimator</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Estimator.html#abb232095ed221e3cc2b045ff79053b51</field>
    <field name="keywords">Estimator OFELI::Estimator::Estimator Estimator</field>
    <field name="text">Default Constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Estimator::Estimator</field>
    <field name="args">(Mesh &amp;m)</field>
    <field name="url">classOFELI_1_1Estimator.html#ac75af9393b8c8d81788583aac7f1957c</field>
    <field name="keywords">Estimator OFELI::Estimator::Estimator Estimator</field>
    <field name="text">Constructor using finite element mesh m Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Estimator::setSolution</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1Estimator.html#af6fe5bb0ec25b8e2fec7331f7ea33afb</field>
    <field name="keywords">setSolution OFELI::Estimator::setSolution Estimator</field>
    <field name="text">Provide solution vector in order to determine error index u Vector containing solution at mesh nodes</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::FEShape</field>
    <field name="url">classOFELI_1_1FEShape.html</field>
    <field name="keywords">FEShape</field>
    <field name="text">Parent class from which inherit all finite element shape classes Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FEShape::Sh</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1FEShape.html#a18a01dd48ca9496814635d2e842c1aea</field>
    <field name="keywords">Sh OFELI::FEShape::Sh FEShape</field>
    <field name="text">Return shape function of node i at given point Return shape function of node i at given point Return shape function of node i at given point Return shape function of node i at given point Return shape function of node i at given point Return shape function of node i at given point Return shape function of node i at given point Return shape function of node i at given point Return shape function of node i at given point Return shape function of node i at given point</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FEShape::getCenter</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1FEShape.html#a29518c54ba3a66576ee2859724fc88cd</field>
    <field name="keywords">getCenter OFELI::FEShape::getCenter FEShape</field>
    <field name="text">Return coordinates of center of element Return coordinates of center of element Return coordinates of center of element Return coordinates of center of element Return coordinates of center of element Return coordinates of center of element Return coordinates of center of element Return coordinates of center of element Return coordinates of center of element Return coordinates of center of element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FEShape::~FEShape</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1FEShape.html#a3ba928b2c14260b47beab071c1e347bd</field>
    <field name="keywords">OFELI::FEShape::~FEShape FEShape</field>
    <field name="text">Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FEShape::getLocalPoint</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1FEShape.html#a6ab78ad967840f6af5e0c4d47d30f5ef</field>
    <field name="keywords">getLocalPoint OFELI::FEShape::getLocalPoint FEShape</field>
    <field name="text">Localize a point in the element Return actual coordinates in the reference element If the transformation Reference element Actual element is not affine member function setLocal() must have been called before in order to calcuate relevant quantities Localize a point in the element Localize a point in the element Localize a point in the element Localize a point in the element Localize a point in the element Localize a point in the element Localize a point in the element Localize a point in the element Localize a point in the element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FEShape::getDet</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1FEShape.html#aafc63832854e9022dd47991b51ed07b7</field>
    <field name="keywords">getDet OFELI::FEShape::getDet FEShape</field>
    <field name="text">Return determinant of jacobian If the transformation Reference element Actual element is not affine member function setLocal() must have been called before in order to calcuate relevant quantities Return determinant of jacobian Return determinant of jacobian Return determinant of jacobian Return determinant of jacobian Return determinant of jacobian Return determinant of jacobian Return determinant of jacobian Return determinant of jacobian Return determinant of jacobian</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FEShape::getLocalPoint</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;s) const</field>
    <field name="url">classOFELI_1_1FEShape.html#acb515e3222b1113e2558e03aa577d6ad</field>
    <field name="keywords">getLocalPoint OFELI::FEShape::getLocalPoint FEShape</field>
    <field name="text">Localize a point in the element Return actual coordinates where s are coordinates in the reference element Localize a point in the element Localize a point in the element Localize a point in the element Localize a point in the element Localize a point in the element Localize a point in the element Localize a point in the element Localize a point in the element Localize a point in the element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FEShape::FEShape</field>
    <field name="args">(const Side *sd)</field>
    <field name="url">classOFELI_1_1FEShape.html#ad662c28c63e9e8c72fddb76f5028ed61</field>
    <field name="keywords">FEShape OFELI::FEShape::FEShape FEShape</field>
    <field name="text">Constructor for a side sd Pointer to side Constructor for a side Constructor for a side Constructor for a side Constructor for a side Constructor for a side Constructor for a side Constructor for a side Constructor for a side Constructor for a side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FEShape::FEShape</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1FEShape.html#af1a6254740b6e11468dee2abfccc051a</field>
    <field name="keywords">FEShape OFELI::FEShape::FEShape FEShape</field>
    <field name="text">Default Constructor Default Constructor Default Constructor Default Constructor Default Constructor Default Constructor Default Constructor Default Constructor Default Constructor Default Constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FEShape::Sh</field>
    <field name="args">(size_t i, Point&lt; real_t &gt; s) const</field>
    <field name="url">classOFELI_1_1FEShape.html#af47800ddf6fa7dab39666cb7ce85d7ba</field>
    <field name="keywords">Sh OFELI::FEShape::Sh FEShape</field>
    <field name="text">Calculate shape function of node i at a given point s i Local node label s Point in the reference triangle where the shape function is evaluated Calculate shape function of node i at a given point s Calculate shape function of node i at a given point s Calculate shape function of node i at a given point s Calculate shape function of node i at a given point s Calculate shape function of node i at a given point s Calculate shape function of node i at a given point s Calculate shape function of node i at a given point s Calculate shape function of node i at a given point s Calculate shape function of node i at a given point s</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FEShape::FEShape</field>
    <field name="args">(const Element *el)</field>
    <field name="url">classOFELI_1_1FEShape.html#afcb4644a9ace5adbdc1c05efcc72da1f</field>
    <field name="keywords">FEShape OFELI::FEShape::FEShape FEShape</field>
    <field name="text">Constructor for an element el Pointer to element Constructor for an element Constructor for an element Constructor for an element Constructor for an element Constructor for an element Constructor for an element Constructor for an element Constructor for an element Constructor for an element</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::FastMarching</field>
    <field name="url">classOFELI_1_1FastMarching.html</field>
    <field name="keywords">FastMarching</field>
    <field name="text">class for the fast marching algorithm on uniform grids This class implements the Fast Marching method to solve the eikonal equation in a uniform grid 1 D 2 D or 3 D In other words the class solves the partial differential equation u|F 1 with u 0 on the interface where F is the velocity</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching::set</field>
    <field name="args">(const Grid &amp;g, Vect&lt; real_t &gt; &amp;T, Vect&lt; real_t &gt; &amp;F)</field>
    <field name="url">classOFELI_1_1FastMarching.html#a2316c2b614cc1f2190b9d9c965f4f30a</field>
    <field name="keywords">set OFELI::FastMarching::set FastMarching</field>
    <field name="text">Define grid solution vector and prppagation speed This function is to be used if the default constructor has been used g Instance of class Grid T Vector containing the on input an initialization of the distance function and once the function run is invoked the distance at grid nodes The initialization vector must use the following rules The solution must be supplied at all grid points in the vicinity of the interface(s) All other grid nodes must have the value INFINITY wth positive value if the node is in an outer domain and negative if it is in an inner domain F Vector containing propagation speed at grid nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching::set</field>
    <field name="args">(const Grid &amp;g, Vect&lt; real_t &gt; &amp;T)</field>
    <field name="url">classOFELI_1_1FastMarching.html#a5690c5c0f0a08c2f6883243d5f446089</field>
    <field name="keywords">set OFELI::FastMarching::set FastMarching</field>
    <field name="text">Define grid and solution vector This function is to be used if the default constructor has been used g Instance of class Grid T Vector containing the on input an initialization of the distance function and once the function run is invoked the distance at grid nodes The initialization vector must use the following rules The solution must be supplied at all grid points in the vicinity of the interface(s) All other grid nodes must have the value INFINITY wth positive value if the node is in an outer domain and negative if it is in an inner domain</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching::run</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1FastMarching.html#a58e8be2db2660128e4e6456a9c981fb5</field>
    <field name="keywords">run OFELI::FastMarching::run FastMarching</field>
    <field name="text">Execute Fast Marching Procedure Once this function is invoked the vector T in the constructor or in the member function set contains the solution Return value 0 if solution has been normally computed 0 An error has occurred</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching::FastMarching</field>
    <field name="args">(const Grid &amp;g, Vect&lt; real_t &gt; &amp;T, Vect&lt; real_t &gt; &amp;F)</field>
    <field name="url">classOFELI_1_1FastMarching.html#a63f312007bbbb7360c0b0b9c51deb316</field>
    <field name="keywords">FastMarching OFELI::FastMarching::FastMarching FastMarching</field>
    <field name="text">Constructor Constructor using Grid instance and propagation speed g Instance of class Grid T Vector containing the on input an initialization of the distance function and once the function run is invoked the distance at grid nodes The initialization vector must use the following rules The solution must be supplied at all grid points in the vicinity of the interface(s) All other grid nodes must have the value INFINITY wth positive value if the node is in an outer domain and negative if it is in an inner domain F Vector containing propagation speed at grid nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching::FastMarching</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1FastMarching.html#a902fc6fa1e0c8c7ad2ac2887d57ce033</field>
    <field name="keywords">FastMarching OFELI::FastMarching::FastMarching FastMarching</field>
    <field name="text">Default Constructor Initializes to default value grid data</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching::FastMarching</field>
    <field name="args">(const Grid &amp;g, Vect&lt; real_t &gt; &amp;T)</field>
    <field name="url">classOFELI_1_1FastMarching.html#ab83e4978dfebd4ad288ac9c72266b19b</field>
    <field name="keywords">FastMarching OFELI::FastMarching::FastMarching FastMarching</field>
    <field name="text">Constructor using grid data Constructor using Grid instance g Instance of class Grid T Vector containing the on input an initialization of the distance function and once the function run is invoked the distance at grid nodes The initialization vector must use the following rules The solution must be supplied at all grid points in the vicinity of the interface(s) All other grid nodes must have the value INFINITY wth positive value if the node is in an outer domain and negative if it is in an inner domain</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching::getResidual</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1FastMarching.html#adb660d0060ded58efa6cceedf1728f44</field>
    <field name="keywords">getResidual OFELI::FastMarching::getResidual FastMarching</field>
    <field name="text">Check consistency by computing the discrete residual This function returns residual error u|^2|F|-1|</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching::~FastMarching</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1FastMarching.html#af635567090ba382f6687d4fc14587f09</field>
    <field name="keywords">OFELI::FastMarching::~FastMarching FastMarching</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::FastMarching1DG</field>
    <field name="url">classOFELI_1_1FastMarching1DG.html</field>
    <field name="keywords">FastMarching1DG</field>
    <field name="text">class for the fast marching algorithm on 1 D uniform grids This class implements the Fast Marching method to solve the eikonal equation in a 1 D uniform grid In other words the class solves the partial differential equation 1 with T 0 on the interface where F is the velocity</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching1DG::~FastMarching1DG</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1FastMarching1DG.html#a0e3fa1c7f1082197ef4d25c611ea0532</field>
    <field name="keywords">OFELI::FastMarching1DG::~FastMarching1DG FastMarching1DG</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching1DG::set</field>
    <field name="args">(const Grid &amp;g, Vect&lt; real_t &gt; &amp;T, Vect&lt; real_t &gt; &amp;F)</field>
    <field name="url">classOFELI_1_1FastMarching1DG.html#a2316c2b614cc1f2190b9d9c965f4f30a</field>
    <field name="keywords">set OFELI::FastMarching1DG::set FastMarching1DG</field>
    <field name="text">Define grid solution vector and prppagation speed This function is to be used if the default constructor has been used g Instance of class Grid T Vector containing the on input an initialization of the distance function and once the function run is invoked the distance at grid nodes The initialization vector must use the following rules The solution must be supplied at all grid points in the vicinity of the interface(s) All other grid nodes must have the value INFINITY wth positive value if the node is in an outer domain and negative if it is in an inner domain F Vector containing propagation speed at grid nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching1DG::FastMarching1DG</field>
    <field name="args">(const Grid &amp;g, Vect&lt; real_t &gt; &amp;T)</field>
    <field name="url">classOFELI_1_1FastMarching1DG.html#a4c68abf87e7746363bbec0eba541d41b</field>
    <field name="keywords">FastMarching1DG OFELI::FastMarching1DG::FastMarching1DG FastMarching1DG</field>
    <field name="text">Constructor using grid data Constructor using Grid instance g Instance of class Grid T Vector containing the on input an initialization of the distance function and once the function run is invoked the distance at grid nodes The initialization vector must use the following rules The solution must be supplied at all grid points in the vicinity of the interface(s) All other grid nodes must have the value INFINITY wth positive value if the node is in an outer domain and negative if it is in an inner domain</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching1DG::FastMarching1DG</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1FastMarching1DG.html#a509606e24b86e446cad0c1483064ebd7</field>
    <field name="keywords">FastMarching1DG OFELI::FastMarching1DG::FastMarching1DG FastMarching1DG</field>
    <field name="text">Default Constructor Initializes to default value grid data</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching1DG::set</field>
    <field name="args">(const Grid &amp;g, Vect&lt; real_t &gt; &amp;T)</field>
    <field name="url">classOFELI_1_1FastMarching1DG.html#a5690c5c0f0a08c2f6883243d5f446089</field>
    <field name="keywords">set OFELI::FastMarching1DG::set FastMarching1DG</field>
    <field name="text">Define grid and solution vector This function is to be used if the default constructor has been used g Instance of class Grid T Vector containing the on input an initialization of the distance function and once the function run is invoked the distance at grid nodes The initialization vector must use the following rules The solution must be supplied at all grid points in the vicinity of the interface(s) All other grid nodes must have the value INFINITY wth positive value if the node is in an outer domain and negative if it is in an inner domain</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching1DG::run</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1FastMarching1DG.html#a58e8be2db2660128e4e6456a9c981fb5</field>
    <field name="keywords">run OFELI::FastMarching1DG::run FastMarching1DG</field>
    <field name="text">Execute Fast Marching Procedure Once this function is invoked the vector phi in the constructor or in the member function set contains the solution Return value 0 if solution has been normally computed 0 An error has occurred</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching1DG::FastMarching1DG</field>
    <field name="args">(const Grid &amp;g, Vect&lt; real_t &gt; &amp;T, Vect&lt; real_t &gt; &amp;F)</field>
    <field name="url">classOFELI_1_1FastMarching1DG.html#a896bf80aeebb6c5563b2259ce66cc39b</field>
    <field name="keywords">FastMarching1DG OFELI::FastMarching1DG::FastMarching1DG FastMarching1DG</field>
    <field name="text">Constructor Constructor using Grid instance and propagation speed g Instance of class Grid T Vector containing the on input an initialization of the distance function and once the function run is invoked the distance at grid nodes The initialization vector must use the following rules The solution must be supplied at all grid points in the vicinity of the interface(s) All other grid nodes must have the value INFINITY wth positive value if the node is in an outer domain and negative if it is in an inner domain F Vector containing propagation speed at grid nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching1DG::getResidual</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1FastMarching1DG.html#adb660d0060ded58efa6cceedf1728f44</field>
    <field name="keywords">getResidual OFELI::FastMarching1DG::getResidual FastMarching1DG</field>
    <field name="text">Check consistency by computing the discrete residual This function returns residual error F|-1|</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::FastMarching2DG</field>
    <field name="url">classOFELI_1_1FastMarching2DG.html</field>
    <field name="keywords">FastMarching2DG</field>
    <field name="text">class for the fast marching algorithm on 2 D uniform grids This class implements the Fast Marching method to solve the eikonal equation in a 2 D uniform grid In other words the class solves the partial differential equation T|F 1 with T 0 on the interface where F is the velocity</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching2DG::~FastMarching2DG</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1FastMarching2DG.html#a0f196eccf5a4549adcd2439eeac51ead</field>
    <field name="keywords">OFELI::FastMarching2DG::~FastMarching2DG FastMarching2DG</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching2DG::set</field>
    <field name="args">(const Grid &amp;g, Vect&lt; real_t &gt; &amp;T, Vect&lt; real_t &gt; &amp;F)</field>
    <field name="url">classOFELI_1_1FastMarching2DG.html#a2316c2b614cc1f2190b9d9c965f4f30a</field>
    <field name="keywords">set OFELI::FastMarching2DG::set FastMarching2DG</field>
    <field name="text">Define grid solution vector and prppagation speed This function is to be used if the default constructor has been used g Instance of class Grid T Vector containing the on input an initialization of the distance function and once the function run is invoked the distance at grid nodes The initialization vector must use the following rules The solution must be supplied at all grid points in the vicinity of the interface(s) All other grid nodes must have the value INFINITY wth positive value if the node is in an outer domain and negative if it is in an inner domain F Vector containing propagation speed at grid nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching2DG::set</field>
    <field name="args">(const Grid &amp;g, Vect&lt; real_t &gt; &amp;T)</field>
    <field name="url">classOFELI_1_1FastMarching2DG.html#a5690c5c0f0a08c2f6883243d5f446089</field>
    <field name="keywords">set OFELI::FastMarching2DG::set FastMarching2DG</field>
    <field name="text">Define grid and solution vector This function is to be used if the default constructor has been used g Instance of class Grid T Vector containing the on input an initialization of the distance function and once the function run is invoked the distance at grid nodes The initialization vector must use the following rules The solution must be supplied at all grid points in the vicinity of the interface(s) All other grid nodes must have the value INFINITY wth positive value if the node is in an outer domain and negative if it is in an inner domain</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching2DG::run</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1FastMarching2DG.html#a58e8be2db2660128e4e6456a9c981fb5</field>
    <field name="keywords">run OFELI::FastMarching2DG::run FastMarching2DG</field>
    <field name="text">Execute Fast Marching Procedure Once this function is invoked the vector phi in the constructor or in the member function set contains the solution Return value 0 if solution has been normally computed 0 An error has occurred</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching2DG::FastMarching2DG</field>
    <field name="args">(const Grid &amp;g, Vect&lt; real_t &gt; &amp;T)</field>
    <field name="url">classOFELI_1_1FastMarching2DG.html#a5fbc122cdb4d0faf782da16fdb2cf856</field>
    <field name="keywords">FastMarching2DG OFELI::FastMarching2DG::FastMarching2DG FastMarching2DG</field>
    <field name="text">Constructor using grid data Constructor using Grid instance g Instance of class Grid T Vector containing the on input an initialization of the distance function and once the function run is invoked the distance at grid nodes The initialization vector must use the following rules The solution must be supplied at all grid points in the vicinity of the interface(s) All other grid nodes must have the value INFINITY wth positive value if the node is in an outer domain and negative if it is in an inner domain</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching2DG::FastMarching2DG</field>
    <field name="args">(const Grid &amp;g, Vect&lt; real_t &gt; &amp;T, Vect&lt; real_t &gt; &amp;F)</field>
    <field name="url">classOFELI_1_1FastMarching2DG.html#a6ba66bf53e61e8eab751d370d83bb2ee</field>
    <field name="keywords">FastMarching2DG OFELI::FastMarching2DG::FastMarching2DG FastMarching2DG</field>
    <field name="text">Constructor Constructor using Grid instance and propagation speed g Instance of class Grid T Vector containing the on input an initialization of the distance function and once the function run is invoked the distance at grid nodes The initialization vector must use the following rules The solution must be supplied at all grid points in the vicinity of the interface(s) All other grid nodes must have the value INFINITY wth positive value if the node is in an outer domain and negative if it is in an inner domain F Vector containing propagation speed at grid nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching2DG::getResidual</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1FastMarching2DG.html#adb660d0060ded58efa6cceedf1728f44</field>
    <field name="keywords">getResidual OFELI::FastMarching2DG::getResidual FastMarching2DG</field>
    <field name="text">Check consistency by computing the discrete residual This function returns residual error u| 2 2 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching2DG::FastMarching2DG</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1FastMarching2DG.html#ae753204cb1d6b18ef86524938a473fd5</field>
    <field name="keywords">FastMarching2DG OFELI::FastMarching2DG::FastMarching2DG FastMarching2DG</field>
    <field name="text">Default Constructor Initializes to default value grid data</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::FastMarching3DG</field>
    <field name="url">classOFELI_1_1FastMarching3DG.html</field>
    <field name="keywords">FastMarching3DG</field>
    <field name="text">class for the fast marching algorithm on 3 D uniform grids This class implements the Fast Marching method to solve the eikonal equation in a 3 D uniform grid In other words the class solves the partial differential equation T|F 1 with T 0 on the interface where F is the velocity</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching3DG::~FastMarching3DG</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1FastMarching3DG.html#a16766c3d241ae565e7be49747a028d1a</field>
    <field name="keywords">OFELI::FastMarching3DG::~FastMarching3DG FastMarching3DG</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching3DG::set</field>
    <field name="args">(const Grid &amp;g, Vect&lt; real_t &gt; &amp;T, Vect&lt; real_t &gt; &amp;F)</field>
    <field name="url">classOFELI_1_1FastMarching3DG.html#a2316c2b614cc1f2190b9d9c965f4f30a</field>
    <field name="keywords">set OFELI::FastMarching3DG::set FastMarching3DG</field>
    <field name="text">Define grid solution vector and prppagation speed This function is to be used if the default constructor has been used g Instance of class Grid T Vector containing the on input an initialization of the distance function and once the function run is invoked the distance at grid nodes The initialization vector must use the following rules The solution must be supplied at all grid points in the vicinity of the interface(s) All other grid nodes must have the value INFINITY wth positive value if the node is in an outer domain and negative if it is in an inner domain F Vector containing propagation speed at grid nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching3DG::set</field>
    <field name="args">(const Grid &amp;g, Vect&lt; real_t &gt; &amp;T)</field>
    <field name="url">classOFELI_1_1FastMarching3DG.html#a5690c5c0f0a08c2f6883243d5f446089</field>
    <field name="keywords">set OFELI::FastMarching3DG::set FastMarching3DG</field>
    <field name="text">Define grid and solution vector This function is to be used if the default constructor has been used g Instance of class Grid T Vector containing the on input an initialization of the distance function and once the function run is invoked the distance at grid nodes The initialization vector must use the following rules The solution must be supplied at all grid points in the vicinity of the interface(s) All other grid nodes must have the value INFINITY wth positive value if the node is in an outer domain and negative if it is in an inner domain</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching3DG::run</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1FastMarching3DG.html#a58e8be2db2660128e4e6456a9c981fb5</field>
    <field name="keywords">run OFELI::FastMarching3DG::run FastMarching3DG</field>
    <field name="text">Execute Fast Marching Procedure Once this function is invoked the vector T in the constructor or in the member function set contains the solution Return value 0 if solution has been normally computed 0 An error has occurred</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching3DG::FastMarching3DG</field>
    <field name="args">(const Grid &amp;g, Vect&lt; real_t &gt; &amp;T)</field>
    <field name="url">classOFELI_1_1FastMarching3DG.html#a710a92ab28462a72f91c0a4831013cf4</field>
    <field name="keywords">FastMarching3DG OFELI::FastMarching3DG::FastMarching3DG FastMarching3DG</field>
    <field name="text">Constructor using grid data Constructor using Grid instance g Instance of class Grid T Vector containing the on input an initialization of the distance function and once the function run is invoked the distance at grid nodes The initialization vector must use the following rules The solution must be supplied at all grid points in the vicinity of the interface(s) All other grid nodes must have the value INFINITY wth positive value if the node is in an outer domain and negative if it is in an inner domain</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching3DG::FastMarching3DG</field>
    <field name="args">(const Grid &amp;g, Vect&lt; real_t &gt; &amp;T, Vect&lt; real_t &gt; &amp;F)</field>
    <field name="url">classOFELI_1_1FastMarching3DG.html#a97ac696312eb0129299ab81fd4cfb4b4</field>
    <field name="keywords">FastMarching3DG OFELI::FastMarching3DG::FastMarching3DG FastMarching3DG</field>
    <field name="text">Constructor Constructor using Grid instance and propagation speed g Instance of class Grid T Vector containing the on input an initialization of the distance function and once the function run is invoked the distance at grid nodes The initialization vector must use the following rules The solution must be supplied at all grid points in the vicinity of the interface(s) All other grid nodes must have the value INFINITY wth positive value if the node is in an outer domain and negative if it is in an inner domain F Vector containing propagation speed at grid nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching3DG::FastMarching3DG</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1FastMarching3DG.html#aa9ce66958e3077ae695ba4838ad930c5</field>
    <field name="keywords">FastMarching3DG OFELI::FastMarching3DG::FastMarching3DG FastMarching3DG</field>
    <field name="text">Default Constructor Initializes to default value grid data</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FastMarching3DG::getResidual</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1FastMarching3DG.html#adb660d0060ded58efa6cceedf1728f44</field>
    <field name="keywords">getResidual OFELI::FastMarching3DG::getResidual FastMarching3DG</field>
    <field name="text">Check consistency by computing the discrete residual This function returns residual error u| 2 2 1</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Figure</field>
    <field name="url">classOFELI_1_1Figure.html</field>
    <field name="keywords">Figure</field>
    <field name="text">To store and treat a figure or shape information This class is essentially useful to construct data for mesh generators and for distance calculations Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Figure::getSignedDistance</field>
    <field name="args">(const Grid &amp;g, Vect&lt; real_t &gt; &amp;d) const</field>
    <field name="url">classOFELI_1_1Figure.html#a2252be7c4949c4a2bd3ee24a4fdfd722</field>
    <field name="keywords">getSignedDistance OFELI::Figure::getSignedDistance Figure</field>
    <field name="text">Calculate signed distance to current figure with respect to grid points Calculate signed distance to current figure with respect to grid points Calculate signed distance to current figure with respect to grid points Calculate signed distance to current figure with respect to grid points g Grid instance d Vect instance containing calculated distance from each grid index to Figure Vector d doesn t need to be sized before invoking this function Calculate signed distance to current figure with respect to grid points Calculate signed distance to current figure with respect to grid points Calculate signed distance to current figure with respect to grid points Calculate signed distance to current figure with respect to grid points</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Figure::setCode</field>
    <field name="args">(int code)</field>
    <field name="url">classOFELI_1_1Figure.html#a2520b3fc10894bb8fc4a96014dfb0d08</field>
    <field name="keywords">setCode OFELI::Figure::setCode Figure</field>
    <field name="text">Choose a code for the domain defined by the figure Choose a code for the domain defined by the figure Choose a code for the domain defined by the figure Choose a code for the domain defined by the figure Choose a code for the domain defined by the figure Choose a code for the domain defined by the figure Choose a code for the domain defined by the figure Choose a code for the domain defined by the figure</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Figure::operator=</field>
    <field name="args">(const Figure &amp;f)</field>
    <field name="url">classOFELI_1_1Figure.html#a42041bd53cf657f479fe30a8763f4116</field>
    <field name="keywords">operator= OFELI::Figure::operator= Figure</field>
    <field name="text">Operator Operator Operator Operator Operator Operator Operator Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Figure::getSignedDistance</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;p) const</field>
    <field name="url">classOFELI_1_1Figure.html#a59bcb59a9fd6e717fa480630c7d3b57a</field>
    <field name="keywords">getSignedDistance OFELI::Figure::getSignedDistance Figure</field>
    <field name="text">Return signed distance from a given point to current figure p Point instance from which distance is computed</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Figure::dLine</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;p, const Point&lt; real_t &gt; &amp;a, const Point&lt; real_t &gt; &amp;b) const</field>
    <field name="url">classOFELI_1_1Figure.html#a740ca39646f05723f2f96ab62a232b36</field>
    <field name="keywords">dLine OFELI::Figure::dLine Figure</field>
    <field name="text">Compute signed distance from a line Compute signed distance from a line Compute signed distance from a line Compute signed distance from a line p Point for which distance is computed a First vertex of line b Second vertex of line Signed distance Compute signed distance from a line Compute signed distance from a line Compute signed distance from a line Compute signed distance from a line</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Figure::~Figure</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Figure.html#ac2356b66e5c02f39b568f4c8a7651e36</field>
    <field name="keywords">OFELI::Figure::~Figure Figure</field>
    <field name="text">Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Figure::Figure</field>
    <field name="args">(const Figure &amp;f)</field>
    <field name="url">classOFELI_1_1Figure.html#ae0b3ecf250250edd504dd29bf970a7bc</field>
    <field name="keywords">Figure OFELI::Figure::Figure Figure</field>
    <field name="text">Copy constructor Copy constructor Copy constructor Copy constructor Copy constructor Copy constructor Copy constructor Copy constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Figure::Figure</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Figure.html#ae49c513c5bcadb29c0764c1746bfd924</field>
    <field name="keywords">Figure OFELI::Figure::Figure Figure</field>
    <field name="text">Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor Default constructor</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::FuncApprox</field>
    <field name="url">classOFELI_1_1FuncApprox.html</field>
    <field name="keywords">FuncApprox</field>
    <field name="text">To set function approximation methods This class enables using approximation methods for functions The algorithms used in this class are largely inspired from the book An Introduction to NURBS by David F Rogers Copyright C 2 0 0 0 David F Rogers</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Funct</field>
    <field name="url">classOFELI_1_1Funct.html</field>
    <field name="keywords">Funct</field>
    <field name="text">A simple class to parse real valued functions Functions must have 1 2 3 or at most 4 variables Data in the file must be listed in the following order Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Funct::operator()</field>
    <field name="args">(real_t x) const</field>
    <field name="url">classOFELI_1_1Funct.html#a37af64ddb29aa0da5748f4899e653a1b</field>
    <field name="keywords">operator() OFELI::Funct::operator() Funct</field>
    <field name="text">Operator to evaluate the function with one variable x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Funct::~Funct</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Funct.html#a40596da4552f3566e68ea206ec5ac8e6</field>
    <field name="keywords">OFELI::Funct::~Funct Funct</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Funct::operator()</field>
    <field name="args">(real_t x, real_t y) const</field>
    <field name="url">classOFELI_1_1Funct.html#abc6ec34b03adc3e21a3daad1e1186537</field>
    <field name="keywords">operator() OFELI::Funct::operator() Funct</field>
    <field name="text">Operator to evaluate the function with two variables x y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Funct::Funct</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Funct.html#abe03ac0da5bff295fa386268e7c797cb</field>
    <field name="keywords">Funct OFELI::Funct::Funct Funct</field>
    <field name="text">Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Funct::operator=</field>
    <field name="args">(string e)</field>
    <field name="url">classOFELI_1_1Funct.html#ac4453a426c6c40242c09961a8dd7bc62</field>
    <field name="keywords">operator= OFELI::Funct::operator= Funct</field>
    <field name="text">Operator Define the function by an algebraic expression e Algebraic expression defining the function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Funct::operator()</field>
    <field name="args">(real_t x, real_t y, real_t z, real_t t) const</field>
    <field name="url">classOFELI_1_1Funct.html#acd27d77c6b04cdcb4f5d11c1329372eb</field>
    <field name="keywords">operator() OFELI::Funct::operator() Funct</field>
    <field name="text">Operator to evaluate the function with four variables x y z</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Funct::Funct</field>
    <field name="args">(string v1, string v2, string v3, string v4)</field>
    <field name="url">classOFELI_1_1Funct.html#acea0fa65a813312f3274af0da5b18cf2</field>
    <field name="keywords">Funct OFELI::Funct::Funct Funct</field>
    <field name="text">Constructor for a function of four variables v1 Name of the first variable v2 Name of the second variable v3 Name of the third variable v4 Name of the fourth variable</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Funct::Funct</field>
    <field name="args">(string v)</field>
    <field name="url">classOFELI_1_1Funct.html#adf6d56e8c561d144b79300e6620505de</field>
    <field name="keywords">Funct OFELI::Funct::Funct Funct</field>
    <field name="text">Constructor for a function of one variable v Name of the variable</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Funct::Funct</field>
    <field name="args">(string v1, string v2, string v3)</field>
    <field name="url">classOFELI_1_1Funct.html#ae114b99f60acdc0896646e0827c1a4f6</field>
    <field name="keywords">Funct OFELI::Funct::Funct Funct</field>
    <field name="text">Constructor for a function of three variables v1 Name of the first variable v2 Name of the second variable v3 Name of the third variable</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Funct::Funct</field>
    <field name="args">(string v1, string v2)</field>
    <field name="url">classOFELI_1_1Funct.html#aedd04f72c3fba91b1a2f5265d6884c09</field>
    <field name="keywords">Funct OFELI::Funct::Funct Funct</field>
    <field name="text">Constructor for a function of two variables v1 Name of the first variable v2 Name of the second variable</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Funct::operator()</field>
    <field name="args">(real_t x, real_t y, real_t z) const</field>
    <field name="url">classOFELI_1_1Funct.html#af32ca3c7af4458d7a4516c0d4641d3bb</field>
    <field name="keywords">operator() OFELI::Funct::operator() Funct</field>
    <field name="text">Operator to evaluate the function with three variables x y z</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Gauss</field>
    <field name="url">classOFELI_1_1Gauss.html</field>
    <field name="keywords">Gauss</field>
    <field name="text">Calculate data for Gauss integration Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Gauss::setTriangle</field>
    <field name="args">(LocalVect&lt; real_t, 7 &gt; &amp;w, LocalVect&lt; Point&lt; real_t &gt;, 7 &gt; &amp;x)</field>
    <field name="url">classOFELI_1_1Gauss.html#a638c51e12d47a6da324d2c89c7107564</field>
    <field name="keywords">setTriangle OFELI::Gauss::setTriangle Gauss</field>
    <field name="text">Choose integration on triangle 7 point formula If this is not selected Gauss integration formula on 1 1 is calculated w Array of weights of integration points x Array of coordinates of integration points</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Gauss::xt</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Gauss.html#a776ec90a8edf3739259e4f0ddf196e84</field>
    <field name="keywords">xt OFELI::Gauss::xt Gauss</field>
    <field name="text">Return coordinates of points in the reference triangle</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Gauss::w</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Gauss.html#aab26f14d607cfab0f4f570582d860d54</field>
    <field name="keywords">w OFELI::Gauss::w Gauss</field>
    <field name="text">Return weight of i th Gauss-Legendre point</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Gauss::setNbPoints</field>
    <field name="args">(size_t np)</field>
    <field name="url">classOFELI_1_1Gauss.html#ae6a8dae6b91358b3ab30e78d8e666866</field>
    <field name="keywords">setNbPoints OFELI::Gauss::setNbPoints Gauss</field>
    <field name="text">Set number of integration points</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Gauss::Gauss</field>
    <field name="args">(size_t np)</field>
    <field name="url">classOFELI_1_1Gauss.html#aecd62a41ddc1a71da8acbb12cce50dbc</field>
    <field name="keywords">Gauss OFELI::Gauss::Gauss Gauss</field>
    <field name="text">Constructor using number of Gauss points np Number of integration points</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Gauss::x</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Gauss.html#af1948d98fc355cd40158557d0f79db51</field>
    <field name="keywords">x OFELI::Gauss::x Gauss</field>
    <field name="text">Return coordinate of i th Gauss-Legendre point</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Gauss::Gauss</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Gauss.html#af9f3b1e7a7b3a7c9f04b9eea81ea836b</field>
    <field name="keywords">Gauss OFELI::Gauss::Gauss Gauss</field>
    <field name="text">Default constructor</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::GeoModel</field>
    <field name="url">classOFELI_1_1GeoModel.html</field>
    <field name="keywords">GeoModel</field>
    <field name="text">To set geometry modelling This class enables using approximation methods to mathematically define a geometry The algorithms used in this class are largely inspired from the book An Introduction to NURBS by David F Rogers Copyright C 2 0 0 0 David F Rogers</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Grid</field>
    <field name="url">classOFELI_1_1Grid.html</field>
    <field name="keywords">Grid</field>
    <field name="text">To manipulate structured grids Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::HelmholtzBT3</field>
    <field name="url">classOFELI_1_1HelmholtzBT3.html</field>
    <field name="keywords">HelmholtzBT3</field>
    <field name="text">Builds finite element arrays for Helmholtz equations in a bounded media using 3 Node triangles Problem being formulated in time harmonics the solution is complex-valued but stored in 2 degree of freedom real-valued vector Therefore mesh must be defined with 2 degrees of freedom per node Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::HelmholtzBT3::HelmholtzBT3</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1HelmholtzBT3.html#a2b76184cd79c5739d85d536d7ee2c833</field>
    <field name="keywords">HelmholtzBT3 OFELI::HelmholtzBT3::HelmholtzBT3 HelmholtzBT3</field>
    <field name="text">Default Constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::HelmholtzBT3::BoundaryRHS</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1HelmholtzBT3.html#a2f3d840f010177c6e08e0e4d1f8b0a08</field>
    <field name="keywords">BoundaryRHS OFELI::HelmholtzBT3::BoundaryRHS HelmholtzBT3</field>
    <field name="text">Add side Right-Hand Side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::HelmholtzBT3::~HelmholtzBT3</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1HelmholtzBT3.html#a322fba0e4b746fc5605ef5d73dd72758</field>
    <field name="keywords">OFELI::HelmholtzBT3::~HelmholtzBT3 HelmholtzBT3</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::HelmholtzBT3::HelmholtzBT3</field>
    <field name="args">(Mesh &amp;ms, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1HelmholtzBT3.html#a5786452de47d6baadaeb60805c60e211</field>
    <field name="keywords">HelmholtzBT3 OFELI::HelmholtzBT3::HelmholtzBT3 HelmholtzBT3</field>
    <field name="text">Constructor using mesh and solution vector ms Mesh instance u Vect instance containing solution</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::HelmholtzBT3::build</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1HelmholtzBT3.html#a7740c7ab195c03ac140f1f75f633470f</field>
    <field name="keywords">build OFELI::HelmholtzBT3::build HelmholtzBT3</field>
    <field name="text">Builds system of equations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::HelmholtzBT3::LHS</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1HelmholtzBT3.html#a906da27903ef1eb8d13377b70044b2cd</field>
    <field name="keywords">LHS OFELI::HelmholtzBT3::LHS HelmholtzBT3</field>
    <field name="text">Add element Left-Hand Side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::HelmholtzBT3::BodyRHS</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1HelmholtzBT3.html#aac55e919159ab10e1684465f60673c39</field>
    <field name="keywords">BodyRHS OFELI::HelmholtzBT3::BodyRHS HelmholtzBT3</field>
    <field name="text">Add element Right-Hand Side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::HelmholtzBT3::HelmholtzBT3</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1HelmholtzBT3.html#aad172b2da4a7261b16ceff32795796d9</field>
    <field name="keywords">HelmholtzBT3 OFELI::HelmholtzBT3::HelmholtzBT3 HelmholtzBT3</field>
    <field name="text">Constructor using mesh data ms Mesh instance</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Hexa8</field>
    <field name="url">classOFELI_1_1Hexa8.html</field>
    <field name="keywords">Hexa8</field>
    <field name="text">Defines a three-dimensional 8 node hexahedral finite element using Q1-isoparametric interpolation The reference element is the cube 1 1 x 1 1 x 1 1 The user must take care to the fact that determinant of jacobian and other quantities depend on the point in the reference element where they are calculated For this before any utilization of shape functions or jacobian function getLocal(s) must be invoked Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Hexa8::~Hexa8</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Hexa8.html#a198e9b4e417553700840d22ff3dabec5</field>
    <field name="keywords">OFELI::Hexa8::~Hexa8 Hexa8</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Hexa8::atGauss</field>
    <field name="args">(int n, std::vector&lt; Point&lt; real_t &gt; &gt; &amp;dsh, std::vector&lt; real_t &gt; &amp;w)</field>
    <field name="url">classOFELI_1_1Hexa8.html#a25c1f62b42a49d414ca0339537d57bc6</field>
    <field name="keywords">atGauss OFELI::Hexa8::atGauss Hexa8</field>
    <field name="text">Calculate shape function derivatives and integration weights n Number of Gauss-Legendre integration points in each direction dsh Vector of shape function derivatives at the Gauss points w Weights of integration formula at Gauss points</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Hexa8::getMaxEdgeLength</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Hexa8.html#a25ca31b393289f740e8ed58b06a30cd3</field>
    <field name="keywords">getMaxEdgeLength OFELI::Hexa8::getMaxEdgeLength Hexa8</field>
    <field name="text">Return maximal edge length</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Hexa8::setLocal</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;s)</field>
    <field name="url">classOFELI_1_1Hexa8.html#a3686dcc363945fc9705485b9200fa17e</field>
    <field name="keywords">setLocal OFELI::Hexa8::setLocal Hexa8</field>
    <field name="text">Initialize local point coordinates in element s Point in the reference element This function computes jacobian shape functions and their partial derivatives at s Other member functions only return these values</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Hexa8::Hexa8</field>
    <field name="args">(const Element *el)</field>
    <field name="url">classOFELI_1_1Hexa8.html#a377502101b543235beef604fd8d69452</field>
    <field name="keywords">Hexa8 OFELI::Hexa8::Hexa8 Hexa8</field>
    <field name="text">Constructor when data of Element el are given</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Hexa8::getMinEdgeLength</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Hexa8.html#a3b36d8923b27960cb53038075675ebaf</field>
    <field name="keywords">getMinEdgeLength OFELI::Hexa8::getMinEdgeLength Hexa8</field>
    <field name="text">Return minimal edge length</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Hexa8::Hexa8</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Hexa8.html#a55e8c77d8b79dc17c50270b7a9cc3079</field>
    <field name="keywords">Hexa8 OFELI::Hexa8::Hexa8 Hexa8</field>
    <field name="text">Default Constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Hexa8::atGauss</field>
    <field name="args">(int n, std::vector&lt; real_t &gt; &amp;sh, std::vector&lt; real_t &gt; &amp;w)</field>
    <field name="url">classOFELI_1_1Hexa8.html#ad104ac8536271c87f0413299fb78d059</field>
    <field name="keywords">atGauss OFELI::Hexa8::atGauss Hexa8</field>
    <field name="text">Calculate shape functions and integration weights n Number of Gauss-Legendre integration points in each direction sh Vector of shape functions at the Gauss points w Weights of integration formula at Gauss points</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Hexa8::Grad</field>
    <field name="args">(const LocalVect&lt; real_t, 8 &gt; &amp;u, const Point&lt; real_t &gt; &amp;s)</field>
    <field name="url">classOFELI_1_1Hexa8.html#af49c500294af19c906c475daaa60847b</field>
    <field name="keywords">Grad OFELI::Hexa8::Grad Hexa8</field>
    <field name="text">Return gradient of a function defined at element nodes u Vector of values at nodes s Local coordinates in 1 1 1 1 1 1 of point where the gradient is evaluated Value of gradient If the derivatives of shape functions were not computed before calling this function by calling setLocal this function will compute them</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::ICPG1D</field>
    <field name="url">classOFELI_1_1ICPG1D.html</field>
    <field name="keywords">ICPG1D</field>
    <field name="text">Class to solve the Inviscid compressible fluid flows Euler equations for perfect gas in 1 D Solution method is a second-order MUSCL Finite Volume scheme S Clain V Clauzon GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::setKappa</field>
    <field name="args">(real_t Kappa)</field>
    <field name="url">classOFELI_1_1ICPG1D.html#a178da8558c23a3be6a7cec3fed67c9ef</field>
    <field name="keywords">setKappa OFELI::ICPG1D::setKappa ICPG1D</field>
    <field name="text">Set value of constant Kappa</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::setBC</field>
    <field name="args">(int code, const LocalVect&lt; real_t, 3 &gt; &amp;U)</field>
    <field name="url">classOFELI_1_1ICPG1D.html#a1b808a3e750c913def02a2c70d58e093</field>
    <field name="keywords">setBC OFELI::ICPG1D::setBC ICPG1D</field>
    <field name="text">Assign a Dirichlet boundary condition vector code Side code for which the values are assigned U LocalVect instance that contains values to assign to sides with code code</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::getSoundSpeed</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;s) const</field>
    <field name="url">classOFELI_1_1ICPG1D.html#a1c31c79482c6c3d5d7ca34373fdfcc41</field>
    <field name="keywords">getSoundSpeed OFELI::ICPG1D::getSoundSpeed ICPG1D</field>
    <field name="text">Get vector of sound speed at elements s Vect instance that contains on output element sound speed</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::setSolver</field>
    <field name="args">(SolverType solver)</field>
    <field name="url">classOFELI_1_1ICPG1D.html#a1ee9b11528f4260855c4ade2cd2b8f75</field>
    <field name="keywords">setSolver OFELI::ICPG1D::setSolver ICPG1D</field>
    <field name="text">Choose solver type</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::setBC</field>
    <field name="args">(real_t a)</field>
    <field name="url">classOFELI_1_1ICPG1D.html#a335a5261af2a0ce2a55bc412bc6bfc99</field>
    <field name="keywords">setBC OFELI::ICPG1D::setBC ICPG1D</field>
    <field name="text">Assign a boundary condition value a Value to assign to all boundary sides</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::setBC</field>
    <field name="args">(const Side &amp;sd, const LocalVect&lt; real_t, 3 &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1ICPG1D.html#a3c4d43ac665d01cda52770f6aec67670</field>
    <field name="keywords">setBC OFELI::ICPG1D::setBC ICPG1D</field>
    <field name="text">Assign a Dirichlet boundary condition vector sd Side instance to which the values are assigned u LocalVect instance that contains values to assign to the side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::Forward</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;flux, Vect&lt; real_t &gt; &amp;field)</field>
    <field name="url">classOFELI_1_1ICPG1D.html#a3db94cac66531b465c8353d6d8724bdc</field>
    <field name="keywords">Forward OFELI::ICPG1D::Forward ICPG1D</field>
    <field name="text">Add flux to field If this function is used the user must call getFlux himself flux Vector containing fluxes at sides points field Vector containing solution vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::setBC</field>
    <field name="args">(int code, real_t a)</field>
    <field name="url">classOFELI_1_1ICPG1D.html#a4bf31cfe1da0e0f7f5cf7b12a88e86c5</field>
    <field name="keywords">setBC OFELI::ICPG1D::setBC ICPG1D</field>
    <field name="text">Assign a boundary condition value code Code value to which boundary condition is assigned a Value to assign to sides that have code code</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::getCp</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1ICPG1D.html#a4f7a65c1622cf0c39a6f75c65ee5e6a8</field>
    <field name="keywords">getCp OFELI::ICPG1D::getCp ICPG1D</field>
    <field name="text">Return value of C p specific heat at constant pressure</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::getKappa</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1ICPG1D.html#a502dc4f5d8629cfc1a2d0c54de4db5e7</field>
    <field name="keywords">getKappa OFELI::ICPG1D::getKappa ICPG1D</field>
    <field name="text">Return value of constant Kappa</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::ICPG1D</field>
    <field name="args">(Mesh &amp;ms, Vect&lt; real_t &gt; &amp;r, Vect&lt; real_t &gt; &amp;v, Vect&lt; real_t &gt; &amp;p)</field>
    <field name="url">classOFELI_1_1ICPG1D.html#a55dfdd17a3170bc1c005d37fd0daba60</field>
    <field name="keywords">ICPG1D OFELI::ICPG1D::ICPG1D ICPG1D</field>
    <field name="text">Constructor using mesh and initial data ms Reference to Mesh instance r Vector containing initial elementwise density v Vector containing initial elementwise velocity p Vector containing initial elementwise pressure</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::setInitialCondition_shock_tube</field>
    <field name="args">(const LocalVect&lt; real_t, 3 &gt; &amp;BcG, const LocalVect&lt; real_t, 3 &gt; &amp;BcD, real_t x0)</field>
    <field name="url">classOFELI_1_1ICPG1D.html#a5986c5fb5c7ad04ffdae989d437f83a3</field>
    <field name="keywords">setInitialCondition_shock_tube OFELI::ICPG1D::setInitialCondition_shock_tube ICPG1D</field>
    <field name="text">Initial condition corresponding to the shock tube</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::setBC</field>
    <field name="args">(const Side &amp;sd, real_t u)</field>
    <field name="url">classOFELI_1_1ICPG1D.html#a5f3c5d341436fc66855aa39929a0f0b9</field>
    <field name="keywords">setBC OFELI::ICPG1D::setBC ICPG1D</field>
    <field name="text">Assign a boundary condition as a constant to a given side sd Side to which the value is assigned u Value to assign</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::getMomentum</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;m) const</field>
    <field name="url">classOFELI_1_1ICPG1D.html#a6dfb875540ecd3b958f4b49e07963736</field>
    <field name="keywords">getMomentum OFELI::ICPG1D::getMomentum ICPG1D</field>
    <field name="text">Get vector of momentum at elements m Vect instance that contains on output element momentum</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::setCv</field>
    <field name="args">(real_t Cv)</field>
    <field name="url">classOFELI_1_1ICPG1D.html#a77272829ac29bf7e91da45adfc729aa2</field>
    <field name="keywords">setCv OFELI::ICPG1D::setCv ICPG1D</field>
    <field name="text">Set value of Cv specific heat at constant volume</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::setCp</field>
    <field name="args">(real_t Cp)</field>
    <field name="url">classOFELI_1_1ICPG1D.html#a8e3f6ab3eaa363b58d29345c2c6a0cb1</field>
    <field name="keywords">setCp OFELI::ICPG1D::setCp ICPG1D</field>
    <field name="text">Set value of C p specific heat at constant pressure</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::setBC</field>
    <field name="args">(const LocalVect&lt; real_t, 3 &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1ICPG1D.html#a934990e988c51c3a403df4a2b88c36a6</field>
    <field name="keywords">setBC OFELI::ICPG1D::setBC ICPG1D</field>
    <field name="text">Assign a Dirichlet boundary condition vector u LocalVect instance that contains values to assign to all boundary sides</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::setInitialCondition</field>
    <field name="args">(const LocalVect&lt; real_t, 3 &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1ICPG1D.html#a97f53e096ff525d3b7a992cf106a4362</field>
    <field name="keywords">setInitialCondition OFELI::ICPG1D::setInitialCondition ICPG1D</field>
    <field name="text">A constant initial condition u LocalVect instance containing density velocity and pressure</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::setInOutflowBC</field>
    <field name="args">(const LocalVect&lt; real_t, 3 &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1ICPG1D.html#aa7bf7627e63a41457f35f446c85e653d</field>
    <field name="keywords">setInOutflowBC OFELI::ICPG1D::setInOutflowBC ICPG1D</field>
    <field name="text">Impose a constant inflow or outflow boundary condition on boundary sides u LocalVect instance that contains values to assign to the sides</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::getGamma</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1ICPG1D.html#aa829d8e5e65f56dee54e8d35782026ce</field>
    <field name="keywords">getGamma OFELI::ICPG1D::getGamma ICPG1D</field>
    <field name="text">Return value of constant Gamma</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::setInOutflowBC</field>
    <field name="args">(const Side &amp;sd, const LocalVect&lt; real_t, 3 &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1ICPG1D.html#aaaf6997d802d5062e7ce5d2173cce478</field>
    <field name="keywords">setInOutflowBC OFELI::ICPG1D::setInOutflowBC ICPG1D</field>
    <field name="text">Impose a constant inflow or outflow boundary condition on a given side sd Instance of Side on which the condition is prescribed u LocalVect instance that contains values to assign to the side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::getTotalEnergy</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;te) const</field>
    <field name="url">classOFELI_1_1ICPG1D.html#aac2db55abd4847a6e578f47f17c61f93</field>
    <field name="keywords">getTotalEnergy OFELI::ICPG1D::getTotalEnergy ICPG1D</field>
    <field name="text">Get vector of total energy at elements te Vect instance that contains on output element total energy</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::getMach</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;m) const</field>
    <field name="url">classOFELI_1_1ICPG1D.html#ac405ffcb7ea52d47129874011740b333</field>
    <field name="keywords">getMach OFELI::ICPG1D::getMach ICPG1D</field>
    <field name="text">Get vector of elementwise Mach number m Vect instance that contains on output element Mach number</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::getInternalEnergy</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;ie) const</field>
    <field name="url">classOFELI_1_1ICPG1D.html#ac4d1107494f3dc25854602df19b05370</field>
    <field name="keywords">getInternalEnergy OFELI::ICPG1D::getInternalEnergy ICPG1D</field>
    <field name="text">Get vector of internal energy at elements ie Vect instance that contains on output element internal energy</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::getCv</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1ICPG1D.html#ad668cf681e870f36c00a9fc14134f771</field>
    <field name="keywords">getCv OFELI::ICPG1D::getCv ICPG1D</field>
    <field name="text">Return value of C v specific heat at constant volume</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::setInOutflowBC</field>
    <field name="args">(int code, const LocalVect&lt; real_t, 3 &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1ICPG1D.html#ad9a1eb9b0a9de22fe521b236a8b7d7ea</field>
    <field name="keywords">setInOutflowBC OFELI::ICPG1D::setInOutflowBC ICPG1D</field>
    <field name="text">Impose a constant inflow or outflow boundary condition on sides with a given code code Value of code for which the condition is prescribed u LocalVect instance that contains values to assign to the sides</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::ICPG1D</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1ICPG1D.html#adcc715ce91ab082fbc55d4d1c31a3f0f</field>
    <field name="keywords">ICPG1D OFELI::ICPG1D::ICPG1D ICPG1D</field>
    <field name="text">Constructor using Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::setReconstruction</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1ICPG1D.html#ade3afa31152cb0ecad88c3a54da8f93e</field>
    <field name="keywords">setReconstruction OFELI::ICPG1D::setReconstruction ICPG1D</field>
    <field name="text">Set reconstruction from class Muscl</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::~ICPG1D</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1ICPG1D.html#ae147a8f852d163c5aa3cec2b05360980</field>
    <field name="keywords">OFELI::ICPG1D::~ICPG1D ICPG1D</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::setGamma</field>
    <field name="args">(real_t gamma)</field>
    <field name="url">classOFELI_1_1ICPG1D.html#af291ae887445352d5c6c21d7c38aafcd</field>
    <field name="keywords">setGamma OFELI::ICPG1D::setGamma ICPG1D</field>
    <field name="text">Set value of constant Gamma for gases</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG1D::runOneTimeStep</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1ICPG1D.html#af8c8f582bd6836d2145e823ce5ed5ef4</field>
    <field name="keywords">runOneTimeStep OFELI::ICPG1D::runOneTimeStep ICPG1D</field>
    <field name="text">Advance one time step</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::ICPG2DT</field>
    <field name="url">classOFELI_1_1ICPG2DT.html</field>
    <field name="keywords">ICPG2DT</field>
    <field name="text">Class to solve the Inviscid compressible fluid flows Euler equations for perfect gas in 2 D Solution method is a second-order MUSCL Finite Volume scheme on triangles S Clain V Clauzon GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::setBC</field>
    <field name="args">(const Side &amp;sd, real_t a)</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#a0453cdd2c1e5a529a3d426215b75672d</field>
    <field name="keywords">setBC OFELI::ICPG2DT::setBC ICPG2DT</field>
    <field name="text">Prescribe a constant boundary condition at given side sd Reference to Side instance a Value to prescribe</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::getTotalEnergy</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;e) const</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#a0bd0ca9d1b25c8c86ca056e230617cd5</field>
    <field name="keywords">getTotalEnergy OFELI::ICPG2DT::getTotalEnergy ICPG2DT</field>
    <field name="text">Return elementwise total energy</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::getInternalEnergy</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;e) const</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#a0cd55610cc551ba158c5e3940dfbbe23</field>
    <field name="keywords">getInternalEnergy OFELI::ICPG2DT::getInternalEnergy ICPG2DT</field>
    <field name="text">Calculate elementwise internal energy</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::setKappa</field>
    <field name="args">(real_t Kappa)</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#a178da8558c23a3be6a7cec3fed67c9ef</field>
    <field name="keywords">setKappa OFELI::ICPG2DT::setKappa ICPG2DT</field>
    <field name="text">Set Kappa value</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::~ICPG2DT</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#a1bfc4f2424980342cd119fcfcd425461</field>
    <field name="keywords">OFELI::ICPG2DT::~ICPG2DT ICPG2DT</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::getSoundSpeed</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;s) const</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#a1c31c79482c6c3d5d7ca34373fdfcc41</field>
    <field name="keywords">getSoundSpeed OFELI::ICPG2DT::getSoundSpeed ICPG2DT</field>
    <field name="text">Return elementwise sound speed</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::getR</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#a2559a1e0e7b89a6563c6b424e4f6fcd0</field>
    <field name="keywords">getR OFELI::ICPG2DT::getR ICPG2DT</field>
    <field name="text">Return density at given element label i Element label</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::setBC</field>
    <field name="args">(const LocalVect&lt; real_t, 4 &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#a31727b44287932d717a03e7a9091767b</field>
    <field name="keywords">setBC OFELI::ICPG2DT::setBC ICPG2DT</field>
    <field name="text">Prescribe a constant boundary condition at all boundary sides u Vector instance of class LocalVect with as components the constant values to prescribe for the four fields r vx vy p</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::getV</field>
    <field name="args">(size_t i, size_t j) const</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#a382a85724e083d73b2748dc80a59c154</field>
    <field name="keywords">getV OFELI::ICPG2DT::getV ICPG2DT</field>
    <field name="text">Return velocity at given element label i Element label j component index 1 or 2</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::getMesh</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#a3f6f8a878827888ddd2772091acf00c0</field>
    <field name="keywords">getMesh OFELI::ICPG2DT::getMesh ICPG2DT</field>
    <field name="text">Return reference to mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::setSolver</field>
    <field name="args">(SolverType s)</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#a40e150b7d450cb068f4c92bac31816f6</field>
    <field name="keywords">setSolver OFELI::ICPG2DT::setSolver ICPG2DT</field>
    <field name="text">Choose solver s Index of solver in the enumerated variable SolverType Available values are ROE_SOLVER VFROE_SOLVER LF_SOLVER RUSANOV_SOLVER HLL_SOLVER HLLC_SOLVER MAX_SOLVER</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::setBC</field>
    <field name="args">(int code, real_t a)</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#a4bf31cfe1da0e0f7f5cf7b12a88e86c5</field>
    <field name="keywords">setBC OFELI::ICPG2DT::setBC ICPG2DT</field>
    <field name="text">Prescribe a constant boundary condition for a given code code Code for which value is imposed a Value to prescribe</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::setInitialCondition</field>
    <field name="args">(const LocalVect&lt; real_t, 4 &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#a4f6e7110d7b796b624e6999604cab4a4</field>
    <field name="keywords">setInitialCondition OFELI::ICPG2DT::setInitialCondition ICPG2DT</field>
    <field name="text">Set initial condition</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::getCp</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#a4f7a65c1622cf0c39a6f75c65ee5e6a8</field>
    <field name="keywords">getCp OFELI::ICPG2DT::getCp ICPG2DT</field>
    <field name="text">Return value of heat capacity at constant pressure</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::getKappa</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#a502dc4f5d8629cfc1a2d0c54de4db5e7</field>
    <field name="keywords">getKappa OFELI::ICPG2DT::getKappa ICPG2DT</field>
    <field name="text">Return value of Kappa</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::getMomentum</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;m) const</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#a6dfb875540ecd3b958f4b49e07963736</field>
    <field name="keywords">getMomentum OFELI::ICPG2DT::getMomentum ICPG2DT</field>
    <field name="text">Calculate elementwise momentum</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::getFlux</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#a71e78dd7a1020bb08c7b88aafa9b0cea</field>
    <field name="keywords">getFlux OFELI::ICPG2DT::getFlux ICPG2DT</field>
    <field name="text">Get flux</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::setCv</field>
    <field name="args">(real_t Cv)</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#a77272829ac29bf7e91da45adfc729aa2</field>
    <field name="keywords">setCv OFELI::ICPG2DT::setCv ICPG2DT</field>
    <field name="text">Set value of heat capacity at constant volume</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::setBC</field>
    <field name="args">(int code, const LocalVect&lt; real_t, 4 &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#a8499a711ea71733766c0783759bf4148</field>
    <field name="keywords">setBC OFELI::ICPG2DT::setBC ICPG2DT</field>
    <field name="text">Prescribe a constant boundary condition for a given code code Code for which value is imposed u Vector instance of class LocalVect with as components the constant values to prescribe for the four fields r vx vy p</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::setCp</field>
    <field name="args">(real_t Cp)</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#a8e3f6ab3eaa363b58d29345c2c6a0cb1</field>
    <field name="keywords">setCp OFELI::ICPG2DT::setCp ICPG2DT</field>
    <field name="text">Set value of heat capacity at constant pressure</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::getGamma</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#aa829d8e5e65f56dee54e8d35782026ce</field>
    <field name="keywords">getGamma OFELI::ICPG2DT::getGamma ICPG2DT</field>
    <field name="text">Return value of Gamma</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::getP</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#aab787629bde381a511a5fab3d8aa2955</field>
    <field name="keywords">getP OFELI::ICPG2DT::getP ICPG2DT</field>
    <field name="text">Return pressure at given element label i Element label</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::getMach</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;m) const</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#ac405ffcb7ea52d47129874011740b333</field>
    <field name="keywords">getMach OFELI::ICPG2DT::getMach ICPG2DT</field>
    <field name="text">Return elementwise Mach number</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::getCv</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#ad668cf681e870f36c00a9fc14134f771</field>
    <field name="keywords">getCv OFELI::ICPG2DT::getCv ICPG2DT</field>
    <field name="text">Return value of heat capacity at constant volume</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::setReconstruction</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#ade3afa31152cb0ecad88c3a54da8f93e</field>
    <field name="keywords">setReconstruction OFELI::ICPG2DT::setReconstruction ICPG2DT</field>
    <field name="text">Reconstruct exit(3) if reconstruction fails</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::setBC</field>
    <field name="args">(real_t u)</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#adec7c2621be3fc1b2976caf301921aa0</field>
    <field name="keywords">setBC OFELI::ICPG2DT::setBC ICPG2DT</field>
    <field name="text">Prescribe a constant boundary condition on all boundary sides u Value to prescribe</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::setInitialConditionShockTube</field>
    <field name="args">(const LocalVect&lt; real_t, 4 &gt; &amp;BcL, const LocalVect&lt; real_t, 4 &gt; &amp;BcR, real_t x0)</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#aea69c526321e936101262c916362c4a9</field>
    <field name="keywords">setInitialConditionShockTube OFELI::ICPG2DT::setInitialConditionShockTube ICPG2DT</field>
    <field name="text">Set initial condition for the schock tube problem</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::setBC</field>
    <field name="args">(const Side &amp;sd, const LocalVect&lt; real_t, 4 &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#aec820190f61a19ffa0860b33b4c21ddd</field>
    <field name="keywords">setBC OFELI::ICPG2DT::setBC ICPG2DT</field>
    <field name="text">Prescribe a constant boundary condition at a given side sd Reference to Side instance u Vector instance of class LocalVect with as components the constant values to prescribe for the four fields r vx vy p</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::Forward</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;Flux, Vect&lt; real_t &gt; &amp;Field)</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#af0b2936d1dab34e22178dba89b9c9698</field>
    <field name="keywords">Forward OFELI::ICPG2DT::Forward ICPG2DT</field>
    <field name="text">Add Flux to Field If this function is used the function getFlux must be called</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::setGamma</field>
    <field name="args">(real_t gamma)</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#af291ae887445352d5c6c21d7c38aafcd</field>
    <field name="keywords">setGamma OFELI::ICPG2DT::setGamma ICPG2DT</field>
    <field name="text">Set Gamma value</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::ICPG2DT</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#af832fceabd410d4b2d89b3c99ddf5831</field>
    <field name="keywords">ICPG2DT OFELI::ICPG2DT::ICPG2DT ICPG2DT</field>
    <field name="text">Constructor using mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::ICPG2DT</field>
    <field name="args">(Mesh &amp;ms, Vect&lt; real_t &gt; &amp;r, Vect&lt; real_t &gt; &amp;v, Vect&lt; real_t &gt; &amp;p)</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#af843faa8898b3fe0834fba6a06f1c8f9</field>
    <field name="keywords">ICPG2DT OFELI::ICPG2DT::ICPG2DT ICPG2DT</field>
    <field name="text">Constructor using mesh and initial data ms Mesh instance r Initial density vector as instance of Vect v Initial velocity vector as instance of Vect p Initial pressure vector as instance of Vect</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG2DT::runOneTimeStep</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1ICPG2DT.html#af8c8f582bd6836d2145e823ce5ed5ef4</field>
    <field name="keywords">runOneTimeStep OFELI::ICPG2DT::runOneTimeStep ICPG2DT</field>
    <field name="text">Advance one time step</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::ICPG3DT</field>
    <field name="url">classOFELI_1_1ICPG3DT.html</field>
    <field name="keywords">ICPG3DT</field>
    <field name="text">Class to solve the Inviscid compressible fluid flows Euler equations for perfect gas in 3 D Solution method is a second-order MUSCL Finite Volume scheme with tetrahedra S Clain V Clauzon GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::ICPG3DT</field>
    <field name="args">(Mesh &amp;ms, Vect&lt; real_t &gt; &amp;r, Vect&lt; real_t &gt; &amp;v, Vect&lt; real_t &gt; &amp;p)</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#a00c044edc3865d5ffc484ffd0a612c33</field>
    <field name="keywords">ICPG3DT OFELI::ICPG3DT::ICPG3DT ICPG3DT</field>
    <field name="text">Constructor using mesh and initial data ms Mesh instance r Elementwise initial density vector as instance of Element Vect v Elementwise initial velocity vector as instance of Element Vect p Elementwise initial pressure vector as instance of Element Vect</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::setInitialConditionShockTube</field>
    <field name="args">(const LocalVect&lt; real_t, 5 &gt; &amp;BcG, const LocalVect&lt; real_t, 5 &gt; &amp;BcD, real_t x0)</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#a0a70637cdcba9a3808233ac883565fa9</field>
    <field name="keywords">setInitialConditionShockTube OFELI::ICPG3DT::setInitialConditionShockTube ICPG3DT</field>
    <field name="text">Set initial condition for the schock tube problem</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::getTotalEnergy</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;e) const</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#a0bd0ca9d1b25c8c86ca056e230617cd5</field>
    <field name="keywords">getTotalEnergy OFELI::ICPG3DT::getTotalEnergy ICPG3DT</field>
    <field name="text">Return elementwise total energy</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::getInternalEnergy</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;e) const</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#a0cd55610cc551ba158c5e3940dfbbe23</field>
    <field name="keywords">getInternalEnergy OFELI::ICPG3DT::getInternalEnergy ICPG3DT</field>
    <field name="text">Calculate elementwise internal energy</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::setKappa</field>
    <field name="args">(real_t Kappa)</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#a178da8558c23a3be6a7cec3fed67c9ef</field>
    <field name="keywords">setKappa OFELI::ICPG3DT::setKappa ICPG3DT</field>
    <field name="text">Set Kappa value</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::getSoundSpeed</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;s) const</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#a1c31c79482c6c3d5d7ca34373fdfcc41</field>
    <field name="keywords">getSoundSpeed OFELI::ICPG3DT::getSoundSpeed ICPG3DT</field>
    <field name="text">Return elementwise sound speed</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::setSolver</field>
    <field name="args">(SolverType solver)</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#a1ee9b11528f4260855c4ade2cd2b8f75</field>
    <field name="keywords">setSolver OFELI::ICPG3DT::setSolver ICPG3DT</field>
    <field name="text">Choose solver</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::getReferenceLength</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#a2274e76feaefc4b71e48b679be867396</field>
    <field name="keywords">getReferenceLength OFELI::ICPG3DT::getReferenceLength ICPG3DT</field>
    <field name="text">Return reference length</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::setTimeStep</field>
    <field name="args">(real_t dt)</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#a281313b6dd2989a5d26b65ba8c0a15f1</field>
    <field name="keywords">setTimeStep OFELI::ICPG3DT::setTimeStep ICPG3DT</field>
    <field name="text">Assign a time step</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::Forward</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;flux, Vect&lt; real_t &gt; &amp;field)</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#a3db94cac66531b465c8353d6d8724bdc</field>
    <field name="keywords">Forward OFELI::ICPG3DT::Forward ICPG3DT</field>
    <field name="text">Add flux to field</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::getMesh</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#a3f6f8a878827888ddd2772091acf00c0</field>
    <field name="keywords">getMesh OFELI::ICPG3DT::getMesh ICPG3DT</field>
    <field name="text">Return reference to mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::getCp</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#a4f7a65c1622cf0c39a6f75c65ee5e6a8</field>
    <field name="keywords">getCp OFELI::ICPG3DT::getCp ICPG3DT</field>
    <field name="text">Return value of C p Heat capacity at constant pressure</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::getKappa</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#a502dc4f5d8629cfc1a2d0c54de4db5e7</field>
    <field name="keywords">getKappa OFELI::ICPG3DT::getKappa ICPG3DT</field>
    <field name="text">Return value of</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::setCFL</field>
    <field name="args">(real_t CFL)</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#a5867d4d97edfe9fb69127e39f57b7bf7</field>
    <field name="keywords">setCFL OFELI::ICPG3DT::setCFL ICPG3DT</field>
    <field name="text">Assign CFL value</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::setInitialCondition</field>
    <field name="args">(const LocalVect&lt; real_t, 5 &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#a5b8af818f36967c7bd2c32ebf1994f0b</field>
    <field name="keywords">setInitialCondition OFELI::ICPG3DT::setInitialCondition ICPG3DT</field>
    <field name="text">Set initial condition</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::getPtrMesh</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#a6ddd86bc6820f40e43dbe5edb947956f</field>
    <field name="keywords">getPtrMesh OFELI::ICPG3DT::getPtrMesh ICPG3DT</field>
    <field name="text">Return pointer to mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::getMomentum</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;m) const</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#a6dfb875540ecd3b958f4b49e07963736</field>
    <field name="keywords">getMomentum OFELI::ICPG3DT::getMomentum ICPG3DT</field>
    <field name="text">Calculate elementwise momentum</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::getFlux</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#a71e78dd7a1020bb08c7b88aafa9b0cea</field>
    <field name="keywords">getFlux OFELI::ICPG3DT::getFlux ICPG3DT</field>
    <field name="text">Return flux</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::setCv</field>
    <field name="args">(real_t Cv)</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#a77272829ac29bf7e91da45adfc729aa2</field>
    <field name="keywords">setCv OFELI::ICPG3DT::setCv ICPG3DT</field>
    <field name="text">Set value of C v Heat capacity at constant volume</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::setCp</field>
    <field name="args">(real_t Cp)</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#a8e3f6ab3eaa363b58d29345c2c6a0cb1</field>
    <field name="keywords">setCp OFELI::ICPG3DT::setCp ICPG3DT</field>
    <field name="text">Set value of C p Heat capacity at constant pressure</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::~ICPG3DT</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#a92e60ce190251e39bf8c2599d65fc131</field>
    <field name="keywords">OFELI::ICPG3DT::~ICPG3DT ICPG3DT</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::getGamma</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#aa829d8e5e65f56dee54e8d35782026ce</field>
    <field name="keywords">getGamma OFELI::ICPG3DT::getGamma ICPG3DT</field>
    <field name="text">Return value of</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::ICPG3DT</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#abbc90cb51cb4e9a043e5600c9ef69ecf</field>
    <field name="keywords">ICPG3DT OFELI::ICPG3DT::ICPG3DT ICPG3DT</field>
    <field name="text">Constructor using mesh data ms Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::getMach</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;m) const</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#ac405ffcb7ea52d47129874011740b333</field>
    <field name="keywords">getMach OFELI::ICPG3DT::getMach ICPG3DT</field>
    <field name="text">Return elementwise Mach number</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::getTimeStep</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#ac69f54d1c86aec231aa8925457a2afb4</field>
    <field name="keywords">getTimeStep OFELI::ICPG3DT::getTimeStep ICPG3DT</field>
    <field name="text">Return time step</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::getCFL</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#aca789f38b77f6fb11196959f35a92f08</field>
    <field name="keywords">getCFL OFELI::ICPG3DT::getCFL ICPG3DT</field>
    <field name="text">Return CFL</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::getCv</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#ad668cf681e870f36c00a9fc14134f771</field>
    <field name="keywords">getCv OFELI::ICPG3DT::getCv ICPG3DT</field>
    <field name="text">Return value of C v Heat capacity at constant volume</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::setReferenceLength</field>
    <field name="args">(real_t dx)</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#ad8db90b95563d822e3bd206aaf265caf</field>
    <field name="keywords">setReferenceLength OFELI::ICPG3DT::setReferenceLength ICPG3DT</field>
    <field name="text">Assign a reference length</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::setReconstruction</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#ade3afa31152cb0ecad88c3a54da8f93e</field>
    <field name="keywords">setReconstruction OFELI::ICPG3DT::setReconstruction ICPG3DT</field>
    <field name="text">Reconstruct exit(3) if reconstruction failed</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::setGamma</field>
    <field name="args">(real_t gamma)</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#af291ae887445352d5c6c21d7c38aafcd</field>
    <field name="keywords">setGamma OFELI::ICPG3DT::setGamma ICPG3DT</field>
    <field name="text">Set value</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ICPG3DT::runOneTimeStep</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1ICPG3DT.html#af8c8f582bd6836d2145e823ce5ed5ef4</field>
    <field name="keywords">runOneTimeStep OFELI::ICPG3DT::runOneTimeStep ICPG3DT</field>
    <field name="text">Advance one time step</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::IOField</field>
    <field name="url">classOFELI_1_1IOField.html</field>
    <field name="keywords">IOField</field>
    <field name="text">Enables working with files in the XML Format This class has methods to store vectors in files and read from files Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::IPF</field>
    <field name="url">classOFELI_1_1IPF.html</field>
    <field name="keywords">IPF</field>
    <field name="text">To read project parameters from a file in IPF format This class can be used to acquire various parameters from a parameter file of IPF Input Project File The declaration of an instance of this class avoids reading data in your main program The acquired parameters are retrieved through information members of the class Note that all the parameters have default values Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::~IPF</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1IPF.html#a0569447015d3a4768d5d81adb05b8a35</field>
    <field name="keywords">OFELI::IPF::~IPF IPF</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getDomainFile</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1IPF.html#a0662f515fa6108265299118affd9e8a0</field>
    <field name="keywords">getDomainFile OFELI::IPF::getDomainFile IPF</field>
    <field name="text">Return pameter using keyword Mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::IPF</field>
    <field name="args">(const string &amp;prog, const string &amp;file)</field>
    <field name="url">classOFELI_1_1IPF.html#a120fbf0a8630ca29c7adc2e578ef58e5</field>
    <field name="keywords">IPF OFELI::IPF::IPF IPF</field>
    <field name="text">Constructor that reads parameters in file file and prints header information for the calling program prog It reads parameters in IPF Format from this file</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getYoungModulus</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1IPF.html#a1fa3fc72cc9c640b8313b3461b948592</field>
    <field name="keywords">getYoungModulus OFELI::IPF::getYoungModulus IPF</field>
    <field name="text">Return expression to be parsed function of x y z t for Young s modulus</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getIntPar</field>
    <field name="args">(size_t n=1) const</field>
    <field name="url">classOFELI_1_1IPF.html#a2638e9bb8d6b111a132eb748ed046d9e</field>
    <field name="keywords">getIntPar OFELI::IPF::getIntPar IPF</field>
    <field name="text">Return n th parameter read using keyword IntPar Here we have at most 2 0 integer extra parameters that can be used for any purpose Default value for n is 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getComplex</field>
    <field name="args">(const string &amp;label, complex_t def) const</field>
    <field name="url">classOFELI_1_1IPF.html#a263af219f8254b19b2b6a5fbd040355b</field>
    <field name="keywords">getComplex OFELI::IPF::getComplex IPF</field>
    <field name="text">Return parameter corresponding to a given label when its value is a complex number Case where a default value is provided label Label that identifies the complex number read from input file def Default value Value to assign if the sought parameter is not found</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getDouble</field>
    <field name="args">(const string &amp;label) const</field>
    <field name="url">classOFELI_1_1IPF.html#a30eac892e2e72ffc052b396f3c6a1dcf</field>
    <field name="keywords">getDouble OFELI::IPF::getDouble IPF</field>
    <field name="text">Return parameter corresponding to a given label when its value is a real_t label Label that identifies the real number read from input file If this label is not found an error message is displayed and program stops</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getNbIter</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1IPF.html#a3369a596f22891cc7adc4f9504df59ad</field>
    <field name="keywords">getNbIter OFELI::IPF::getNbIter IPF</field>
    <field name="text">Return parameter read using keyword NbIter This parameter can be used to read a number of iterations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::get</field>
    <field name="args">(const string &amp;label, Vect&lt; real_t &gt; &amp;a) const</field>
    <field name="url">classOFELI_1_1IPF.html#a34980c32fed0c346a1e697344d6b2e5d</field>
    <field name="keywords">get OFELI::IPF::get IPF</field>
    <field name="text">Read an array of real values corresponding to a given label label Label that identifies the array read from input file a Vector that contain the array The vector is properly resized before filling If this label is not found an error message is displayed</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::get</field>
    <field name="args">(const string &amp;label, int &amp;a) const</field>
    <field name="url">classOFELI_1_1IPF.html#a35072780ea59b4f1d47aa96f6521767a</field>
    <field name="keywords">get OFELI::IPF::get IPF</field>
    <field name="text">Return integer parameter corresponding to a given label label Label that identifies the integer number read from input file a Returned value If this label is not found an error message is displayed and program stops Note This member function can be used instead of getInteger</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getDensity</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1IPF.html#a3ad9b00f058bd86a3e3a59b743543d51</field>
    <field name="keywords">getDensity OFELI::IPF::getDensity IPF</field>
    <field name="text">Return expression to be parsed function of x y z t for density function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getBF</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1IPF.html#a3d32ac86a1389dd653442aa9ff3658cd</field>
    <field name="keywords">getBF OFELI::IPF::getBF IPF</field>
    <field name="text">Return parameter read using keyword BF This parameter can be used to set a body force flag</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getData</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1IPF.html#a3ebd0baa4d84c890023df380d4448abf</field>
    <field name="keywords">getData OFELI::IPF::getData IPF</field>
    <field name="text">Return parameter read using keyword Data This parameter can be used to set a various data flag</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getSF</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1IPF.html#a4297a3dd3a184b6288479c8ec909f66d</field>
    <field name="keywords">getSF OFELI::IPF::getSF IPF</field>
    <field name="text">Return parameter read using keyword SF This parameter can be used to set a surface force flag</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getBCFile</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1IPF.html#a445dd7924bf8c3b87adc8693e74817d8</field>
    <field name="keywords">getBCFile OFELI::IPF::getBCFile IPF</field>
    <field name="text">Return parameter read using keyword BCFile This parameter can be used to read a boundary condition file name</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::IPF</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1IPF.html#a481a6f7361057fe1a14f7d8c456fcde5</field>
    <field name="keywords">IPF OFELI::IPF::IPF IPF</field>
    <field name="text">Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getMagneticPermeability</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1IPF.html#a49098e29f9dc4d40d60dac6ea9ac1101</field>
    <field name="keywords">getMagneticPermeability OFELI::IPF::getMagneticPermeability IPF</field>
    <field name="text">Return expression to be parsed function of x y z t for magnetic permeability</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getComplex</field>
    <field name="args">(const string &amp;label) const</field>
    <field name="url">classOFELI_1_1IPF.html#a4af174196784e4345b28b6a5fd9127fc</field>
    <field name="keywords">getComplex OFELI::IPF::getComplex IPF</field>
    <field name="text">Return parameter corresponding to a given label when its value is a complex number label Label that identifies the complex number read from input file If this label is not found an error message is displayed and program stops</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getElectricPermittivity</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1IPF.html#a4c1ba9473045c23e574fa56f7e43c9c5</field>
    <field name="keywords">getElectricPermittivity OFELI::IPF::getElectricPermittivity IPF</field>
    <field name="text">Return expression to be parsed function of x y z t for electric permittivity</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getViscosity</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1IPF.html#a4e29caccfac71c314287ee633a650490</field>
    <field name="keywords">getViscosity OFELI::IPF::getViscosity IPF</field>
    <field name="text">Return expression to be parsed function of x y z t for viscosity</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getProject</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1IPF.html#a4eaeef1040cc1dfd87e739767d26365d</field>
    <field name="keywords">getProject OFELI::IPF::getProject IPF</field>
    <field name="text">Return parameter read using keyword Project This parameter can be used to read a project s name</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getArraySize</field>
    <field name="args">(const string &amp;label, size_t j) const</field>
    <field name="url">classOFELI_1_1IPF.html#a515dbe3e6d3380c5af291a603d35dc20</field>
    <field name="keywords">getArraySize OFELI::IPF::getArraySize IPF</field>
    <field name="text">Return an array entry for a given label label Label that identifies the array read from input file j Index of entry in the array Starting from 1 If this label is not found an error message is displayed and program stops</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getVerbose</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1IPF.html#a5513ede228fa96a2bf6341906f66e759</field>
    <field name="keywords">getVerbose OFELI::IPF::getVerbose IPF</field>
    <field name="text">Return parameter read using keyword Verbose</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getElectricConductivity</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1IPF.html#a575b53daeb3f62f6e3ab8f88d6ab111b</field>
    <field name="keywords">getElectricConductivity OFELI::IPF::getElectricConductivity IPF</field>
    <field name="text">Return expression to be parsed function of x y z t for electric conductivity</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getDoublePar</field>
    <field name="args">(size_t n=1) const</field>
    <field name="url">classOFELI_1_1IPF.html#a5aa88daaa614051fa38d4a7a7f0e3788</field>
    <field name="keywords">getDoublePar OFELI::IPF::getDoublePar IPF</field>
    <field name="text">Return n th parameter read using keyword DoublePar Here we have at most 2 0 integer extra parameters that can be used for any purpose Default value for n is 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getPoissonRatio</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1IPF.html#a5b38e24f6c687367b0eda5b61df6af23</field>
    <field name="keywords">getPoissonRatio OFELI::IPF::getPoissonRatio IPF</field>
    <field name="text">Return expression to be parsed function of x y z t for Poisson ratio</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getRestartFile</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1IPF.html#a5c1ad1e3626a9a00016fe3806b3d59a8</field>
    <field name="keywords">getRestartFile OFELI::IPF::getRestartFile IPF</field>
    <field name="text">Return parameter read using keyword RestartFile This parameter can be used to read a restart file name</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getSaveFile</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1IPF.html#a601ce1939f347d82d73eb4c55c9b01d3</field>
    <field name="keywords">getSaveFile OFELI::IPF::getSaveFile IPF</field>
    <field name="text">Return parameter read using keyword SaveFile This parameter can be used to read a save file name</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getOutput</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1IPF.html#a643cfb9d2c2e835818f2f078d5fb2d58</field>
    <field name="keywords">getOutput OFELI::IPF::getOutput IPF</field>
    <field name="text">Return parameter read using keyword Output This parameter can be used to control output behavior in a program</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getBC</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1IPF.html#a668ceb7de6475a737a73001b98608ce2</field>
    <field name="keywords">getBC OFELI::IPF::getBC IPF</field>
    <field name="text">Return parameter read using keyword BC This parameter can be used to set a boundary condition flag</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::get</field>
    <field name="args">(const string &amp;label, real_t &amp;a) const</field>
    <field name="url">classOFELI_1_1IPF.html#a6b408ac9f9669135b85fbea15f2a5b49</field>
    <field name="keywords">get OFELI::IPF::get IPF</field>
    <field name="text">Return real parameter corresponding to a given label label Label that identifies the real real_t number read from input file a Returned value If this label is not found an error message is displayed and program stops Note This member function can be used instead of getReal_T</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getString</field>
    <field name="args">(const string &amp;label, string def) const</field>
    <field name="url">classOFELI_1_1IPF.html#a70e78d77e1766267fb01b20852f10970</field>
    <field name="keywords">getString OFELI::IPF::getString IPF</field>
    <field name="text">Return parameter corresponding to a given label when its value is a string Case where a default value is provided label Label that identifies the string read from input file def Default value Value to assign if the sought parameter is not found</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getMeshFile</field>
    <field name="args">(size_t i=1) const</field>
    <field name="url">classOFELI_1_1IPF.html#a7823d7e2034053dd3009602293349bd6</field>
    <field name="keywords">getMeshFile OFELI::IPF::getMeshFile IPF</field>
    <field name="text">Return i th parameter read using keyword mesh_file Here we have at most 1 0 integer extra parameters that can be used for any purpose Default value for i is 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getAuxFile</field>
    <field name="args">(size_t i=1) const</field>
    <field name="url">classOFELI_1_1IPF.html#a8013363ada7e08d269414ad0140534d7</field>
    <field name="keywords">getAuxFile OFELI::IPF::getAuxFile IPF</field>
    <field name="text">Return i th parameter read using keyword Auxfile Here we have at most 1 0 integer extra parameters that can be used for any auxiliary file names Default value for i is 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::get</field>
    <field name="args">(const string &amp;label, string &amp;a) const</field>
    <field name="url">classOFELI_1_1IPF.html#a893ef3eab73a0020e9eb8358d5ef27f6</field>
    <field name="keywords">get OFELI::IPF::get IPF</field>
    <field name="text">Return string parameter corresponding to a given label label Label that identifies the atring read from input file a Returned value Note This member function can be used instead of getString If this label is not found an error message is displayed and program stops Note This member function can be used instead of getString</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getDisplay</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1IPF.html#a8c8b312b367b066c0e09545023bc7a0f</field>
    <field name="keywords">getDisplay OFELI::IPF::getDisplay IPF</field>
    <field name="text">Display acquired parameters</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::get</field>
    <field name="args">(const string &amp;label, complex_t &amp;a) const</field>
    <field name="url">classOFELI_1_1IPF.html#a9129d5d7a3f29ec9c4ad56b8226d5910</field>
    <field name="keywords">get OFELI::IPF::get IPF</field>
    <field name="text">Return complex parameter corresponding to a given label label Label that identifies the complex number read from input file a Returned value If this label is not found an error message is displayed and program stops</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getNbSteps</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1IPF.html#a9484a6cb85048c3288f6fd847a393fcb</field>
    <field name="keywords">getNbSteps OFELI::IPF::getNbSteps IPF</field>
    <field name="text">Return parameter read using keyword NbSteps This parameter can be used to read a number of time steps</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::contains</field>
    <field name="args">(const string &amp;label) const</field>
    <field name="url">classOFELI_1_1IPF.html#a954d85c3d14efd813690e73f1d476ef0</field>
    <field name="keywords">contains OFELI::IPF::contains IPF</field>
    <field name="text">check if the project file contains a given parameter label Label that identifies the label to seek in file 0 if the parameter is not found n if the parameter is found where n is the parameter index in the parameter list</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getDouble</field>
    <field name="args">(const string &amp;label, real_t def) const</field>
    <field name="url">classOFELI_1_1IPF.html#a96009267d9cdfddd275d935f96c771db</field>
    <field name="keywords">getDouble OFELI::IPF::getDouble IPF</field>
    <field name="text">Return parameter corresponding to a given label when its value is a real_t Case where a default value is provided label Label that identifies the real number read from input file def Default value Value to assign if the sought parameter is not found</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getRhoCp</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1IPF.html#a9a0e3af9e397e9de81d4c07c3262b69b</field>
    <field name="keywords">getRhoCp OFELI::IPF::getRhoCp IPF</field>
    <field name="text">Return expression to be parsed function of x y z t for density specific heat</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getInteger</field>
    <field name="args">(const string &amp;label) const</field>
    <field name="url">classOFELI_1_1IPF.html#aa9f673e358a4cc60b97b8fb1198e168d</field>
    <field name="keywords">getInteger OFELI::IPF::getInteger IPF</field>
    <field name="text">Return parameter corresponding to a given label when its value is an integer label Label that identifies the integer number read from input file If this label is not found an error message is displayed and program stops</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getSFFile</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1IPF.html#aaf047cb0b66cba763195b079e71866b4</field>
    <field name="keywords">getSFFile OFELI::IPF::getSFFile IPF</field>
    <field name="text">Return parameter read using keyword SFFile This parameter can be used to read a source force file name</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getBFFile</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1IPF.html#ab359c6516a6d25514fe7cc22c7df284b</field>
    <field name="keywords">getBFFile OFELI::IPF::getBFFile IPF</field>
    <field name="text">Return parameter read using keyword BFFile This parameter can be used to read a body force file name</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getComplexPar</field>
    <field name="args">(size_t n=1) const</field>
    <field name="url">classOFELI_1_1IPF.html#aba365e91d854e49978e69203d95537ca</field>
    <field name="keywords">getComplexPar OFELI::IPF::getComplexPar IPF</field>
    <field name="text">Return n th parameter read using keyword StringPar Here we have at most 2 0 integer extra parameters that can be used for any purpose Default value for n is 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getMaxTime</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1IPF.html#abd0602234826ee846424bae996460942</field>
    <field name="keywords">getMaxTime OFELI::IPF::getMaxTime IPF</field>
    <field name="text">Return parameter read using keyword MaxTime This parameter can be used to read a maximum time value</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getInteger</field>
    <field name="args">(const string &amp;label, int def) const</field>
    <field name="url">classOFELI_1_1IPF.html#abf10564b63d7fc27ba76b6e6752ad76b</field>
    <field name="keywords">getInteger OFELI::IPF::getInteger IPF</field>
    <field name="text">Return parameter corresponding to a given label when its value is an integer Case where a default value is provided label Label that identifies the integer number read from input file def Default value Value to assign if the sought parameter is not found</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::IPF</field>
    <field name="args">(const string &amp;file)</field>
    <field name="url">classOFELI_1_1IPF.html#ac0ea3036604869a38b62eab32cf7c4ab</field>
    <field name="keywords">IPF OFELI::IPF::IPF IPF</field>
    <field name="text">Constructor that gives the data file name It reads parameters in IPF Format from this file</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getPointDoublePar</field>
    <field name="args">(size_t n=1) const</field>
    <field name="url">classOFELI_1_1IPF.html#ac45cfae6b64d83a883bef5ff0288648f</field>
    <field name="keywords">getPointDoublePar OFELI::IPF::getPointDoublePar IPF</field>
    <field name="text">Return n th parameter read using keyword PointDoublePar Here we have at most 2 0 integer extra parameters that can be used for any purpose Default value for n is 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getTimeStep</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1IPF.html#ac69f54d1c86aec231aa8925457a2afb4</field>
    <field name="keywords">getTimeStep OFELI::IPF::getTimeStep IPF</field>
    <field name="text">Return parameter read using keyword TimeStep This parameter can be used to read a time step value</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getTolerance</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1IPF.html#ad0008d75afca885ee8740f4c2b91eb61</field>
    <field name="keywords">getTolerance OFELI::IPF::getTolerance IPF</field>
    <field name="text">Return parameter read using keyword Tolerance This parameter can be used to read a tolerance value to control convergence</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getPlot</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1IPF.html#ad0f75f4e1ff4a09f988dd4959b1da5d8</field>
    <field name="keywords">getPlot OFELI::IPF::getPlot IPF</field>
    <field name="text">Return parameter read using keyword Plot This parameter can be used to control result saving for plotting in a program</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getString</field>
    <field name="args">(const string &amp;label) const</field>
    <field name="url">classOFELI_1_1IPF.html#ad41c440038d1df88db01a59b1e2d5e83</field>
    <field name="keywords">getString OFELI::IPF::getString IPF</field>
    <field name="text">Return parameter corresponding to a given label when its value is a string label Label that identifies the string read from input file If this label is not found an error message is displayed and program stops</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getSave</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1IPF.html#adc4dea310927e39f62a28c47750ef776</field>
    <field name="keywords">getSave OFELI::IPF::getSave IPF</field>
    <field name="text">Return parameter read using keyword Save This parameter can be used to control result saving in a program e.g for a restarting purpose</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getInitFile</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1IPF.html#ae6245b62541497bbbbcbd7d292aafba1</field>
    <field name="keywords">getInitFile OFELI::IPF::getInitFile IPF</field>
    <field name="text">Return parameter read using keyword InitFile This parameter can be used to read an initial data file name</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getStringPar</field>
    <field name="args">(size_t n=1) const</field>
    <field name="url">classOFELI_1_1IPF.html#ae9b57783d3a0ee1f2946f59b6bed39b5</field>
    <field name="keywords">getStringPar OFELI::IPF::getStringPar IPF</field>
    <field name="text">Return n-th parameter read using keyword StringPar Here we have at most 2 0 integer extra parameters that can be used for any purpose Default value for n is 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getThermalConductivity</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1IPF.html#af03105d218a24a92c6297d6dcc2a219e</field>
    <field name="keywords">getThermalConductivity OFELI::IPF::getThermalConductivity IPF</field>
    <field name="text">Return expression to be parsed function of x y z t for thermal conductivity</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getPlotFile</field>
    <field name="args">(int i=1) const</field>
    <field name="url">classOFELI_1_1IPF.html#af39c80762030e34944f447f62027eef4</field>
    <field name="keywords">getPlotFile OFELI::IPF::getPlotFile IPF</field>
    <field name="text">Return i th parameter read using keyword PlotFile Here we have at most 1 0 integer extra parameters that can be used for plot file names Default value for i is 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getInit</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1IPF.html#af91b355ac93b7f334cfa2d8f6a9a184c</field>
    <field name="keywords">getInit OFELI::IPF::getInit IPF</field>
    <field name="text">Return parameter read using keyword Init This parameter can be used to set an initial data flag</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IPF::getPrescriptionFile</field>
    <field name="args">(int i=1) const</field>
    <field name="url">classOFELI_1_1IPF.html#aff2bfd5fc64472e8337676db530757bd</field>
    <field name="keywords">getPrescriptionFile OFELI::IPF::getPrescriptionFile IPF</field>
    <field name="text">Return parameter read using keyword DataFile This parameter can be used to read a Prescription file</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Integration</field>
    <field name="url">classOFELI_1_1Integration.html</field>
    <field name="keywords">Integration</field>
    <field name="text">Class for numerical integration methods Class NumInt defines and stores numerical integration data Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Integration::~Integration</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Integration.html#a27fdc443e848f75da803e3d08a7d7f85</field>
    <field name="keywords">OFELI::Integration::~Integration Integration</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Integration::setTriangle</field>
    <field name="args">(real_t x1, real_t y1, real_t x2, real_t y2, real_t x3, real_t y3)</field>
    <field name="url">classOFELI_1_1Integration.html#a3072aedb92fde50d8b1201bf52ce192c</field>
    <field name="keywords">setTriangle OFELI::Integration::setTriangle Integration</field>
    <field name="text">Define integration domain as a quadrilateral x1 x-coordinate of first vertex of triangle y1 y-coordinate of first vertex of triangle x2 x-coordinate of second vertex of triangle y2 y-coordinate of second vertex of triangle x3 x-coordinate of third vertex of triangle y3 y-coordinate of third vertex of triangle</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Integration::Integration</field>
    <field name="args">(real_t low, real_t high, function&lt; real_t(real_t)&gt; const &amp;f, IntegrationScheme s, real_t error)</field>
    <field name="url">classOFELI_1_1Integration.html#a4672d48296cbd574da470eb710122a7a</field>
    <field name="keywords">Integration OFELI::Integration::Integration Integration</field>
    <field name="text">Constructor low Lower value of integration interval high Upper value of integration interval f Function to integrate s Integration scheme To choose among enumerated values LEFT_RECTANGLE RIGHT_RECTANGLE MID_RECTANGLE TRAPEZOIDAL SIMPSON GAUSS_LEGENDRE error</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Integration::setQuadrilateral</field>
    <field name="args">(real_t x1, real_t y1, real_t x2, real_t y2, real_t x3, real_t y3, real_t x4, real_t y4)</field>
    <field name="url">classOFELI_1_1Integration.html#a4746c65eef73fb00087c25afa2b5de25</field>
    <field name="keywords">setQuadrilateral OFELI::Integration::setQuadrilateral Integration</field>
    <field name="text">Define integration domain as a quadrilateral x1 x-coordinate of first vertex of quadrilateral y1 y-coordinate of first vertex of quadrilateral x2 x-coordinate of second vertex of quadrilateral y2 y-coordinate of second vertex of quadrilateral x3 x-coordinate of third vertex of quadrilateral y3 y-coordinate of third vertex of quadrilateral x4 x-coordinate of fourth vertex of quadrilateral y4 y-coordinate of fourth vertex of quadrilateral</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Integration::run</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Integration.html#a4e221062ec88b6f591aa4501f4f7d9b5</field>
    <field name="keywords">run OFELI::Integration::run Integration</field>
    <field name="text">Run numerical integration Computed approximate value of integral</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Integration::setFunction</field>
    <field name="args">(function&lt; real_t(real_t)&gt; const &amp;f)</field>
    <field name="url">classOFELI_1_1Integration.html#a85b46015bfb0e017ac6446556e107164</field>
    <field name="keywords">setFunction OFELI::Integration::setFunction Integration</field>
    <field name="text">Define function to integrate numerically f Function to integrate</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Integration::Integration</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Integration.html#a99fedbcd92c2d8eb0cab643e08a994ce</field>
    <field name="keywords">Integration OFELI::Integration::Integration Integration</field>
    <field name="text">Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Integration::setScheme</field>
    <field name="args">(IntegrationScheme s)</field>
    <field name="url">classOFELI_1_1Integration.html#ae8a3575e77ddd46da6778d8de975e53a</field>
    <field name="keywords">setScheme OFELI::Integration::setScheme Integration</field>
    <field name="text">Set time inegration scheme s Scheme to choose among enumerated values LEFT_RECTANGLE RIGHT_RECTANGLE MID_RECTANGLE TRAPEZOIDAL SIMPSON GAUSS_LEGENDRE</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Iter</field>
    <field name="url">classOFELI_1_1Iter.html</field>
    <field name="keywords">Iter Iter&lt; real_t &gt;</field>
    <field name="text">Class to drive an iterative process This template class enables monitoring any iterative process It simply sets default values for tolerance maximal number of iterations and enables checking convergence using two successive iterates Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Iter::setTolerance</field>
    <field name="args">(real_t toler)</field>
    <field name="url">classOFELI_1_1Iter.html#a4d0e665f8f92335ec10c4ccf9e9171b7</field>
    <field name="keywords">setTolerance OFELI::Iter::setTolerance Iter&lt; T_ &gt; setTolerance OFELI::Iter&lt; real_t &gt;::setTolerance Iter&lt; real_t &gt;</field>
    <field name="text">Set tolerance value for convergence toler Tolerance value Default 1.e 8</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Iter::~Iter</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Iter.html#a751679d9eef045b4d2ea9688e746b9b5</field>
    <field name="keywords">OFELI::Iter::~Iter Iter&lt; T_ &gt; OFELI::Iter&lt; real_t &gt;::~Iter Iter&lt; real_t &gt;</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Iter::setMaxIter</field>
    <field name="args">(int max_it)</field>
    <field name="url">classOFELI_1_1Iter.html#a9e6d15777f4c9d95999313bafae5e5e7</field>
    <field name="keywords">setMaxIter OFELI::Iter::setMaxIter Iter&lt; T_ &gt; setMaxIter OFELI::Iter&lt; real_t &gt;::setMaxIter Iter&lt; real_t &gt;</field>
    <field name="text">Set maximal number of iterations max_it Maximal number of iterations Default 1 0 0</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Iter::setVerbose</field>
    <field name="args">(int v)</field>
    <field name="url">classOFELI_1_1Iter.html#afc81729fb2aa1720f446f48f1c3977ff</field>
    <field name="keywords">setVerbose OFELI::Iter::setVerbose Iter&lt; T_ &gt; setVerbose OFELI::Iter&lt; real_t &gt;::setVerbose Iter&lt; real_t &gt;</field>
    <field name="text">Set verbosity parameter v Verbosity parameter Default 0</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::LCL1D</field>
    <field name="url">classOFELI_1_1LCL1D.html</field>
    <field name="keywords">LCL1D</field>
    <field name="text">Class to solve the linear conservation law Hyperbolic equation in 1 D by a MUSCL Finite Volume scheme S Clain V Clauzon GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL1D::setVelocity</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1LCL1D.html#a03dea4277ab0f07522d1ed14355a4542</field>
    <field name="keywords">setVelocity OFELI::LCL1D::setVelocity LCL1D</field>
    <field name="text">Set convection velocity v Vect instance containing velocity</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL1D::getFlux</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LCL1D.html#a1d4625ad6953bb68681f73718dc05422</field>
    <field name="keywords">getFlux OFELI::LCL1D::getFlux LCL1D</field>
    <field name="text">Return sidewise fluxes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL1D::getReferenceLength</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1LCL1D.html#a2274e76feaefc4b71e48b679be867396</field>
    <field name="keywords">getReferenceLength OFELI::LCL1D::getReferenceLength LCL1D</field>
    <field name="text">Return reference length</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL1D::LCL1D</field>
    <field name="args">(Mesh &amp;m, Vect&lt; real_t &gt; &amp;U)</field>
    <field name="url">classOFELI_1_1LCL1D.html#a4c7e328d455c05d67f1ca5c848155758</field>
    <field name="keywords">LCL1D OFELI::LCL1D::LCL1D LCL1D</field>
    <field name="text">Constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL1D::LCL1D</field>
    <field name="args">(Mesh &amp;m)</field>
    <field name="url">classOFELI_1_1LCL1D.html#a5580c0122166898fc3b480b3d23006db</field>
    <field name="keywords">LCL1D OFELI::LCL1D::LCL1D LCL1D</field>
    <field name="text">Constructor using mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL1D::setBC</field>
    <field name="args">(const Side &amp;sd, real_t u)</field>
    <field name="url">classOFELI_1_1LCL1D.html#a5f3c5d341436fc66855aa39929a0f0b9</field>
    <field name="keywords">setBC OFELI::LCL1D::setBC LCL1D</field>
    <field name="text">Set Dirichlet boundary condition Assign a constant value to a side sd Side to which value is prescibed u Value to prescribe</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL1D::setBC</field>
    <field name="args">(int code, real_t u)</field>
    <field name="url">classOFELI_1_1LCL1D.html#aa41901c2d7ace7211cdc3837de5be7ec</field>
    <field name="keywords">setBC OFELI::LCL1D::setBC LCL1D</field>
    <field name="text">Set Dirichlet boundary condition Assign a constant value sides with a given code code Code of sides to which value is prescibed u Value to prescribe</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL1D::setVelocity</field>
    <field name="args">(real_t v)</field>
    <field name="url">classOFELI_1_1LCL1D.html#aa714470c1ca963baddca6840bdd02d5b</field>
    <field name="keywords">setVelocity OFELI::LCL1D::setVelocity LCL1D</field>
    <field name="text">Set constant convection velocity</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL1D::setInitialCondition</field>
    <field name="args">(real_t u)</field>
    <field name="url">classOFELI_1_1LCL1D.html#aad327c49bbdba29883b1bccc77c9d9f1</field>
    <field name="keywords">setInitialCondition OFELI::LCL1D::setInitialCondition LCL1D</field>
    <field name="text">Assign a constant initial condition u Constant value for the initial condition</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL1D::~LCL1D</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LCL1D.html#ad0669b3423a403016b910d8518957365</field>
    <field name="keywords">OFELI::LCL1D::~LCL1D LCL1D</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL1D::setReferenceLength</field>
    <field name="args">(real_t dx)</field>
    <field name="url">classOFELI_1_1LCL1D.html#ad8db90b95563d822e3bd206aaf265caf</field>
    <field name="keywords">setReferenceLength OFELI::LCL1D::setReferenceLength LCL1D</field>
    <field name="text">Assign reference length value</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL1D::setReconstruction</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LCL1D.html#ade3afa31152cb0ecad88c3a54da8f93e</field>
    <field name="keywords">setReconstruction OFELI::LCL1D::setReconstruction LCL1D</field>
    <field name="text">Run MUSCL reconstruction</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL1D::setBC</field>
    <field name="args">(real_t u)</field>
    <field name="url">classOFELI_1_1LCL1D.html#adec7c2621be3fc1b2976caf301921aa0</field>
    <field name="keywords">setBC OFELI::LCL1D::setBC LCL1D</field>
    <field name="text">Set Dirichlet boundary condition Assign a constant value u to all boundary sides</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL1D::Forward</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;Flux, Vect&lt; real_t &gt; &amp;Field)</field>
    <field name="url">classOFELI_1_1LCL1D.html#af0b2936d1dab34e22178dba89b9c9698</field>
    <field name="keywords">Forward OFELI::LCL1D::Forward LCL1D</field>
    <field name="text">Computation of the primal variable n- n+1 Vector Flux contains elementwise fluxes issued from the Riemann problem calculated with as left element getNeighborElement(1) and right element getNeighborElement(2) if getNeighborElement(2) doesn t exist we are on a boundary and we prescribe a symmetry condition</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL1D::runOneTimeStep</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LCL1D.html#af8c8f582bd6836d2145e823ce5ed5ef4</field>
    <field name="keywords">runOneTimeStep OFELI::LCL1D::runOneTimeStep LCL1D</field>
    <field name="text">Run one time step of the linear conservation law Value of the time step</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL1D::setInitialCondition</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1LCL1D.html#aff44e82421a4d97aa6734ba2d240b9d6</field>
    <field name="keywords">setInitialCondition OFELI::LCL1D::setInitialCondition LCL1D</field>
    <field name="text">Assign initial condition by a vector u Vector containing initial condition</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::LCL2DT</field>
    <field name="url">classOFELI_1_1LCL2DT.html</field>
    <field name="keywords">LCL2DT</field>
    <field name="text">Class to solve the linear hyperbolic equation in 2 D by a MUSCL Finite Volume scheme on triangles S Clain V Clauzon GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL2DT::getFlux</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LCL2DT.html#a1d4625ad6953bb68681f73718dc05422</field>
    <field name="keywords">getFlux OFELI::LCL2DT::getFlux LCL2DT</field>
    <field name="text">Return sidewise flux vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL2DT::setBC</field>
    <field name="args">(const Side &amp;sd, real_t u)</field>
    <field name="url">classOFELI_1_1LCL2DT.html#a5f3c5d341436fc66855aa39929a0f0b9</field>
    <field name="keywords">setBC OFELI::LCL2DT::setBC LCL2DT</field>
    <field name="text">Set Dirichlet boundary condition Assign a constant value to a side sd Side to which value is prescibed u Value to prescribe</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL2DT::setVelocity</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1LCL2DT.html#a6b888848a8922bb29f2c7330913390fc</field>
    <field name="keywords">setVelocity OFELI::LCL2DT::setVelocity LCL2DT</field>
    <field name="text">Set convection velocity v Vect instance containing velocity</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL2DT::~LCL2DT</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LCL2DT.html#aa240633aae2754ebe10a78286423283d</field>
    <field name="keywords">OFELI::LCL2DT::~LCL2DT LCL2DT</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL2DT::LCL2DT</field>
    <field name="args">(Mesh &amp;m, Vect&lt; real_t &gt; &amp;U)</field>
    <field name="url">classOFELI_1_1LCL2DT.html#aa394738310663e85ca5e4e0f1e973076</field>
    <field name="keywords">LCL2DT OFELI::LCL2DT::LCL2DT LCL2DT</field>
    <field name="text">Constructor using mesh and initial data m Reference to Mesh instance U Vector containing initial elementwise solution</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL2DT::setBC</field>
    <field name="args">(int code, real_t u)</field>
    <field name="url">classOFELI_1_1LCL2DT.html#aa41901c2d7ace7211cdc3837de5be7ec</field>
    <field name="keywords">setBC OFELI::LCL2DT::setBC LCL2DT</field>
    <field name="text">Set Dirichlet boundary condition Assign a constant value sides with a given code code Code of sides to which value is prescibed u Value to prescribe</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL2DT::setInitialCondition</field>
    <field name="args">(real_t u)</field>
    <field name="url">classOFELI_1_1LCL2DT.html#aad327c49bbdba29883b1bccc77c9d9f1</field>
    <field name="keywords">setInitialCondition OFELI::LCL2DT::setInitialCondition LCL2DT</field>
    <field name="text">Set a constant initial condition u Value of initial condition to assign to all elements</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL2DT::LCL2DT</field>
    <field name="args">(Mesh &amp;m)</field>
    <field name="url">classOFELI_1_1LCL2DT.html#ad0c6873672c58bd8edca7269c35501fd</field>
    <field name="keywords">LCL2DT OFELI::LCL2DT::LCL2DT LCL2DT</field>
    <field name="text">Constructor using Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL2DT::setVelocity</field>
    <field name="args">(const LocalVect&lt; real_t, 2 &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1LCL2DT.html#ad640c03c3542a6b48087ec83386bc04e</field>
    <field name="keywords">setVelocity OFELI::LCL2DT::setVelocity LCL2DT</field>
    <field name="text">Set constant convection velocity v Vector containing constant velocity to prescribe</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL2DT::setReconstruction</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LCL2DT.html#ade3afa31152cb0ecad88c3a54da8f93e</field>
    <field name="keywords">setReconstruction OFELI::LCL2DT::setReconstruction LCL2DT</field>
    <field name="text">Reconstruct flux using Muscl scheme</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL2DT::setBC</field>
    <field name="args">(real_t u)</field>
    <field name="url">classOFELI_1_1LCL2DT.html#adec7c2621be3fc1b2976caf301921aa0</field>
    <field name="keywords">setBC OFELI::LCL2DT::setBC LCL2DT</field>
    <field name="text">Set Dirichlet boundary condition Assign a constant value u to all boundary sides</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL2DT::Forward</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;Flux, Vect&lt; real_t &gt; &amp;Field)</field>
    <field name="url">classOFELI_1_1LCL2DT.html#af0b2936d1dab34e22178dba89b9c9698</field>
    <field name="keywords">Forward OFELI::LCL2DT::Forward LCL2DT</field>
    <field name="text">Computation of the primal variable n- n+1 Vector Flux contains elementwise fluxes issued from the Riemann problem calculated with as left element getNeighborElement(1) and right element getNeighborElement(2) if getNeighborElement(2) doesn t exist we are on a boundary and we prescribe a symmetry condition</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL2DT::runOneTimeStep</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LCL2DT.html#af8c8f582bd6836d2145e823ce5ed5ef4</field>
    <field name="keywords">runOneTimeStep OFELI::LCL2DT::runOneTimeStep LCL2DT</field>
    <field name="text">Run one time step of the linear conservation law Value of the time step</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL2DT::setInitialCondition</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1LCL2DT.html#aff44e82421a4d97aa6734ba2d240b9d6</field>
    <field name="keywords">setInitialCondition OFELI::LCL2DT::setInitialCondition LCL2DT</field>
    <field name="text">Set elementwise initial condition u Vect instance containing initial condition values</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::LCL3DT</field>
    <field name="url">classOFELI_1_1LCL3DT.html</field>
    <field name="keywords">LCL3DT</field>
    <field name="text">Class to solve the linear conservation law equation in 3 D by a MUSCL Finite Volume scheme on tetrahedra S Clain V Clauzon GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL3DT::setVelocity</field>
    <field name="args">(const LocalVect&lt; real_t, 3 &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1LCL3DT.html#a14a4b602851fd592ba56460c05b753a3</field>
    <field name="keywords">setVelocity OFELI::LCL3DT::setVelocity LCL3DT</field>
    <field name="text">Set constant convection velocity v Vector containing constant velocity to prescribe</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL3DT::LCL3DT</field>
    <field name="args">(Mesh &amp;m, Vect&lt; real_t &gt; &amp;U)</field>
    <field name="url">classOFELI_1_1LCL3DT.html#a1977d6a932619c3f180e1e07b5de5f41</field>
    <field name="keywords">LCL3DT OFELI::LCL3DT::LCL3DT LCL3DT</field>
    <field name="text">Constructor using mesh and initial field m Reference to Mesh instance U Vector containing initial elementwise solution</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL3DT::getReferenceLength</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1LCL3DT.html#a2274e76feaefc4b71e48b679be867396</field>
    <field name="keywords">getReferenceLength OFELI::LCL3DT::getReferenceLength LCL3DT</field>
    <field name="text">Return reference length</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL3DT::setBC</field>
    <field name="args">(const Side &amp;sd, real_t u)</field>
    <field name="url">classOFELI_1_1LCL3DT.html#a5f3c5d341436fc66855aa39929a0f0b9</field>
    <field name="keywords">setBC OFELI::LCL3DT::setBC LCL3DT</field>
    <field name="text">Set Dirichlet boundary condition Assign a constant value to a side sd Side to which value is prescibed u Value to prescribe</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL3DT::~LCL3DT</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LCL3DT.html#a64f1e55026a233a37ac146836693cbfd</field>
    <field name="keywords">OFELI::LCL3DT::~LCL3DT LCL3DT</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL3DT::setVelocity</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1LCL3DT.html#a6b888848a8922bb29f2c7330913390fc</field>
    <field name="keywords">setVelocity OFELI::LCL3DT::setVelocity LCL3DT</field>
    <field name="text">Set convection velocity v Vect instance containing velocity</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL3DT::setBC</field>
    <field name="args">(int code, real_t u)</field>
    <field name="url">classOFELI_1_1LCL3DT.html#aa41901c2d7ace7211cdc3837de5be7ec</field>
    <field name="keywords">setBC OFELI::LCL3DT::setBC LCL3DT</field>
    <field name="text">Set Dirichlet boundary condition Assign a constant value sides with a given code code Code of sides to which value is prescibed u Value to prescribe</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL3DT::LCL3DT</field>
    <field name="args">(Mesh &amp;m)</field>
    <field name="url">classOFELI_1_1LCL3DT.html#aa7a03b4e541f25470c238de6f62bd25c</field>
    <field name="keywords">LCL3DT OFELI::LCL3DT::LCL3DT LCL3DT</field>
    <field name="text">Constructor using mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL3DT::setInitialCondition</field>
    <field name="args">(real_t u)</field>
    <field name="url">classOFELI_1_1LCL3DT.html#aad327c49bbdba29883b1bccc77c9d9f1</field>
    <field name="keywords">setInitialCondition OFELI::LCL3DT::setInitialCondition LCL3DT</field>
    <field name="text">Set a constant initial condition u Value of initial condition to assign to all elements</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL3DT::setReferenceLength</field>
    <field name="args">(real_t dx)</field>
    <field name="url">classOFELI_1_1LCL3DT.html#ad8db90b95563d822e3bd206aaf265caf</field>
    <field name="keywords">setReferenceLength OFELI::LCL3DT::setReferenceLength LCL3DT</field>
    <field name="text">Assign reference length value</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL3DT::setReconstruction</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LCL3DT.html#ade3afa31152cb0ecad88c3a54da8f93e</field>
    <field name="keywords">setReconstruction OFELI::LCL3DT::setReconstruction LCL3DT</field>
    <field name="text">Reconstruct flux using Muscl scheme</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL3DT::setBC</field>
    <field name="args">(real_t u)</field>
    <field name="url">classOFELI_1_1LCL3DT.html#adec7c2621be3fc1b2976caf301921aa0</field>
    <field name="keywords">setBC OFELI::LCL3DT::setBC LCL3DT</field>
    <field name="text">Set Dirichlet boundary condition Assign a constant value u to all boundary sides</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL3DT::Forward</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;Flux, Vect&lt; real_t &gt; &amp;Field)</field>
    <field name="url">classOFELI_1_1LCL3DT.html#af0b2936d1dab34e22178dba89b9c9698</field>
    <field name="keywords">Forward OFELI::LCL3DT::Forward LCL3DT</field>
    <field name="text">Computation of the primal variable n- n+1 Vector Flux contains elementwise fluxes issued from the Riemann problem calculated with as left element getNeighborElement(1) and right element getNeighborElement(2) if getNeighborElement(2) doesn t exist we are on a boundary and we prescribe a symmetry condition</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL3DT::runOneTimeStep</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LCL3DT.html#af8c8f582bd6836d2145e823ce5ed5ef4</field>
    <field name="keywords">runOneTimeStep OFELI::LCL3DT::runOneTimeStep LCL3DT</field>
    <field name="text">Run one time step</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LCL3DT::setInitialCondition</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1LCL3DT.html#aff44e82421a4d97aa6734ba2d240b9d6</field>
    <field name="keywords">setInitialCondition OFELI::LCL3DT::setInitialCondition LCL3DT</field>
    <field name="text">Set elementwise initial condition u Vect instance containing initial condition values</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::LPSolver</field>
    <field name="url">classOFELI_1_1LPSolver.html</field>
    <field name="keywords">LPSolver</field>
    <field name="text">To solve a linear programming problem The Linear Program reads Solution is held by the Simplex method Reference C-implementation copied from J-P Moreau Paris Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LPSolver::LPSolver</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LPSolver.html#a1a5c13133724d1d457de6c3c7ce9df85</field>
    <field name="keywords">LPSolver OFELI::LPSolver::LPSolver LPSolver</field>
    <field name="text">Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LPSolver::run</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LPSolver.html#a58e8be2db2660128e4e6456a9c981fb5</field>
    <field name="keywords">run OFELI::LPSolver::run LPSolver</field>
    <field name="text">Run the linear program solver This function runs the linear programming solver using the Simplex algorithm 0 if process is complete 0 otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LPSolver::getObjective</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1LPSolver.html#a696a6a413ebf2f459e67bd6c832fd18c</field>
    <field name="keywords">getObjective OFELI::LPSolver::getObjective LPSolver</field>
    <field name="text">Return objective Once execution is complete this function returns optimal value of objective</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LPSolver::LPSolver</field>
    <field name="args">(int nv, int nb_le, int nb_ge, int nb_eq)</field>
    <field name="url">classOFELI_1_1LPSolver.html#a7cf64e5438715c7a7ee0cf57f3647479</field>
    <field name="keywords">LPSolver OFELI::LPSolver::LPSolver LPSolver</field>
    <field name="text">Constructor using Linear Program data nv Number of optimization variables nb_le Number of inequality constraints nb_ge Number of inequality constraints nb_eq Number of equality constraints</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">OFELI::LPSolver::Setting</field>
    <field name="url">classOFELI_1_1LPSolver.html#a9c7143555214cb84d55c75a40c0c3539</field>
    <field name="keywords">Setting OFELI::LPSolver::Setting LPSolver</field>
    <field name="text">Selects setting option Objective or Constraints</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::LPSolver::GE_CONSTRAINT</field>
    <field name="url">classOFELI_1_1LPSolver.html#a9c7143555214cb84d55c75a40c0c3539a19487e199ebf26d11213750edf365304</field>
    <field name="keywords">GE_CONSTRAINT OFELI::LPSolver::GE_CONSTRAINT LPSolver GE_CONSTRAINT OFELI::LPSolver::GE_CONSTRAINT LPSolver</field>
    <field name="text">Greater or Equal constraint coefficients</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::LPSolver::LE_CONSTRAINT</field>
    <field name="url">classOFELI_1_1LPSolver.html#a9c7143555214cb84d55c75a40c0c3539a2e119bb661e38709ea1c70ca5b0c8f31</field>
    <field name="keywords">LE_CONSTRAINT OFELI::LPSolver::LE_CONSTRAINT LPSolver LE_CONSTRAINT OFELI::LPSolver::LE_CONSTRAINT LPSolver</field>
    <field name="text">Less or Equal constraint coefficients</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::LPSolver::EQ_CONSTRAINT</field>
    <field name="url">classOFELI_1_1LPSolver.html#a9c7143555214cb84d55c75a40c0c3539a53b35d8b256aec5f3771c7683f3de94f</field>
    <field name="keywords">EQ_CONSTRAINT OFELI::LPSolver::EQ_CONSTRAINT LPSolver EQ_CONSTRAINT OFELI::LPSolver::EQ_CONSTRAINT LPSolver</field>
    <field name="text">Equality constraint coefficients</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::LPSolver::OBJECTIVE</field>
    <field name="url">classOFELI_1_1LPSolver.html#a9c7143555214cb84d55c75a40c0c3539a848633dc0433ee0c578691f4d36b9a77</field>
    <field name="keywords">OBJECTIVE OFELI::LPSolver::OBJECTIVE LPSolver OBJECTIVE OFELI::LPSolver::OBJECTIVE LPSolver</field>
    <field name="text">Objective function coefficients</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LPSolver::set</field>
    <field name="args">(Setting opt, const Vect&lt; real_t &gt; &amp;a, real_t b=0.0)</field>
    <field name="url">classOFELI_1_1LPSolver.html#aacafe203b7a2e94c24a67cdf38b5ebf5</field>
    <field name="keywords">set OFELI::LPSolver::set LPSolver</field>
    <field name="text">Set optimization data This function enables providing all optimization data It has to be used for the objectice function and once for each constraint opt Option for data to choose among enumerated values OBJECTIVE To set objective function to minimize LE_CONSTRAINT To set a inequality constraint GE_CONSTRAINT To set a inequality constraint EQ_CONSTRAINT To set an equality constraint a Vector coefficients if the chosen function If opt OBJECTIVE vector components are the coefficients multiplying the variables in the objective function if xx_CONSTRAINT vector components are the coefficients multiplying the variables in the corresponding constraint b Constant value in the objective function or in a constraint Its default value is 0.0</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LPSolver::setSize</field>
    <field name="args">(int nv, int nb_le, int nb_ge, int nb_eq)</field>
    <field name="url">classOFELI_1_1LPSolver.html#ad5bf7d8782731cf7ee188607923e87d6</field>
    <field name="keywords">setSize OFELI::LPSolver::setSize LPSolver</field>
    <field name="text">Set optimization parameters nv Number of optimization variables nb_le Number of inequality constraints nb_ge Number of inequality constraints nb_eq Number of equality constraints</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LPSolver::~LPSolver</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LPSolver.html#ae02d294771ce0a95bd492d03304adc50</field>
    <field name="keywords">OFELI::LPSolver::~LPSolver LPSolver</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LPSolver::set</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;x)</field>
    <field name="url">classOFELI_1_1LPSolver.html#af1092043af704fa8341f649d073649b4</field>
    <field name="keywords">set OFELI::LPSolver::set LPSolver</field>
    <field name="text">vector of optimization variables x Vector of optimization variables Its size must be at least equal to number of optimization variables</field>
  </doc>
  <doc>
    <field name="type">friend</field>
    <field name="name">OFELI::LPSolver::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const LPSolver &amp;os)</field>
    <field name="url">classOFELI_1_1LPSolver.html#af3252e2e1f0fcd934070c1378e1ae093</field>
    <field name="keywords">operator&lt;&lt; OFELI::LPSolver::operator&lt;&lt; LPSolver</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Laplace1DL2</field>
    <field name="url">classOFELI_1_1Laplace1DL2.html</field>
    <field name="keywords">Laplace1DL2</field>
    <field name="text">To build element equation for a 1 D elliptic equation using the 2 Node line element P 1 Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace1DL2::Laplace1DL2</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1Laplace1DL2.html#a2812443a9ce5a762d4382268112acc97</field>
    <field name="keywords">Laplace1DL2 OFELI::Laplace1DL2::Laplace1DL2 Laplace1DL2</field>
    <field name="text">Constructor using mesh instance ms Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace1DL2::~Laplace1DL2</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Laplace1DL2.html#a5478ca9494fb3f8ae3eb3efc072aeb7f</field>
    <field name="keywords">OFELI::Laplace1DL2::~Laplace1DL2 Laplace1DL2</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace1DL2::setBC1D</field>
    <field name="args">(real_t f, int lr)</field>
    <field name="url">classOFELI_1_1Laplace1DL2.html#a9044d18b5ec1c4aea6a48181bcf5f35a</field>
    <field name="keywords">setBC1D OFELI::Laplace1DL2::setBC1D Laplace1DL2</field>
    <field name="text">Set Dirichlet boundary data f Value to assign lr Option to choose location of the value 1 Left end 1 Right end</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace1DL2::LHS</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Laplace1DL2.html#a906da27903ef1eb8d13377b70044b2cd</field>
    <field name="keywords">LHS OFELI::Laplace1DL2::LHS Laplace1DL2</field>
    <field name="text">Add finite element matrix to left hand side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace1DL2::Laplace1DL2</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Laplace1DL2.html#a99491e895db140230776a3316c9e129e</field>
    <field name="keywords">Laplace1DL2 OFELI::Laplace1DL2::Laplace1DL2 Laplace1DL2</field>
    <field name="text">Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace1DL2::setNeumann1D</field>
    <field name="args">(real_t f, int lr)</field>
    <field name="url">classOFELI_1_1Laplace1DL2.html#a9a2ff293661184b5e8e89c94c37a0d2b</field>
    <field name="keywords">setNeumann1D OFELI::Laplace1DL2::setNeumann1D Laplace1DL2</field>
    <field name="text">Set Traction data f Value of traction Neumann boundary condition lr Option to choose location of the traction 1 Left end 1 Right end</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace1DL2::BoundaryRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1Laplace1DL2.html#a9f47743e35b40517037f6c007312461c</field>
    <field name="keywords">BoundaryRHS OFELI::Laplace1DL2::BoundaryRHS Laplace1DL2</field>
    <field name="text">Add Neumann contribution to Right-Hand Side f Vector with size the total number of nodes The first entry stands for the force at the first node Neumann condition and the last entry is the force at the last node Neumann condition</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace1DL2::buildEigen</field>
    <field name="args">(int opt=0)</field>
    <field name="url">classOFELI_1_1Laplace1DL2.html#aa29ea1739165c677b1353892bfaff103</field>
    <field name="keywords">buildEigen OFELI::Laplace1DL2::buildEigen Laplace1DL2</field>
    <field name="text">Build global stiffness and mass matrices for the eigen system opt Flag to choose a lumped mass matrix 0 or consistent 1 Default 0</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace1DL2::BodyRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1Laplace1DL2.html#aa6d7e87afcbeea4276573c9576d8d6ca</field>
    <field name="keywords">BodyRHS OFELI::Laplace1DL2::BodyRHS Laplace1DL2</field>
    <field name="text">Add Right-Hand Side Contribution f Vector containing the source given function at mesh nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace1DL2::Laplace1DL2</field>
    <field name="args">(Mesh &amp;ms, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1Laplace1DL2.html#ab413f599660a00bf7f20a48e61f466a9</field>
    <field name="keywords">Laplace1DL2 OFELI::Laplace1DL2::Laplace1DL2 Laplace1DL2</field>
    <field name="text">Constructor using mesh instance and solution vector ms Mesh instance u Vect instance that contains after execution of run() the solution</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Laplace1DL3</field>
    <field name="url">classOFELI_1_1Laplace1DL3.html</field>
    <field name="keywords">Laplace1DL3</field>
    <field name="text">To build element equation for the 1 D elliptic equation using the 3 Node line P 2 Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace1DL3::Laplace1DL3</field>
    <field name="args">(Mesh &amp;ms, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1Laplace1DL3.html#a101f6995b133edc6a6a3f437a990ba3d</field>
    <field name="keywords">Laplace1DL3 OFELI::Laplace1DL3::Laplace1DL3 Laplace1DL3</field>
    <field name="text">Constructor using mesh instance and solution vector ms Mesh instance u Vect instance that contains after execution of run() the solution</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace1DL3::BoundaryRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;h)</field>
    <field name="url">classOFELI_1_1Laplace1DL3.html#a735f7f78ccee2864d719a9aba4bea313</field>
    <field name="keywords">BoundaryRHS OFELI::Laplace1DL3::BoundaryRHS Laplace1DL3</field>
    <field name="text">Add Neumann contribution to Right-Hand Side h Vector with size the total number of nodes The first entry stands for the force at the first node Neumann condition and the last entry is the force at the last node Neumann condition</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace1DL3::~Laplace1DL3</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Laplace1DL3.html#a833e625949a2c7c502b3381f66d4093a</field>
    <field name="keywords">OFELI::Laplace1DL3::~Laplace1DL3 Laplace1DL3</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace1DL3::LHS</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Laplace1DL3.html#a906da27903ef1eb8d13377b70044b2cd</field>
    <field name="keywords">LHS OFELI::Laplace1DL3::LHS Laplace1DL3</field>
    <field name="text">Compute element matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace1DL3::setNeumann1D</field>
    <field name="args">(real_t f, int lr)</field>
    <field name="url">classOFELI_1_1Laplace1DL3.html#a9a2ff293661184b5e8e89c94c37a0d2b</field>
    <field name="keywords">setNeumann1D OFELI::Laplace1DL3::setNeumann1D Laplace1DL3</field>
    <field name="text">Set Traction data f Value of traction Neumann boundary condition lr Option to choose location of the traction 1 Left end 1 Right end</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace1DL3::Laplace1DL3</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1Laplace1DL3.html#aa3c3bc48521536029513c7851815dc42</field>
    <field name="keywords">Laplace1DL3 OFELI::Laplace1DL3::Laplace1DL3 Laplace1DL3</field>
    <field name="text">Constructor using mesh instance ms Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace1DL3::BodyRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1Laplace1DL3.html#aa6d7e87afcbeea4276573c9576d8d6ca</field>
    <field name="keywords">BodyRHS OFELI::Laplace1DL3::BodyRHS Laplace1DL3</field>
    <field name="text">Add Right-hand side contribution f Vector of right-hand side of the Poisson equation at nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace1DL3::Laplace1DL3</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Laplace1DL3.html#acb9177af80553f13bad2c704feb6f20f</field>
    <field name="keywords">Laplace1DL3 OFELI::Laplace1DL3::Laplace1DL3 Laplace1DL3</field>
    <field name="text">Default constructor Initializes an empty equation</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Laplace2DT3</field>
    <field name="url">classOFELI_1_1Laplace2DT3.html</field>
    <field name="keywords">Laplace2DT3</field>
    <field name="text">To build element equation for the Laplace equation using the 2 D triangle element P 1 Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace2DT3::Laplace2DT3</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Laplace2DT3.html#a2dc758205e620706b545303911a6acf4</field>
    <field name="keywords">Laplace2DT3 OFELI::Laplace2DT3::Laplace2DT3 Laplace2DT3</field>
    <field name="text">Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace2DT3::~Laplace2DT3</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Laplace2DT3.html#a51b53313df382865d371677bcd2a4e08</field>
    <field name="keywords">OFELI::Laplace2DT3::~Laplace2DT3 Laplace2DT3</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace2DT3::BoundaryRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;h)</field>
    <field name="url">classOFELI_1_1Laplace2DT3.html#a735f7f78ccee2864d719a9aba4bea313</field>
    <field name="keywords">BoundaryRHS OFELI::Laplace2DT3::BoundaryRHS Laplace2DT3</field>
    <field name="text">Add boundary source term to right-hand side h Vector containing the source given function at mesh nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace2DT3::LHS</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Laplace2DT3.html#a906da27903ef1eb8d13377b70044b2cd</field>
    <field name="keywords">LHS OFELI::Laplace2DT3::LHS Laplace2DT3</field>
    <field name="text">Add finite element matrix to left-hand side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace2DT3::Post</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;u, Vect&lt; Point&lt; real_t &gt; &gt; &amp;p)</field>
    <field name="url">classOFELI_1_1Laplace2DT3.html#a9ae33cd5527d05dd7b3085e121d60dd5</field>
    <field name="keywords">Post OFELI::Laplace2DT3::Post Laplace2DT3</field>
    <field name="text">Perform post calculations u Solution at nodes p Vector containing gradient at elements</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace2DT3::buildEigen</field>
    <field name="args">(int opt=0)</field>
    <field name="url">classOFELI_1_1Laplace2DT3.html#aa29ea1739165c677b1353892bfaff103</field>
    <field name="keywords">buildEigen OFELI::Laplace2DT3::buildEigen Laplace2DT3</field>
    <field name="text">Build global stiffness and mass matrices for the eigen system opt Flag to choose a lumped mass matrix 0 or consistent 1 Default 0</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace2DT3::Laplace2DT3</field>
    <field name="args">(Mesh &amp;ms, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1Laplace2DT3.html#aa6113bd972de5f6668cee964e751a10f</field>
    <field name="keywords">Laplace2DT3 OFELI::Laplace2DT3::Laplace2DT3 Laplace2DT3</field>
    <field name="text">Constructor using mesh and solution vector ms Mesh instance u Problem right-hand side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace2DT3::BodyRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1Laplace2DT3.html#aa6d7e87afcbeea4276573c9576d8d6ca</field>
    <field name="keywords">BodyRHS OFELI::Laplace2DT3::BodyRHS Laplace2DT3</field>
    <field name="text">Add body source term to right-hand side f Vector containing the source given function at mesh nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace2DT3::Laplace2DT3</field>
    <field name="args">(Mesh &amp;ms, Vect&lt; real_t &gt; &amp;b, Vect&lt; real_t &gt; &amp;Dbc, Vect&lt; real_t &gt; &amp;Nbc, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1Laplace2DT3.html#ae625c2192b7751caf2b3cb82d56163a3</field>
    <field name="keywords">Laplace2DT3 OFELI::Laplace2DT3::Laplace2DT3 Laplace2DT3</field>
    <field name="text">Constructor that initializes a standard Poisson equation This constructor sets data for the Poisson equation with mixed Dirichlet and Neumann boundary conditions ms Mesh instance b Vector containing the source term right-hand side of the equation at mesh nodes Dbc Vector containing prescribed values of the solution Dirichlet boundary condition at nodes with positive code Its size is the total number of nodes Nbc Vector containing prescribed fluxes Neumann boundary conditions at sides its size is the total number of sides u Vector to contain the finite element solution at nodes once the member function run() is called</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace2DT3::Laplace2DT3</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1Laplace2DT3.html#af62a1b268971f05194f9d2874be2eaee</field>
    <field name="keywords">Laplace2DT3 OFELI::Laplace2DT3::Laplace2DT3 Laplace2DT3</field>
    <field name="text">Constructor with mesh ms Mesh instance</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Laplace2DT6</field>
    <field name="url">classOFELI_1_1Laplace2DT6.html</field>
    <field name="keywords">Laplace2DT6</field>
    <field name="text">To build element equation for the Laplace equation using the 2 D triangle element P 2 Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace2DT6::Laplace2DT6</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Laplace2DT6.html#a0a98f0de5a68dbe910ea6726405e1730</field>
    <field name="keywords">Laplace2DT6 OFELI::Laplace2DT6::Laplace2DT6 Laplace2DT6</field>
    <field name="text">Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace2DT6::Laplace2DT6</field>
    <field name="args">(Mesh &amp;ms, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1Laplace2DT6.html#a2b7204a854f6e1e7597b947e86f63d8c</field>
    <field name="keywords">Laplace2DT6 OFELI::Laplace2DT6::Laplace2DT6 Laplace2DT6</field>
    <field name="text">Constructor using mesh and solution vector ms Mesh instance u Problem right-hand side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace2DT6::BoundaryRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;h)</field>
    <field name="url">classOFELI_1_1Laplace2DT6.html#a735f7f78ccee2864d719a9aba4bea313</field>
    <field name="keywords">BoundaryRHS OFELI::Laplace2DT6::BoundaryRHS Laplace2DT6</field>
    <field name="text">Add boundary source term to right-hand side h Vector containing the source given function at mesh nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace2DT6::LHS</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Laplace2DT6.html#a906da27903ef1eb8d13377b70044b2cd</field>
    <field name="keywords">LHS OFELI::Laplace2DT6::LHS Laplace2DT6</field>
    <field name="text">Add finite element matrix to left-hand side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace2DT6::buildEigen</field>
    <field name="args">(int opt=0)</field>
    <field name="url">classOFELI_1_1Laplace2DT6.html#aa29ea1739165c677b1353892bfaff103</field>
    <field name="keywords">buildEigen OFELI::Laplace2DT6::buildEigen Laplace2DT6</field>
    <field name="text">Build global stiffness and mass matrices for the eigen system opt Flag to choose a lumed mass matrix 0 or consistent 1 Default 0</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace2DT6::BodyRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1Laplace2DT6.html#aa6d7e87afcbeea4276573c9576d8d6ca</field>
    <field name="keywords">BodyRHS OFELI::Laplace2DT6::BodyRHS Laplace2DT6</field>
    <field name="text">Add body source term to right-hand side f Vector containing the source given function at mesh nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace2DT6::~Laplace2DT6</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Laplace2DT6.html#aad247be6da8433aef414213f179f8705</field>
    <field name="keywords">OFELI::Laplace2DT6::~Laplace2DT6 Laplace2DT6</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace2DT6::Laplace2DT6</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1Laplace2DT6.html#aaeb4ecfdbefa15abed5223d5ee590c72</field>
    <field name="keywords">Laplace2DT6 OFELI::Laplace2DT6::Laplace2DT6 Laplace2DT6</field>
    <field name="text">Constructor with mesh ms Mesh instance</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Laplace3DT4</field>
    <field name="url">classOFELI_1_1Laplace3DT4.html</field>
    <field name="keywords">Laplace3DT4</field>
    <field name="text">To build element equation for the Laplace equation using the 3 D tetrahedral element P 1 Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace3DT4::Laplace3DT4</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1Laplace3DT4.html#a334c2b5a321236810652aa114d3ff6df</field>
    <field name="keywords">Laplace3DT4 OFELI::Laplace3DT4::Laplace3DT4 Laplace3DT4</field>
    <field name="text">Constructor with mesh ms Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace3DT4::BoundaryRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;h)</field>
    <field name="url">classOFELI_1_1Laplace3DT4.html#a735f7f78ccee2864d719a9aba4bea313</field>
    <field name="keywords">BoundaryRHS OFELI::Laplace3DT4::BoundaryRHS Laplace3DT4</field>
    <field name="text">Add boundary source term to right-hand side h Vector containing the source given function at mesh nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace3DT4::Laplace3DT4</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Laplace3DT4.html#a902ae8ed96518e68a5b08ee39b783081</field>
    <field name="keywords">Laplace3DT4 OFELI::Laplace3DT4::Laplace3DT4 Laplace3DT4</field>
    <field name="text">Default constructor Initializes an empty equation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace3DT4::LHS</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Laplace3DT4.html#a906da27903ef1eb8d13377b70044b2cd</field>
    <field name="keywords">LHS OFELI::Laplace3DT4::LHS Laplace3DT4</field>
    <field name="text">Add finite element matrix to left-hand side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace3DT4::Post</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;u, Vect&lt; Point&lt; real_t &gt; &gt; &amp;p)</field>
    <field name="url">classOFELI_1_1Laplace3DT4.html#a9ae33cd5527d05dd7b3085e121d60dd5</field>
    <field name="keywords">Post OFELI::Laplace3DT4::Post Laplace3DT4</field>
    <field name="text">Perform post calculations u Solution at nodes p Vector containing gradient at elements</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace3DT4::buildEigen</field>
    <field name="args">(int opt=0)</field>
    <field name="url">classOFELI_1_1Laplace3DT4.html#aa29ea1739165c677b1353892bfaff103</field>
    <field name="keywords">buildEigen OFELI::Laplace3DT4::buildEigen Laplace3DT4</field>
    <field name="text">Build global stiffness and mass matrices for the eigen system opt Flag to choose a lumed mass matrix 0 or consistent 1 Default 0</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace3DT4::BodyRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1Laplace3DT4.html#aa6d7e87afcbeea4276573c9576d8d6ca</field>
    <field name="keywords">BodyRHS OFELI::Laplace3DT4::BodyRHS Laplace3DT4</field>
    <field name="text">Add body source term to right-hand side f Vector containing the source given function at mesh nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace3DT4::~Laplace3DT4</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Laplace3DT4.html#ab4073cd900f6080dbc85eb30375b25c7</field>
    <field name="keywords">OFELI::Laplace3DT4::~Laplace3DT4 Laplace3DT4</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Laplace3DT4::Laplace3DT4</field>
    <field name="args">(Mesh &amp;ms, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1Laplace3DT4.html#addd434f4817ceb7c1278b24ae6116534</field>
    <field name="keywords">Laplace3DT4 OFELI::Laplace3DT4::Laplace3DT4 Laplace3DT4</field>
    <field name="text">Constructor using mesh and solution vector ms Mesh instance u Reference to solution vector instance</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::LaplaceDG2DP1</field>
    <field name="url">classOFELI_1_1LaplaceDG2DP1.html</field>
    <field name="keywords">LaplaceDG2DP1</field>
    <field name="text">To build and solve the linear system for the Poisson problem using the DG P 1 2 D triangle element This class build the linear system of equations for a standard elliptic equation using the Discontinuous Galerkin P 1 finite element method Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LaplaceDG2DP1::LaplaceDG2DP1</field>
    <field name="args">(Mesh &amp;ms, Vect&lt; real_t &gt; &amp;f, Vect&lt; real_t &gt; &amp;Dbc, Vect&lt; real_t &gt; &amp;Nbc, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1LaplaceDG2DP1.html#a589d1190bb5758b3313f9e6f3883ff06</field>
    <field name="keywords">LaplaceDG2DP1 OFELI::LaplaceDG2DP1::LaplaceDG2DP1 LaplaceDG2DP1</field>
    <field name="text">Constructor with mesh and vector data ms Mesh instance f Vector containing the right-hand side of the elliptic equation at triangle vertices Dbc Vector containing prescribed values of the solution Dirichlet boundary condition at nodes having a positive code Nbc Vector containing prescribed values of the flux Neumann boundary condition at each side having a positive code u Vector where the solution is stored once the linear system is solved</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LaplaceDG2DP1::run</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LaplaceDG2DP1.html#a58e8be2db2660128e4e6456a9c981fb5</field>
    <field name="keywords">run OFELI::LaplaceDG2DP1::run LaplaceDG2DP1</field>
    <field name="text">Build and solve the linear system of equations using an iterative method The matrix is preconditioned by the diagonal ILU method The linear system is solved either by the Conjugate Gradient method if the matrix is symmetric positive definite eps 1 or the GMRES method if not The solution is stored in the vector u given in the constructor Number of performed iterations Note that the maximal number is 1 0 0 0 and the tolerance is 1.e 8</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LaplaceDG2DP1::build</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LaplaceDG2DP1.html#a7740c7ab195c03ac140f1f75f633470f</field>
    <field name="keywords">build OFELI::LaplaceDG2DP1::build LaplaceDG2DP1</field>
    <field name="text">Build global matrix and right-hand side The problem matrix and right-hand side are the ones used in the constructor They are updated in this member function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LaplaceDG2DP1::Smooth</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1LaplaceDG2DP1.html#a8f985f95ecbc78b165e7225321ad7256</field>
    <field name="keywords">Smooth OFELI::LaplaceDG2DP1::Smooth LaplaceDG2DP1</field>
    <field name="text">Perform post calculations This function gives an averaged solution given at mesh nodes triangle vertices by a standard L 2 projection method u Solution at nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LaplaceDG2DP1::set</field>
    <field name="args">(real_t sigma, real_t eps)</field>
    <field name="url">classOFELI_1_1LaplaceDG2DP1.html#aab2ca661840b8b0b504a193da13f89c1</field>
    <field name="keywords">set OFELI::LaplaceDG2DP1::set LaplaceDG2DP1</field>
    <field name="text">Set parameters for the DG method sigma Penalty parameters to enforce continuity at nodes Must be positive Default 1 0 0 eps Epsilon value of the DG method to choose among the values 0 Incomplete Interior Penalty Galerkin method IIPG 1 Symmetric Interior Penalty Galerkin method SIPG 1 Non symmetric interior penalty Galerkin method NIPG For a user not familiar with the method please choose the value of eps 1 and sigma 1 0 0 which leads to a symmetric positive definite matrix Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LaplaceDG2DP1::~LaplaceDG2DP1</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LaplaceDG2DP1.html#ab3eebcf1c4438c9d61753c660c2454e1</field>
    <field name="keywords">OFELI::LaplaceDG2DP1::~LaplaceDG2DP1 LaplaceDG2DP1</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LaplaceDG2DP1::set</field>
    <field name="args">(const LocalMatrix&lt; real_t, 2, 2 &gt; &amp;K)</field>
    <field name="url">classOFELI_1_1LaplaceDG2DP1.html#af074042967d78df0c3563eaeee640ae3</field>
    <field name="keywords">set OFELI::LaplaceDG2DP1::set LaplaceDG2DP1</field>
    <field name="text">Set diffusivity matrix This function provides the diffusivity matrix as instance of class LocalMatrix The default diffusivity matrix is the identity matrix K Diffusivity matrix</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::LeastSquare</field>
    <field name="url">classOFELI_1_1LeastSquare.html</field>
    <field name="keywords">LeastSquare</field>
    <field name="text">To compute a least square approximation This class enables using approximation methods to mathematically define a geometry The algorithms used in this class are largely inspired from the book An Introduction to NURBS by David F Rogers Copyright C 2 0 0 0 David F Rogers</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Line2</field>
    <field name="url">classOFELI_1_1Line2.html</field>
    <field name="keywords">Line2</field>
    <field name="text">To describe a 2 Node planar line finite element Defines geometric quantities associated to 2 node linear segment element P 1 in the space The reference element is the segment 1 1 Note that the line length is not checked unless the function check is called Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Line2::getLength</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Line2.html#a1195ce258a1731f02b2e737d1742fe81</field>
    <field name="keywords">getLength OFELI::Line2::getLength Line2</field>
    <field name="text">Return element length</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Line2::Line2</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Line2.html#a1c067406b3ff10a3ca6be8d9cec25487</field>
    <field name="keywords">Line2 OFELI::Line2::Line2 Line2</field>
    <field name="text">Default Constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Line2::Line2</field>
    <field name="args">(const Element *el)</field>
    <field name="url">classOFELI_1_1Line2.html#a1ccaa504f2454da76ef3c7b1001793e5</field>
    <field name="keywords">Line2 OFELI::Line2::Line2 Line2</field>
    <field name="text">Constructor for an element el Pointer to element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Line2::isIn</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;x)</field>
    <field name="url">classOFELI_1_1Line2.html#a497b1ac36e44c874a349867507206f25</field>
    <field name="keywords">isIn OFELI::Line2::isIn Line2</field>
    <field name="text">Check whether point x is in current line element or not</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Line2::getNormal</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Line2.html#a5c17a48c0aaee7f643ba04c9fa86710e</field>
    <field name="keywords">getNormal OFELI::Line2::getNormal Line2</field>
    <field name="text">Return unit normal vector to line</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Line2::getInterpolate</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;x, const LocalVect&lt; real_t, 2 &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1Line2.html#a62cfe153d8391102633200e317bdc91d</field>
    <field name="keywords">getInterpolate OFELI::Line2::getInterpolate Line2</field>
    <field name="text">Return interpolated value at a given point x Point where interpolation is evaluated in the reference element v Computed value</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Line2::Line2</field>
    <field name="args">(const Edge *edge)</field>
    <field name="url">classOFELI_1_1Line2.html#a6a1732e3028b050a14042cb69ea8a30e</field>
    <field name="keywords">Line2 OFELI::Line2::Line2 Line2</field>
    <field name="text">Constructor for an edge edge Pointer to edge</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Line2::~Line2</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Line2.html#a70618e99696ef514a6525cdca3d62f23</field>
    <field name="keywords">OFELI::Line2::~Line2 Line2</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Line2::Sh</field>
    <field name="args">(size_t i, real_t s) const</field>
    <field name="url">classOFELI_1_1Line2.html#a86aae9c19ca381daacd93e0af1f1f1da</field>
    <field name="keywords">Sh OFELI::Line2::Sh Line2</field>
    <field name="text">Calculate shape function of a given node at a given point i Node number 1 or 2 s Localization of point in natural coordinates must be between 1 and 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Line2::getRefCoord</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;x)</field>
    <field name="url">classOFELI_1_1Line2.html#ab1353b007e28070a136c3fd079de3422</field>
    <field name="keywords">getRefCoord OFELI::Line2::getRefCoord Line2</field>
    <field name="text">Return reference coordinates of a point x in element Only the x-coordinate of the returned value has a meaning</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Line2::getTangent</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Line2.html#ae4b8e76da4e88ebdeb38fc049bb1cc1f</field>
    <field name="keywords">getTangent OFELI::Line2::getTangent Line2</field>
    <field name="text">Return unit tangent vector to line</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Line2::Line2</field>
    <field name="args">(const Side *side)</field>
    <field name="url">classOFELI_1_1Line2.html#ae83e56f3742e73dc1823a5912a8c08b9</field>
    <field name="keywords">Line2 OFELI::Line2::Line2 Line2</field>
    <field name="text">Constructor for a side side Pointer to side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Line2::DSh</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Line2.html#afc7413cec298fd773445dc1ef45d8b21</field>
    <field name="keywords">DSh OFELI::Line2::DSh Line2</field>
    <field name="text">Return partial derivatives of shape functions of element nodes LocalVect instance of partial derivatives of shape functions e.g dsh(i) x dsh(i) y are partial derivatives of the i th shape function</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Line3</field>
    <field name="url">classOFELI_1_1Line3.html</field>
    <field name="keywords">Line3</field>
    <field name="text">To describe a 3 Node quadratic planar line finite element Defines geometric quantities associated to 3 node quadratic element P 2 in the space The reference element is the segment 1 1 The user must take care to the fact that determinant of jacobian and other quantities depend on the point in the reference element where they are calculated For this before any utilization of shape functions or jacobian function setLocal() must be invoked Element nodes are ordered as the following the left one the central one and the right one Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Line3::setLocal</field>
    <field name="args">(real_t s)</field>
    <field name="url">classOFELI_1_1Line3.html#a19b4776d30b04b5fa427b8e8ce732122</field>
    <field name="keywords">setLocal OFELI::Line3::setLocal Line3</field>
    <field name="text">Initialize local point coordinates in element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Line3::Line3</field>
    <field name="args">(const Side *sd)</field>
    <field name="url">classOFELI_1_1Line3.html#a55bcc26c9827bb23af6c4a32d49541ce</field>
    <field name="keywords">Line3 OFELI::Line3::Line3 Line3</field>
    <field name="text">Constructor for a side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Line3::getLocalPoint</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Line3.html#a6ab78ad967840f6af5e0c4d47d30f5ef</field>
    <field name="keywords">getLocalPoint OFELI::Line3::getLocalPoint Line3</field>
    <field name="text">Return actual coordinates of localized point</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Line3::~Line3</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Line3.html#a8368f9346c9049f10c95da3388a0196d</field>
    <field name="keywords">OFELI::Line3::~Line3 Line3</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Line3::DSh</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Line3.html#a943239647421c6a9f3c4ed5e17af843b</field>
    <field name="keywords">DSh OFELI::Line3::DSh Line3</field>
    <field name="text">Return partial derivatives of shape functions of element nodes LocalVect instance of partial derivatives of shape functions e.g dsh(i) x dsh(i) y are partial derivatives of the i th shape function The local point at which the derivatives are computed must be chosen before by using the member function setLocal</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Line3::Line3</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Line3.html#a99475466e181befa6c9945ad6f7b69c3</field>
    <field name="keywords">Line3 OFELI::Line3::Line3 Line3</field>
    <field name="text">Default Constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Line3::Line3</field>
    <field name="args">(const Element *el)</field>
    <field name="url">classOFELI_1_1Line3.html#aa0e7b53b4e54bc1a6f300551cb2e43b1</field>
    <field name="keywords">Line3 OFELI::Line3::Line3 Line3</field>
    <field name="text">Constructor for an element</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::LinearPDE1D</field>
    <field name="url">classOFELI_1_1LinearPDE1D.html</field>
    <field name="keywords">LinearPDE1D</field>
    <field name="text">Solves a generic linear PDE in 1 D using 2 Node line finite elements Solves a generic linear PDE in 3 D using 4 Node tetrahedral finite elements This class handles the scalar linear equation a d^2u/dt^2 b du/dt d/dx c du/dx d du/dx eu f in a given interval with Dirichlet and/or Neumann boundary conditions The coefficients a b c d e can be constants or given functions of space and time Numerical solution uses the P1 finite element method for space discretization For transient time-dependent problems the class TimeStepping must be used For eigenproblems the class EigenProblemSolver must be used This class handles the scalar linear equation a d^2u/dt^2 b du/dt div(c Grad u) d.Grad u eu f in a given interval with Dirichlet and/or Neumann boundary conditions The coefficients a b c d e can be constants or given functions of space and time Numerical solution uses the P1 finite element method for space discretization For transient time-dependent problems the class TimeStepping must be used For eigenproblems the class EigenProblemSolver must be used</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearPDE1D::Flux</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1LinearPDE1D.html#a3a400c339dbb1f35a8179cbc99ed2f29</field>
    <field name="keywords">Flux OFELI::LinearPDE1D::Flux LinearPDE1D</field>
    <field name="text">Return constant heat flux in element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearPDE1D::Mat_00</field>
    <field name="args">(real_t coef=1.0)</field>
    <field name="url">classOFELI_1_1LinearPDE1D.html#a4e8abb18bb5930eff5c23a420259a964</field>
    <field name="keywords">Mat_00 OFELI::LinearPDE1D::Mat_00 LinearPDE1D</field>
    <field name="text">Add 0 th order term in time and space to left-hand side coef coef Coefficient to multiply by added term default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearPDE1D::LinearPDE1D</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1LinearPDE1D.html#a5a8817bfa69078d4818ff43545b822b3</field>
    <field name="keywords">LinearPDE1D OFELI::LinearPDE1D::LinearPDE1D LinearPDE1D</field>
    <field name="text">Constructor using mesh instance ms Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearPDE1D::Mat_02</field>
    <field name="args">(real_t coef=1.0)</field>
    <field name="url">classOFELI_1_1LinearPDE1D.html#a756f5281194ff251a1075dab291d3242</field>
    <field name="keywords">Mat_02 OFELI::LinearPDE1D::Mat_02 LinearPDE1D</field>
    <field name="text">Add 0 th order term in time 2 nd in space to left-hand side coef Coefficient to multiply by added term default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearPDE1D::BodyRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1LinearPDE1D.html#aa6d7e87afcbeea4276573c9576d8d6ca</field>
    <field name="keywords">BodyRHS OFELI::LinearPDE1D::BodyRHS LinearPDE1D</field>
    <field name="text">Add body right-hand side term to right hand side f Vector containing source at nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearPDE1D::LinearPDE1D</field>
    <field name="args">(Mesh &amp;ms, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1LinearPDE1D.html#ab86c776403956cdff67202e57c791013</field>
    <field name="keywords">LinearPDE1D OFELI::LinearPDE1D::LinearPDE1D LinearPDE1D</field>
    <field name="text">Constructor using mesh instance and solution vector ms Mesh instance u Vect instance containing solution vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearPDE1D::Mat_20</field>
    <field name="args">(real_t coef=1.0)</field>
    <field name="url">classOFELI_1_1LinearPDE1D.html#ae50d5589e5602e03884550b66e662838</field>
    <field name="keywords">Mat_20 OFELI::LinearPDE1D::Mat_20 LinearPDE1D</field>
    <field name="text">Add 2 nd order term in time 0 th in space to left-hand side coef Coefficient to multiply by added term default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearPDE1D::LinearPDE1D</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LinearPDE1D.html#ae715f86482fc2fc92789eb8cf26ffe30</field>
    <field name="keywords">LinearPDE1D OFELI::LinearPDE1D::LinearPDE1D LinearPDE1D</field>
    <field name="text">Default Constructor Constructs an empty equation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearPDE1D::~LinearPDE1D</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LinearPDE1D.html#aea289d5695a3a65a563478b4368cfd55</field>
    <field name="keywords">OFELI::LinearPDE1D::~LinearPDE1D LinearPDE1D</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearPDE1D::Mat_01</field>
    <field name="args">(real_t coef=1.0)</field>
    <field name="url">classOFELI_1_1LinearPDE1D.html#af38fd39f579fbe0e384ded19158335e5</field>
    <field name="keywords">Mat_01 OFELI::LinearPDE1D::Mat_01 LinearPDE1D</field>
    <field name="text">Add Oth order term in time 1 st in space to left-hand side coef Coefficient to multiply by added term default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearPDE1D::Mat_10</field>
    <field name="args">(real_t coef=1.0)</field>
    <field name="url">classOFELI_1_1LinearPDE1D.html#af65bbe8759394b7dfef8632497d58cc7</field>
    <field name="keywords">Mat_10 OFELI::LinearPDE1D::Mat_10 LinearPDE1D</field>
    <field name="text">Add 1 st order term in time 0 th in space to left-hand side coef Coefficient to multiply by added term default 1</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::LinearPDE2D</field>
    <field name="url">classOFELI_1_1LinearPDE2D.html</field>
    <field name="keywords">LinearPDE2D</field>
    <field name="text">Solves a generic linear PDE in 2 D using 3 Node triangular finite elements This class handles the scalar linear equation a d^2u/dt^2 b du/dt div(c Grad u) d.Grad u eu f in a given interval with Dirichlet and/or Neumann boundary conditions The coefficients a b c d e can be constants or given functions of space and time Numerical solution uses the P1 finite element method for space discretization For transient time-dependent problems the class TimeStepping must be used For eigenproblems the class EigenProblemSolver must be used</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearPDE2D::LinearPDE2D</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1LinearPDE2D.html#a14db534bb6c348e295e4650d717ae11e</field>
    <field name="keywords">LinearPDE2D OFELI::LinearPDE2D::LinearPDE2D LinearPDE2D</field>
    <field name="text">Constructor using Mesh data ms Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearPDE2D::Grad</field>
    <field name="args">(Vect&lt; Point&lt; real_t &gt; &gt; &amp;g)</field>
    <field name="url">classOFELI_1_1LinearPDE2D.html#a190841f9068f20d5cd91c05451f5d06d</field>
    <field name="keywords">Grad OFELI::LinearPDE2D::Grad LinearPDE2D</field>
    <field name="text">Compute gradient of solution g Elementwise vector containing gradient of solution</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearPDE2D::LinearPDE2D</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LinearPDE2D.html#a439b37c1d0c0d0e8bc620f9f464a1c29</field>
    <field name="keywords">LinearPDE2D OFELI::LinearPDE2D::LinearPDE2D LinearPDE2D</field>
    <field name="text">Default Constructor Constructs an empty equation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearPDE2D::Flux</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1LinearPDE2D.html#a4d57d6f9709935f100f3aae3bb7bc508</field>
    <field name="keywords">Flux OFELI::LinearPDE2D::Flux LinearPDE2D</field>
    <field name="text">Return constant heat flux in element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearPDE2D::Mat_00</field>
    <field name="args">(real_t coef=1.0)</field>
    <field name="url">classOFELI_1_1LinearPDE2D.html#a4e8abb18bb5930eff5c23a420259a964</field>
    <field name="keywords">Mat_00 OFELI::LinearPDE2D::Mat_00 LinearPDE2D</field>
    <field name="text">Add 0 th order term in time and space to left-hand side coef coef Coefficient to multiply by added term default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearPDE2D::Mat_02</field>
    <field name="args">(real_t coef=1.0)</field>
    <field name="url">classOFELI_1_1LinearPDE2D.html#a756f5281194ff251a1075dab291d3242</field>
    <field name="keywords">Mat_02 OFELI::LinearPDE2D::Mat_02 LinearPDE2D</field>
    <field name="text">Add 0 th order term in time 2 nd in space to left-hand side coef Coefficient to multiply by added term default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearPDE2D::~LinearPDE2D</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LinearPDE2D.html#a78822d225d32260c7871a92291786ada</field>
    <field name="keywords">OFELI::LinearPDE2D::~LinearPDE2D LinearPDE2D</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearPDE2D::BoundaryRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1LinearPDE2D.html#a9f47743e35b40517037f6c007312461c</field>
    <field name="keywords">BoundaryRHS OFELI::LinearPDE2D::BoundaryRHS LinearPDE2D</field>
    <field name="text">Add boundary right-hand side term to right hand side after multiplying it by coefficient coef f Vector containing source at nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearPDE2D::LinearPDE2D</field>
    <field name="args">(Mesh &amp;ms, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1LinearPDE2D.html#aa27b8123dbab4014a5b6411a07ecd66c</field>
    <field name="keywords">LinearPDE2D OFELI::LinearPDE2D::LinearPDE2D LinearPDE2D</field>
    <field name="text">Constructor using Mesh and initial condition ms Mesh instance u Vect instance containing initial solution</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearPDE2D::BodyRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1LinearPDE2D.html#aa6d7e87afcbeea4276573c9576d8d6ca</field>
    <field name="keywords">BodyRHS OFELI::LinearPDE2D::BodyRHS LinearPDE2D</field>
    <field name="text">Add body right-hand side term to right hand side f Vector containing source at nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearPDE2D::Mat_20</field>
    <field name="args">(real_t coef=1.0)</field>
    <field name="url">classOFELI_1_1LinearPDE2D.html#ae50d5589e5602e03884550b66e662838</field>
    <field name="keywords">Mat_20 OFELI::LinearPDE2D::Mat_20 LinearPDE2D</field>
    <field name="text">Add 2 nd order term in time 0 th in space to left-hand side coef Coefficient to multiply by added term default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearPDE2D::BodyRHS</field>
    <field name="args">(real_t f)</field>
    <field name="url">classOFELI_1_1LinearPDE2D.html#af3452fd9f607e1efb0b915e90faea46f</field>
    <field name="keywords">BodyRHS OFELI::LinearPDE2D::BodyRHS LinearPDE2D</field>
    <field name="text">Add body right-hand side term to right hand side Case where the body right-hand side is piecewise constant f Value of thermal source Constant in element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearPDE2D::Mat_01</field>
    <field name="args">(real_t coef=1.0)</field>
    <field name="url">classOFELI_1_1LinearPDE2D.html#af38fd39f579fbe0e384ded19158335e5</field>
    <field name="keywords">Mat_01 OFELI::LinearPDE2D::Mat_01 LinearPDE2D</field>
    <field name="text">Add Oth order term in time 1 st in space to left-hand side coef Coefficient to multiply by added term default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearPDE2D::Grad</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;u) const</field>
    <field name="url">classOFELI_1_1LinearPDE2D.html#af45bbe0442fb57521bf5a98dd628e3a5</field>
    <field name="keywords">Grad OFELI::LinearPDE2D::Grad LinearPDE2D</field>
    <field name="text">Return gradient of a vector in element u Global vector for which gradient is computed Vector u has as size the total number of nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearPDE2D::Mat_10</field>
    <field name="args">(real_t coef=1.0)</field>
    <field name="url">classOFELI_1_1LinearPDE2D.html#af65bbe8759394b7dfef8632497d58cc7</field>
    <field name="keywords">Mat_10 OFELI::LinearPDE2D::Mat_10 LinearPDE2D</field>
    <field name="text">Add 1 st order term in time 0 th in space to left-hand side coef Coefficient to multiply by added term default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearPDE2D::BoundaryRHS</field>
    <field name="args">(real_t flux)</field>
    <field name="url">classOFELI_1_1LinearPDE2D.html#afc20edadf93d2135ee9873e1bd7deb4c</field>
    <field name="keywords">BoundaryRHS OFELI::LinearPDE2D::BoundaryRHS LinearPDE2D</field>
    <field name="text">Add boundary right-hand side flux to right hand side flux Vector containing source at side nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearPDE2D::setInput</field>
    <field name="args">(EType opt, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1LinearPDE2D.html#affbdc0fae478891f2b9f63607004026f</field>
    <field name="keywords">setInput OFELI::LinearPDE2D::setInput LinearPDE2D</field>
    <field name="text">Set equation input data opt Parameter to select type of input enumerated values INITIAL_FIELD Initial temperature BOUNDARY_CONDITION_DATA Boundary condition Dirichlet SOURCE_DATA Heat source FLUX_DATA Heat flux Neumann boundary condition u Vector containing input data</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::LinearSolver</field>
    <field name="url">classOFELI_1_1LinearSolver.html</field>
    <field name="keywords">LinearSolver</field>
    <field name="text">Class to solve systems of linear equations by direct or iterative methods Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearSolver::setMaxIter</field>
    <field name="args">(int m)</field>
    <field name="url">classOFELI_1_1LinearSolver.html#a041af43820d8499c23302b9f8907b45e</field>
    <field name="keywords">setMaxIter OFELI::LinearSolver::setMaxIter LinearSolver</field>
    <field name="text">Set Maximum number of iterations Default value is 1 0 0 0</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearSolver::setSolver</field>
    <field name="args">(Iteration s, Preconditioner p=DIAG_PREC)</field>
    <field name="url">classOFELI_1_1LinearSolver.html#a0ce77dad890759d85412157e25b3afa4</field>
    <field name="keywords">setSolver OFELI::LinearSolver::setSolver LinearSolver</field>
    <field name="text">Set solver and preconditioner s Solver identification parameter To be chosen in the enumeration variable Iteration DIRECT_SOLVER CG_SOLVER CGS_SOLVER BICG_SOLVER BICG_STAB_SOLVER GMRES_SOLVER QMR_SOLVER p Preconditioner identification parameter By default the diagonal preconditioner is used To be chosen in the enumeration variable Preconditioner IDENT_PREC DIAG_PREC SSOR_PREC ILU_PREC Default ILU_PREC The argument p has no effect if the solver is DIRECT_SOLVER</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearSolver::set</field>
    <field name="args">(SpMatrix&lt; real_t &gt; &amp;A, const Vect&lt; real_t &gt; &amp;b, Vect&lt; real_t &gt; &amp;x)</field>
    <field name="url">classOFELI_1_1LinearSolver.html#a123b92215a30f2a96fcf276d7c784560</field>
    <field name="keywords">set OFELI::LinearSolver::set LinearSolver</field>
    <field name="text">Set matrix right-hand side and initial guess A Reference to matrix as a SpMatrix instance b Vector containing right-hand side x Vector containing initial guess on input and solution on output</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearSolver::LinearSolver</field>
    <field name="args">(SkMatrix&lt; real_t &gt; &amp;A, const Vect&lt; real_t &gt; &amp;b, Vect&lt; real_t &gt; &amp;x)</field>
    <field name="url">classOFELI_1_1LinearSolver.html#a23ee0c3b96b4fd8d37d1168269c8bcb3</field>
    <field name="keywords">LinearSolver OFELI::LinearSolver::LinearSolver LinearSolver</field>
    <field name="text">Constructor using skyline-stored matrix right-hand side and solution vector A SkMatrix instance that contains matrix b Vect instance that contains the right-hand side x Vect instance that contains initial guess on input and solution on output</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearSolver::LinearSolver</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LinearSolver.html#a2ffc285126a28fba1fa2d1c681f261cf</field>
    <field name="keywords">LinearSolver OFELI::LinearSolver::LinearSolver LinearSolver</field>
    <field name="text">Default Constructor Initializes default parameters and pointers to 0</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearSolver::~LinearSolver</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LinearSolver.html#a4377168b38ead79c941f43a676aef1a6</field>
    <field name="keywords">OFELI::LinearSolver::~LinearSolver LinearSolver</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearSolver::LinearSolver</field>
    <field name="args">(TrMatrix&lt; real_t &gt; &amp;A, const Vect&lt; real_t &gt; &amp;b, Vect&lt; real_t &gt; &amp;x)</field>
    <field name="url">classOFELI_1_1LinearSolver.html#a4a888d91e883f61e00688dbeeb563090</field>
    <field name="keywords">LinearSolver OFELI::LinearSolver::LinearSolver LinearSolver</field>
    <field name="text">Constructor using a tridiagonal matrix right-hand side and solution vector A TrMatrix instance that contains matrix b Vect instance that contains the right-hand side x Vect instance that contains initial guess on input and solution on output</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearSolver::setRHS</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;b)</field>
    <field name="url">classOFELI_1_1LinearSolver.html#a4dcc6c83ae5f9c7a958e9ba081f8eeb6</field>
    <field name="keywords">setRHS OFELI::LinearSolver::setRHS LinearSolver</field>
    <field name="text">Set right-hand side vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearSolver::LinearSolver</field>
    <field name="args">(DMatrix&lt; real_t &gt; &amp;A, const Vect&lt; real_t &gt; &amp;b, Vect&lt; real_t &gt; &amp;x)</field>
    <field name="url">classOFELI_1_1LinearSolver.html#a4fc7a7277d77fa6864579f93f24a5452</field>
    <field name="keywords">LinearSolver OFELI::LinearSolver::LinearSolver LinearSolver</field>
    <field name="text">Constructor using a dense matrix right-hand side and solution vector A DMatrix instance that contains matrix b Vect instance that contains the right-hand side x Vect instance that contains initial guess on input and solution on output</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearSolver::setNoFact</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LinearSolver.html#a524aa7001c68e0d79027f735f20e34de</field>
    <field name="keywords">setNoFact OFELI::LinearSolver::setNoFact LinearSolver</field>
    <field name="text">Do not factorize matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearSolver::LinearSolver</field>
    <field name="args">(SpMatrix&lt; real_t &gt; &amp;A, const Vect&lt; real_t &gt; &amp;b, Vect&lt; real_t &gt; &amp;x)</field>
    <field name="url">classOFELI_1_1LinearSolver.html#a667de1344de8be63f691d7f4dbee8552</field>
    <field name="keywords">LinearSolver OFELI::LinearSolver::LinearSolver LinearSolver</field>
    <field name="text">Constructor using matrix right-hand side and solution vector A Reference to instance of class SpMatrix b Vect instance that contains the right-hand side x Vect instance that contains initial guess on input and solution on output</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearSolver::setSolution</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;x)</field>
    <field name="url">classOFELI_1_1LinearSolver.html#a68b4fe7e02423a8303b1f29f59d68f6d</field>
    <field name="keywords">setSolution OFELI::LinearSolver::setSolution LinearSolver</field>
    <field name="text">Set solution vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearSolver::setMatrix</field>
    <field name="args">(SpMatrix&lt; real_t &gt; &amp;A)</field>
    <field name="url">classOFELI_1_1LinearSolver.html#a699a6a90e87a5d43862cf1d697694910</field>
    <field name="keywords">setMatrix OFELI::LinearSolver::setMatrix LinearSolver</field>
    <field name="text">Set matrix in the case of a pointer to matrix A Pointer to abstract Matrix class</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearSolver::solve</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LinearSolver.html#a7ca154b901ce7bb4d4ee1e2cdf7f8a85</field>
    <field name="keywords">solve OFELI::LinearSolver::solve LinearSolver</field>
    <field name="text">Solve equations all arguments must have been given by other member functions Solver and preconditioner parameters must have been set by function setSolver Otherwise default values are set</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearSolver::getPreconditioner</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1LinearSolver.html#a854df1c2a7677feb0c8810b564262c16</field>
    <field name="keywords">getPreconditioner OFELI::LinearSolver::getPreconditioner LinearSolver</field>
    <field name="text">Return solver preconditioner</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearSolver::solve</field>
    <field name="args">(SpMatrix&lt; real_t &gt; &amp;A, const Vect&lt; real_t &gt; &amp;b, Vect&lt; real_t &gt; &amp;x, Iteration s, Preconditioner p=DIAG_PREC)</field>
    <field name="url">classOFELI_1_1LinearSolver.html#a871aab66bc28aff405a88d5073679060</field>
    <field name="keywords">solve OFELI::LinearSolver::solve LinearSolver</field>
    <field name="text">Solve equations using system data prescribed solver and preconditioner A Reference to matrix as a SpMatrix instance b Vector containing right-hand side x Vector containing initial guess on input and solution on output s Solver identification parameter To be chosen in the enumeration variable Iteration DIRECT_SOLVER CG_SOLVER CGS_SOLVER BICG_SOLVER BICG_STAB_SOLVER GMRES_SOLVER QMR_SOLVER Default CGS_SOLVER p Preconditioner identification parameter To be chosen in the enumeration variable Preconditioner IDENT_PREC DIAG_PREC SSOR_PREC ILU_PREC DILU_PREC Default DIAG_PREC The argument p has no effect if the solver is DIRECT_SOLVER If the library eigen is used only the preconditioners IDENT_PREC DIAG_PREC and ILU_PREC are available</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearSolver::LinearSolver</field>
    <field name="args">(SkMatrix&lt; real_t &gt; &amp;A, Vect&lt; real_t &gt; &amp;b, Vect&lt; real_t &gt; &amp;x)</field>
    <field name="url">classOFELI_1_1LinearSolver.html#a8b0b8945edf33ef2604e1cc8b272a0b8</field>
    <field name="keywords">LinearSolver OFELI::LinearSolver::LinearSolver LinearSolver</field>
    <field name="text">Constructor using matrix right-hand side A SkMatrix instance that contains matrix b Vect instance that contains the right-hand side x Vect instance that contains the initial guess on input and solution on output</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearSolver::LinearSolver</field>
    <field name="args">(int max_it, real_t tolerance)</field>
    <field name="url">classOFELI_1_1LinearSolver.html#aa05c2275c2c8ce808d096b6692c3435d</field>
    <field name="keywords">LinearSolver OFELI::LinearSolver::LinearSolver LinearSolver</field>
    <field name="text">Constructor with iteration parameters max_it Maximal number of iterations tolerance Tolerance for convergence measured in relative weighted 2 Norm in input effective discrepancy in output</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearSolver::setMatrix</field>
    <field name="args">(SkMatrix&lt; real_t &gt; &amp;A)</field>
    <field name="url">classOFELI_1_1LinearSolver.html#aa81ed8f868e5119ab178b961fbae77ea</field>
    <field name="keywords">setMatrix OFELI::LinearSolver::setMatrix LinearSolver</field>
    <field name="text">Set matrix in the case of a skyline matrix A Matrix as instance of class SkMatrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearSolver::LinearSolver</field>
    <field name="args">(DSMatrix&lt; real_t &gt; &amp;A, const Vect&lt; real_t &gt; &amp;b, Vect&lt; real_t &gt; &amp;x)</field>
    <field name="url">classOFELI_1_1LinearSolver.html#ab115627ef927c548cfed5de1cf4b1af1</field>
    <field name="keywords">LinearSolver OFELI::LinearSolver::LinearSolver LinearSolver</field>
    <field name="text">Constructor using a dense symmetric matrix right-hand side and solution vector A DSMatrix instance that contains matrix b Vect instance that contains the right-hand side x Vect instance that contains initial guess on input and solution on output</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearSolver::setTolerance</field>
    <field name="args">(real_t tol)</field>
    <field name="url">classOFELI_1_1LinearSolver.html#acb146173a62d5f456421cb22265a536f</field>
    <field name="keywords">setTolerance OFELI::LinearSolver::setTolerance LinearSolver</field>
    <field name="text">Set tolerance value</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearSolver::LinearSolver</field>
    <field name="args">(SkSMatrix&lt; real_t &gt; &amp;A, const Vect&lt; real_t &gt; &amp;b, Vect&lt; real_t &gt; &amp;x)</field>
    <field name="url">classOFELI_1_1LinearSolver.html#ad14f342a5a142ffa5299bc8f4dd9237c</field>
    <field name="keywords">LinearSolver OFELI::LinearSolver::LinearSolver LinearSolver</field>
    <field name="text">Constructor using skyline-stored symmetric matrix right-hand side and solution vector A SkMatrix instance that contains matrix b Vect instance that contains the right-hand side x Vect instance that contains initial guess on input and solution on output</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearSolver::getNbIter</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1LinearSolver.html#ad427a5facfbd7f505f7dd7ff9d512c20</field>
    <field name="keywords">getNbIter OFELI::LinearSolver::getNbIter LinearSolver</field>
    <field name="text">Get number of performed iterations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearSolver::setFact</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LinearSolver.html#ae221a5369220070666177b57daf4cff2</field>
    <field name="keywords">setFact OFELI::LinearSolver::setFact LinearSolver</field>
    <field name="text">Factorize matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearSolver::solve</field>
    <field name="args">(Iteration s, Preconditioner p=DIAG_PREC)</field>
    <field name="url">classOFELI_1_1LinearSolver.html#aeccb35e1c449b861305d1765f86395f4</field>
    <field name="keywords">solve OFELI::LinearSolver::solve LinearSolver</field>
    <field name="text">Solve equations using prescribed solver and preconditioner s Solver identification parameter To be chosen in the enumeration variable Iteration DIRECT_SOLVER CG_SOLVER CGS_SOLVER BICG_SOLVER BICG_STAB_SOLVER GMRES_SOLVER QMR_SOLVER Default CGS_SOLVER p Preconditioner identification parameter To be chosen in the enumeration variable Preconditioner IDENT_PREC DIAG_PREC SSOR_PREC DILU_PREC ILU_PREC Default DIAG_PREC The argument p has no effect if the solver is DIRECT_SOLVER</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearSolver::setMatrix</field>
    <field name="args">(Matrix&lt; real_t &gt; *A)</field>
    <field name="url">classOFELI_1_1LinearSolver.html#af43f6ce1527384dce2dc2c78e401ad69</field>
    <field name="keywords">setMatrix OFELI::LinearSolver::setMatrix LinearSolver</field>
    <field name="text">Set matrix in the case of a pointer to Matrix A Pointer to abstract Matrix class</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearSolver::getSolver</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1LinearSolver.html#af64cf8cc252f4992a8e21b8e96041283</field>
    <field name="keywords">getSolver OFELI::LinearSolver::getSolver LinearSolver</field>
    <field name="text">Return solver code</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LinearSolver::LinearSolver</field>
    <field name="args">(BMatrix&lt; real_t &gt; &amp;A, const Vect&lt; real_t &gt; &amp;b, Vect&lt; real_t &gt; &amp;x)</field>
    <field name="url">classOFELI_1_1LinearSolver.html#afe536027cf7d1709627393d06a4367f0</field>
    <field name="keywords">LinearSolver OFELI::LinearSolver::LinearSolver LinearSolver</field>
    <field name="text">Constructor using a banded matrix right-hand side and solution vector A BMatrix instance that contains matrix b Vect instance that contains the right-hand side x Vect instance that contains initial guess on input and solution on output</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::LocalMatrix</field>
    <field name="url">classOFELI_1_1LocalMatrix.html</field>
    <field name="keywords">LocalMatrix LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Handles small size matrices like element matrices with a priori known size The template class LocalMatrix treats small size matrices Typically this class is recommended to store element and side arrays Internally no dynamic storage is used T_ Data type double float complex&lt;double&gt; NR_ number of rows of matrix NC_ number of columns of matrix Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::solve</field>
    <field name="args">(LocalVect&lt; T_, NR_ &gt; &amp;b)</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#a0773eac6bcb89403499abd73077d88e9</field>
    <field name="keywords">solve OFELI::LocalMatrix::solve LocalMatrix&lt; T_, NR_, NC_ &gt; solve OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::solve LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Forward and backsubstitute to solve a linear system b Right-hand side in input and solution vector in output 0 Solution was performed normally n n th pivot is zero Matrix must have been factorized at first</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::LocalMatrix</field>
    <field name="args">(const LocalMatrix&lt; T_, NR_, NC_ &gt; &amp;m)</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#a0a06da48de740f65eae20ace93eb04b7</field>
    <field name="keywords">LocalMatrix OFELI::LocalMatrix::LocalMatrix LocalMatrix&lt; T_, NR_, NC_ &gt; LocalMatrix OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::LocalMatrix LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Copy constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::operator*=</field>
    <field name="args">(const T_ &amp;x)</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#a1e0b3da6677f169d7828870671d1656d</field>
    <field name="keywords">operator*= OFELI::LocalMatrix::operator*= LocalMatrix&lt; T_, NR_, NC_ &gt; operator*= OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::operator*= LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Operator Multiply matrix entries by constant x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::Factor</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#a1e2d4ab2fe26e23da6138707672c9b2e</field>
    <field name="keywords">Factor OFELI::LocalMatrix::Factor LocalMatrix&lt; T_, NR_, NC_ &gt; Factor OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::Factor LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Factorize matrix Performs a LU factorization 0 Factorization has ended normally n n th pivot was zero</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::MultAdd</field>
    <field name="args">(const LocalVect&lt; T_, NC_ &gt; &amp;x, LocalVect&lt; T_, NR_ &gt; &amp;y)</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#a2a8270d9a09399bd385342ffb46de98f</field>
    <field name="keywords">MultAdd OFELI::LocalMatrix::MultAdd LocalMatrix&lt; T_, NR_, NC_ &gt; MultAdd OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::MultAdd LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Multiply matrix by vector and add result to vector x Vector to multiply matrix by y Resulting vector y a x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::get</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#a5aeba722bfc5e1d62b0e76fa41cfd15c</field>
    <field name="keywords">get OFELI::LocalMatrix::get LocalMatrix&lt; T_, NR_, NC_ &gt; get OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::get LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Return pointer to matrix as a C-array</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::operator+=</field>
    <field name="args">(const T_ &amp;x)</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#a64b783f175ef1eaa5f4a6c39a006d5d8</field>
    <field name="keywords">operator+= OFELI::LocalMatrix::operator+= LocalMatrix&lt; T_, NR_, NC_ &gt; operator+= OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::operator+= LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Operator Add constant x to current matrix entries</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::Localize</field>
    <field name="args">(Element *el, const SkMatrix&lt; T_ &gt; &amp;a)</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#a6ce75277fd6ac735ef98c777ab103b83</field>
    <field name="keywords">Localize OFELI::LocalMatrix::Localize LocalMatrix&lt; T_, NR_, NC_ &gt; Localize OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::Localize LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Initialize matrix as element matrix from global SkMatrix el Pointer to Element a Global matrix as instance of class SkMatrix This function is called by its corresponding constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::operator=</field>
    <field name="args">(const T_ &amp;x)</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#a71ff0b027b489f6ce3f0b5fa55cbde80</field>
    <field name="keywords">operator= OFELI::LocalMatrix::operator= LocalMatrix&lt; T_, NR_, NC_ &gt; operator= OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::operator= LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Operator Assign matrix to identity times x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::operator()</field>
    <field name="args">(size_t i, size_t j) const</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#a78adc6c13ad0f1d1dedacffe0e80ce63</field>
    <field name="keywords">operator() OFELI::LocalMatrix::operator() LocalMatrix&lt; T_, NR_, NC_ &gt; operator() OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::operator() LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Operator Constant version Returns entry at row i and column j</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::operator=</field>
    <field name="args">(const LocalMatrix&lt; T_, NR_, NC_ &gt; &amp;m)</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#a7f5d4ca9e69a72d7f5c26a6c39f01c63</field>
    <field name="keywords">operator= OFELI::LocalMatrix::operator= LocalMatrix&lt; T_, NR_, NC_ &gt; operator= OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::operator= LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Operator Copy instance m into current instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::operator-=</field>
    <field name="args">(const T_ &amp;x)</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#a803c8081f07d8e208e87fc5863afe1f7</field>
    <field name="keywords">operator-= OFELI::LocalMatrix::operator-= LocalMatrix&lt; T_, NR_, NC_ &gt; operator-= OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::operator-= LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Operator Subtract x from current matrix entries</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::operator+=</field>
    <field name="args">(const LocalMatrix&lt; T_, NR_, NC_ &gt; &amp;m)</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#a8a7988b666cea5c5b7fac83b59e02815</field>
    <field name="keywords">operator+= OFELI::LocalMatrix::operator+= LocalMatrix&lt; T_, NR_, NC_ &gt; operator+= OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::operator+= LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Operator Add m to current matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::Localize</field>
    <field name="args">(Element *el, const SpMatrix&lt; T_ &gt; &amp;a)</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#a973308a6a705de35ca267f14425b5065</field>
    <field name="keywords">Localize OFELI::LocalMatrix::Localize LocalMatrix&lt; T_, NR_, NC_ &gt; Localize OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::Localize LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Initialize matrix as element matrix from global SpMatrix el Pointer to Element a Global matrix as instance of class SpMatrix This function is called by its corresponding constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::LocalMatrix</field>
    <field name="args">(Element *el, const SpMatrix&lt; T_ &gt; &amp;a)</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#aa34f7e3779ad9b899f62dcfac341641f</field>
    <field name="keywords">LocalMatrix OFELI::LocalMatrix::LocalMatrix LocalMatrix&lt; T_, NR_, NC_ &gt; LocalMatrix OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::LocalMatrix LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Constructor of a local matrix associated to element from a SpMatrix el Pointer to Element a Global matrix as instance of class SpMatrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::Localize</field>
    <field name="args">(Element *el, const SkSMatrix&lt; T_ &gt; &amp;a)</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#aa3f5f8b8cd842744892bdf60da1ffaba</field>
    <field name="keywords">Localize OFELI::LocalMatrix::Localize LocalMatrix&lt; T_, NR_, NC_ &gt; Localize OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::Localize LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Initialize matrix as element matrix from global SkSMatrix el Pointer to Element a Global matrix as instance of class SkSMatrix This function is called by its corresponding constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::operator*</field>
    <field name="args">(LocalVect&lt; T_, NC_ &gt; &amp;x)</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#aa795b9da1a9645bad07f16ba92b1c96f</field>
    <field name="keywords">operator* OFELI::LocalMatrix::operator* LocalMatrix&lt; T_, NR_, NC_ &gt; operator* OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::operator* LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Operator Return a Vect instance as product of current matrix by vector x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::operator()</field>
    <field name="args">(size_t i, size_t j)</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#aacbbe150d69a1246cb76f24419cae7ac</field>
    <field name="keywords">operator() OFELI::LocalMatrix::operator() LocalMatrix&lt; T_, NR_, NC_ &gt; operator() OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::operator() LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Operator Non constant version Returns entry at row i and column j</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::Mult</field>
    <field name="args">(const LocalVect&lt; T_, NC_ &gt; &amp;x, LocalVect&lt; T_, NR_ &gt; &amp;y)</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#aaea17e2a1f8ab47100e2e74cd1829ecb</field>
    <field name="keywords">Mult OFELI::LocalMatrix::Mult LocalMatrix&lt; T_, NR_, NC_ &gt; Mult OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::Mult LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Multiply matrix by vector x Vector to multiply matrix by y Resulting vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::LocalMatrix</field>
    <field name="args">(Element *el, const SkMatrix&lt; T_ &gt; &amp;a)</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#abb9d1f75f5c13663fd12b100e8ed28ae</field>
    <field name="keywords">LocalMatrix OFELI::LocalMatrix::LocalMatrix LocalMatrix&lt; T_, NR_, NC_ &gt; LocalMatrix OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::LocalMatrix LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Constructor of a local matrix associated to element from a SkMatrix el Pointer to Element a Global matrix as instance of class SkMatrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::operator-=</field>
    <field name="args">(const LocalMatrix&lt; T_, NR_, NC_ &gt; &amp;m)</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#abd3f14581e3f244647c2afc1b6b801df</field>
    <field name="keywords">operator-= OFELI::LocalMatrix::operator-= LocalMatrix&lt; T_, NR_, NC_ &gt; operator-= OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::operator-= LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Operator Subtract m from current matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::getInnerProduct</field>
    <field name="args">(const LocalVect&lt; T_, NC_ &gt; &amp;x, const LocalVect&lt; T_, NR_ &gt; &amp;y)</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#abde3760a500a9c82087a5b03240a7b87</field>
    <field name="keywords">getInnerProduct OFELI::LocalMatrix::getInnerProduct LocalMatrix&lt; T_, NR_, NC_ &gt; getInnerProduct OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::getInnerProduct LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Calculate inner product witrh respect to matrix Returns the product x T Ay x Left vector y Right vector Resulting product</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::Invert</field>
    <field name="args">(LocalMatrix&lt; T_, NR_, NC_ &gt; &amp;A)</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#ac58eba05d5c019b53fe471dd18062164</field>
    <field name="keywords">Invert OFELI::LocalMatrix::Invert LocalMatrix&lt; T_, NR_, NC_ &gt; Invert OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::Invert LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Calculate inverse of matrix A Inverse of matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::clear</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#ac8bb3912a3ce86b15842e79d0b421204</field>
    <field name="keywords">clear OFELI::LocalMatrix::clear LocalMatrix&lt; T_, NR_, NC_ &gt; clear OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::clear LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Clear matrix Set all matrix entries to zero</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::Symmetrize</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#ad1dc6c225dae96f6c5f8f91e5462c645</field>
    <field name="keywords">Symmetrize OFELI::LocalMatrix::Symmetrize LocalMatrix&lt; T_, NR_, NC_ &gt; Symmetrize OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::Symmetrize LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Symmetrize matrix Fill upper triangle to form a symmetric matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::LocalMatrix</field>
    <field name="args">(Element *el, const SkSMatrix&lt; T_ &gt; &amp;a)</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#ad2cb938de19b7469fa59e568cb282a47</field>
    <field name="keywords">LocalMatrix OFELI::LocalMatrix::LocalMatrix LocalMatrix&lt; T_, NR_, NC_ &gt; LocalMatrix OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::LocalMatrix LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Constructor of a local matrix associated to element from a SkSMatrix el Pointer to Element a Global matrix as instance of class SkSMatrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::MultAddScal</field>
    <field name="args">(const T_ &amp;a, const LocalVect&lt; T_, NC_ &gt; &amp;x, LocalVect&lt; T_, NR_ &gt; &amp;y)</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#ad886d306aa647b0efb0f4d0ea822db5b</field>
    <field name="keywords">MultAddScal OFELI::LocalMatrix::MultAddScal LocalMatrix&lt; T_, NR_, NC_ &gt; MultAddScal OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::MultAddScal LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Multiply matrix by scaled vector and add result to vector a Constant to premultiply by vector x x Scaled vector to multiply matrix by y Resulting vector y a x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::operator/=</field>
    <field name="args">(const T_ &amp;x)</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#ae42d77aa61c214691a42a2a0b1f9743d</field>
    <field name="keywords">operator/= OFELI::LocalMatrix::operator/= LocalMatrix&lt; T_, NR_, NC_ &gt; operator/= OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::operator/= LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Operator Divide by x current matrix entries</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::LocalMatrix</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#ae511bf7ee40a4adcdcf3249d9f3df433</field>
    <field name="keywords">LocalMatrix OFELI::LocalMatrix::LocalMatrix LocalMatrix&lt; T_, NR_, NC_ &gt; LocalMatrix OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::LocalMatrix LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Default constructor Constructs a matrix with 0 rows and 0 columns</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::FactorAndSolve</field>
    <field name="args">(LocalVect&lt; T_, NR_ &gt; &amp;b)</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#aea982c95525a789d4a1a75fcd65c6416</field>
    <field name="keywords">FactorAndSolve OFELI::LocalMatrix::FactorAndSolve LocalMatrix&lt; T_, NR_, NC_ &gt; FactorAndSolve OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::FactorAndSolve LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Factorize matrix and solve linear system b Right-hand side in input and solution vector in output 0 if solution was performed normally n if n th pivot is zero This function simply calls Factor() then Solve(b)</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalMatrix::~LocalMatrix</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LocalMatrix.html#af6fd3022afda52421affb40a572ae5aa</field>
    <field name="keywords">OFELI::LocalMatrix::~LocalMatrix LocalMatrix&lt; T_, NR_, NC_ &gt; OFELI::LocalMatrix&lt; real_t, 2, 2 &gt;::~LocalMatrix LocalMatrix&lt; real_t, 2, 2 &gt;</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::LocalVect</field>
    <field name="url">classOFELI_1_1LocalVect.html</field>
    <field name="keywords">LocalVect LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt; LocalVect&lt; real_t, 3 &gt; LocalVect&lt; size_t, 2 &gt; LocalVect&lt; size_t, 3 &gt;</field>
    <field name="text">Handles small size vectors like element vectors The template class LocalVect treats small size vectors Typically this class is recommended to store element and side arrays Operators and are overloaded so that one can write for instance to set vector v entries to 1 copy vector v into vector u and assign third entry of v to 2 Notice that entries of v are here v(1) v(2) v(10) i.e vector entries start at index 1 Internally no dynamic storage is used T_ Data type double float complex&lt;double&gt; N_ Vector size Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalVect::~LocalVect</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LocalVect.html#a0468c56aeed8c024d5a609b99162b74a</field>
    <field name="keywords">OFELI::LocalVect::~LocalVect LocalVect&lt; T_, N_ &gt; OFELI::LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt;::~LocalVect LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt; OFELI::LocalVect&lt; real_t, 3 &gt;::~LocalVect LocalVect&lt; real_t, 3 &gt; OFELI::LocalVect&lt; size_t, 2 &gt;::~LocalVect LocalVect&lt; size_t, 2 &gt; OFELI::LocalVect&lt; size_t, 3 &gt;::~LocalVect LocalVect&lt; size_t, 3 &gt;</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalVect::operator,</field>
    <field name="args">(const LocalVect&lt; T_, N_ &gt; &amp;v) const</field>
    <field name="url">classOFELI_1_1LocalVect.html#a11ffa3675514be77c00fc6786c985002</field>
    <field name="keywords">operator, OFELI::LocalVect::operator, LocalVect&lt; T_, N_ &gt; operator, OFELI::LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt;::operator, LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt; operator, OFELI::LocalVect&lt; real_t, 3 &gt;::operator, LocalVect&lt; real_t, 3 &gt; operator, OFELI::LocalVect&lt; size_t, 2 &gt;::operator, LocalVect&lt; size_t, 2 &gt; operator, OFELI::LocalVect&lt; size_t, 3 &gt;::operator, LocalVect&lt; size_t, 3 &gt;</field>
    <field name="text">Return Dot scalar product of two vectors A typical use of this operator is double a v w where v and w are 2 instances of LocalVect&lt;double,n&gt; v LocalVect instance by which the current instance is multiplied</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalVect::operator[]</field>
    <field name="args">(size_t i)</field>
    <field name="url">classOFELI_1_1LocalVect.html#a1527071fae7fa1cabc15f3b17e256c16</field>
    <field name="keywords">operator[] OFELI::LocalVect::operator[] LocalVect&lt; T_, N_ &gt; operator[] OFELI::LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt;::operator[] LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt; operator[] OFELI::LocalVect&lt; real_t, 3 &gt;::operator[] LocalVect&lt; real_t, 3 &gt; operator[] OFELI::LocalVect&lt; size_t, 2 &gt;::operator[] LocalVect&lt; size_t, 2 &gt; operator[] OFELI::LocalVect&lt; size_t, 3 &gt;::operator[] LocalVect&lt; size_t, 3 &gt;</field>
    <field name="text">Operator Non constant version v i starts at v 0 to v size() 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalVect::operator()</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1LocalVect.html#a1c5d37e1fdcfc442fb9312f89af4e205</field>
    <field name="keywords">operator() OFELI::LocalVect::operator() LocalVect&lt; T_, N_ &gt; operator() OFELI::LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt;::operator() LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt; operator() OFELI::LocalVect&lt; real_t, 3 &gt;::operator() LocalVect&lt; real_t, 3 &gt; operator() OFELI::LocalVect&lt; size_t, 2 &gt;::operator() LocalVect&lt; size_t, 2 &gt; operator() OFELI::LocalVect&lt; size_t, 3 &gt;::operator() LocalVect&lt; size_t, 3 &gt;</field>
    <field name="text">Operator Constant version v(i) starts at v(1) to v(size()) v(i) is the same element as v i-1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalVect::Sd</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LocalVect.html#a216f8cba5714ad6cb95cbe9110238718</field>
    <field name="keywords">Sd OFELI::LocalVect::Sd LocalVect&lt; T_, N_ &gt; Sd OFELI::LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt;::Sd LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt; Sd OFELI::LocalVect&lt; real_t, 3 &gt;::Sd LocalVect&lt; real_t, 3 &gt; Sd OFELI::LocalVect&lt; size_t, 2 &gt;::Sd LocalVect&lt; size_t, 2 &gt; Sd OFELI::LocalVect&lt; size_t, 3 &gt;::Sd LocalVect&lt; size_t, 3 &gt;</field>
    <field name="text">Return pointer to Side if vector was constructed using a side and nullptr otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalVect::operator+=</field>
    <field name="args">(const T_ &amp;a)</field>
    <field name="url">classOFELI_1_1LocalVect.html#a2a2beb6562530c8a6d1fa26ab45fc969</field>
    <field name="keywords">operator+= OFELI::LocalVect::operator+= LocalVect&lt; T_, N_ &gt; operator+= OFELI::LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt;::operator+= LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt; operator+= OFELI::LocalVect&lt; real_t, 3 &gt;::operator+= LocalVect&lt; real_t, 3 &gt; operator+= OFELI::LocalVect&lt; size_t, 2 &gt;::operator+= LocalVect&lt; size_t, 2 &gt; operator+= OFELI::LocalVect&lt; size_t, 3 &gt;::operator+= LocalVect&lt; size_t, 3 &gt;</field>
    <field name="text">Operator Add constant a to vector entries</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalVect::operator-=</field>
    <field name="args">(const T_ &amp;a)</field>
    <field name="url">classOFELI_1_1LocalVect.html#a2cd68bf6de72efa3c1335a2096dca609</field>
    <field name="keywords">operator-= OFELI::LocalVect::operator-= LocalVect&lt; T_, N_ &gt; operator-= OFELI::LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt;::operator-= LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt; operator-= OFELI::LocalVect&lt; real_t, 3 &gt;::operator-= LocalVect&lt; real_t, 3 &gt; operator-= OFELI::LocalVect&lt; size_t, 2 &gt;::operator-= LocalVect&lt; size_t, 2 &gt; operator-= OFELI::LocalVect&lt; size_t, 3 &gt;::operator-= LocalVect&lt; size_t, 3 &gt;</field>
    <field name="text">Operator Subtract constant a from vector entries</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalVect::LocalVect</field>
    <field name="args">(const Element &amp;el, const Vect&lt; T_ &gt; &amp;v, int opt=0)</field>
    <field name="url">classOFELI_1_1LocalVect.html#a3a8a69d64f0ab0cab4201a665f14f260</field>
    <field name="keywords">LocalVect OFELI::LocalVect::LocalVect LocalVect&lt; T_, N_ &gt; LocalVect OFELI::LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt;::LocalVect LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt; LocalVect OFELI::LocalVect&lt; real_t, 3 &gt;::LocalVect LocalVect&lt; real_t, 3 &gt; LocalVect OFELI::LocalVect&lt; size_t, 2 &gt;::LocalVect LocalVect&lt; size_t, 2 &gt; LocalVect OFELI::LocalVect&lt; size_t, 3 &gt;::LocalVect LocalVect&lt; size_t, 3 &gt;</field>
    <field name="text">Constructor of an element vector from a global Vect instance The constructed vector has local numbering of nodes el Reference to Element instance to localize v Global vector to localize opt Option for DOF treatment 0 Normal case Default Any other value only one DOF is handled Local vector has as dimension number of degrees of freedom</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalVect::operator/=</field>
    <field name="args">(const T_ &amp;a)</field>
    <field name="url">classOFELI_1_1LocalVect.html#a3c8308956518b689b591d524df71cb73</field>
    <field name="keywords">operator/= OFELI::LocalVect::operator/= LocalVect&lt; T_, N_ &gt; operator/= OFELI::LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt;::operator/= LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt; operator/= OFELI::LocalVect&lt; real_t, 3 &gt;::operator/= LocalVect&lt; real_t, 3 &gt; operator/= OFELI::LocalVect&lt; size_t, 2 &gt;::operator/= LocalVect&lt; size_t, 2 &gt; operator/= OFELI::LocalVect&lt; size_t, 3 &gt;::operator/= LocalVect&lt; size_t, 3 &gt;</field>
    <field name="text">Operator Divide vector by constant a</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalVect::LocalVect</field>
    <field name="args">(const Element *el, const Vect&lt; T_ &gt; &amp;v, int opt=0)</field>
    <field name="url">classOFELI_1_1LocalVect.html#a47fbfa673d4060c347c1bbe2bc44649b</field>
    <field name="keywords">LocalVect OFELI::LocalVect::LocalVect LocalVect&lt; T_, N_ &gt; LocalVect OFELI::LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt;::LocalVect LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt; LocalVect OFELI::LocalVect&lt; real_t, 3 &gt;::LocalVect LocalVect&lt; real_t, 3 &gt; LocalVect OFELI::LocalVect&lt; size_t, 2 &gt;::LocalVect LocalVect&lt; size_t, 2 &gt; LocalVect OFELI::LocalVect&lt; size_t, 3 &gt;::LocalVect LocalVect&lt; size_t, 3 &gt;</field>
    <field name="text">Constructor of an element vector from a global Vect instance The constructed vector has local numbering of nodes el Pointer to Element to localize v Global vector to localize opt Option for DOF treatment 0 Normal case Default Any other value only one DOF is handled Local vector has as dimension number of degrees of freedom</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalVect::Localize</field>
    <field name="args">(const Element *el, const Vect&lt; T_ &gt; &amp;v, size_t k=0)</field>
    <field name="url">classOFELI_1_1LocalVect.html#a4fe10bfbf072425644a3f2a55b11da96</field>
    <field name="keywords">Localize OFELI::LocalVect::Localize LocalVect&lt; T_, N_ &gt; Localize OFELI::LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt;::Localize LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt; Localize OFELI::LocalVect&lt; real_t, 3 &gt;::Localize LocalVect&lt; real_t, 3 &gt; Localize OFELI::LocalVect&lt; size_t, 2 &gt;::Localize LocalVect&lt; size_t, 2 &gt; Localize OFELI::LocalVect&lt; size_t, 3 &gt;::Localize LocalVect&lt; size_t, 3 &gt;</field>
    <field name="text">Localize an element vector from a global Vect instance The constructed vector has local numbering of nodes This function is called by the constructor LocalVect(const Element *el, const Vect&lt;T_&gt; &amp;v) el Pointer to Side to localize v Global vector to localize k Degree of freedom to localize Default All degrees of freedom are stored</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalVect::operator()</field>
    <field name="args">(size_t i)</field>
    <field name="url">classOFELI_1_1LocalVect.html#a521ccbffbfc8f6ceabb86a09da68f864</field>
    <field name="keywords">operator() OFELI::LocalVect::operator() LocalVect&lt; T_, N_ &gt; operator() OFELI::LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt;::operator() LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt; operator() OFELI::LocalVect&lt; real_t, 3 &gt;::operator() LocalVect&lt; real_t, 3 &gt; operator() OFELI::LocalVect&lt; size_t, 2 &gt;::operator() LocalVect&lt; size_t, 2 &gt; operator() OFELI::LocalVect&lt; size_t, 3 &gt;::operator() LocalVect&lt; size_t, 3 &gt;</field>
    <field name="text">Operator Non constant version v(i) starts at v(1) to v(size()) v(i) is the same element as v i-1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalVect::get</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LocalVect.html#a5aeba722bfc5e1d62b0e76fa41cfd15c</field>
    <field name="keywords">get OFELI::LocalVect::get LocalVect&lt; T_, N_ &gt; get OFELI::LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt;::get LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt; get OFELI::LocalVect&lt; real_t, 3 &gt;::get LocalVect&lt; real_t, 3 &gt; get OFELI::LocalVect&lt; size_t, 2 &gt;::get LocalVect&lt; size_t, 2 &gt; get OFELI::LocalVect&lt; size_t, 3 &gt;::get LocalVect&lt; size_t, 3 &gt;</field>
    <field name="text">Return pointer to vector as a C-Array</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalVect::operator-=</field>
    <field name="args">(const LocalVect&lt; T_, N_ &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1LocalVect.html#a6e173fa3bbc14a9002407a880421e8d2</field>
    <field name="keywords">operator-= OFELI::LocalVect::operator-= LocalVect&lt; T_, N_ &gt; operator-= OFELI::LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt;::operator-= LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt; operator-= OFELI::LocalVect&lt; real_t, 3 &gt;::operator-= LocalVect&lt; real_t, 3 &gt; operator-= OFELI::LocalVect&lt; size_t, 2 &gt;::operator-= LocalVect&lt; size_t, 2 &gt; operator-= OFELI::LocalVect&lt; size_t, 3 &gt;::operator-= LocalVect&lt; size_t, 3 &gt;</field>
    <field name="text">Operator Subtract vector v from this instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalVect::operator+=</field>
    <field name="args">(const LocalVect&lt; T_, N_ &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1LocalVect.html#a78bcb4a448fe514129893990675d3ced</field>
    <field name="keywords">operator+= OFELI::LocalVect::operator+= LocalVect&lt; T_, N_ &gt; operator+= OFELI::LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt;::operator+= LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt; operator+= OFELI::LocalVect&lt; real_t, 3 &gt;::operator+= LocalVect&lt; real_t, 3 &gt; operator+= OFELI::LocalVect&lt; size_t, 2 &gt;::operator+= LocalVect&lt; size_t, 2 &gt; operator+= OFELI::LocalVect&lt; size_t, 3 &gt;::operator+= LocalVect&lt; size_t, 3 &gt;</field>
    <field name="text">Operator Add vector v to this instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalVect::LocalVect</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LocalVect.html#a7dd7ccf2ccdddd9ed85e375a0df88622</field>
    <field name="keywords">LocalVect OFELI::LocalVect::LocalVect LocalVect&lt; T_, N_ &gt; LocalVect OFELI::LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt;::LocalVect LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt; LocalVect OFELI::LocalVect&lt; real_t, 3 &gt;::LocalVect LocalVect&lt; real_t, 3 &gt; LocalVect OFELI::LocalVect&lt; size_t, 2 &gt;::LocalVect LocalVect&lt; size_t, 2 &gt; LocalVect OFELI::LocalVect&lt; size_t, 3 &gt;::LocalVect LocalVect&lt; size_t, 3 &gt;</field>
    <field name="text">Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalVect::LocalVect</field>
    <field name="args">(const Element *el)</field>
    <field name="url">classOFELI_1_1LocalVect.html#a7f0cd51dc96d9b634acd593927ce2d28</field>
    <field name="keywords">LocalVect OFELI::LocalVect::LocalVect LocalVect&lt; T_, N_ &gt; LocalVect OFELI::LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt;::LocalVect LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt; LocalVect OFELI::LocalVect&lt; real_t, 3 &gt;::LocalVect LocalVect&lt; real_t, 3 &gt; LocalVect OFELI::LocalVect&lt; size_t, 2 &gt;::LocalVect LocalVect&lt; size_t, 2 &gt; LocalVect OFELI::LocalVect&lt; size_t, 3 &gt;::LocalVect LocalVect&lt; size_t, 3 &gt;</field>
    <field name="text">Constructor using Element pointer</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalVect::operator=</field>
    <field name="args">(const T_ &amp;x)</field>
    <field name="url">classOFELI_1_1LocalVect.html#a83c0219a494e14df2e3d889f802b140a</field>
    <field name="keywords">operator= OFELI::LocalVect::operator= LocalVect&lt; T_, N_ &gt; operator= OFELI::LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt;::operator= LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt; operator= OFELI::LocalVect&lt; real_t, 3 &gt;::operator= LocalVect&lt; real_t, 3 &gt; operator= OFELI::LocalVect&lt; size_t, 2 &gt;::operator= LocalVect&lt; size_t, 2 &gt; operator= OFELI::LocalVect&lt; size_t, 3 &gt;::operator= LocalVect&lt; size_t, 3 &gt;</field>
    <field name="text">Operator Assign value x to all vector entries</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalVect::LocalVect</field>
    <field name="args">(const Side *sd, const Vect&lt; T_ &gt; &amp;v, int opt=0)</field>
    <field name="url">classOFELI_1_1LocalVect.html#a925727802157cff6df2686c7b31177f7</field>
    <field name="keywords">LocalVect OFELI::LocalVect::LocalVect LocalVect&lt; T_, N_ &gt; LocalVect OFELI::LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt;::LocalVect LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt; LocalVect OFELI::LocalVect&lt; real_t, 3 &gt;::LocalVect LocalVect&lt; real_t, 3 &gt; LocalVect OFELI::LocalVect&lt; size_t, 2 &gt;::LocalVect LocalVect&lt; size_t, 2 &gt; LocalVect OFELI::LocalVect&lt; size_t, 3 &gt;::LocalVect LocalVect&lt; size_t, 3 &gt;</field>
    <field name="text">Constructor of a side vector from a global Vect instance The constructed vector has local numbering of nodes sd Pointer to Side to localize v Global vector to localize opt Option for DOF treatment 0 Normal case Default Any other value only one DOF is handled Local vector has as dimension number of degrees of freedom</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalVect::Localize</field>
    <field name="args">(const Side *sd, const Vect&lt; T_ &gt; &amp;v, size_t k=0)</field>
    <field name="url">classOFELI_1_1LocalVect.html#a9c8e1553b2496df875d71c1d2cdd88c7</field>
    <field name="keywords">Localize OFELI::LocalVect::Localize LocalVect&lt; T_, N_ &gt; Localize OFELI::LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt;::Localize LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt; Localize OFELI::LocalVect&lt; real_t, 3 &gt;::Localize LocalVect&lt; real_t, 3 &gt; Localize OFELI::LocalVect&lt; size_t, 2 &gt;::Localize LocalVect&lt; size_t, 2 &gt; Localize OFELI::LocalVect&lt; size_t, 3 &gt;::Localize LocalVect&lt; size_t, 3 &gt;</field>
    <field name="text">Localize a side vector from a global Vect instance The constructed vector has local numbering of nodes This function is called by the constructor LocalVect(const Side *sd, const Vect&lt;T_&gt; &amp;v) sd Pointer to Side to localize v Global vector to localize k Degree of freedom to localize Default All degrees of freedom are stored</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalVect::operator[]</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1LocalVect.html#aa900a16c18fb216763d5813cc5d9cbd6</field>
    <field name="keywords">operator[] OFELI::LocalVect::operator[] LocalVect&lt; T_, N_ &gt; operator[] OFELI::LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt;::operator[] LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt; operator[] OFELI::LocalVect&lt; real_t, 3 &gt;::operator[] LocalVect&lt; real_t, 3 &gt; operator[] OFELI::LocalVect&lt; size_t, 2 &gt;::operator[] LocalVect&lt; size_t, 2 &gt; operator[] OFELI::LocalVect&lt; size_t, 3 &gt;::operator[] LocalVect&lt; size_t, 3 &gt;</field>
    <field name="text">Operator Constant version v i starts at v 0 to v size() 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalVect::LocalVect</field>
    <field name="args">(const LocalVect&lt; T_, N_ &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1LocalVect.html#aae63436fee3197482a9a4c3afb80d33e</field>
    <field name="keywords">LocalVect OFELI::LocalVect::LocalVect LocalVect&lt; T_, N_ &gt; LocalVect OFELI::LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt;::LocalVect LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt; LocalVect OFELI::LocalVect&lt; real_t, 3 &gt;::LocalVect LocalVect&lt; real_t, 3 &gt; LocalVect OFELI::LocalVect&lt; size_t, 2 &gt;::LocalVect LocalVect&lt; size_t, 2 &gt; LocalVect OFELI::LocalVect&lt; size_t, 3 &gt;::LocalVect LocalVect&lt; size_t, 3 &gt;</field>
    <field name="text">Copy constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalVect::getLocal</field>
    <field name="args">(const Element &amp;el, const Vect&lt; T_ &gt; &amp;v, int type)</field>
    <field name="url">classOFELI_1_1LocalVect.html#aba6e067afa946a45652dfccd7aeb6393</field>
    <field name="keywords">getLocal OFELI::LocalVect::getLocal LocalVect&lt; T_, N_ &gt; getLocal OFELI::LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt;::getLocal LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt; getLocal OFELI::LocalVect&lt; real_t, 3 &gt;::getLocal LocalVect&lt; real_t, 3 &gt; getLocal OFELI::LocalVect&lt; size_t, 2 &gt;::getLocal LocalVect&lt; size_t, 2 &gt; getLocal OFELI::LocalVect&lt; size_t, 3 &gt;::getLocal LocalVect&lt; size_t, 3 &gt;</field>
    <field name="text">Localize an element vector from a global Vect instance The constructed vector has local numbering of nodes This function is called by the constructor LocalVect(const Element *el, const Vect&lt;T_&gt; &amp;v) el Pointer to Element to localize v Global vector to localize type Type of element This is to be chosen among enumerated values LINE2 TRIANG3 QUAD4 TETRA4 HEXA8 PENTA6</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalVect::LocalVect</field>
    <field name="args">(const Side *sd)</field>
    <field name="url">classOFELI_1_1LocalVect.html#ac7caf09325a5fabcd7c65f94020ab29a</field>
    <field name="keywords">LocalVect OFELI::LocalVect::LocalVect LocalVect&lt; T_, N_ &gt; LocalVect OFELI::LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt;::LocalVect LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt; LocalVect OFELI::LocalVect&lt; real_t, 3 &gt;::LocalVect LocalVect&lt; real_t, 3 &gt; LocalVect OFELI::LocalVect&lt; size_t, 2 &gt;::LocalVect LocalVect&lt; size_t, 2 &gt; LocalVect OFELI::LocalVect&lt; size_t, 3 &gt;::LocalVect LocalVect&lt; size_t, 3 &gt;</field>
    <field name="text">Constructor using Side pointer</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalVect::clear</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LocalVect.html#ac8bb3912a3ce86b15842e79d0b421204</field>
    <field name="keywords">clear OFELI::LocalVect::clear LocalVect&lt; T_, N_ &gt; clear OFELI::LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt;::clear LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt; clear OFELI::LocalVect&lt; real_t, 3 &gt;::clear LocalVect&lt; real_t, 3 &gt; clear OFELI::LocalVect&lt; size_t, 2 &gt;::clear LocalVect&lt; size_t, 2 &gt; clear OFELI::LocalVect&lt; size_t, 3 &gt;::clear LocalVect&lt; size_t, 3 &gt;</field>
    <field name="text">Clear vector Set all vector entries to zero</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalVect::El</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1LocalVect.html#ae029cbc570a21c7b0ea09d27883c2613</field>
    <field name="keywords">El OFELI::LocalVect::El LocalVect&lt; T_, N_ &gt; El OFELI::LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt;::El LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt; El OFELI::LocalVect&lt; real_t, 3 &gt;::El LocalVect&lt; real_t, 3 &gt; El OFELI::LocalVect&lt; size_t, 2 &gt;::El LocalVect&lt; size_t, 2 &gt; El OFELI::LocalVect&lt; size_t, 3 &gt;::El LocalVect&lt; size_t, 3 &gt;</field>
    <field name="text">Return pointer to Element if vector was constructed using an element and nullptr otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalVect::operator=</field>
    <field name="args">(const LocalVect&lt; T_, N_ &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1LocalVect.html#aef82c4c2583afefa5896f3e1ef4c2aa9</field>
    <field name="keywords">operator= OFELI::LocalVect::operator= LocalVect&lt; T_, N_ &gt; operator= OFELI::LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt;::operator= LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt; operator= OFELI::LocalVect&lt; real_t, 3 &gt;::operator= LocalVect&lt; real_t, 3 &gt; operator= OFELI::LocalVect&lt; size_t, 2 &gt;::operator= LocalVect&lt; size_t, 2 &gt; operator= OFELI::LocalVect&lt; size_t, 3 &gt;::operator= LocalVect&lt; size_t, 3 &gt;</field>
    <field name="text">Operator Copy a LocalVect instance to the current one</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalVect::operator*=</field>
    <field name="args">(const T_ &amp;a)</field>
    <field name="url">classOFELI_1_1LocalVect.html#af973229ddf3648fba9988b62be4f37a3</field>
    <field name="keywords">operator*= OFELI::LocalVect::operator*= LocalVect&lt; T_, N_ &gt; operator*= OFELI::LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt;::operator*= LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt; operator*= OFELI::LocalVect&lt; real_t, 3 &gt;::operator*= LocalVect&lt; real_t, 3 &gt; operator*= OFELI::LocalVect&lt; size_t, 2 &gt;::operator*= LocalVect&lt; size_t, 2 &gt; operator*= OFELI::LocalVect&lt; size_t, 3 &gt;::operator*= LocalVect&lt; size_t, 3 &gt;</field>
    <field name="text">Operator Multiply vector by constant a</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LocalVect::LocalVect</field>
    <field name="args">(const T_ *a)</field>
    <field name="url">classOFELI_1_1LocalVect.html#aff0c24a039b55250a0c37b93238817d4</field>
    <field name="keywords">LocalVect OFELI::LocalVect::LocalVect LocalVect&lt; T_, N_ &gt; LocalVect OFELI::LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt;::LocalVect LocalVect&lt; OFELI::Point&lt; real_t &gt;, 3 &gt; LocalVect OFELI::LocalVect&lt; real_t, 3 &gt;::LocalVect LocalVect&lt; real_t, 3 &gt; LocalVect OFELI::LocalVect&lt; size_t, 2 &gt;::LocalVect LocalVect&lt; size_t, 2 &gt; LocalVect OFELI::LocalVect&lt; size_t, 3 &gt;::LocalVect LocalVect&lt; size_t, 3 &gt;</field>
    <field name="text">Constructor using a C-array</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Material</field>
    <field name="url">classOFELI_1_1Material.html</field>
    <field name="keywords">Material</field>
    <field name="text">To treat material data This class enables reading material data in material data files It also returns these informations by means of its members</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::MeltingTemperature</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Material.html#a013a6f35564a88cdcd03ec8119348b6f</field>
    <field name="keywords">MeltingTemperature OFELI::Material::MeltingTemperature Material</field>
    <field name="text">Return constant melting temperature</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::Material</field>
    <field name="args">(const Material &amp;m)</field>
    <field name="url">classOFELI_1_1Material.html#a02877024d0cd809dde43fa605e7c7819</field>
    <field name="keywords">Material OFELI::Material::Material Material</field>
    <field name="text">Copy constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::Property</field>
    <field name="args">(int i, const Point&lt; real_t &gt; &amp;x, real_t t)</field>
    <field name="url">classOFELI_1_1Material.html#a04b8407ca10a888682ca025d9998db07</field>
    <field name="keywords">Property OFELI::Material::Property Material</field>
    <field name="text">Return i th property at point x and time t</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::LatentHeatForEvaporation</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;x, real_t t)</field>
    <field name="url">classOFELI_1_1Material.html#a093a9807372fd52cb8b118cfd2f25eb5</field>
    <field name="keywords">LatentHeatForEvaporation OFELI::Material::LatentHeatForEvaporation Material</field>
    <field name="text">Return latent heat for evaporation at point x and time t</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::operator=</field>
    <field name="args">(const Material &amp;m)</field>
    <field name="url">classOFELI_1_1Material.html#a0e1356474912170054ba2b2adc78e563</field>
    <field name="keywords">operator= OFELI::Material::operator= Material</field>
    <field name="text">Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::Viscosity</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;x, real_t t)</field>
    <field name="url">classOFELI_1_1Material.html#a10eab7d8131b6a1b0283c0857402cfbf</field>
    <field name="keywords">Viscosity OFELI::Material::Viscosity Material</field>
    <field name="text">Return viscosity at point x and time t</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::LatentHeatForMelting</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Material.html#a1538d64413a49b619dc5bb7b081f5ce4</field>
    <field name="keywords">LatentHeatForMelting OFELI::Material::LatentHeatForMelting Material</field>
    <field name="text">Return constant latent heat for melting</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::Property</field>
    <field name="args">(int i)</field>
    <field name="url">classOFELI_1_1Material.html#a15bf90511c93547700934424d6d69bcd</field>
    <field name="keywords">Property OFELI::Material::Property Material</field>
    <field name="text">Return constant i th property</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::ElectricConductivity</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;x, real_t t)</field>
    <field name="url">classOFELI_1_1Material.html#a2aca5b4443ac93455203731b4445ea66</field>
    <field name="keywords">ElectricConductivity OFELI::Material::ElectricConductivity Material</field>
    <field name="text">Return electric conductivity at point x and time t</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::PoissonRatio</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Material.html#a2c22751801383840d9c1bb2836e62c85</field>
    <field name="keywords">PoissonRatio OFELI::Material::PoissonRatio Material</field>
    <field name="text">Return constant Poisson ratio</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::ElectricResistivity</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Material.html#a33183698fd495f096c9efd1e20c08dfa</field>
    <field name="keywords">ElectricResistivity OFELI::Material::ElectricResistivity Material</field>
    <field name="text">Return constant electric resistivity</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::LatentHeatForMelting</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;x, real_t t)</field>
    <field name="url">classOFELI_1_1Material.html#a565e1aa8c5589982fb6ec6bdabd2e803</field>
    <field name="keywords">LatentHeatForMelting OFELI::Material::LatentHeatForMelting Material</field>
    <field name="text">Return latent heat for melting at point x and time t</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::ThermalConductivity</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;x, real_t t)</field>
    <field name="url">classOFELI_1_1Material.html#a5de1e74a902bc03f5486ecada2b2fbe4</field>
    <field name="keywords">ThermalConductivity OFELI::Material::ThermalConductivity Material</field>
    <field name="text">Return thermal conductivity at point x and time t</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::getName</field>
    <field name="args">(int m) const</field>
    <field name="url">classOFELI_1_1Material.html#a660a0e1c19a227598570e64ff7ed3a68</field>
    <field name="keywords">getName OFELI::Material::getName Material</field>
    <field name="text">Return material name for material with code m If such a material is not found return a blank string</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::Viscosity</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Material.html#a6a54f1dc1c5ddb770b3ef01fc67c897f</field>
    <field name="keywords">Viscosity OFELI::Material::Viscosity Material</field>
    <field name="text">Return constant viscosity</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::DielectricConstant</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;x, real_t t)</field>
    <field name="url">classOFELI_1_1Material.html#a6f76615b1cd6e61f72096c81e142357d</field>
    <field name="keywords">DielectricConstant OFELI::Material::DielectricConstant Material</field>
    <field name="text">Return dielectric constant at point x and time t</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::Density</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;x, real_t t)</field>
    <field name="url">classOFELI_1_1Material.html#a73848e693e73b586554e51033bdcc467</field>
    <field name="keywords">Density OFELI::Material::Density Material</field>
    <field name="text">Return density at point x and time t</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::ElectricConductivity</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Material.html#a75a3fd6430936b904ac19d8528bfed96</field>
    <field name="keywords">ElectricConductivity OFELI::Material::ElectricConductivity Material</field>
    <field name="text">Return constant electric conductivity</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::DielectricConstant</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Material.html#a786aeb7aff22ecec920bc354800756e5</field>
    <field name="keywords">DielectricConstant OFELI::Material::DielectricConstant Material</field>
    <field name="text">Return constant dielectric constant</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::getCode</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Material.html#a81cb3af2d2f87768d05aba7cb0402dea</field>
    <field name="keywords">getCode OFELI::Material::getCode Material</field>
    <field name="text">Return material code for i th material</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::getNbMat</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Material.html#a93bc85150c3d572f68fad58b779ec10c</field>
    <field name="keywords">getNbMat OFELI::Material::getNbMat Material</field>
    <field name="text">Return Number of read materials</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::MagneticPermeability</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Material.html#a974e2b766202f75b17bd5968dcb22d38</field>
    <field name="keywords">MagneticPermeability OFELI::Material::MagneticPermeability Material</field>
    <field name="text">Return constant magnetic permeability</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::SpecificHeat</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Material.html#aa89dddbe60207d446013c211a3b33034</field>
    <field name="keywords">SpecificHeat OFELI::Material::SpecificHeat Material</field>
    <field name="text">Return constant specific heat</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::LatentHeatForEvaporation</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Material.html#aad00e7ccf764916921fb1105a9d5b0a1</field>
    <field name="keywords">LatentHeatForEvaporation OFELI::Material::LatentHeatForEvaporation Material</field>
    <field name="text">Return constant latent heat for evaporation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::Material</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Material.html#aade2019060d01e7983e9bc40ea6aa404</field>
    <field name="keywords">Material OFELI::Material::Material Material</field>
    <field name="text">Default consructor It initializes the class and searches for the path where are material data files</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::~Material</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Material.html#ab15b7efa255e5cca9b02a031a783cfe8</field>
    <field name="keywords">OFELI::Material::~Material Material</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::Density</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Material.html#ab417d9489e2a9c7abfbb2e05e9cf7e57</field>
    <field name="keywords">Density OFELI::Material::Density Material</field>
    <field name="text">Return constant density</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::ThermalConductivity</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Material.html#ab48db584456405ebc8cb555c18d08a20</field>
    <field name="keywords">ThermalConductivity OFELI::Material::ThermalConductivity Material</field>
    <field name="text">Return constant thermal conductivity</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::PoissonRatio</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;x, real_t t)</field>
    <field name="url">classOFELI_1_1Material.html#ab7a74c779432d5c53a57d61f86eddf0c</field>
    <field name="keywords">PoissonRatio OFELI::Material::PoissonRatio Material</field>
    <field name="text">Return Poisson ratio at point x and time t</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::SpecificHeat</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;x, real_t t)</field>
    <field name="url">classOFELI_1_1Material.html#ab80791d73adfbee9edaf75f738e52240</field>
    <field name="keywords">SpecificHeat OFELI::Material::SpecificHeat Material</field>
    <field name="text">Return specific heat at point x and time t</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::set</field>
    <field name="args">(int m, const string &amp;name)</field>
    <field name="url">classOFELI_1_1Material.html#ab834f6a47cf8126fdf8a385a0ef38ffe</field>
    <field name="keywords">set OFELI::Material::set Material</field>
    <field name="text">Associate to material code number n the material named name Number of materials</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::YoungModulus</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;x, real_t t)</field>
    <field name="url">classOFELI_1_1Material.html#ac234e879ea72ab0a88bba411c172af2c</field>
    <field name="keywords">YoungModulus OFELI::Material::YoungModulus Material</field>
    <field name="text">Return Young modulus at point x and time t</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::ThermalExpansion</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Material.html#ac5bca8d19ee244aceffcba0cb617d82f</field>
    <field name="keywords">ThermalExpansion OFELI::Material::ThermalExpansion Material</field>
    <field name="text">Return constant thermal expansion coefficient</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::check</field>
    <field name="args">(int c)</field>
    <field name="url">classOFELI_1_1Material.html#aca6c202d6dd4b4c87775fc4845074b52</field>
    <field name="keywords">check OFELI::Material::check Material</field>
    <field name="text">Check if material code c is present 0 if succeeded 1 if not</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::YoungModulus</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Material.html#ad19b82a7b41816cae96df84eeda331fd</field>
    <field name="keywords">YoungModulus OFELI::Material::YoungModulus Material</field>
    <field name="text">Return constant Young modulus</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::ElectricResistivity</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;x, real_t t)</field>
    <field name="url">classOFELI_1_1Material.html#ad276f0be47f17ebb6ffe2eb53e860780</field>
    <field name="keywords">ElectricResistivity OFELI::Material::ElectricResistivity Material</field>
    <field name="text">Return electric resistivity at point x and time t</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::EvaporationTemperature</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Material.html#ad403b314e0501edf77796979715b7f32</field>
    <field name="keywords">EvaporationTemperature OFELI::Material::EvaporationTemperature Material</field>
    <field name="text">Return constant evaporation temperature</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::ThermalExpansion</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;x, real_t t)</field>
    <field name="url">classOFELI_1_1Material.html#aebe3bee4971c2812730736795523cb01</field>
    <field name="keywords">ThermalExpansion OFELI::Material::ThermalExpansion Material</field>
    <field name="text">Return thermal expansion coefficient at point x and time t</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::setCode</field>
    <field name="args">(int m)</field>
    <field name="url">classOFELI_1_1Material.html#aefe5b8a4ac082d0580c6350d1159c4e6</field>
    <field name="keywords">setCode OFELI::Material::setCode Material</field>
    <field name="text">Associate code m to current material</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::EvaporationTemperature</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;x, real_t t)</field>
    <field name="url">classOFELI_1_1Material.html#af144498ef8a6d5ebde1c63e326fd9df0</field>
    <field name="keywords">EvaporationTemperature OFELI::Material::EvaporationTemperature Material</field>
    <field name="text">Return evaporation temperature at point x and time t</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::MeltingTemperature</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;x, real_t t)</field>
    <field name="url">classOFELI_1_1Material.html#af3061a325646b96e204889aca7d58bca</field>
    <field name="keywords">MeltingTemperature OFELI::Material::MeltingTemperature Material</field>
    <field name="text">Return melting temperature at point x and time t</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Material::MagneticPermeability</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;x, real_t t)</field>
    <field name="url">classOFELI_1_1Material.html#af5d64bdbd9fcb5bb9c1e6c98ed40fbb1</field>
    <field name="keywords">MagneticPermeability OFELI::Material::MagneticPermeability Material</field>
    <field name="text">Return magnetic permeability at point x and time t</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Matrix</field>
    <field name="url">classOFELI_1_1Matrix.html</field>
    <field name="keywords">Matrix Matrix&lt; real_t &gt;</field>
    <field name="text">Virtual class to handle matrices for all storage formats This class enables storing and manipulating dense matrices The template parameter is the type of matrix entries Any matrix entry can be accessed by the operator For instance if A is an instance of this class A(i,j) stands for the entry at the i-th row and j-th column i and j starting from 1 Entries of A can be assigned a value by the same operator Data type real_t float complex&lt;real_t&gt; Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::Prescribe</field>
    <field name="args">(size_t dof, Vect&lt; T_ &gt; &amp;b, const Vect&lt; T_ &gt; &amp;u, int flag=0)</field>
    <field name="url">classOFELI_1_1Matrix.html#a0a278a1ed1bb0a7a6df613e63816c8cf</field>
    <field name="keywords">Prescribe OFELI::Matrix::Prescribe Matrix&lt; T_ &gt; Prescribe OFELI::Matrix&lt; real_t &gt;::Prescribe Matrix&lt; real_t &gt;</field>
    <field name="text">Impose by a penalty method an essential boundary condition when only one DOF is treated Impose by a penalty method an essential boundary condition when only one DOF is treated Impose by a penalty method an essential boundary condition when only one DOF is treated Impose by a penalty method an essential boundary condition when only one DOF is treated This member function modifies diagonal terms in matrix and terms in vector that correspond to degrees of freedom with nonzero code in order to impose a boundary condition This gunction is to be used if only one DOF per node is treated in the linear system The penalty parameter is by default equal to 1.e20 It can be modified by member function setPenal dof Label of the concerned degree of freedom DOF b Vect instance that contains right-hand side u Vect instance that conatins imposed valued at DOFs where they are to be imposed flag Parameter to determine whether only the right-hand side is to be modified dof 0 or both matrix and right-hand side dof 0 default value Impose by a penalty method an essential boundary condition when only one DOF is treated Impose by a penalty method an essential boundary condition when only one DOF is treated Impose by a penalty method an essential boundary condition when only one DOF is treated Impose by a penalty method an essential boundary condition when only one DOF is treated</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::operator=</field>
    <field name="args">(Matrix&lt; T_ &gt; &amp;m)</field>
    <field name="url">classOFELI_1_1Matrix.html#a0b02c135bf302cc9e516910bef5b1146</field>
    <field name="keywords">operator= OFELI::Matrix::operator= Matrix&lt; T_ &gt; operator= OFELI::Matrix&lt; real_t &gt;::operator= Matrix&lt; real_t &gt;</field>
    <field name="text">Operator Operator Operator Operator Copy matrix m to current matrix instance Operator Operator Operator Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::MultAdd</field>
    <field name="args">(T_ a, const Vect&lt; T_ &gt; &amp;x, Vect&lt; T_ &gt; &amp;y) const =0</field>
    <field name="url">classOFELI_1_1Matrix.html#a1331eecea8db5b3ccc3cc629c4d26505</field>
    <field name="keywords">MultAdd OFELI::Matrix::MultAdd Matrix&lt; T_ &gt; MultAdd OFELI::Matrix&lt; real_t &gt;::MultAdd Matrix&lt; real_t &gt;</field>
    <field name="text">Multiply matrix by vector a*x and add to y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::getName</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Matrix.html#a134d85a189d667e7a481614c1aa67860</field>
    <field name="keywords">getName OFELI::Matrix::getName Matrix&lt; T_ &gt; getName OFELI::Matrix&lt; real_t &gt;::getName Matrix&lt; real_t &gt;</field>
    <field name="text">Return name of matrix Return name of matrix Return name of matrix Return name of matrix Return name of matrix Return name of matrix Return name of matrix Return name of matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::operator()</field>
    <field name="args">(size_t i, size_t j) const =0</field>
    <field name="url">classOFELI_1_1Matrix.html#a135e702ba08918718dfbe1ba2ff73709</field>
    <field name="keywords">operator() OFELI::Matrix::operator() Matrix&lt; T_ &gt; operator() OFELI::Matrix&lt; real_t &gt;::operator() Matrix&lt; real_t &gt;</field>
    <field name="text">Operator Non constant version Returns the i j entry of the matrix i Row index j Column index</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::Prescribe</field>
    <field name="args">(Vect&lt; T_ &gt; &amp;b, const Vect&lt; T_ &gt; &amp;u, int flag=0)</field>
    <field name="url">classOFELI_1_1Matrix.html#a1775cd968f5d809fed17f111c852a8f4</field>
    <field name="keywords">Prescribe OFELI::Matrix::Prescribe Matrix&lt; T_ &gt; Prescribe OFELI::Matrix&lt; real_t &gt;::Prescribe Matrix&lt; real_t &gt;</field>
    <field name="text">Impose by a penalty method an essential boundary condition using the Mesh instance provided by the constructor Impose by a penalty method an essential boundary condition using the Mesh instance provided by the constructor Impose by a penalty method an essential boundary condition using the Mesh instance provided by the constructor Impose by a penalty method an essential boundary condition using the Mesh instance provided by the constructor This member function modifies diagonal terms in matrix and terms in vector that correspond to degrees of freedom with nonzero code in order to impose a boundary condition The penalty parameter is defined by default equal to 1.e20 It can be modified by member function setPenal b Vect instance that contains right-hand side u Vect instance that contains imposed valued at DOFs where they are to be imposed flag Parameter to determine whether only the right-hand side is to be modified dof 0 or both matrix and right-hand side dof 0 default value Impose by a penalty method an essential boundary condition using the Mesh instance provided by the constructor Impose by a penalty method an essential boundary condition using the Mesh instance provided by the constructor Impose by a penalty method an essential boundary condition using the Mesh instance provided by the constructor Impose by a penalty method an essential boundary condition using the Mesh instance provided by the constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::setDiagonal</field>
    <field name="args">(Mesh &amp;mesh)</field>
    <field name="url">classOFELI_1_1Matrix.html#a196d9e08fa42335a41f8e67082215065</field>
    <field name="keywords">setDiagonal OFELI::Matrix::setDiagonal Matrix&lt; T_ &gt; setDiagonal OFELI::Matrix&lt; real_t &gt;::setDiagonal Matrix&lt; real_t &gt;</field>
    <field name="text">Initialize matrix storage in the case where only diagonal terms are stored Initialize matrix storage in the case where only diagonal terms are stored Initialize matrix storage in the case where only diagonal terms are stored Initialize matrix storage in the case where only diagonal terms are stored This member function is to be used for explicit time integration schemes Initialize matrix storage in the case where only diagonal terms are stored Initialize matrix storage in the case where only diagonal terms are stored Initialize matrix storage in the case where only diagonal terms are stored Initialize matrix storage in the case where only diagonal terms are stored</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::operator()</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Matrix.html#a1c5d37e1fdcfc442fb9312f89af4e205</field>
    <field name="keywords">operator() OFELI::Matrix::operator() Matrix&lt; T_ &gt; operator() OFELI::Matrix&lt; real_t &gt;::operator() Matrix&lt; real_t &gt;</field>
    <field name="text">Operator with one argument Constant version Operator with one argument Constant version Operator with one argument Constant version Operator with one argument Constant version Returns i th position in the array storing matrix entries The first entry is at location 1 Entries are stored row by row i entry index Operator with one argument Constant version Operator with one argument Constant version Operator with one argument Constant version Operator with one argument Constant version</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::size</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Matrix.html#a259cb5a711406a8c3e5d937eb9350cca</field>
    <field name="keywords">size OFELI::Matrix::size Matrix&lt; T_ &gt; size OFELI::Matrix&lt; real_t &gt;::size Matrix&lt; real_t &gt;</field>
    <field name="text">Return matrix dimension Number of rows and columns Return matrix dimension Number of rows and columns Return matrix dimension Number of rows and columns Return matrix dimension Number of rows and columns Return matrix dimension Number of rows and columns Return matrix dimension Number of rows and columns Return matrix dimension Number of rows and columns Return matrix dimension Number of rows and columns</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::setDiagonal</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Matrix.html#a282ce97ddc94a4ad0030c047b35332ca</field>
    <field name="keywords">setDiagonal OFELI::Matrix::setDiagonal Matrix&lt; T_ &gt; setDiagonal OFELI::Matrix&lt; real_t &gt;::setDiagonal Matrix&lt; real_t &gt;</field>
    <field name="text">Set the matrix as diagonal Set the matrix as diagonal Set the matrix as diagonal Set the matrix as diagonal Set the matrix as diagonal Set the matrix as diagonal Set the matrix as diagonal Set the matrix as diagonal</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::operator=</field>
    <field name="args">(const T_ &amp;x)</field>
    <field name="url">classOFELI_1_1Matrix.html#a298011eb4bee76dcd82a6181b57350c3</field>
    <field name="keywords">operator= OFELI::Matrix::operator= Matrix&lt; T_ &gt; operator= OFELI::Matrix&lt; real_t &gt;::operator= Matrix&lt; real_t &gt;</field>
    <field name="text">Operator Operator Operator Operator Assign constant value x to all matrix entries Operator Operator Operator Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::getLength</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Matrix.html#a2b6d58f963410c52b1e972b849617ff3</field>
    <field name="keywords">getLength OFELI::Matrix::getLength Matrix&lt; T_ &gt; getLength OFELI::Matrix&lt; real_t &gt;::getLength Matrix&lt; real_t &gt;</field>
    <field name="text">Return number of stored terms in matrix Return number of stored terms in matrix Return number of stored terms in matrix Return number of stored terms in matrix Return number of stored terms in matrix Return number of stored terms in matrix Return number of stored terms in matrix Return number of stored terms in matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::solve</field>
    <field name="args">(Vect&lt; T_ &gt; &amp;b, bool fact=true)=0</field>
    <field name="url">classOFELI_1_1Matrix.html#a31a4417e8d251ece6decd21307049dbf</field>
    <field name="keywords">solve OFELI::Matrix::solve Matrix&lt; T_ &gt; solve OFELI::Matrix&lt; real_t &gt;::solve Matrix&lt; real_t &gt;</field>
    <field name="text">Solve the linear system If the inherited class is SpMatrix the function uses an iterative method once this one has been chosen Otherwise the method solves the linear system by factorization Solve the linear system</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::Assembly</field>
    <field name="args">(const Side &amp;sd, T_ *a)</field>
    <field name="url">classOFELI_1_1Matrix.html#a377c96d9edc5455d8b81d7f2e75a7437</field>
    <field name="keywords">Assembly OFELI::Matrix::Assembly Matrix&lt; T_ &gt; Assembly OFELI::Matrix&lt; real_t &gt;::Assembly Matrix&lt; real_t &gt;</field>
    <field name="text">Assembly of side matrix into global matrix Assembly of side matrix into global matrix Assembly of side matrix into global matrix Assembly of side matrix into global matrix Case where side matrix is given by a C-array sd Pointer to side instance a Side matrix as a C-array instance Assembly of side matrix into global matrix Assembly of side matrix into global matrix Assembly of side matrix into global matrix Assembly of side matrix into global matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::Matrix</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Matrix.html#a3aede62f513da27e6f61ae7a972b4f96</field>
    <field name="keywords">Matrix OFELI::Matrix::Matrix Matrix&lt; T_ &gt; Matrix OFELI::Matrix&lt; real_t &gt;::Matrix Matrix&lt; real_t &gt;</field>
    <field name="text">Default constructor Default constructor Default constructor Default constructor Initializes a zero-size matrix Default constructor Default constructor Default constructor Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::Prescribe</field>
    <field name="args">(Vect&lt; T_ &gt; &amp;b, int flag=0)</field>
    <field name="url">classOFELI_1_1Matrix.html#a3d58b8c69697615bb891ad8d89192e11</field>
    <field name="keywords">Prescribe OFELI::Matrix::Prescribe Matrix&lt; T_ &gt; Prescribe OFELI::Matrix&lt; real_t &gt;::Prescribe Matrix&lt; real_t &gt;</field>
    <field name="text">Impose by a penalty method a homegeneous 0 essential boundary condition Impose by a penalty method a homegeneous 0 essential boundary condition Impose by a penalty method a homegeneous 0 essential boundary condition Impose by a penalty method a homegeneous 0 essential boundary condition This member function modifies diagonal terms in matrix and terms in vector that correspond to degrees of freedom with nonzero code in order to impose a boundary condition The penalty parameter is defined by default equal to 1.e20 It can be modified by member function setPenal b Vect instance that contains right-hand side flag Parameter to determine whether only the right-hand side is to be modified dof 0 or both matrix and right-hand side dof 0 default value Impose by a penalty method a homegeneous 0 essential boundary condition Impose by a penalty method a homegeneous 0 essential boundary condition Impose by a penalty method a homegeneous 0 essential boundary condition Impose by a penalty method a homegeneous 0 essential boundary condition</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::PrescribeSide</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Matrix.html#a4668862b3d13a8ac8ffec768b7e38631</field>
    <field name="keywords">PrescribeSide OFELI::Matrix::PrescribeSide Matrix&lt; T_ &gt; PrescribeSide OFELI::Matrix&lt; real_t &gt;::PrescribeSide Matrix&lt; real_t &gt;</field>
    <field name="text">Impose by a penalty method an essential boundary condition when DOFs are supported by sides Impose by a penalty method an essential boundary condition when DOFs are supported by sides Impose by a penalty method an essential boundary condition when DOFs are supported by sides Impose by a penalty method an essential boundary condition when DOFs are supported by sides This member function modifies diagonal terms in matrix and terms in vector that correspond to degrees of freedom with nonzero code in order to impose a boundary condition The penalty parameter is defined by default equal to 1.e20 It can be modified by member function setPenal Impose by a penalty method an essential boundary condition when DOFs are supported by sides Impose by a penalty method an essential boundary condition when DOFs are supported by sides Impose by a penalty method an essential boundary condition when DOFs are supported by sides Impose by a penalty method an essential boundary condition when DOFs are supported by sides</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::Matrix</field>
    <field name="args">(const Matrix&lt; T_ &gt; &amp;m)</field>
    <field name="url">classOFELI_1_1Matrix.html#a4a08c31941b608d62de67b028e19ca8d</field>
    <field name="keywords">Matrix OFELI::Matrix::Matrix Matrix&lt; T_ &gt; Matrix OFELI::Matrix&lt; real_t &gt;::Matrix Matrix&lt; real_t &gt;</field>
    <field name="text">Copy Constructor Copy Constructor Copy Constructor Copy Constructor Copy Constructor Copy Constructor Copy Constructor Copy Constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::solve</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;b, Vect&lt; T_ &gt; &amp;x, bool fact=true)=0</field>
    <field name="url">classOFELI_1_1Matrix.html#a4fe82250a093bea1e2d5514748574d80</field>
    <field name="keywords">solve OFELI::Matrix::solve Matrix&lt; T_ &gt; solve OFELI::Matrix&lt; real_t &gt;::solve Matrix&lt; real_t &gt;</field>
    <field name="text">Solve the linear system If the inherited class is SpMatrix the function uses an iterative method once this one has been chosen Otherwise the method solves the linear system by factorization b Vect instance that contains right-hand side x Vect instance that contains solution fact Set to true if factorization is to be performed false if not Default true 0 if solution was normally performed n if the n th pivot is null Solution is performed only is factorization has previouly been invoked</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::~Matrix</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Matrix.html#a50937512a2aece401826a35ccdf69f3b</field>
    <field name="keywords">OFELI::Matrix::~Matrix Matrix&lt; T_ &gt; OFELI::Matrix&lt; real_t &gt;::~Matrix Matrix&lt; real_t &gt;</field>
    <field name="text">Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::operator()</field>
    <field name="args">(size_t i)</field>
    <field name="url">classOFELI_1_1Matrix.html#a521ccbffbfc8f6ceabb86a09da68f864</field>
    <field name="keywords">operator() OFELI::Matrix::operator() Matrix&lt; T_ &gt; operator() OFELI::Matrix&lt; real_t &gt;::operator() Matrix&lt; real_t &gt;</field>
    <field name="text">Operator with one argument Non Constant version Operator with one argument Non Constant version Operator with one argument Non Constant version Operator with one argument Non Constant version Returns i th position in the array storing matrix entries The first entry is at location 1 Entries are stored row by row i entry index Operator with one argument Non Constant version Operator with one argument Non Constant version Operator with one argument Non Constant version Operator with one argument Non Constant version</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::Prescribe</field>
    <field name="args">(int dof, int code, Vect&lt; T_ &gt; &amp;b, const Vect&lt; T_ &gt; &amp;u, int flag=0)</field>
    <field name="url">classOFELI_1_1Matrix.html#a5e9143a391d39e2b1c8fc092d18a2c01</field>
    <field name="keywords">Prescribe OFELI::Matrix::Prescribe Matrix&lt; T_ &gt; Prescribe OFELI::Matrix&lt; real_t &gt;::Prescribe Matrix&lt; real_t &gt;</field>
    <field name="text">Impose by a penalty method an essential boundary condition to a given degree of freedom for a given code Impose by a penalty method an essential boundary condition to a given degree of freedom for a given code Impose by a penalty method an essential boundary condition to a given degree of freedom for a given code Impose by a penalty method an essential boundary condition to a given degree of freedom for a given code This member function modifies diagonal terms in matrix and terms in vector that correspond to degrees of freedom with nonzero code in order to impose a boundary condition The penalty parameter is defined by default equal to 1.e20 It can be modified by member function setPenal dof Degree of freedom for which a boundary condition is to be enforced code Code for which a boundary condition is to be enforced b Vect instance that contains right-hand side u Vect instance that contains imposed valued at DOFs where they are to be imposed flag Parameter to determine whether only the right-hand side is to be modified dof 0 or both matrix and right-hand side dof 0 default value Impose by a penalty method an essential boundary condition to a given degree of freedom for a given code Impose by a penalty method an essential boundary condition to a given degree of freedom for a given code Impose by a penalty method an essential boundary condition to a given degree of freedom for a given code Impose by a penalty method an essential boundary condition to a given degree of freedom for a given code</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::getDiag</field>
    <field name="args">(size_t k) const</field>
    <field name="url">classOFELI_1_1Matrix.html#a65a7993114ae4172f90f90a34b27d49c</field>
    <field name="keywords">getDiag OFELI::Matrix::getDiag Matrix&lt; T_ &gt; getDiag OFELI::Matrix&lt; real_t &gt;::getDiag Matrix&lt; real_t &gt;</field>
    <field name="text">Return k th diagonal entry of matrix Return k th diagonal entry of matrix Return k th diagonal entry of matrix Return k th diagonal entry of matrix First entry is given by getDiag(1) Return k th diagonal entry of matrix Return k th diagonal entry of matrix Return k th diagonal entry of matrix Return k th diagonal entry of matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::operator-=</field>
    <field name="args">(const Matrix&lt; T_ &gt; &amp;m)</field>
    <field name="url">classOFELI_1_1Matrix.html#a6b5508171c9a2ea4941c25651f14026d</field>
    <field name="keywords">operator-= OFELI::Matrix::operator-= Matrix&lt; T_ &gt; operator-= OFELI::Matrix&lt; real_t &gt;::operator-= Matrix&lt; real_t &gt;</field>
    <field name="text">Operator Operator Operator Operator Subtract matrix m from current matrix instance Operator Operator Operator Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::setPenal</field>
    <field name="args">(real_t p)</field>
    <field name="url">classOFELI_1_1Matrix.html#a72077468b17118c44394d286f7737bd4</field>
    <field name="keywords">setPenal OFELI::Matrix::setPenal Matrix&lt; T_ &gt; setPenal OFELI::Matrix&lt; real_t &gt;::setPenal Matrix&lt; real_t &gt;</field>
    <field name="text">Set Penalty Parameter For boundary condition prescription Set Penalty Parameter For boundary condition prescription Set Penalty Parameter For boundary condition prescription Set Penalty Parameter For boundary condition prescription Set Penalty Parameter For boundary condition prescription Set Penalty Parameter For boundary condition prescription Set Penalty Parameter For boundary condition prescription Set Penalty Parameter For boundary condition prescription</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::getColInd</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Matrix.html#a78ca89abdc8f4d25f6bb9aa3e0e7d08c</field>
    <field name="keywords">getColInd OFELI::Matrix::getColInd Matrix&lt; T_ &gt; getColInd OFELI::Matrix&lt; real_t &gt;::getColInd Matrix&lt; real_t &gt;</field>
    <field name="text">Return Column index for column i See the description for class SpMatrix Return Column index for column i See the description for class SpMatrix Return Column index for column i See the description for class SpMatrix Return Column index for column i See the description for class SpMatrix Return Column index for column i See the description for class SpMatrix Return Column index for column i See the description for class SpMatrix Return Column index for column i See the description for class SpMatrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::reset</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Matrix.html#a7b0e029102ad38f4b814c6523aedb53d</field>
    <field name="keywords">reset OFELI::Matrix::reset Matrix&lt; T_ &gt; reset OFELI::Matrix&lt; real_t &gt;::reset Matrix&lt; real_t &gt;</field>
    <field name="text">Set matrix to 0 and reset factorization parameter Set matrix to 0 and reset factorization parameter Set matrix to 0 and reset factorization parameter This function must be used if after a factorization the matrix has been modified Set matrix to 0 and reset factorization parameter Set matrix to 0 and reset factorization parameter Set matrix to 0 and reset factorization parameter Set matrix to 0 and reset factorization parameter</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::operator()</field>
    <field name="args">(size_t i, size_t j)=0</field>
    <field name="url">classOFELI_1_1Matrix.html#a810701d0b21e8e46149c763b7fa3b2e4</field>
    <field name="keywords">operator() OFELI::Matrix::operator() Matrix&lt; T_ &gt; operator() OFELI::Matrix&lt; real_t &gt;::operator() Matrix&lt; real_t &gt;</field>
    <field name="text">Operator Non constant version Returns the i j entry of the matrix i Row index j Column index</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::add</field>
    <field name="args">(size_t i, size_t j, const T_ &amp;val)=0</field>
    <field name="url">classOFELI_1_1Matrix.html#a8afb24c3d7982f994ea2c4a50444ed86</field>
    <field name="keywords">add OFELI::Matrix::add Matrix&lt; T_ &gt; add OFELI::Matrix&lt; real_t &gt;::add Matrix&lt; real_t &gt;</field>
    <field name="text">Add val to entry i j</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::getRowPtr</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Matrix.html#aa18dac37f25a34f20e16d92b0c08562a</field>
    <field name="keywords">getRowPtr OFELI::Matrix::getRowPtr Matrix&lt; T_ &gt; getRowPtr OFELI::Matrix&lt; real_t &gt;::getRowPtr Matrix&lt; real_t &gt;</field>
    <field name="text">Return Row pointer for row i See the description for class SpMatrix Return Row pointer for row i See the description for class SpMatrix Return Row pointer for row i See the description for class SpMatrix Return Row pointer for row i See the description for class SpMatrix Return Row pointer for row i See the description for class SpMatrix Return Row pointer for row i See the description for class SpMatrix Return Row pointer for row i See the description for class SpMatrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::get</field>
    <field name="args">(size_t i, size_t j) const =0</field>
    <field name="url">classOFELI_1_1Matrix.html#aa81295999817562cfd993c45a8324d9c</field>
    <field name="keywords">get OFELI::Matrix::get Matrix&lt; T_ &gt; get OFELI::Matrix&lt; real_t &gt;::get Matrix&lt; real_t &gt;</field>
    <field name="text">Return entry i j of matrix if this one is stored 0 else</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::Mult</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;x, Vect&lt; T_ &gt; &amp;y) const =0</field>
    <field name="url">classOFELI_1_1Matrix.html#aa850af860cbcc2451c27b96a6480b7d5</field>
    <field name="keywords">Mult OFELI::Matrix::Mult Matrix&lt; T_ &gt; Mult OFELI::Matrix&lt; real_t &gt;::Mult Matrix&lt; real_t &gt;</field>
    <field name="text">Multiply matrix by vector x and save in y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::MultAdd</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;x, Vect&lt; T_ &gt; &amp;y) const =0</field>
    <field name="url">classOFELI_1_1Matrix.html#aabb922c181e0e5277e3fb6ad75ac08b7</field>
    <field name="keywords">MultAdd OFELI::Matrix::MultAdd Matrix&lt; T_ &gt; MultAdd OFELI::Matrix&lt; real_t &gt;::MultAdd Matrix&lt; real_t &gt;</field>
    <field name="text">Multiply matrix by vector x and add to y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::clear</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Matrix.html#aae048282c7011eedc2e0492f6421ea73</field>
    <field name="keywords">clear OFELI::Matrix::clear Matrix&lt; T_ &gt; clear OFELI::Matrix&lt; real_t &gt;::clear Matrix&lt; real_t &gt;</field>
    <field name="text">brief Set all matrix entries to zero brief Set all matrix entries to zero brief Set all matrix entries to zero brief Set all matrix entries to zero brief Set all matrix entries to zero brief Set all matrix entries to zero brief Set all matrix entries to zero</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::Assembly</field>
    <field name="args">(const Element &amp;el, T_ *a)</field>
    <field name="url">classOFELI_1_1Matrix.html#aae8f063011ae37198a6c96ad00da6188</field>
    <field name="keywords">Assembly OFELI::Matrix::Assembly Matrix&lt; T_ &gt; Assembly OFELI::Matrix&lt; real_t &gt;::Assembly Matrix&lt; real_t &gt;</field>
    <field name="text">Assembly of element matrix into global matrix Assembly of element matrix into global matrix Assembly of element matrix into global matrix Assembly of element matrix into global matrix Case where element matrix is given by a C-array el Pointer to element instance a Element matrix as a C-array Assembly of element matrix into global matrix Assembly of element matrix into global matrix Assembly of element matrix into global matrix Assembly of element matrix into global matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::operator+=</field>
    <field name="args">(const T_ &amp;x)</field>
    <field name="url">classOFELI_1_1Matrix.html#aaf36de7371b185fb106d6ccf4fd9efa6</field>
    <field name="keywords">operator+= OFELI::Matrix::operator+= Matrix&lt; T_ &gt; operator+= OFELI::Matrix&lt; real_t &gt;::operator+= Matrix&lt; real_t &gt;</field>
    <field name="text">Operator Operator Operator Operator Add constant value x to all matrix entries Operator Operator Operator Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::operator[]</field>
    <field name="args">(size_t k)</field>
    <field name="url">classOFELI_1_1Matrix.html#ab4ee4002dcc624b8dd92087bdb328da1</field>
    <field name="keywords">operator[] OFELI::Matrix::operator[] Matrix&lt; T_ &gt; operator[] OFELI::Matrix&lt; real_t &gt;::operator[] Matrix&lt; real_t &gt;</field>
    <field name="text">Operator Non constant version Operator Non constant version Operator Non constant version Operator Non constant version Returns k th stored element in matrix Index k starts at 0 Operator Non constant version Operator Non constant version Operator Non constant version Operator Non constant version</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::Factor</field>
    <field name="args">()=0</field>
    <field name="url">classOFELI_1_1Matrix.html#ab9f6b1105cb4953c3f56b5c51ed4b046</field>
    <field name="keywords">Factor OFELI::Matrix::Factor Matrix&lt; T_ &gt; Factor OFELI::Matrix&lt; real_t &gt;::Factor Matrix&lt; real_t &gt;</field>
    <field name="text">Factorize matrix Available only if the storage class enables it Factorize matrix Available only if the storage class enables it Factorize matrix Available only if the storage class enables it Factorize matrix Available only if the storage class enables it Factorize matrix Available only if the storage class enables it Factorize matrix Available only if the storage class enables it Factorize matrix Available only if the storage class enables it Factorize matrix Available only if the storage class enables it</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::set</field>
    <field name="args">(size_t i, size_t j, const T_ &amp;val)=0</field>
    <field name="url">classOFELI_1_1Matrix.html#ac0cea700fd87a3493ee917937ca21796</field>
    <field name="keywords">set OFELI::Matrix::set Matrix&lt; T_ &gt; set OFELI::Matrix&lt; real_t &gt;::set Matrix&lt; real_t &gt;</field>
    <field name="text">Assign a value to an entry of the matrix i Row index j Column index val Value to assign</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::getMatrixSize</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Matrix.html#ac5884b405cb5be2e811eda5c3038b0c8</field>
    <field name="keywords">getMatrixSize OFELI::Matrix::getMatrixSize Matrix&lt; T_ &gt; getMatrixSize OFELI::Matrix&lt; real_t &gt;::getMatrixSize Matrix&lt; real_t &gt;</field>
    <field name="text">Return storage type Return storage type Return storage type Return storage type Return storage type Return storage type Return storage type Return storage type</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::operator-=</field>
    <field name="args">(const T_ &amp;x)</field>
    <field name="url">classOFELI_1_1Matrix.html#ac6ff3519680115e5c3fcdab05aa96154</field>
    <field name="keywords">operator-= OFELI::Matrix::operator-= Matrix&lt; T_ &gt; operator-= OFELI::Matrix&lt; real_t &gt;::operator-= Matrix&lt; real_t &gt;</field>
    <field name="text">Operator Operator Operator Operator Subtract constant value x from all matrix entries Operator Operator Operator Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::at</field>
    <field name="args">(size_t i, size_t j)=0</field>
    <field name="url">classOFELI_1_1Matrix.html#aceb1c3981384a95d694c5d5d837a693f</field>
    <field name="keywords">at OFELI::Matrix::at Matrix&lt; T_ &gt; at OFELI::Matrix&lt; real_t &gt;::at Matrix&lt; real_t &gt;</field>
    <field name="text">Return a value of a matrix entry i Row index starts at 1 j Column index starts at 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::operator+=</field>
    <field name="args">(const Matrix&lt; T_ &gt; &amp;m)</field>
    <field name="url">classOFELI_1_1Matrix.html#ad1776b6a1b258fef20575e11796a79ce</field>
    <field name="keywords">operator+= OFELI::Matrix::operator+= Matrix&lt; T_ &gt; operator+= OFELI::Matrix&lt; real_t &gt;::operator+= Matrix&lt; real_t &gt;</field>
    <field name="text">Operator Operator Operator Operator Add matrix m to current matrix instance Operator Operator Operator Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::FactorAndSolve</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;b, Vect&lt; T_ &gt; &amp;x)</field>
    <field name="url">classOFELI_1_1Matrix.html#ad20265f18b86fdc36c0c694d34bb01db</field>
    <field name="keywords">FactorAndSolve OFELI::Matrix::FactorAndSolve Matrix&lt; T_ &gt; FactorAndSolve OFELI::Matrix&lt; real_t &gt;::FactorAndSolve Matrix&lt; real_t &gt;</field>
    <field name="text">Factorize matrix and solve the linear system Factorize matrix and solve the linear system Factorize matrix and solve the linear system Factorize matrix and solve the linear system This is available only if the storage class enables it b Vect instance that contains right-hand side x Vect instance that contains solution 0 if solution was normally performed n if the n-th pivot is nul Factorize matrix and solve the linear system Factorize matrix and solve the linear system Factorize matrix and solve the linear system Factorize matrix and solve the linear system</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::getNbColumns</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Matrix.html#ad30b65e768e3f5e37341c8499c0ca69d</field>
    <field name="keywords">getNbColumns OFELI::Matrix::getNbColumns Matrix&lt; T_ &gt; getNbColumns OFELI::Matrix&lt; real_t &gt;::getNbColumns Matrix&lt; real_t &gt;</field>
    <field name="text">Return number of columns Return number of columns Return number of columns Return number of columns Return number of columns Return number of columns Return number of columns Return number of columns</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::TMult</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;v, Vect&lt; T_ &gt; &amp;w) const =0</field>
    <field name="url">classOFELI_1_1Matrix.html#ad49eca210313bf40500590ef0b20f10e</field>
    <field name="keywords">TMult OFELI::Matrix::TMult Matrix&lt; T_ &gt; TMult OFELI::Matrix&lt; real_t &gt;::TMult Matrix&lt; real_t &gt;</field>
    <field name="text">Multiply transpose of matrix by vector x and save in y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::isDiagonal</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Matrix.html#adc619748a04804865ea4574236237d2d</field>
    <field name="keywords">isDiagonal OFELI::Matrix::isDiagonal Matrix&lt; T_ &gt; isDiagonal OFELI::Matrix&lt; real_t &gt;::isDiagonal Matrix&lt; real_t &gt;</field>
    <field name="text">Say if matrix is diagonal or not Say if matrix is diagonal or not Say if matrix is diagonal or not Say if matrix is diagonal or not Say if matrix is diagonal or not Say if matrix is diagonal or not Say if matrix is diagonal or not Say if matrix is diagonal or not</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::operator[]</field>
    <field name="args">(size_t k) const</field>
    <field name="url">classOFELI_1_1Matrix.html#adcabe33df61561c7a84e5a4eaa2626e0</field>
    <field name="keywords">operator[] OFELI::Matrix::operator[] Matrix&lt; T_ &gt; operator[] OFELI::Matrix&lt; real_t &gt;::operator[] Matrix&lt; real_t &gt;</field>
    <field name="text">Operator Constant version Operator Constant version Operator Constant version Operator Constant version Returns k th stored element in matrix Index k starts at 0 Operator Constant version Operator Constant version Operator Constant version Operator Constant version</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::add</field>
    <field name="args">(size_t i, const T_ &amp;val)=0</field>
    <field name="url">classOFELI_1_1Matrix.html#ae72516cc39020b9e670f6934e8a6b1cf</field>
    <field name="keywords">add OFELI::Matrix::add Matrix&lt; T_ &gt; add OFELI::Matrix&lt; real_t &gt;::add Matrix&lt; real_t &gt;</field>
    <field name="text">Add val to entry i</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::operator*=</field>
    <field name="args">(const T_ &amp;x)</field>
    <field name="url">classOFELI_1_1Matrix.html#aeb29414f7d55d13a31c4d42aef76556e</field>
    <field name="keywords">operator*= OFELI::Matrix::operator*= Matrix&lt; T_ &gt; operator*= OFELI::Matrix&lt; real_t &gt;::operator*= Matrix&lt; real_t &gt;</field>
    <field name="text">Operator Operator Operator Operator Premultiply matrix entries by constant value x Operator Operator Operator Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::isFactorized</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Matrix.html#aee41ed7a347382b849de2d23f98414b1</field>
    <field name="keywords">isFactorized OFELI::Matrix::isFactorized Matrix&lt; T_ &gt; isFactorized OFELI::Matrix&lt; real_t &gt;::isFactorized Matrix&lt; real_t &gt;</field>
    <field name="text">Say if matrix is factorized or not Say if matrix is factorized or not Say if matrix is factorized or not Say if matrix is factorized or not If the matrix was not factorized the class does not allow solving by a direct solver Say if matrix is factorized or not Say if matrix is factorized or not Say if matrix is factorized or not Say if matrix is factorized or not</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::getNbRows</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Matrix.html#af0536df9ea10635856f008d21d125f32</field>
    <field name="keywords">getNbRows OFELI::Matrix::getNbRows Matrix&lt; T_ &gt; getNbRows OFELI::Matrix&lt; real_t &gt;::getNbRows Matrix&lt; real_t &gt;</field>
    <field name="text">Return number of rows Return number of rows Return number of rows Return number of rows Return number of rows Return number of rows Return number of rows Return number of rows</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::Axpy</field>
    <field name="args">(T_ a, const Matrix&lt; T_ &gt; *x)=0</field>
    <field name="url">classOFELI_1_1Matrix.html#af6d9078abcad160961668918ffd89df8</field>
    <field name="keywords">Axpy OFELI::Matrix::Axpy Matrix&lt; T_ &gt; Axpy OFELI::Matrix&lt; real_t &gt;::Axpy Matrix&lt; real_t &gt;</field>
    <field name="text">Add to matrix the product of a matrix by a scalar a Scalar to premultiply x Matrix by which a is multiplied The result is added to current instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Matrix::FactorAndSolve</field>
    <field name="args">(Vect&lt; T_ &gt; &amp;b)</field>
    <field name="url">classOFELI_1_1Matrix.html#af70ebb919bf4d6e5e646c1c113392a79</field>
    <field name="keywords">FactorAndSolve OFELI::Matrix::FactorAndSolve Matrix&lt; T_ &gt; FactorAndSolve OFELI::Matrix&lt; real_t &gt;::FactorAndSolve Matrix&lt; real_t &gt;</field>
    <field name="text">Factorize matrix and solve the linear system Factorize matrix and solve the linear system Factorize matrix and solve the linear system Factorize matrix and solve the linear system This is available only if the storage cass enables it b Vect instance that contains right-hand side on input and solution on output Factorize matrix and solve the linear system Factorize matrix and solve the linear system Factorize matrix and solve the linear system Factorize matrix and solve the linear system</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Mesh</field>
    <field name="url">classOFELI_1_1Mesh.html</field>
    <field name="keywords">Mesh</field>
    <field name="text">To store and manipulate finite element meshes Class Mesh enables defining as an object a finite element mesh A finite element mesh is characterized by its nodes elements and sides Each of these types of data constitutes a class in the OFELI library The standard procedure to introduce the finite element mesh is to provide an input file containing its data For this we have defined our own mesh data file following the XML syntax Of course a developer can write his own function to read his finite element mesh file using the methods in Mesh Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::NumberEquations</field>
    <field name="args">(size_t dof, int c)</field>
    <field name="url">classOFELI_1_1Mesh.html#a0056e9cf5e3724ec1805cdb9b9d079ab</field>
    <field name="keywords">NumberEquations OFELI::Mesh::NumberEquations Mesh</field>
    <field name="text">Renumber Equations dof Label of degree of freedom for which numbering is performed c code for which degrees of freedom are enforced</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getNbSides</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Mesh.html#a0252edb7d5457ec0225ffff64dcdccb2</field>
    <field name="keywords">getNbSides OFELI::Mesh::getNbSides Mesh</field>
    <field name="text">Return number of sides</field>
  </doc>
  <doc>
    <field name="type">friend</field>
    <field name="name">OFELI::Mesh::Refine</field>
    <field name="args">(Mesh &amp;in_mesh, Mesh &amp;out_mesh)</field>
    <field name="url">classOFELI_1_1Mesh.html#a0365656f8f6a5ce45ee38bfe1e0d0b55</field>
    <field name="keywords">Refine OFELI::Mesh::Refine Mesh</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getNodeNewLabel</field>
    <field name="args">(size_t n) const</field>
    <field name="url">classOFELI_1_1Mesh.html#a07de02a6559036ae46cb07488eded16f</field>
    <field name="keywords">getNodeNewLabel OFELI::Mesh::getNodeNewLabel Mesh</field>
    <field name="text">Return new label of node of a renumbered node</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::Add</field>
    <field name="args">(Element *el)</field>
    <field name="url">classOFELI_1_1Mesh.html#a09bede292ad1986fef93ecdf07a12389</field>
    <field name="keywords">Add OFELI::Mesh::Add Mesh</field>
    <field name="text">Add an element to mesh el Pointer to Element to add</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::operator()</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Mesh.html#a0adc1adb02d672ffe755ae926797bef6</field>
    <field name="keywords">operator() OFELI::Mesh::operator() Mesh</field>
    <field name="text">Operator Return pointer to i-th element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::isStructured</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Mesh.html#a0df96404d3d5b00129803ff563198aa5</field>
    <field name="keywords">isStructured OFELI::Mesh::isStructured Mesh</field>
    <field name="text">Return true is mesh is structured false if not</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::DeleteElement</field>
    <field name="args">(size_t label)</field>
    <field name="url">classOFELI_1_1Mesh.html#a0e9ad231ccb44fec08e4a87e52e9e0ee</field>
    <field name="keywords">DeleteElement OFELI::Mesh::DeleteElement Mesh</field>
    <field name="text">Remove an element given by its label This function does not release the space previously occupied label Label of element to delete</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::Mesh</field>
    <field name="args">(const string &amp;file, bool bc=false, int opt=NODE_DOF, int nb_dof=1)</field>
    <field name="url">classOFELI_1_1Mesh.html#a0eb36f72caebac10b2dc4fa4b3cfa348</field>
    <field name="keywords">Mesh OFELI::Mesh::Mesh Mesh</field>
    <field name="text">Constructor using a mesh file file File containing mesh data The extension of the file yields the file format The extension m implies OFELI file format and msh implies GMSH msh file bc Flag to remove true or not false imposed Degrees of Freedom default false opt Type of DOF support To choose among enumerated values NODE_DOF SIDE_DOF or ELEMENT_DOF Say if degrees of freedom unknowns are supported by nodes sides or elements nb_dof Number of degrees of freedom per node Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::Mesh</field>
    <field name="args">(const Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1Mesh.html#a1845285156a077d03c74852052b35326</field>
    <field name="keywords">Mesh OFELI::Mesh::Mesh Mesh</field>
    <field name="text">Copy Constructor ms Mesh instance to copy</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::AddMidNodes</field>
    <field name="args">(int g=0)</field>
    <field name="url">classOFELI_1_1Mesh.html#a1d2ebc8b27d33934c44fbc6dce5af980</field>
    <field name="keywords">AddMidNodes OFELI::Mesh::AddMidNodes Mesh</field>
    <field name="text">Add mid-side nodes This is function is valid for triangles only g Option to say of barycentre node is to be added 0 or not 0</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::Deform</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;u, real_t rate=0.2)</field>
    <field name="url">classOFELI_1_1Mesh.html#a2936185b6875c87a6c6acd47c0f7d940</field>
    <field name="keywords">Deform OFELI::Mesh::Deform Mesh</field>
    <field name="text">Deform mesh according to a displacement vector This function modifies node coordinates according to given displacement vector and given rate u Displacement vector rate Maximal rate of deformation of resulting mesh Its default value is 0.2 i.e The resulting mesh has a maximum of deformation rate of 2 0</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::Mesh</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Mesh.html#a2a23c7c0c4e0da252b7bc0e13b6f81d8</field>
    <field name="keywords">Mesh OFELI::Mesh::Mesh Mesh</field>
    <field name="text">Default constructor Empty mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getNbDOF</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Mesh.html#a2e702838dc1b95944fd571e804950aa3</field>
    <field name="keywords">getNbDOF OFELI::Mesh::getNbDOF Mesh</field>
    <field name="text">Return total number of degrees of freedom DOF</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::Mesh</field>
    <field name="args">(const Grid &amp;g, int shape, int opt)</field>
    <field name="url">classOFELI_1_1Mesh.html#a30bba05320d35fffb075fd54648ab696</field>
    <field name="keywords">Mesh OFELI::Mesh::Mesh Mesh</field>
    <field name="text">Constructor of dual mesh for a uniform finite difference grid given by and instance of class Grid g Grid instance shape Value to say which type of elements to generate TRIANGLE Mesh elements are triangles QUADRILATERAL Mesh elements are quadrilaterals default opt This argument can take any value It is here only to distinguish from the other constructor using Grid instance This constructor is to be used to obtain a dual mesh from a structured grid It is mainly useful if a cell centered finite volume method is used</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getNbBoundarySides</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Mesh.html#a333d4cf5474a767d97d01739b0d4f0dc</field>
    <field name="keywords">getNbBoundarySides OFELI::Mesh::getNbBoundarySides Mesh</field>
    <field name="text">Return number of boundary sides This function is valid if member function getAllSides or getBoundarySides has been invoked before</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::DeleteSide</field>
    <field name="args">(size_t label)</field>
    <field name="url">classOFELI_1_1Mesh.html#a339e66b4129bdfa48cc40f46d9ca116d</field>
    <field name="keywords">DeleteSide OFELI::Mesh::DeleteSide Mesh</field>
    <field name="text">Remove a side given by its label This function does not release the space previously occupied label Label of side to delete</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::operator[]</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Mesh.html#a35fcf42f52b1f7700e327f1b793f81e7</field>
    <field name="keywords">operator[] OFELI::Mesh::operator[] Mesh</field>
    <field name="text">Operator Return pointer to i-th node</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getNbMarkedNodes</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Mesh.html#a360a5d5e39f6e2d0698c2e255e2cfb28</field>
    <field name="keywords">getNbMarkedNodes OFELI::Mesh::getNbMarkedNodes Mesh</field>
    <field name="text">Return number of marked nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getSideLabel</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Mesh.html#a3c3a15ee6a721d8705b97f3353cb4a8f</field>
    <field name="keywords">getSideLabel OFELI::Mesh::getSideLabel Mesh</field>
    <field name="text">Return label of i th side i Side index</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::SidesAreDOF</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Mesh.html#a42f2ea7287439b9314794451f6391b6a</field>
    <field name="keywords">SidesAreDOF OFELI::Mesh::SidesAreDOF Mesh</field>
    <field name="text">Return information about DOF type true if DOF are supported by sides false otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::Add</field>
    <field name="args">(Side *sd)</field>
    <field name="url">classOFELI_1_1Mesh.html#a45628b3145186a0b7cb844d9d4b9bf4a</field>
    <field name="keywords">Add OFELI::Mesh::Add Mesh</field>
    <field name="text">Add a side to mesh sd Pointer to Side to add</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::operator()</field>
    <field name="args">(size_t i, size_t n) const</field>
    <field name="url">classOFELI_1_1Mesh.html#a462ea927bf9dc6211c6f46062410c8b4</field>
    <field name="keywords">operator() OFELI::Mesh::operator() Mesh</field>
    <field name="text">Operator Return pointer to i-th node of n-th element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getAllSides</field>
    <field name="args">(int opt=0)</field>
    <field name="url">classOFELI_1_1Mesh.html#a5055507ee72ea249f3f25e39811e2b47</field>
    <field name="keywords">getAllSides OFELI::Mesh::getAllSides Mesh</field>
    <field name="text">Determine all mesh sides Number of all sides</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::Mesh</field>
    <field name="args">(const Grid &amp;g, int opt=QUADRILATERAL)</field>
    <field name="url">classOFELI_1_1Mesh.html#a511af0188a793ce22e001565e5a0ce9b</field>
    <field name="keywords">Mesh OFELI::Mesh::Mesh Mesh</field>
    <field name="text">Constructor for a uniform finite difference grid given by and instance of class Grid g Grid instance opt Optional value to say which type of elements to generate TRIANGLE Mesh elements are triangles QUADRILATERAL Mesh elements are quadrilaterals default</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getElementLabel</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Mesh.html#a51ecc02663c02bd188ddb6af8375de0d</field>
    <field name="keywords">getElementLabel OFELI::Mesh::getElementLabel Mesh</field>
    <field name="text">Return label of i th element i Element index</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::setList</field>
    <field name="args">(const vector&lt; Node * &gt; &amp;nl)</field>
    <field name="url">classOFELI_1_1Mesh.html#a53b21a99ba617b960ff0e2114499d7d4</field>
    <field name="keywords">setList OFELI::Mesh::setList Mesh</field>
    <field name="text">Initialize list of mesh nodes using the input vector nl vector instance that contains the list of pointers to nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::Reorder</field>
    <field name="args">(size_t m=GRAPH_MEMORY)</field>
    <field name="url">classOFELI_1_1Mesh.html#a54ba231e155c667ed5e184e86b079022</field>
    <field name="keywords">Reorder OFELI::Mesh::Reorder Mesh</field>
    <field name="text">Renumber mesh nodes according to reverse Cuthill Mc Kee algorithm m Memory size needed for matrix graph default value is GRAPH_MEMORY see OFELI_Config.h</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::put</field>
    <field name="args">(const string &amp;mesh_file) const</field>
    <field name="url">classOFELI_1_1Mesh.html#a558d96c3b8e2578c3ebb81854c6dd346</field>
    <field name="keywords">put OFELI::Mesh::put Mesh</field>
    <field name="text">Write mesh data on file mesh_file Mesh file name</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getNbEq</field>
    <field name="args">(int i) const</field>
    <field name="url">classOFELI_1_1Mesh.html#a5718fc44fb3e4ab73b5f8286de51ba87</field>
    <field name="keywords">getNbEq OFELI::Mesh::getNbEq Mesh</field>
    <field name="text">Return number of equations for the i-th set of degrees of freedom</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getNbVertices</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Mesh.html#a5750242d0acee0978dba9bf1261914cd</field>
    <field name="keywords">getNbVertices OFELI::Mesh::getNbVertices Mesh</field>
    <field name="text">Return number of vertices</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getNbElementNodes</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Mesh.html#a598469722053e26be8365a87c5c615bb</field>
    <field name="keywords">getNbElementNodes OFELI::Mesh::getNbElementNodes Mesh</field>
    <field name="text">Return the number of nodes in each element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::DeleteNode</field>
    <field name="args">(size_t label)</field>
    <field name="url">classOFELI_1_1Mesh.html#a5a03aad564d25e78fb3ae8b1cb138458</field>
    <field name="keywords">DeleteNode OFELI::Mesh::DeleteNode Mesh</field>
    <field name="text">Remove a node given by its label This function does not release the space previously occupied label Label of node to delete</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::Mesh</field>
    <field name="args">(const Mesh &amp;mesh, int opt, size_t dof1, size_t dof2, bool bc=false)</field>
    <field name="url">classOFELI_1_1Mesh.html#a5e9a62f6c0378c37ee1d162cdd03b728</field>
    <field name="keywords">Mesh OFELI::Mesh::Mesh Mesh</field>
    <field name="text">Constructor that copies the input mesh and selects given degrees of freedom This constructor is to be used for coupled problems where each subproblem uses a choice of degrees of freedom mesh Initial mesh from which the submesh is extracted opt Type of DOF support To choose among enumerated values NODE_DOF SIDE_DOF or ELEMENT_DOF dof1 Label of first degree of freedom to select to the output mesh dof2 Label of last degree of freedom to select to the output mesh bc Flag to remove true or not false imposed Degrees of Freedom Default false</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::Add</field>
    <field name="args">(size_t num, real_t *x)</field>
    <field name="url">classOFELI_1_1Mesh.html#a600fc68727a47f071de63304136a45e3</field>
    <field name="keywords">Add OFELI::Mesh::Add Mesh</field>
    <field name="text">Add a node by giving its label and an array containing its coordinates num Label of node to add x C-array of node coordinates</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::Mesh</field>
    <field name="args">(const Mesh &amp;m, const Point&lt; real_t &gt; &amp;x_bl, const Point&lt; real_t &gt; &amp;x_tr)</field>
    <field name="url">classOFELI_1_1Mesh.html#a60db3ca388f9d538650a3f6967a1b98e</field>
    <field name="keywords">Mesh OFELI::Mesh::Mesh Mesh</field>
    <field name="text">Constructor that extracts the mesh of a rectangular region from an initial mesh This constructor is useful for zooming purposes for instance m Initial mesh from which the submesh is extracted x_bl Coordinate of bottom left vertex of the rectangle x_tr Coordinate of top right vertex of the rectangle</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::Delete</field>
    <field name="args">(Side *sd)</field>
    <field name="url">classOFELI_1_1Mesh.html#a62a4dd35586001bf99f42546628b23d7</field>
    <field name="keywords">Delete OFELI::Mesh::Delete Mesh</field>
    <field name="text">Remove a side given by its pointer This function does not release the space previously occupied sd Pointer to side to delete</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::Mesh</field>
    <field name="args">(real_t xmin, real_t xmax, size_t ne, int c1, int c2, int p=1, size_t nb_dof=1)</field>
    <field name="url">classOFELI_1_1Mesh.html#a62cd7a5df1ef66ac5b783914ac45ac03</field>
    <field name="keywords">Mesh OFELI::Mesh::Mesh Mesh</field>
    <field name="text">Constructor for a uniform 1 D finite element mesh The domain is the line xmin xmax xmin Minimal coordinate xmax Maximal coordinate ne Number of elements c1 Code for the first node x xmin c2 Code for the last node x xmax p Degree of approximation polynomial Default 1 nb_dof Number of degrees of freedom per node Default 1 The option p can be set to 1 if the user intends to use finite differences</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::operator=</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1Mesh.html#a6404c65e434c84c0db539c29e34f5421</field>
    <field name="keywords">operator= OFELI::Mesh::operator= Mesh</field>
    <field name="text">Operator Assign a Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getElementNeighborElements</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Mesh.html#a67998519cd2f088f31d6804deae57aa9</field>
    <field name="keywords">getElementNeighborElements OFELI::Mesh::getElementNeighborElements Mesh</field>
    <field name="text">Create element neighboring elements This function creates for each element the list of elements that share a side with it Once this function is invoked one can retrieve the list of neighboring elements of any element Element::getNeigborElement</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getNbInternalSides</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Mesh.html#a69676865560380c7e5dee1cb23ddf065</field>
    <field name="keywords">getNbInternalSides OFELI::Mesh::getNbInternalSides Mesh</field>
    <field name="text">Return number of internal sides This function is valid if member functions getAllSides and createInternalSideList have been invoked before</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getNodeNeighborElements</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Mesh.html#a6a1a80ffe7347b21f014ae07ade0a872</field>
    <field name="keywords">getNodeNeighborElements OFELI::Mesh::getNodeNeighborElements Mesh</field>
    <field name="text">Create node neighboring elements This function is generally useful when for a numerical method one looks for a given node to the list of elements that share this node Once this function is invoked one can retrieve the list of neighboring elements of any node Node::getNeigEl</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::set</field>
    <field name="args">(Element *el)</field>
    <field name="url">classOFELI_1_1Mesh.html#a6b998b55eb42464f3f5a4e632a0d3dc8</field>
    <field name="keywords">set OFELI::Mesh::set Mesh</field>
    <field name="text">Replace element in the mesh If the element label exists already the existing element pointer will be replaced by the current one If not an error message is displayed el Pointer to element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::~Mesh</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Mesh.html#a6e26384cfb03023e7dc2e5419baf813f</field>
    <field name="keywords">OFELI::Mesh::~Mesh Mesh</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getSide</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Mesh.html#a6eb0cc516b2bbe482a89117f49d8ebef</field>
    <field name="keywords">getSide OFELI::Mesh::getSide Mesh</field>
    <field name="text">Return reference to side with label i</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::NodesAreDOF</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Mesh.html#a6fddcf8846c68998321e1086b82bf669</field>
    <field name="keywords">NodesAreDOF OFELI::Mesh::NodesAreDOF Mesh</field>
    <field name="text">Return information about DOF type true if DOF are supported by nodes false otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getMinCoord</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Mesh.html#a70cb44834a0be1f298a7c85d9d700195</field>
    <field name="keywords">getMinCoord OFELI::Mesh::getMinCoord Mesh</field>
    <field name="text">Return minimum coordinates of nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getAllEdges</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Mesh.html#a71cbe82b9babdbf8ca7acfcd6fe75c0c</field>
    <field name="keywords">getAllEdges OFELI::Mesh::getAllEdges Mesh</field>
    <field name="text">Determine all edges Number of all edges</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::removeImposedDOF</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Mesh.html#a7267ba07b99f2b4425bf611fdd7e1046</field>
    <field name="keywords">removeImposedDOF OFELI::Mesh::removeImposedDOF Mesh</field>
    <field name="text">Eliminate equations corresponding to imposed DOF</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::withImposedDOF</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Mesh.html#a77a29848e2a33dcd78696f7ff58cf96c</field>
    <field name="keywords">withImposedDOF OFELI::Mesh::withImposedDOF Mesh</field>
    <field name="text">Return true if imposed DOF count in equations false if not</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getList</field>
    <field name="args">(vector&lt; Side * &gt; &amp;sl) const</field>
    <field name="url">classOFELI_1_1Mesh.html#a792c96b89e8556a6e08b98b5212b1d4f</field>
    <field name="keywords">getList OFELI::Mesh::getList Mesh</field>
    <field name="text">Fill vector sl with list of pointers to sides sl Instance of class vector that contain on output the list</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getNodeLabel</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Mesh.html#a7acd721132e595cb11316c41a77b5bf8</field>
    <field name="keywords">getNodeLabel OFELI::Mesh::getNodeLabel Mesh</field>
    <field name="text">Return label of i th node i Node index</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getNbEq</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Mesh.html#a7e81ee9c88f36ed678b711aaf77fcfb1</field>
    <field name="keywords">getNbEq OFELI::Mesh::getNbEq Mesh</field>
    <field name="text">Return number of equations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::get</field>
    <field name="args">(const string &amp;mesh_file, int ff, int nb_dof=1)</field>
    <field name="url">classOFELI_1_1Mesh.html#a7f2d27326b9d000adcb7ece7869e5dd3</field>
    <field name="keywords">get OFELI::Mesh::get Mesh</field>
    <field name="text">Read mesh data in file with giving its format File format can be chosen among a variety of choices See page mesh_file Mesh file name ff File format Integer to chose among enumerated values OFELI_FF GMSH MATLAB EASYMESH GAMBIT BAMG NETGEN TRIANGLE_FF nb_dof Number of degrees of freedom per node Default value 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getList</field>
    <field name="args">(vector&lt; Node * &gt; &amp;nl) const</field>
    <field name="url">classOFELI_1_1Mesh.html#a8032c583969f57d9e5819e67514af446</field>
    <field name="keywords">getList OFELI::Mesh::getList Mesh</field>
    <field name="text">Fill vector nl with list of pointers to nodes nl Instance of class vector that contain on output the list</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getDOFSupport</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Mesh.html#a8202c12e59a5dc6262325fc679db4e74</field>
    <field name="keywords">getDOFSupport OFELI::Mesh::getDOFSupport Mesh</field>
    <field name="text">Return information on dof support Return an integer according to enumerated values NODE_DOF ELEMENT_DOF SIDE_DOF</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getBoundarySides</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Mesh.html#a880de753ae04fc97344dcd31be1be0bc</field>
    <field name="keywords">getBoundarySides OFELI::Mesh::getBoundarySides Mesh</field>
    <field name="text">Determine all boundary sides Number of boundary sides</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::Mesh</field>
    <field name="args">(real_t xmin, real_t xmax, size_t nb_el, bool bc=false, size_t p=1, size_t nb_dof=1, int c1=0, int c2=0)</field>
    <field name="url">classOFELI_1_1Mesh.html#a8a38fec730e0dd35379232aad45e01d3</field>
    <field name="keywords">Mesh OFELI::Mesh::Mesh Mesh</field>
    <field name="text">Constructor for a 1 D mesh The domain is the interval xmin xmax xmin Value of xmin xmax Value of xmax nb_el Number of elements to generate bc Flag to remove true or not false imposed Degrees of Freedom default false p Degree of finite element polynomial default 1 nb_dof Number of degrees of freedom for each node default 1 c1 Code to assign to first node at x xmin default 0 c2 Code to assign to last node at x xmax default 0</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::createBoundarySideList</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Mesh.html#a8bfc455452a73aaa76214688e7a19751</field>
    <field name="keywords">createBoundarySideList OFELI::Mesh::createBoundarySideList Mesh</field>
    <field name="text">Create list of boundary sides This function is useful to loop over boundary sides without testing Once this one is called the function getNbBoundarySides() is available Moreover looping over boundary sides is available via the member functions topBoundarySide() and getBoundarySide() Number of boundary sides</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getPtrSide</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Mesh.html#a8c9406f07be76c6080928910b2214e53</field>
    <field name="keywords">getPtrSide OFELI::Mesh::getPtrSide Mesh</field>
    <field name="text">Return pointer to side with label i</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::Rescale</field>
    <field name="args">(real_t sx, real_t sy=0., real_t sz=0.)</field>
    <field name="url">classOFELI_1_1Mesh.html#a8f5d423e94df044fb460a00678a0d174</field>
    <field name="keywords">Rescale OFELI::Mesh::Rescale Mesh</field>
    <field name="text">Rescale mesh by multiplying node coordinates by constants This function can be used e.g for changing coordinate units sx Factor to multiply by x coordinates sy Factor to multiply by y coordinates Default sx sz Factor to multiply by z coordinates Default sx</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::RenumberEdge</field>
    <field name="args">(size_t n1, size_t n2)</field>
    <field name="url">classOFELI_1_1Mesh.html#a913747d999d4ae8545a5126e5ef7302b</field>
    <field name="keywords">RenumberEdge OFELI::Mesh::RenumberEdge Mesh</field>
    <field name="text">Renumber an edge n1 Old label n2 New label</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getNbMat</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Mesh.html#a93bc85150c3d572f68fad58b779ec10c</field>
    <field name="keywords">getNbMat OFELI::Mesh::getNbMat Mesh</field>
    <field name="text">Return number of materials</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::setMaterial</field>
    <field name="args">(int code, const string &amp;mname)</field>
    <field name="url">classOFELI_1_1Mesh.html#a94c52f4dc2627f55b25a2b055e646281</field>
    <field name="keywords">setMaterial OFELI::Mesh::setMaterial Mesh</field>
    <field name="text">Associate material to code of element code Element code for which material is assigned mname Name of material</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getNbSideNodes</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Mesh.html#a94d450b2020c2497dec9c8a4a3c1fd8e</field>
    <field name="keywords">getNbSideNodes OFELI::Mesh::getNbSideNodes Mesh</field>
    <field name="text">Return the number of nodes on each side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getShape</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Mesh.html#a9e8217afff8e1b47ba6901bfea655a3d</field>
    <field name="keywords">getShape OFELI::Mesh::getShape Mesh</field>
    <field name="text">Determine shape of elements Return Shape index see enum ElementShape if all elements have the same shape 0 if not</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::Mesh</field>
    <field name="args">(real_t xmin, real_t xmax, real_t ymin, real_t ymax, real_t zmin, real_t zmax, size_t nx, size_t ny, size_t nz, int cx0, int cxN, int cy0, int cyN, int cz0, int czN, int opt=0, size_t nb_dof=1)</field>
    <field name="url">classOFELI_1_1Mesh.html#a9fc50f2792f8fb7a89890350fb2b6d54</field>
    <field name="keywords">Mesh OFELI::Mesh::Mesh Mesh</field>
    <field name="text">Constructor for a uniform 3 D structured finite element mesh The domain is the parallepiped xmin xmax x(ymin,ymax) x(zmin,zmax) xmin Minimal x-coordinate xmax Maximal x-coordinate ymin Minimal y-coordinate ymax Maximal y-coordinate zmin Minimal z-coordinate zmax Maximal z-coordinate nx Number of subintervals on the x-axis ny Number of subintervals on the y-axis nz Number of subintervals on the z-axis cx0 Code for nodes generated on the line x xmin if 0 for sides on this line if 0 cxN Code for nodes generated on the line x xmax if 0 for sides on this line if 0 cy0 Code for nodes generated on the line y ymin if 0 for sides on this line if 0 cyN Code for nodes generated on the line y ymax if 0 for sides on this line if 0 cz0 Code for nodes generated on the line z zmin if 0 for sides on this line if 0 czN Code for nodes generated on the line z zmax if 0 for sides on this line if 0 opt Flag to generate elements as well if not zero Default 0 If the flag is not 0 it can take one of the enumerated values HEXAHEDRON or TETRAHEDRON with obvious meaning nb_dof Number of degrees of freedom per node Default 1 The option opt can be set to 0 if the user intends to use finite differences</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::set</field>
    <field name="args">(Side *sd)</field>
    <field name="url">classOFELI_1_1Mesh.html#aa16086424a48d780e72cacd42c711b8f</field>
    <field name="keywords">set OFELI::Mesh::set Mesh</field>
    <field name="text">Choose side in the mesh If the side label exists already the existing side pointer will be replaced by the current one If not an error message is displayed sd Pointer to side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getDim</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Mesh.html#aa217066db3a717424604bab3fcb6ec4b</field>
    <field name="keywords">getDim OFELI::Mesh::getDim Mesh</field>
    <field name="text">Return space dimension</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::Delete</field>
    <field name="args">(Edge *ed)</field>
    <field name="url">classOFELI_1_1Mesh.html#aa3584b896aa247b2f54da8bbc46b3b35</field>
    <field name="keywords">Delete OFELI::Mesh::Delete Mesh</field>
    <field name="text">Remove an edge given by its pointer This function does not release the space previously occupied ed Pointer to edge to delete</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::save</field>
    <field name="args">(const string &amp;mesh_file) const</field>
    <field name="url">classOFELI_1_1Mesh.html#aa3c4457ebe996395ab6991956c1855c8</field>
    <field name="keywords">save OFELI::Mesh::save Mesh</field>
    <field name="text">Write mesh data on file in various formats File format depends on the extension in file name mesh_file Mesh file name If the extension is m the output file is an OFELI file If the extension is gpl the output file is a Gnuplot file If the extension is msh or geo the output file is a Gmsh file If the extension is vtk the output file is a VTK file</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::set</field>
    <field name="args">(Node *nd)</field>
    <field name="url">classOFELI_1_1Mesh.html#aa4284d02064e2b39686e5502839216dc</field>
    <field name="keywords">set OFELI::Mesh::set Mesh</field>
    <field name="text">Replace node in the mesh If the node label exists already the existing node pointer will be replaced by the current one If not an error message is displayed nd Pointer to node</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::ElementsAreDOF</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Mesh.html#aa67233b61e610b8ebc692cbd26c67845</field>
    <field name="keywords">ElementsAreDOF OFELI::Mesh::ElementsAreDOF Mesh</field>
    <field name="text">Return information about DOF type true if DOF are supported by elements false otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getMaxCoord</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Mesh.html#aa72e2f9e4ced92ebb4633e3dbe46b138</field>
    <field name="keywords">getMaxCoord OFELI::Mesh::getMaxCoord Mesh</field>
    <field name="text">Return maximum coordinates of nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getNbElements</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Mesh.html#aab9792e6965078cdc27a88ae80cf0e67</field>
    <field name="keywords">getNbElements OFELI::Mesh::getNbElements Mesh</field>
    <field name="text">Return number of elements</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::setDim</field>
    <field name="args">(size_t dim)</field>
    <field name="url">classOFELI_1_1Mesh.html#aaedad696b6f7a9a36676a645564c7461</field>
    <field name="keywords">setDim OFELI::Mesh::setDim Mesh</field>
    <field name="text">Define space dimension Normally between 1 and 3 dim Space dimension to set must be between 1 and 3</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::createInternalSideList</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Mesh.html#ab2cd1d7a12b602fbac27d8f63dd21b7b</field>
    <field name="keywords">createInternalSideList OFELI::Mesh::createInternalSideList Mesh</field>
    <field name="text">Create list of internal sides not on the boundary This function is useful to loop over internal sides without testing Once this one is called the function getNbInternalSides() is available Moreover looping over internal sides is available via the member functions topInternalSide() and getInternalSide() n Number of internal sides</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::Delete</field>
    <field name="args">(Node *nd)</field>
    <field name="url">classOFELI_1_1Mesh.html#ab7351bd23a0d537c759506973ef5e3ed</field>
    <field name="keywords">Delete OFELI::Mesh::Delete Mesh</field>
    <field name="text">Remove a node given by its pointer This function does not release the space previously occupied nd Pointer to node to delete</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::setList</field>
    <field name="args">(const vector&lt; Element * &gt; &amp;el)</field>
    <field name="url">classOFELI_1_1Mesh.html#ab833fd39579edc49e8476cf3093dbaa1</field>
    <field name="keywords">setList OFELI::Mesh::setList Mesh</field>
    <field name="text">Initialize list of mesh elements using the input vector el vector instance that contains the list of pointers to elements</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getBoundaryNodes</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Mesh.html#ab9a4bf30d075c6ed5fa9f8287b434f79</field>
    <field name="keywords">getBoundaryNodes OFELI::Mesh::getBoundaryNodes Mesh</field>
    <field name="text">Determine all boundary nodes n Number of boundary nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::get</field>
    <field name="args">(const string &amp;mesh_file)</field>
    <field name="url">classOFELI_1_1Mesh.html#abc36a97ae31b33e95e49aeeb7f3e2f46</field>
    <field name="keywords">get OFELI::Mesh::get Mesh</field>
    <field name="text">Read mesh data in file Mesh file must be in OFELI format See page mesh_file Mesh file name</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getNbEdges</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Mesh.html#abc3e92499595b690f4d4645e0163df96</field>
    <field name="keywords">getNbEdges OFELI::Mesh::getNbEdges Mesh</field>
    <field name="text">Return number of sides</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::operator*=</field>
    <field name="args">(real_t a)</field>
    <field name="url">classOFELI_1_1Mesh.html#ac035d942f03b755dc0d579abae913597</field>
    <field name="keywords">operator*= OFELI::Mesh::operator*= Mesh</field>
    <field name="text">Operator Rescale mesh coordinates by myltiplying by a factor a Value to multiply by</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getEdgeLabel</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Mesh.html#ac129e2eeac817721c013c262d5f4b227</field>
    <field name="keywords">getEdgeLabel OFELI::Mesh::getEdgeLabel Mesh</field>
    <field name="text">Return label of i th edge i Edge index</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::RenumberElement</field>
    <field name="args">(size_t n1, size_t n2)</field>
    <field name="url">classOFELI_1_1Mesh.html#ac2f4065f030e8db9692459cb7f4c6e19</field>
    <field name="keywords">RenumberElement OFELI::Mesh::RenumberElement Mesh</field>
    <field name="text">Renumber an element n1 Old label n2 New label</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::RenumberSide</field>
    <field name="args">(size_t n1, size_t n2)</field>
    <field name="url">classOFELI_1_1Mesh.html#ac394312d8dc2355e20e92cf791ea541b</field>
    <field name="keywords">RenumberSide OFELI::Mesh::RenumberSide Mesh</field>
    <field name="text">Renumber a side n1 Old label n2 New label</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::setDOFSupport</field>
    <field name="args">(int opt, int nb_nodes=1)</field>
    <field name="url">classOFELI_1_1Mesh.html#ac8499a72f727b07e5b3d1b4a05647402</field>
    <field name="keywords">setDOFSupport OFELI::Mesh::setDOFSupport Mesh</field>
    <field name="text">Define supports of degrees of freedom opt DOF type NODE_DOF Degrees of freedom are supported by nodes SIDE_DOF Degrees of freedom are supported by sides EDGE_DOF Degrees of freedom are supported by edges ELEMENT_DOF Degrees of freedom are supported by elements nb_nodes Number of nodes on sides or elements default 1 This parameter is useful only if dofs are supported by sides or elements This member function creates all mesh sides if the option ELEMENT_DOF or SIDE_DOF is selected So it not necessary to call getAllSides() after</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::Add</field>
    <field name="args">(Edge *ed)</field>
    <field name="url">classOFELI_1_1Mesh.html#aca1cd8bb36958c30425501cc8ce91e64</field>
    <field name="keywords">Add OFELI::Mesh::Add Mesh</field>
    <field name="text">Add an edge to mesh ed Pointer to Edge to add</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::setList</field>
    <field name="args">(const vector&lt; Side * &gt; &amp;sl)</field>
    <field name="url">classOFELI_1_1Mesh.html#acb87cbf578f1333b21a6920877411e7f</field>
    <field name="keywords">setList OFELI::Mesh::setList Mesh</field>
    <field name="text">Initialize list of mesh sides using the input vector sl vector instance that contains the list of pointers to sides</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::NumberEquations</field>
    <field name="args">(size_t dof=0)</field>
    <field name="url">classOFELI_1_1Mesh.html#acde4624c86afc0583d28a3201dca8a2a</field>
    <field name="keywords">NumberEquations OFELI::Mesh::NumberEquations Mesh</field>
    <field name="text">Renumber Equations dof Label of degree of freedom for which numbering is performed Default value 0 means that all degrees of freedom are taken into account</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getNbNodes</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Mesh.html#ade220c85ff6ecba20a6e05121f2b9257</field>
    <field name="keywords">getNbNodes OFELI::Mesh::getNbNodes Mesh</field>
    <field name="text">Return number of nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getPtrEdge</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Mesh.html#ade2a51394567428ef8b9750b207ba58b</field>
    <field name="keywords">getPtrEdge OFELI::Mesh::getPtrEdge Mesh</field>
    <field name="text">Return pointer to edge with label i</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::setNbDOFPerNode</field>
    <field name="args">(size_t nb_dof=1)</field>
    <field name="url">classOFELI_1_1Mesh.html#ade2f530d54ad850678bdc12891e2a97a</field>
    <field name="keywords">setNbDOFPerNode OFELI::Mesh::setNbDOFPerNode Mesh</field>
    <field name="text">Define number of degrees of freedom for each node nb_dof Number of degrees of freedom unknowns for each mesh node Default value is 1 This function first declares nodes as unknown supports sets the number of degrees of freedom and renumbers equations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::Mesh</field>
    <field name="args">(real_t xmin, real_t xmax, real_t ymin, real_t ymax, size_t nx, size_t ny, int cx0, int cxN, int cy0, int cyN, int opt=0, size_t nb_dof=1)</field>
    <field name="url">classOFELI_1_1Mesh.html#ae4fb59a6cf6f813ba40c9f773bd9119f</field>
    <field name="keywords">Mesh OFELI::Mesh::Mesh Mesh</field>
    <field name="text">Constructor for a uniform 2 D structured finite element mesh The domain is the rectangle xmin xmax x(ymin,ymax) xmin Minimal x-coordinate xmax Maximal x-coordinate ymin Minimal y-coordinate ymax Maximal y-coordinate nx Number of subintervals on the x-axis ny Number of subintervals on the y-axis cx0 Code for nodes generated on the line x x0 if 0 for sides on this line if 0 cxN Code for nodes generated on the line x xN if 0 for sides on this line if 0 cy0 Code for nodes generated on the line y y0 if 0 for sides on this line if 0 cyN Code for nodes generated on the line y yN if 0 for sides on this line if 0 opt Flag to generate elements as well if not zero Default 0 If the flag is not 0 it can take one of the enumerated values TRIANGLE or QUADRILATERAL with obvious meaning nb_dof Number of degrees of freedom per node Default 1 The option opt can be set to 0 if the user intends to use finite differences</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getPtrNode</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Mesh.html#ae588acd710c421ee332541c1d469852a</field>
    <field name="keywords">getPtrNode OFELI::Mesh::getPtrNode Mesh</field>
    <field name="text">Return pointer to node with label i</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getPtrElement</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Mesh.html#ae7a0baf902fac6a7bacb94e5f9aec684</field>
    <field name="keywords">getPtrElement OFELI::Mesh::getPtrElement Mesh</field>
    <field name="text">Return pointer to element with label i</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::Add</field>
    <field name="args">(Node *nd)</field>
    <field name="url">classOFELI_1_1Mesh.html#aeab643be71ce0a87018cccc39f70a7ec</field>
    <field name="keywords">Add OFELI::Mesh::Add Mesh</field>
    <field name="text">Add a node to mesh nd Pointer to Node to add</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getList</field>
    <field name="args">(vector&lt; Element * &gt; &amp;el) const</field>
    <field name="url">classOFELI_1_1Mesh.html#aecdb3a2ab67a2ad12e2afdf1bffc3023</field>
    <field name="keywords">getList OFELI::Mesh::getList Mesh</field>
    <field name="text">Fill vector el with list of pointers to elements el Instance of class vector that contain on output the list</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::getNode</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Mesh.html#aed495c058aadff6865b49ec9cf8fef33</field>
    <field name="keywords">getNode OFELI::Mesh::getNode Mesh</field>
    <field name="text">Return refenrece to node with label i</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::Delete</field>
    <field name="args">(Element *el)</field>
    <field name="url">classOFELI_1_1Mesh.html#afa95fd1ae859f8619ca5067d340ac596</field>
    <field name="keywords">Delete OFELI::Mesh::Delete Mesh</field>
    <field name="text">Remove a node given by its pointer This function does not release the space previously occupied el Pointer to element to delete</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::RenumberNode</field>
    <field name="args">(size_t n1, size_t n2)</field>
    <field name="url">classOFELI_1_1Mesh.html#afc1df617d88a6129c90588b578596455</field>
    <field name="keywords">RenumberNode OFELI::Mesh::RenumberNode Mesh</field>
    <field name="text">Renumber a node n1 Old label n2 New label</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::EdgesAreDOF</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Mesh.html#afce165cb483d1ce4d9fb68bc0da9cab1</field>
    <field name="keywords">EdgesAreDOF OFELI::Mesh::EdgesAreDOF Mesh</field>
    <field name="text">Return information about DOF type true if DOF are supported by edges false otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Mesh::setPointInDomain</field>
    <field name="args">(Point&lt; real_t &gt; x)</field>
    <field name="url">classOFELI_1_1Mesh.html#afed7b70c4fdfcb1fe06b0eb3c1ad4c96</field>
    <field name="keywords">setPointInDomain OFELI::Mesh::setPointInDomain Mesh</field>
    <field name="text">Define a point in the domain This function makes sense only if boundary mesh is given without internal mesh Case of Boundary Elements x Coordinates of point to define</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::MeshAdapt</field>
    <field name="url">classOFELI_1_1MeshAdapt.html</field>
    <field name="keywords">MeshAdapt</field>
    <field name="text">To adapt mesh in function of given solution Class MeshAdapt enables modifying mesh according to a solution vector defining at nodes It concerns 2 D triangular meshes only Class MeshAdapt is mainly based on the software Bamg developed by F Hecht Universite Pierre et Marie Curie Paris We warmly thank him for accepting incoporation of Bamg in the OFELI package Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::run</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;u, Vect&lt; real_t &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a0033b1255942d64e3e9370c7f8f4da83</field>
    <field name="keywords">run OFELI::MeshAdapt::run MeshAdapt</field>
    <field name="text">Run adaptation process using a solution vector and interpolates solution on the adapted mesh u Solution vector defined on the input mesh v Solution vector defined on the adapted output mesh Return code 0 Adaptation has been normally completed 1 An error occured</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::getInterpolatedSolutionBB</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a069a0662984a649f573ba7ca53eb0663</field>
    <field name="keywords">getInterpolatedSolutionBB OFELI::MeshAdapt::getInterpolatedSolutionBB MeshAdapt</field>
    <field name="text">Write the file of interpolation of the solutions in BB file</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::setNoKeep</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a06a65dc21320f2d34ea092779cb1e979</field>
    <field name="keywords">setNoKeep OFELI::MeshAdapt::setNoKeep MeshAdapt</field>
    <field name="text">Do not keep old vertices By default old vertices are kept</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::setHMinAnisotropy</field>
    <field name="args">(real_t h)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a06e7af71b11b80d0018a147277f24a41</field>
    <field name="keywords">setHMinAnisotropy OFELI::MeshAdapt::setHMinAnisotropy MeshAdapt</field>
    <field name="text">Set minimal mesh size and set anisotropy</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::setAnisotropic</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a087557f7186e3e33eb9dd4547d1059cc</field>
    <field name="keywords">setAnisotropic OFELI::MeshAdapt::setAnisotropic MeshAdapt</field>
    <field name="text">Set that adapted mesh construction is anisotropic</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::MeshAdapt</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a2ba9ffa66796d93186ae62aca88f4168</field>
    <field name="keywords">MeshAdapt OFELI::MeshAdapt::MeshAdapt MeshAdapt</field>
    <field name="text">Constructor using initial mesh ms Reference to initial mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::getMesh</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a33d260bca42fe66a8536f2eac63adc64</field>
    <field name="keywords">getMesh OFELI::MeshAdapt::getMesh MeshAdapt</field>
    <field name="text">Get reference to current mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::setGeoError</field>
    <field name="args">(real_t e)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a376ffa7d5cba90e34d136aa09295b8b8</field>
    <field name="keywords">setGeoError OFELI::MeshAdapt::setGeoError MeshAdapt</field>
    <field name="text">Set error on geometry</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::RelativeError</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a394b306c90e4573de2d0d00005647007</field>
    <field name="keywords">RelativeError OFELI::MeshAdapt::RelativeError MeshAdapt</field>
    <field name="text">Metric is constructed with relative error</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::MaxAnisotropy</field>
    <field name="args">(real_t a)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a3a8e11f2b02c5d4589c949f0cfc7553d</field>
    <field name="keywords">MaxAnisotropy OFELI::MeshAdapt::MaxAnisotropy MeshAdapt</field>
    <field name="text">Set maximum ratio of anisotropy</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::setTheta</field>
    <field name="args">(real_t theta)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a3ade5f14a3437b620c6adb38db503403</field>
    <field name="keywords">setTheta OFELI::MeshAdapt::setTheta MeshAdapt</field>
    <field name="text">Set angular limit for a corner in degrees The angle is defined from 2 normals of 2 consecutive edges</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::setRelaxation</field>
    <field name="args">(real_t omega)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a464029bd28072431440d3ef6a4846e33</field>
    <field name="keywords">setRelaxation OFELI::MeshAdapt::setRelaxation MeshAdapt</field>
    <field name="text">Set relaxation parameter for smoothing Default value for relaxation parameter is 1.8</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::AbsoluteError</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a48a31f67db0088385e2ea13880427cdb</field>
    <field name="keywords">AbsoluteError OFELI::MeshAdapt::AbsoluteError MeshAdapt</field>
    <field name="text">Metric is constructed with absolute error</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::getSolutionMBB</field>
    <field name="args">(string mBB)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a4d854097ed39a22de2cd3367b736ca65</field>
    <field name="keywords">getSolutionMBB OFELI::MeshAdapt::getSolutionMBB MeshAdapt</field>
    <field name="text">Set solution defined on background mesh for metric construction</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::run</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a531132933aee415619e0437cf0f289fa</field>
    <field name="keywords">run OFELI::MeshAdapt::run MeshAdapt</field>
    <field name="text">Run adaptation process using a solution vector u Solution vector defined on the input mesh Return code 0 Adaptation has been normally completed 1 An error occured</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::~MeshAdapt</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a54125f039a9cb9ebf3932a46de719bed</field>
    <field name="keywords">OFELI::MeshAdapt::~MeshAdapt MeshAdapt</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::getSolutionBB</field>
    <field name="args">(string rBB)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a563fc808abcb485ae654343ed3a3a437</field>
    <field name="keywords">getSolutionBB OFELI::MeshAdapt::getSolutionBB MeshAdapt</field>
    <field name="text">Read solution defined on the background mesh in BB file Solution is interpolated on created mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::run</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a58e8be2db2660128e4e6456a9c981fb5</field>
    <field name="keywords">run OFELI::MeshAdapt::run MeshAdapt</field>
    <field name="text">Run adaptation process Return code 0 Adaptation has been normally completed 1 An error occured</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::setOutputMesh</field>
    <field name="args">(string file)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a62a837044483e9422c37cf5d48af98f2</field>
    <field name="keywords">setOutputMesh OFELI::MeshAdapt::setOutputMesh MeshAdapt</field>
    <field name="text">Create mesh output file</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::setHMax</field>
    <field name="args">(real_t h)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a68e143344f0722075c19761e949177da</field>
    <field name="keywords">setHMax OFELI::MeshAdapt::setHMax MeshAdapt</field>
    <field name="text">Set maximal mesh size</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::getDomain</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a693a5cd99d3d701cc5d669a304720b35</field>
    <field name="keywords">getDomain OFELI::MeshAdapt::getDomain MeshAdapt</field>
    <field name="text">Get reference to Domain instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::getSolutionMbb</field>
    <field name="args">(string mbb)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a6a52ac9f0a5dbd8b3c7f5c091d009454</field>
    <field name="keywords">getSolutionMbb OFELI::MeshAdapt::getSolutionMbb MeshAdapt</field>
    <field name="text">Set solution defined on background mesh for metric construction</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::getSolutionbb</field>
    <field name="args">(string rbb)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a6b6f5a011b564c4dbfa63cce835967f5</field>
    <field name="keywords">getSolutionbb OFELI::MeshAdapt::getSolutionbb MeshAdapt</field>
    <field name="text">Read solution defined on the background mesh in bb file Solution is interpolated on created mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::setGeoFile</field>
    <field name="args">(string file)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a6fb3761d1c52d46abc29c6a99d7e162f</field>
    <field name="keywords">setGeoFile OFELI::MeshAdapt::setGeoFile MeshAdapt</field>
    <field name="text">Set Geometry file</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::getSolution</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;u, int is=1)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a72e62652346f3d2316a48e02d1d8e52b</field>
    <field name="keywords">getSolution OFELI::MeshAdapt::getSolution MeshAdapt</field>
    <field name="text">Get the interpolated solution on the new mesh The solution must have been saved on an output bb file u Vector that contains on output the obtained solutions This vector is resized before being initialized is Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::SplitBoundaryEdges</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a75b8adde22719b5eca87a7dff501a9c4</field>
    <field name="keywords">SplitBoundaryEdges OFELI::MeshAdapt::SplitBoundaryEdges MeshAdapt</field>
    <field name="text">Split edges with two vertices on boundary</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::setMetricFile</field>
    <field name="args">(string mf)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a80c4343db4468e3023e1859f33718d56</field>
    <field name="keywords">setMetricFile OFELI::MeshAdapt::setMetricFile MeshAdapt</field>
    <field name="text">Set Metric file</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::getInterpolatedSolutionbb</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a85b9c256e10ffe3b5119b4d4ac7faca5</field>
    <field name="keywords">getInterpolatedSolutionbb OFELI::MeshAdapt::getInterpolatedSolutionbb MeshAdapt</field>
    <field name="text">Write the file of interpolation of the solutions in bb file</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::setMaxNbVertices</field>
    <field name="args">(size_t n)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a8ef0b63c6f3293b017610cc7e49261a3</field>
    <field name="keywords">setMaxNbVertices OFELI::MeshAdapt::setMaxNbVertices MeshAdapt</field>
    <field name="text">Set maximum number of vertices Default value is 5 0 0 0 0 0</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::setJacobi</field>
    <field name="args">(int n)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a92054e84cf1692e60014e1e70f9bc639</field>
    <field name="keywords">setJacobi OFELI::MeshAdapt::setJacobi MeshAdapt</field>
    <field name="text">Set number of Jacobi iterations for smoothing</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::saveMbb</field>
    <field name="args">(string file, const Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a9a6eb880fcccf046b9a11afddef55b20</field>
    <field name="keywords">saveMbb OFELI::MeshAdapt::saveMbb MeshAdapt</field>
    <field name="text">Save a solution in metric file file File name where the metric is stored u Solution vector to store</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::setMaxSubdiv</field>
    <field name="args">(real_t s)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#a9a99c6f3dec209b4895761752363d4c3</field>
    <field name="keywords">setMaxSubdiv OFELI::MeshAdapt::setMaxSubdiv MeshAdapt</field>
    <field name="text">Change the metric such that the maximal subdivision of a background s edge is bounded by the given number always limited by 1 0</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::MeshAdapt</field>
    <field name="args">(Domain &amp;dom)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#aa2ce64299b3601479b9a8d65efe0b831</field>
    <field name="keywords">MeshAdapt OFELI::MeshAdapt::MeshAdapt MeshAdapt</field>
    <field name="text">Constructor using a reference to class Domain dom Reference to Domain class</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::MeshAdapt</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#aa6117ab54bf0fa3873ca8df4b3394df1</field>
    <field name="keywords">MeshAdapt OFELI::MeshAdapt::MeshAdapt MeshAdapt</field>
    <field name="text">Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::setNoScaling</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#aa62c330442ea095207dc45d7daaa3528</field>
    <field name="keywords">setNoScaling OFELI::MeshAdapt::setNoScaling MeshAdapt</field>
    <field name="text">Do not scale solution before metric computation By default solution is scaled between 0 and 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::Split</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#aaf64556993531027a9dbea15a9d67b35</field>
    <field name="keywords">Split OFELI::MeshAdapt::Split MeshAdapt</field>
    <field name="text">Split triangles into 4 triangles</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::setHMin</field>
    <field name="args">(real_t h)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#ac14bf7ff70f4bd29113c4bb63e451b42</field>
    <field name="keywords">setHMin OFELI::MeshAdapt::setHMin MeshAdapt</field>
    <field name="text">Set minimal mesh size</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::setError</field>
    <field name="args">(real_t err)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#ac3f9e1528d7591a88b29bc73eb0bae58</field>
    <field name="keywords">setError OFELI::MeshAdapt::setError MeshAdapt</field>
    <field name="text">Set error threshold for adaption</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::CreateMetricFile</field>
    <field name="args">(string mf)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#ac6d4c6c4a3ccee6bb2cb48149b183753</field>
    <field name="keywords">CreateMetricFile OFELI::MeshAdapt::CreateMetricFile MeshAdapt</field>
    <field name="text">Create a metric file</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::setSmooth</field>
    <field name="args">(int n)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#ac87a4eda9e424bc16dcbb9bbd2251612</field>
    <field name="keywords">setSmooth OFELI::MeshAdapt::setSmooth MeshAdapt</field>
    <field name="text">Set number of smoothing iterations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::setRatio</field>
    <field name="args">(real_t r)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#ad62f313493a077dae26b4af44ba03316</field>
    <field name="keywords">setRatio OFELI::MeshAdapt::setRatio MeshAdapt</field>
    <field name="text">Set ratio for a smoothing of the metric r Ratio value If r is 0 then no smoothing is performed if r lies in 1.1 1 0 then the smoothing changes the metric such that the largest geometrical progression speed of mesh size variation in mesh is bounded by r by default no smoothing</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::setBackgroundMesh</field>
    <field name="args">(string bgm)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#ada5430cec0321b023e19b96d9084d50c</field>
    <field name="keywords">setBackgroundMesh OFELI::MeshAdapt::setBackgroundMesh MeshAdapt</field>
    <field name="text">Set background mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::set</field>
    <field name="args">(Domain &amp;dom)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#add9c869a7848fd46a321f3853c553fc9</field>
    <field name="keywords">set OFELI::MeshAdapt::set MeshAdapt</field>
    <field name="text">Set reference to Domain instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::setHessian</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#ae013f8f6427e16c41e56c6ba27f30f79</field>
    <field name="keywords">setHessian OFELI::MeshAdapt::setHessian MeshAdapt</field>
    <field name="text">set computation of the Hessian</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::setSolution</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#af6fe5bb0ec25b8e2fec7331f7ea33afb</field>
    <field name="keywords">setSolution OFELI::MeshAdapt::setSolution MeshAdapt</field>
    <field name="text">Define label of node</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshAdapt::set</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1MeshAdapt.html#afc082af2b5c0ea71e5056769a4dfa5a2</field>
    <field name="keywords">set OFELI::MeshAdapt::set MeshAdapt</field>
    <field name="text">Set reference to Mesh instance</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Muscl</field>
    <field name="url">classOFELI_1_1Muscl.html</field>
    <field name="keywords">Muscl</field>
    <field name="text">Parent class for hyperbolic solvers with Muscl scheme Everything here is common for both 2 D and 3 D muscl methods Virtual functions are implemented in Muscl2D and Muscl3D classes S Clain V Clauzon GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl::setMethod</field>
    <field name="args">(const Method &amp;s)</field>
    <field name="url">classOFELI_1_1Muscl.html#a167d02731dbb2ae2a7b83a6d0d5fd1b0</field>
    <field name="keywords">setMethod OFELI::Muscl::setMethod Muscl</field>
    <field name="text">Choose a flux solver Choose a flux solver Choose a flux solver Choose a flux solver Choose a flux solver Choose a flux solver Choose a flux solver s Solver to choose Choose a flux solver Choose a flux solver Choose a flux solver</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl::getReferenceLength</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Muscl.html#a2274e76feaefc4b71e48b679be867396</field>
    <field name="keywords">getReferenceLength OFELI::Muscl::getReferenceLength Muscl</field>
    <field name="text">Return reference length Return reference length Return reference length Return reference length Return reference length Return reference length Return reference length Return reference length Return reference length Return reference length</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl::setLimiter</field>
    <field name="args">(Limiter l)</field>
    <field name="url">classOFELI_1_1Muscl.html#a277ad387623172f343400d4430f66fcd</field>
    <field name="keywords">setLimiter OFELI::Muscl::setLimiter Muscl</field>
    <field name="text">Choose a flux limiter Choose a flux limiter Choose a flux limiter Choose a flux limiter Choose a flux limiter Choose a flux limiter Choose a flux limiter l Limiter to choose Choose a flux limiter Choose a flux limiter Choose a flux limiter</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl::setTimeStep</field>
    <field name="args">(real_t dt)</field>
    <field name="url">classOFELI_1_1Muscl.html#a281313b6dd2989a5d26b65ba8c0a15f1</field>
    <field name="keywords">setTimeStep OFELI::Muscl::setTimeStep Muscl</field>
    <field name="text">Assign time step value Assign time step value Assign time step value Assign time step value Assign time step value Assign time step value Assign time step value dt Time step value Assign time step value Assign time step value Assign time step value</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">OFELI::Muscl::Limiter</field>
    <field name="url">classOFELI_1_1Muscl.html#a28fd66b0310514194a2fb1d2473e3e29</field>
    <field name="keywords">Limiter OFELI::Muscl::Limiter Muscl</field>
    <field name="text">Enumeration of flux limiting methods Enumeration of flux limiting methods Enumeration of flux limiting methods Enumeration of flux limiting methods Enumeration of flux limiting methods Enumeration of flux limiting methods Enumeration of flux limiting methods Enumeration of flux limiting methods Enumeration of flux limiting methods Enumeration of flux limiting methods</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::Muscl::VANLEER_LIMITER</field>
    <field name="url">classOFELI_1_1Muscl.html#a28fd66b0310514194a2fb1d2473e3e29a1eca9d08190ec7bf842a2b86d9768d8e</field>
    <field name="keywords">VANLEER_LIMITER OFELI::Muscl::VANLEER_LIMITER Muscl VANLEER_LIMITER OFELI::Muscl::VANLEER_LIMITER Muscl</field>
    <field name="text">Van Leer limiter</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::Muscl::MAX_LIMITER</field>
    <field name="url">classOFELI_1_1Muscl.html#a28fd66b0310514194a2fb1d2473e3e29a344fb16588c3bd52ecc0166780ebb85b</field>
    <field name="keywords">MAX_LIMITER OFELI::Muscl::MAX_LIMITER Muscl MAX_LIMITER OFELI::Muscl::MAX_LIMITER Muscl</field>
    <field name="text">Max limiter</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::Muscl::VANALBADA_LIMITER</field>
    <field name="url">classOFELI_1_1Muscl.html#a28fd66b0310514194a2fb1d2473e3e29a45a15baa84818572fa5ef591b139c177</field>
    <field name="keywords">VANALBADA_LIMITER OFELI::Muscl::VANALBADA_LIMITER Muscl VANALBADA_LIMITER OFELI::Muscl::VANALBADA_LIMITER Muscl</field>
    <field name="text">Van Albada limiter</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::Muscl::MINMOD_LIMITER</field>
    <field name="url">classOFELI_1_1Muscl.html#a28fd66b0310514194a2fb1d2473e3e29adfd5c45258dd6be86f4aa883a34d1d4a</field>
    <field name="keywords">MINMOD_LIMITER OFELI::Muscl::MINMOD_LIMITER Muscl MINMOD_LIMITER OFELI::Muscl::MINMOD_LIMITER Muscl</field>
    <field name="text">MinMod limiter</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::Muscl::SUPERBEE_LIMITER</field>
    <field name="url">classOFELI_1_1Muscl.html#a28fd66b0310514194a2fb1d2473e3e29ae40a4b753358942467cfdabc0c8d4072</field>
    <field name="keywords">SUPERBEE_LIMITER OFELI::Muscl::SUPERBEE_LIMITER Muscl SUPERBEE_LIMITER OFELI::Muscl::SUPERBEE_LIMITER Muscl</field>
    <field name="text">Superbee limiter</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">OFELI::Muscl::Method</field>
    <field name="url">classOFELI_1_1Muscl.html#a2a3c0067e44c5ef3210a256d06c16b0f</field>
    <field name="keywords">Method OFELI::Muscl::Method Muscl</field>
    <field name="text">Enumeration for flux choice Enumeration for flux choice Enumeration for flux choice Enumeration for flux choice Enumeration for flux choice Enumeration for flux choice Enumeration for flux choice Enumeration for flux choice Enumeration for flux choice Enumeration for flux choice</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::Muscl::MULTI_SLOPE_Q_METHOD</field>
    <field name="url">classOFELI_1_1Muscl.html#a2a3c0067e44c5ef3210a256d06c16b0fa2d33b57b66a950a3b195b8b952749f0e</field>
    <field name="keywords">MULTI_SLOPE_Q_METHOD OFELI::Muscl::MULTI_SLOPE_Q_METHOD Muscl MULTI_SLOPE_Q_METHOD OFELI::Muscl::MULTI_SLOPE_Q_METHOD Muscl</field>
    <field name="text">Multislope Q method</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::Muscl::MULTI_SLOPE_M_METHOD</field>
    <field name="url">classOFELI_1_1Muscl.html#a2a3c0067e44c5ef3210a256d06c16b0fa5c77e985953c5ca565269529ce0d8e2a</field>
    <field name="keywords">MULTI_SLOPE_M_METHOD OFELI::Muscl::MULTI_SLOPE_M_METHOD Muscl MULTI_SLOPE_M_METHOD OFELI::Muscl::MULTI_SLOPE_M_METHOD Muscl</field>
    <field name="text">Multislope M method</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::Muscl::FIRST_ORDER_METHOD</field>
    <field name="url">classOFELI_1_1Muscl.html#a2a3c0067e44c5ef3210a256d06c16b0faf60ce3434ebbca1597fe39507e682886</field>
    <field name="keywords">FIRST_ORDER_METHOD OFELI::Muscl::FIRST_ORDER_METHOD Muscl FIRST_ORDER_METHOD OFELI::Muscl::FIRST_ORDER_METHOD Muscl</field>
    <field name="text">First Order upwind method</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl::getSolidZone</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Muscl.html#a2b844974b42ca3bb8a61001dc5ef0e2b</field>
    <field name="keywords">getSolidZone OFELI::Muscl::getSolidZone Muscl</field>
    <field name="text">Return flag for presence of solid zones Return flag for presence of solid zones Return flag for presence of solid zones Return flag for presence of solid zones Return flag for presence of solid zones Return flag for presence of solid zones Return flag for presence of solid zones Return flag for presence of solid zones Return flag for presence of solid zones Return flag for presence of solid zones</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl::getMesh</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Muscl.html#a33d260bca42fe66a8536f2eac63adc64</field>
    <field name="keywords">getMesh OFELI::Muscl::getMesh Muscl</field>
    <field name="text">Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance Return reference to Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl::~Muscl</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Muscl.html#a399fcc278868b8280d19b680e4795231</field>
    <field name="keywords">OFELI::Muscl::~Muscl Muscl</field>
    <field name="text">Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl::setSolidZoneCode</field>
    <field name="args">(int c)</field>
    <field name="url">classOFELI_1_1Muscl.html#a3c04c5d6699a205e56fc8409cca056ca</field>
    <field name="keywords">setSolidZoneCode OFELI::Muscl::setSolidZoneCode Muscl</field>
    <field name="text">Choose a code for solid zone Choose a code for solid zone Choose a code for solid zone Choose a code for solid zone Choose a code for solid zone Choose a code for solid zone Choose a code for solid zone Choose a code for solid zone Choose a code for solid zone Choose a code for solid zone</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl::setCFL</field>
    <field name="args">(real_t CFL)</field>
    <field name="url">classOFELI_1_1Muscl.html#a5867d4d97edfe9fb69127e39f57b7bf7</field>
    <field name="keywords">setCFL OFELI::Muscl::setCFL Muscl</field>
    <field name="text">Assign CFL value Assign CFL value Assign CFL value Assign CFL value Assign CFL value Assign CFL value Assign CFL value CFL Value of CFL Assign CFL value Assign CFL value Assign CFL value</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">OFELI::Muscl::SolverType</field>
    <field name="url">classOFELI_1_1Muscl.html#a8b06041d7c1fb05f379714f4312306ec</field>
    <field name="keywords">SolverType OFELI::Muscl::SolverType Muscl</field>
    <field name="text">Enumeration of various solvers for the Riemann problem Enumeration of various solvers for the Riemann problem Enumeration of various solvers for the Riemann problem Enumeration of various solvers for the Riemann problem Enumeration of various solvers for the Riemann problem Enumeration of various solvers for the Riemann problem Enumeration of various solvers for the Riemann problem Enumeration of various solvers for the Riemann problem Enumeration of various solvers for the Riemann problem Enumeration of various solvers for the Riemann problem</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::Muscl::LF_SOLVER</field>
    <field name="url">classOFELI_1_1Muscl.html#a8b06041d7c1fb05f379714f4312306eca0ce95685eedaafcc589e18cf8156cd59</field>
    <field name="keywords">LF_SOLVER OFELI::Muscl::LF_SOLVER Muscl LF_SOLVER OFELI::Muscl::LF_SOLVER Muscl</field>
    <field name="text">LF solver</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::Muscl::MAX_SOLVER</field>
    <field name="url">classOFELI_1_1Muscl.html#a8b06041d7c1fb05f379714f4312306eca299f128f211f8830e11962d8a6870bc0</field>
    <field name="keywords">MAX_SOLVER OFELI::Muscl::MAX_SOLVER Muscl MAX_SOLVER OFELI::Muscl::MAX_SOLVER Muscl</field>
    <field name="text">Max solver</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::Muscl::VFROE_SOLVER</field>
    <field name="url">classOFELI_1_1Muscl.html#a8b06041d7c1fb05f379714f4312306eca3736de39783a7c913c5af70a10b7e1ef</field>
    <field name="keywords">VFROE_SOLVER OFELI::Muscl::VFROE_SOLVER Muscl VFROE_SOLVER OFELI::Muscl::VFROE_SOLVER Muscl</field>
    <field name="text">Finite Volume Roe solver</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::Muscl::HLLC_SOLVER</field>
    <field name="url">classOFELI_1_1Muscl.html#a8b06041d7c1fb05f379714f4312306eca9d2380450b9ff3583fc11146c509d701</field>
    <field name="keywords">HLLC_SOLVER OFELI::Muscl::HLLC_SOLVER Muscl HLLC_SOLVER OFELI::Muscl::HLLC_SOLVER Muscl</field>
    <field name="text">HLLC solver</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::Muscl::HLL_SOLVER</field>
    <field name="url">classOFELI_1_1Muscl.html#a8b06041d7c1fb05f379714f4312306eca9dcff80dc38b618e178f81fd2c3296c6</field>
    <field name="keywords">HLL_SOLVER OFELI::Muscl::HLL_SOLVER Muscl HLL_SOLVER OFELI::Muscl::HLL_SOLVER Muscl</field>
    <field name="text">HLL solver</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::Muscl::ROE_SOLVER</field>
    <field name="url">classOFELI_1_1Muscl.html#a8b06041d7c1fb05f379714f4312306ecac3fbd70dfe2f23de50fc1cefc71abc4f</field>
    <field name="keywords">ROE_SOLVER OFELI::Muscl::ROE_SOLVER Muscl ROE_SOLVER OFELI::Muscl::ROE_SOLVER Muscl</field>
    <field name="text">Roe solver</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::Muscl::RUSANOV_SOLVER</field>
    <field name="url">classOFELI_1_1Muscl.html#a8b06041d7c1fb05f379714f4312306ecaf5d8ff8019d62d1c131d5ba7b5b6f41f</field>
    <field name="keywords">RUSANOV_SOLVER OFELI::Muscl::RUSANOV_SOLVER Muscl RUSANOV_SOLVER OFELI::Muscl::RUSANOV_SOLVER Muscl</field>
    <field name="text">Rusanov solver</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl::Muscl</field>
    <field name="args">(Mesh &amp;m)</field>
    <field name="url">classOFELI_1_1Muscl.html#aa94714c08ef369973220a991cf441768</field>
    <field name="keywords">Muscl OFELI::Muscl::Muscl Muscl</field>
    <field name="text">Constructor using mesh instance Constructor using mesh instance Constructor using mesh instance Constructor using mesh instance Constructor using mesh instance Constructor using mesh instance Constructor using mesh instance Constructor using mesh instance Constructor using mesh instance Constructor using mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl::getTimeStep</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Muscl.html#ac69f54d1c86aec231aa8925457a2afb4</field>
    <field name="keywords">getTimeStep OFELI::Muscl::getTimeStep Muscl</field>
    <field name="text">Return time step value Return time step value Return time step value Return time step value Return time step value Return time step value Return time step value Return time step value Return time step value Return time step value</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl::getCFL</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Muscl.html#aca789f38b77f6fb11196959f35a92f08</field>
    <field name="keywords">getCFL OFELI::Muscl::getCFL Muscl</field>
    <field name="text">Return CFL value Return CFL value Return CFL value Return CFL value Return CFL value Return CFL value Return CFL value Return CFL value Return CFL value Return CFL value</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl::setReconstruction</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;U, Vect&lt; real_t &gt; &amp;LU, Vect&lt; real_t &gt; &amp;RU, size_t dof)</field>
    <field name="url">classOFELI_1_1Muscl.html#acdf87fe4ecbf7362db40f16e0dd2ac04</field>
    <field name="keywords">setReconstruction OFELI::Muscl::setReconstruction Muscl</field>
    <field name="text">Function to reconstruct by the Muscl method Function to reconstruct by the Muscl method Function to reconstruct by the Muscl method Function to reconstruct by the Muscl method Function to reconstruct by the Muscl method Function to reconstruct by the Muscl method Function to reconstruct by the Muscl method U Field to reconstruct LU Left gradient vector RU Right gradient vector dof Label of dof to reconstruct Function to reconstruct by the Muscl method Function to reconstruct by the Muscl method Function to reconstruct by the Muscl method</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl::setReferenceLength</field>
    <field name="args">(real_t dx)</field>
    <field name="url">classOFELI_1_1Muscl.html#ad8db90b95563d822e3bd206aaf265caf</field>
    <field name="keywords">setReferenceLength OFELI::Muscl::setReferenceLength Muscl</field>
    <field name="text">Assign reference length value Assign reference length value Assign reference length value Assign reference length value Assign reference length value Assign reference length value Assign reference length value dx Value of reference length Assign reference length value Assign reference length value Assign reference length value</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl::getSolidZoneCode</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Muscl.html#adc4053c912073b849aa1133c5e51f64f</field>
    <field name="keywords">getSolidZoneCode OFELI::Muscl::getSolidZoneCode Muscl</field>
    <field name="text">Return code of solid zone 0 if this one is not present Return code of solid zone 0 if this one is not present Return code of solid zone 0 if this one is not present Return code of solid zone 0 if this one is not present Return code of solid zone 0 if this one is not present Return code of solid zone 0 if this one is not present Return code of solid zone 0 if this one is not present Return code of solid zone 0 if this one is not present Return code of solid zone 0 if this one is not present Return code of solid zone 0 if this one is not present</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl::setVerbose</field>
    <field name="args">(int v)</field>
    <field name="url">classOFELI_1_1Muscl.html#afc81729fb2aa1720f446f48f1c3977ff</field>
    <field name="keywords">setVerbose OFELI::Muscl::setVerbose Muscl</field>
    <field name="text">Set verbosity parameter Set verbosity parameter Set verbosity parameter Set verbosity parameter Set verbosity parameter Set verbosity parameter Set verbosity parameter v Value of verbosity parameter Set verbosity parameter Set verbosity parameter Set verbosity parameter</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Muscl1D</field>
    <field name="url">classOFELI_1_1Muscl1D.html</field>
    <field name="keywords">Muscl1D</field>
    <field name="text">Class for 1 D hyperbolic solvers with Muscl scheme S Clain V Clauzon GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl1D::getTauLim</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Muscl1D.html#a4e154184d43a6537f3d17a48ae6ba901</field>
    <field name="keywords">getTauLim OFELI::Muscl1D::getTauLim Muscl1D</field>
    <field name="text">Return mean length Return mean length Return mean length</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl1D::Muscl1D</field>
    <field name="args">(Mesh &amp;m)</field>
    <field name="url">classOFELI_1_1Muscl1D.html#a9bb51f17b72e2472af8310fa00edb835</field>
    <field name="keywords">Muscl1D OFELI::Muscl1D::Muscl1D Muscl1D</field>
    <field name="text">Constructor using mesh instance Constructor using mesh instance Constructor using mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl1D::getMeanLength</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Muscl1D.html#aaac2a2828bceb6a000f4590b06945ede</field>
    <field name="keywords">getMeanLength OFELI::Muscl1D::getMeanLength Muscl1D</field>
    <field name="text">Return mean length Return mean length Return mean length</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl1D::getMinimumLength</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Muscl1D.html#ab02ef1c815ff075446f737759c29c639</field>
    <field name="keywords">getMinimumLength OFELI::Muscl1D::getMinimumLength Muscl1D</field>
    <field name="text">Return mimal length Return mimal length Return mimal length</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl1D::print_mesh_stat</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Muscl1D.html#ad88bdd37b0477b14ec0821c5741ee95e</field>
    <field name="keywords">print_mesh_stat OFELI::Muscl1D::print_mesh_stat Muscl1D</field>
    <field name="text">Output mesh information Output mesh information Output mesh information</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl1D::getMaximumLength</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Muscl1D.html#ade9fd22c0f2af5472903a0f5592a78db</field>
    <field name="keywords">getMaximumLength OFELI::Muscl1D::getMaximumLength Muscl1D</field>
    <field name="text">Return maximal length Return maximal length Return maximal length</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl1D::~Muscl1D</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Muscl1D.html#af6551c27f005eea191c5566befc603fc</field>
    <field name="keywords">OFELI::Muscl1D::~Muscl1D Muscl1D</field>
    <field name="text">Destructor Destructor Destructor</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Muscl2DT</field>
    <field name="url">classOFELI_1_1Muscl2DT.html</field>
    <field name="keywords">Muscl2DT</field>
    <field name="text">Class for 2 D hyperbolic solvers with Muscl scheme S Clain V Clauzon GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl2DT::~Muscl2DT</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Muscl2DT.html#a835cc27813122e859dc846a51d0cd733</field>
    <field name="keywords">OFELI::Muscl2DT::~Muscl2DT Muscl2DT</field>
    <field name="text">Destructor Destructor Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl2DT::Initialize</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Muscl2DT.html#a98b1050f09da390896f964fb7a892391</field>
    <field name="keywords">Initialize OFELI::Muscl2DT::Initialize Muscl2DT</field>
    <field name="text">Construction of normals to sides Construction of normals to sides Construction of normals to sides Convention for a given side getPtrElement(1) is the left element and getPtrElement(2) is the right element The normal goes from left to right For boundary sides the normal points outward</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl2DT::Muscl2DT</field>
    <field name="args">(Mesh &amp;m)</field>
    <field name="url">classOFELI_1_1Muscl2DT.html#ab752d3672d6dbdbbf6cf487b35081fd2</field>
    <field name="keywords">Muscl2DT OFELI::Muscl2DT::Muscl2DT Muscl2DT</field>
    <field name="text">Constructor using mesh Constructor using mesh Constructor using mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl2DT::setReconstruction</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;U, Vect&lt; real_t &gt; &amp;LU, Vect&lt; real_t &gt; &amp;RU, size_t dof)</field>
    <field name="url">classOFELI_1_1Muscl2DT.html#acdf87fe4ecbf7362db40f16e0dd2ac04</field>
    <field name="keywords">setReconstruction OFELI::Muscl2DT::setReconstruction Muscl2DT</field>
    <field name="text">Function to reconstruct by the Muscl method Function to reconstruct by the Muscl method Function to reconstruct by the Muscl method U Field to reconstruct LU Left gradient vector RU Right gradient vector dof Label of dof to reconstruct</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Muscl3DT</field>
    <field name="url">classOFELI_1_1Muscl3DT.html</field>
    <field name="keywords">Muscl3DT</field>
    <field name="text">Class for 3 D hyperbolic solvers with Muscl scheme using tetrahedra S Clain V Clauzon GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl3DT::getMeanFaceArea</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Muscl3DT.html#a3c1673b46746f768614214d07d52fa4e</field>
    <field name="keywords">getMeanFaceArea OFELI::Muscl3DT::getMeanFaceArea Muscl3DT</field>
    <field name="text">Return mean area of faces in the mesh Return mean area of faces in the mesh Return mean area of faces in the mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl3DT::getTauLim</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Muscl3DT.html#a4e154184d43a6537f3d17a48ae6ba901</field>
    <field name="keywords">getTauLim OFELI::Muscl3DT::getTauLim Muscl3DT</field>
    <field name="text">Return value of tau lim Return value of tau lim Return value of tau lim</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl3DT::getMeanElementVolume</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Muscl3DT.html#a505e87d245f5836647a2ff3c7f5355ec</field>
    <field name="keywords">getMeanElementVolume OFELI::Muscl3DT::getMeanElementVolume Muscl3DT</field>
    <field name="text">Return mean volume of elements in the mesh Return mean volume of elements in the mesh Return mean volume of elements in the mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl3DT::getMaximumFaceArea</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Muscl3DT.html#a6437c9f56d066f2dc2a3c6439e18afae</field>
    <field name="keywords">getMaximumFaceArea OFELI::Muscl3DT::getMaximumFaceArea Muscl3DT</field>
    <field name="text">Return maximum area of faces in the mesh Return maximum area of faces in the mesh Return maximum area of faces in the mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl3DT::getMaximumElementVolume</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Muscl3DT.html#a88a84ac79be6cb155ae9fa557e8adfc2</field>
    <field name="keywords">getMaximumElementVolume OFELI::Muscl3DT::getMaximumElementVolume Muscl3DT</field>
    <field name="text">Return maximum volume of elements in the mesh Return maximum volume of elements in the mesh Return maximum volume of elements in the mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl3DT::Muscl3DT</field>
    <field name="args">(Mesh &amp;m)</field>
    <field name="url">classOFELI_1_1Muscl3DT.html#a8d6f15cfac2b4810564a4b9b0c8e0aa6</field>
    <field name="keywords">Muscl3DT OFELI::Muscl3DT::Muscl3DT Muscl3DT</field>
    <field name="text">Constructor using mesh Constructor using mesh Constructor using mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl3DT::setbetalim</field>
    <field name="args">(real_t bl)</field>
    <field name="url">classOFELI_1_1Muscl3DT.html#aa5f414cceb34583beffe0156e07a832d</field>
    <field name="keywords">setbetalim OFELI::Muscl3DT::setbetalim Muscl3DT</field>
    <field name="text">Assign value of beta lim Assign value of beta lim Assign value of beta lim</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl3DT::getMinimumFaceArea</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Muscl3DT.html#aa8c3bf9be2754d2abdc6d55e94020937</field>
    <field name="keywords">getMinimumFaceArea OFELI::Muscl3DT::getMinimumFaceArea Muscl3DT</field>
    <field name="text">Return minimum area of faces in the mesh Return minimum area of faces in the mesh Return minimum area of faces in the mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl3DT::getComega</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Muscl3DT.html#ab44f12a7eb8207b72f81700037ab4b9a</field>
    <field name="keywords">getComega OFELI::Muscl3DT::getComega Muscl3DT</field>
    <field name="text">Return value of Comega Return value of Comega Return value of Comega</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl3DT::~Muscl3DT</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Muscl3DT.html#acd4e4e5ee6784d2eb2913d73a5cbc3ae</field>
    <field name="keywords">OFELI::Muscl3DT::~Muscl3DT Muscl3DT</field>
    <field name="text">Destructor Destructor Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl3DT::setReconstruction</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;U, Vect&lt; real_t &gt; &amp;LU, Vect&lt; real_t &gt; &amp;RU, size_t dof)</field>
    <field name="url">classOFELI_1_1Muscl3DT.html#acdf87fe4ecbf7362db40f16e0dd2ac04</field>
    <field name="keywords">setReconstruction OFELI::Muscl3DT::setReconstruction Muscl3DT</field>
    <field name="text">Function to reconstruct by the Muscl method Function to reconstruct by the Muscl method Function to reconstruct by the Muscl method U Field to reconstruct LU Left gradient vector RU Right gradient vector dof Label of dof to reconstruct</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl3DT::getMinimumElementVolume</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Muscl3DT.html#ad1d72b7f564d14b2ffec154c99357d11</field>
    <field name="keywords">getMinimumElementVolume OFELI::Muscl3DT::getMinimumElementVolume Muscl3DT</field>
    <field name="text">Return minimum volume of elements in the mesh Return minimum volume of elements in the mesh Return minimum volume of elements in the mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl3DT::getMinimumEdgeLength</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Muscl3DT.html#ad227bb667340a091f20adc8fab02baab</field>
    <field name="keywords">getMinimumEdgeLength OFELI::Muscl3DT::getMinimumEdgeLength Muscl3DT</field>
    <field name="text">Return minimum length of edges in the mesh Return minimum length of edges in the mesh Return minimum length of edges in the mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl3DT::getMaximumEdgeLength</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Muscl3DT.html#adf6a99ec1c9ccba9f6a8646482f839ce</field>
    <field name="keywords">getMaximumEdgeLength OFELI::Muscl3DT::getMaximumEdgeLength Muscl3DT</field>
    <field name="text">Return maximum length of edges in the mesh Return maximum length of edges in the mesh Return maximum length of edges in the mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Muscl3DT::getMinimumVolumebyArea</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Muscl3DT.html#ae577161eaedab445fff7ff71f77a201f</field>
    <field name="keywords">getMinimumVolumebyArea OFELI::Muscl3DT::getMinimumVolumebyArea Muscl3DT</field>
    <field name="text">Return minimum volume by area in the mesh Return minimum volume by area in the mesh Return minimum volume by area in the mesh</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::MyNLAS</field>
    <field name="url">classOFELI_1_1MyNLAS.html</field>
    <field name="keywords">MyNLAS</field>
    <field name="text">Abstract class to define by user specified function The user has to implement a class that inherits from the present one where the virtual functions are implemented Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MyNLAS::Gradient</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;x, int i=1, int j=1)</field>
    <field name="url">classOFELI_1_1MyNLAS.html#a025d9db785130fb7753682bb23851327</field>
    <field name="keywords">Gradient OFELI::MyNLAS::Gradient MyNLAS</field>
    <field name="text">Virtual member function to define partial derivatives of function x Vector of variables i Function component Default 1 j Index of partial derivative Default 1 Value of partial derivative</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MyNLAS::MyNLAS</field>
    <field name="args">(const Mesh &amp;mesh)</field>
    <field name="url">classOFELI_1_1MyNLAS.html#a1d78397cd5575f6d40cd537334bee21a</field>
    <field name="keywords">MyNLAS OFELI::MyNLAS::MyNLAS MyNLAS</field>
    <field name="text">Constructor using mesh instance mesh Reference to Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MyNLAS::Function</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;x, int i=1)=0</field>
    <field name="url">classOFELI_1_1MyNLAS.html#a6665ba9fe20cfae949537444dbb6f1c5</field>
    <field name="keywords">Function OFELI::MyNLAS::Function MyNLAS</field>
    <field name="text">Virtual member function to define nonlinear function to zeroe x Vector of variables i component of function to define Default 1 Value of function The component must not be larger than vector size</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MyNLAS::MyNLAS</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1MyNLAS.html#aa16a84e131e9bc324caf7b0e825d9e9f</field>
    <field name="keywords">MyNLAS OFELI::MyNLAS::MyNLAS MyNLAS</field>
    <field name="text">Default Constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MyNLAS::~MyNLAS</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1MyNLAS.html#ab036ce0151a62875a4e53cdb0c2d8d78</field>
    <field name="keywords">OFELI::MyNLAS::~MyNLAS MyNLAS</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::MyOpt</field>
    <field name="url">classOFELI_1_1MyOpt.html</field>
    <field name="keywords">MyOpt</field>
    <field name="text">Abstract class to define by user specified optimization function The user has to implement a class that inherits from the present one where the virtual functions are implemented Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MyOpt::setEquation</field>
    <field name="args">(Equa *eq)</field>
    <field name="url">classOFELI_1_1MyOpt.html#a03b51699a5590c41c4e92e768d43c8b9</field>
    <field name="keywords">setEquation OFELI::MyOpt::setEquation MyOpt</field>
    <field name="text">Define equation instance eq Pointer to equation instance This member function is to be invoked in the user class defining the optimization problem</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MyOpt::~MyOpt</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1MyOpt.html#a0e859db312298add4306a4758791315a</field>
    <field name="keywords">OFELI::MyOpt::~MyOpt MyOpt</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MyOpt::MyOpt</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1MyOpt.html#a186344ab4107f258dc7ea7a289f73413</field>
    <field name="keywords">MyOpt OFELI::MyOpt::MyOpt MyOpt</field>
    <field name="text">Default Constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MyOpt::MyOpt</field>
    <field name="args">(Mesh &amp;mesh)</field>
    <field name="url">classOFELI_1_1MyOpt.html#a449e49074501856ceec259ce8790ab8a</field>
    <field name="keywords">MyOpt OFELI::MyOpt::MyOpt MyOpt</field>
    <field name="text">Constructor using mesh instance mesh Reference to Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MyOpt::getEquation</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1MyOpt.html#a4c5acec7ce664916b14283eccfaa4fed</field>
    <field name="keywords">getEquation OFELI::MyOpt::getEquation MyOpt</field>
    <field name="text">Get pointer to equation instance Pointer to equation instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MyOpt::Objective</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;x)=0</field>
    <field name="url">classOFELI_1_1MyOpt.html#a7d0e247ee8ed3a26a2c4671379df3557</field>
    <field name="keywords">Objective OFELI::MyOpt::Objective MyOpt</field>
    <field name="text">Virtual member function to define objective x Vector of optimization variables Value of objective</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MyOpt::Gradient</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;x, Vect&lt; real_t &gt; &amp;g)</field>
    <field name="url">classOFELI_1_1MyOpt.html#aefb040e275f50b11e9af9d5003f33113</field>
    <field name="keywords">Gradient OFELI::MyOpt::Gradient MyOpt</field>
    <field name="text">Virtual member function to define gradient vector of objective x Vector of optimization variables g Gradient vector</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::NLASSolver</field>
    <field name="url">classOFELI_1_1NLASSolver.html</field>
    <field name="keywords">NLASSolver</field>
    <field name="text">To solve a system of nonlinear algebraic equations of the form f(u) 0 Features The nonlinear problem is solved by the Newton s method in the general case and in the one variable case either by the bisection or the Regula Falsi method The function and its gradient are given Either by regular expressions Or by user defined functions Or by a user defined class This feature enables defining the function and its gradient through a PDE class for instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NLASSolver::setFunction</field>
    <field name="args">(function&lt; Vect&lt; real_t &gt;(Vect&lt; real_t &gt;)&gt; f)</field>
    <field name="url">classOFELI_1_1NLASSolver.html#a04839207ef8c2248c2a6dd958d287b4b</field>
    <field name="keywords">setFunction OFELI::NLASSolver::setFunction NLASSolver</field>
    <field name="text">Define the function associated to the equation to solve This function can be used in the case where a user defined function is to be given f Function given as a function of many variables stored in an input vector and returns a vector This function can be defined by the calling program as a C-function and then cast to an instance of class function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NLASSolver::setGradient</field>
    <field name="args">(function&lt; Vect&lt; real_t &gt;(Vect&lt; real_t &gt;)&gt; g)</field>
    <field name="url">classOFELI_1_1NLASSolver.html#a27ce60ec61d8ab6f2514ef763950bfb7</field>
    <field name="keywords">setGradient OFELI::NLASSolver::setGradient NLASSolver</field>
    <field name="text">Define the function associated to the gradient of the equation to solve g Function given as a function of many variables stored in an input vector and returns a n*n vector n is the number of variables This function can be defined by the calling program as a C-function and then cast to an instance of class function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NLASSolver::NLASSolver</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1NLASSolver.html#a313620706abd07c233e36dc7b45b068f</field>
    <field name="keywords">NLASSolver OFELI::NLASSolver::NLASSolver NLASSolver</field>
    <field name="text">Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NLASSolver::setf</field>
    <field name="args">(string exp)</field>
    <field name="url">classOFELI_1_1NLASSolver.html#a31e77e80114a29bc0d792d13162ff26b</field>
    <field name="keywords">setf OFELI::NLASSolver::setf NLASSolver</field>
    <field name="text">Set function for which zero is sought case of one equation exp Regular expression defining the function using the symbol x as a variable</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NLASSolver::setNbEq</field>
    <field name="args">(size_t nb_eq)</field>
    <field name="url">classOFELI_1_1NLASSolver.html#a3b264f305b8fe76a3ae0520e151e47fb</field>
    <field name="keywords">setNbEq OFELI::NLASSolver::setNbEq NLASSolver</field>
    <field name="text">Define number of equations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NLASSolver::setTolerance</field>
    <field name="args">(real_t toler)</field>
    <field name="url">classOFELI_1_1NLASSolver.html#a4d0e665f8f92335ec10c4ccf9e9171b7</field>
    <field name="keywords">setTolerance OFELI::NLASSolver::setTolerance NLASSolver</field>
    <field name="text">Set tolerance value for convergence Default value of this parameter is 1.e 8</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NLASSolver::setInitial</field>
    <field name="args">(real_t &amp;x)</field>
    <field name="url">classOFELI_1_1NLASSolver.html#a54f93b8af463c5ca893fb24a542e4d6a</field>
    <field name="keywords">setInitial OFELI::NLASSolver::setInitial NLASSolver</field>
    <field name="text">Set initial guess for a unique unknown x Rference to value of initial guess</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NLASSolver::run</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1NLASSolver.html#a58e8be2db2660128e4e6456a9c981fb5</field>
    <field name="keywords">run OFELI::NLASSolver::run NLASSolver</field>
    <field name="text">Run the solution procedure</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NLASSolver::setInitial</field>
    <field name="args">(real_t a, real_t b)</field>
    <field name="url">classOFELI_1_1NLASSolver.html#a5d4f3735e331deb3b35148cdab158de8</field>
    <field name="keywords">setInitial OFELI::NLASSolver::setInitial NLASSolver</field>
    <field name="text">Set initial guesses bisection or Regula falsi algorithms a Value of first initial guess b Value of second initial guess The function has to have opposite signs at these values i.e f(a) f(b) 0 This function makes sense only in the case of a unique function of one variable</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NLASSolver::setDf</field>
    <field name="args">(string exp, size_t i=1, size_t j=1)</field>
    <field name="url">classOFELI_1_1NLASSolver.html#a783547375c07a319c5930db740b374c1</field>
    <field name="keywords">setDf OFELI::NLASSolver::setDf NLASSolver</field>
    <field name="text">Set pzrtial derivative of function for which zero is sought case of many equations exp Regular expression defining the partial derivative In this expression the variables are x1 x2 x10 up to 1 0 variables i Component of function Default 1 j Index of the partial derivative Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NLASSolver::~NLASSolver</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1NLASSolver.html#a983d681b2f47e7b4872a406e634c655e</field>
    <field name="keywords">OFELI::NLASSolver::~NLASSolver NLASSolver</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NLASSolver::setMaxIter</field>
    <field name="args">(int max_it)</field>
    <field name="url">classOFELI_1_1NLASSolver.html#a9e6d15777f4c9d95999313bafae5e5e7</field>
    <field name="keywords">setMaxIter OFELI::NLASSolver::setMaxIter NLASSolver</field>
    <field name="text">Set Maximal number of iterations Default value of this parameter is 1 0 0</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NLASSolver::NLASSolver</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;x, NonLinearIter nl=NEWTON)</field>
    <field name="url">classOFELI_1_1NLASSolver.html#aa3482f7a630b7d059c1b915176e7f0bc</field>
    <field name="keywords">NLASSolver OFELI::NLASSolver::NLASSolver NLASSolver</field>
    <field name="text">Constructor defining a multi-variable problem x Variable containing on input initial guess and on output solution if convergence is achieved nl Iterative procedure to solve the nonlinear system of equations The only possible value default one in the current version is NEWTON</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NLASSolver::NLASSolver</field>
    <field name="args">(MyNLAS &amp;my_nlas, NonLinearIter nl=NEWTON)</field>
    <field name="url">classOFELI_1_1NLASSolver.html#aa95f3a13e864d95497f2749de222c452</field>
    <field name="keywords">NLASSolver OFELI::NLASSolver::NLASSolver NLASSolver</field>
    <field name="text">Constructor using a user defined class my_nlas Reference to instance of user defined class This class inherits from abstract class MyNLAS It must contain the member function Vect&lt;double&gt; Function(const Vect&lt;double&gt;&amp; x) which returns the value of the nonlinear function as a vector for a given solution vector x The user defined class must contain if the iterative scheme requires it the member function Vect&lt;double&gt; Gradient(const Vect&lt;real_t&gt;&amp; x) which returns the gradient as a n*n vector each index i j containing the j-th partial derivative of the i-th function nl Iterative procedure to solve the nonlinear system of equations To be chosen among the enumerated values BISECTION REGULA_FALSI or NEWTON</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NLASSolver::NLASSolver</field>
    <field name="args">(real_t &amp;x, NonLinearIter nl=NEWTON)</field>
    <field name="url">classOFELI_1_1NLASSolver.html#ac1656b2d822739cb3fb7b323f8079ca0</field>
    <field name="keywords">NLASSolver OFELI::NLASSolver::NLASSolver NLASSolver</field>
    <field name="text">Constructor defining a one-variable problem x Variable containing on input initial guess and on output solution if convergence is achieved nl Iterative procedure to solve the nonlinear system of equations To be chosen among the enumerated values BISECTION REGULA_FALSI or NEWTON</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NLASSolver::setGradient</field>
    <field name="args">(function&lt; real_t(real_t)&gt; g)</field>
    <field name="url">classOFELI_1_1NLASSolver.html#ac63af64b7883d535bb07ab4fee964aaa</field>
    <field name="keywords">setGradient OFELI::NLASSolver::setGradient NLASSolver</field>
    <field name="text">Define the function associated to the derivative of the equation to solve g Function given as a function of one real variable and returning a real number This function can be defined by the calling program as a C-function and then cast to an instance of class function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NLASSolver::NLASSolver</field>
    <field name="args">(NonLinearIter nl, size_t nb_eq=1)</field>
    <field name="url">classOFELI_1_1NLASSolver.html#ad029742cd608e67f5099883c9827466c</field>
    <field name="keywords">NLASSolver OFELI::NLASSolver::NLASSolver NLASSolver</field>
    <field name="text">Constructor defining the iterative method to solve the equation nl Choose an iterative procedure to solve the nonlinear system of equations To be chosen among the enumerated values BISECTION REGULA_FALSI or NEWTON nb_eq Number of equations Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NLASSolver::getNbIter</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1NLASSolver.html#ad427a5facfbd7f505f7dd7ff9d512c20</field>
    <field name="keywords">getNbIter OFELI::NLASSolver::getNbIter NLASSolver</field>
    <field name="text">Return number of iterations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NLASSolver::get</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;u) const</field>
    <field name="url">classOFELI_1_1NLASSolver.html#ad7ccdd8aa93f2a70b875014ef8d2709c</field>
    <field name="keywords">get OFELI::NLASSolver::get NLASSolver</field>
    <field name="text">Return solution case of a nonlinear system of equations u Vector that contains on output the solution</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NLASSolver::get</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1NLASSolver.html#ad9f7cc68beb74fedbedde34c7fb10887</field>
    <field name="keywords">get OFELI::NLASSolver::get NLASSolver</field>
    <field name="text">Return solution Case of a scalar equation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NLASSolver::setFunction</field>
    <field name="args">(function&lt; real_t(real_t)&gt; f)</field>
    <field name="url">classOFELI_1_1NLASSolver.html#aded9896bbfc5b7062a878f049328dbf4</field>
    <field name="keywords">setFunction OFELI::NLASSolver::setFunction NLASSolver</field>
    <field name="text">Define the function associated to the equation to solve This function can be used in the case where a user defined function is to be given To be used in the one-variable case f Function given as a function of one real variable and returning a real number This function can be defined by the calling program as a C-function and then cast to an instance of class function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NLASSolver::setPDE</field>
    <field name="args">(Equa &amp;eq)</field>
    <field name="url">classOFELI_1_1NLASSolver.html#ae54c667d9db5c13eff35fdb0c0f9ef29</field>
    <field name="keywords">setPDE OFELI::NLASSolver::setPDE NLASSolver</field>
    <field name="text">Define a PDE The solver can be used to solve a nonlinear PDE In this case the PDE is defined as an instance of a class inheriting of Equa eq Pointer to equation instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NLASSolver::set</field>
    <field name="args">(NonLinearIter nl)</field>
    <field name="url">classOFELI_1_1NLASSolver.html#aed17157b8b5172e30a9132a8eb061c01</field>
    <field name="keywords">set OFELI::NLASSolver::set NLASSolver</field>
    <field name="text">Define an iterative procedure To be chosen among the enumerated values BISECTION REGULA_FALSI or NEWTON</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NLASSolver::setInitial</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1NLASSolver.html#af1cd58fec176472be29a4dfb1be829e3</field>
    <field name="keywords">setInitial OFELI::NLASSolver::setInitial NLASSolver</field>
    <field name="text">Set initial guess for the iterations u Vector containing initial guess for the unknown</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::NSP2DQ41</field>
    <field name="url">classOFELI_1_1NSP2DQ41.html</field>
    <field name="keywords">NSP2DQ41</field>
    <field name="text">Builds finite element arrays for incompressible Navier-Stokes equations in 2 D domains using Q 1 0 element and a penaly formulation for the incompressibility condition Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NSP2DQ41::~NSP2DQ41</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1NSP2DQ41.html#a12fe9b1ca3c86d5d27cb0280ceaa4a3a</field>
    <field name="keywords">OFELI::NSP2DQ41::~NSP2DQ41 NSP2DQ41</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NSP2DQ41::build</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1NSP2DQ41.html#a7740c7ab195c03ac140f1f75f633470f</field>
    <field name="keywords">build OFELI::NSP2DQ41::build NSP2DQ41</field>
    <field name="text">Build the linear system of equations Before using this function one must have properly selected appropriate options for The choice of a steady state or transient analysis By default the analysis is stationary In the case of transient analysis the choice of a time integration scheme and a lumped or consistent capacity matrix If transient analysis is chosen the lumped capacity matrix option is chosen by default and the implicit Euler scheme is used by default for time integration</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NSP2DQ41::NSP2DQ41</field>
    <field name="args">(Mesh &amp;ms, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1NSP2DQ41.html#a84a5ed3affb0030e22f2efbfc1102962</field>
    <field name="keywords">NSP2DQ41 OFELI::NSP2DQ41::NSP2DQ41 NSP2DQ41</field>
    <field name="text">Constructor using mesh data and velocity vector ms Mesh instance u Velocity vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NSP2DQ41::NSP2DQ41</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1NSP2DQ41.html#a96451a67be2c8d82f95db41bc77cead1</field>
    <field name="keywords">NSP2DQ41 OFELI::NSP2DQ41::NSP2DQ41 NSP2DQ41</field>
    <field name="text">Constructor using mesh data ms Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NSP2DQ41::runOneTimeStep</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1NSP2DQ41.html#a97ceb92f009f5eee1340388708fd5939</field>
    <field name="keywords">runOneTimeStep OFELI::NSP2DQ41::runOneTimeStep NSP2DQ41</field>
    <field name="text">Run one time step This function performs one time step once a time integration scheme has been selected</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NSP2DQ41::setPenalty</field>
    <field name="args">(real_t lambda)</field>
    <field name="url">classOFELI_1_1NSP2DQ41.html#aef525ad3a42dedd8346b084b3e303272</field>
    <field name="keywords">setPenalty OFELI::NSP2DQ41::setPenalty NSP2DQ41</field>
    <field name="text">Define penalty parameter Penalty parameter is used to enforce the incompressibility constraint lambda Penaly parameter Large value Default 1.e07</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NSP2DQ41::Periodic</field>
    <field name="args">(real_t coef=1.e20)</field>
    <field name="url">classOFELI_1_1NSP2DQ41.html#af669369716d638f14a268133981dbb17</field>
    <field name="keywords">Periodic OFELI::NSP2DQ41::Periodic NSP2DQ41</field>
    <field name="text">Add contribution of periodic boundary condition by a penalty technique Boundary nodes where periodic boundary conditions are to be imposed must have codes equal to PERIODIC_A on one side and PERIODIC_B on the opposite side coef Value of penalty parameter Default 1.e20</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NSP2DQ41::setInput</field>
    <field name="args">(EType opt, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1NSP2DQ41.html#affbdc0fae478891f2b9f63607004026f</field>
    <field name="keywords">setInput OFELI::NSP2DQ41::setInput NSP2DQ41</field>
    <field name="text">Set equation input data opt Parameter that selects data type for input This parameter is to be chosen in the enumerated variable EqDataType u Vect instance that contains input vector data List of data types contains INITIAL BOUNDARY_CONDITION_DATA SOURCE or FLUX with obvious meaning</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Node</field>
    <field name="url">classOFELI_1_1Node.html</field>
    <field name="keywords">Node</field>
    <field name="text">To describe a node A node is characterized by its label its coordinates its number of degrees of freedom DOF and codes that are associated to each DOF Once the mesh is constructed information on neighboring elements of node can be retrieved see appropriate member functions However the member function getNodeNeighborElements of Mesh must have been called before If this is not the case the program crashes down since no preliminary checking is done for efficiency reasons</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::Node</field>
    <field name="args">(const Node &amp;node)</field>
    <field name="url">classOFELI_1_1Node.html#a04fdf4ff92e2ddcf357f196b10fa2a4c</field>
    <field name="keywords">Node OFELI::Node::Node Node</field>
    <field name="text">Copy Constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::Add</field>
    <field name="args">(Element *el)</field>
    <field name="url">classOFELI_1_1Node.html#a09bede292ad1986fef93ecdf07a12389</field>
    <field name="keywords">Add OFELI::Node::Add Node</field>
    <field name="text">Add element pointed by el as neighbor element to node</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::getXYZ</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Node.html#a0cb5e306428ad3f22d29ee00d7e9c382</field>
    <field name="keywords">getXYZ OFELI::Node::getXYZ Node</field>
    <field name="text">Return coordinates of node Return value is an instance of class Point</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::setCode</field>
    <field name="args">(const vector&lt; int &gt; &amp;code)</field>
    <field name="url">classOFELI_1_1Node.html#a0cc89531e71a30f097c6f4ab9c5a5752</field>
    <field name="keywords">setCode OFELI::Node::setCode Node</field>
    <field name="text">Define codes for all node DOFs code vector instance that contains code for each DOF of current node</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::Node</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Node.html#a0d313fac56abd7ebe58a17f1530b879e</field>
    <field name="keywords">Node OFELI::Node::Node Node</field>
    <field name="text">Default constructor Initialize data to zero</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::getCoord</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Node.html#a132ae145302959918ea3d6d73c219673</field>
    <field name="keywords">getCoord OFELI::Node::getCoord Node</field>
    <field name="text">Return coordinates of node Return value is an instance of class Point</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::getFirstDOF</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Node.html#a15c86d73e9480dad550d2b6ba6f45c52</field>
    <field name="keywords">getFirstDOF OFELI::Node::getFirstDOF Node</field>
    <field name="text">Return label of first DOF of node</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::getNbNeigEl</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Node.html#a222ec5a25ec8221ae362e1a379fed1d5</field>
    <field name="keywords">getNbNeigEl OFELI::Node::getNbNeigEl Node</field>
    <field name="text">Return number of neighbor elements Neighbor elements are those that share node Note that the returned information is valid only if the Mesh member function getNodeNeighborElements() has been invoked before</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::getCoord</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Node.html#a24221fea11d50dd43f5b411001461598</field>
    <field name="keywords">getCoord OFELI::Node::getCoord Node</field>
    <field name="text">Return i-th coordinate of node i 1 3</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::setDOF</field>
    <field name="args">(size_t &amp;first_dof, size_t nb_dof)</field>
    <field name="url">classOFELI_1_1Node.html#a256faa817829ee737c4d15145f207cf8</field>
    <field name="keywords">setDOF OFELI::Node::setDOF Node</field>
    <field name="text">Define number of DOF first_dof Label of the first DOF in input that is actualized nb_dof Number of DOF</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::setLabel</field>
    <field name="args">(size_t label)</field>
    <field name="url">classOFELI_1_1Node.html#a27941e71f0cfa3d287a056b000b5fee6</field>
    <field name="keywords">setLabel OFELI::Node::setLabel Node</field>
    <field name="text">Define label of node</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::getNbDOF</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Node.html#a2e702838dc1b95944fd571e804950aa3</field>
    <field name="keywords">getNbDOF OFELI::Node::getNbDOF Node</field>
    <field name="text">Return number of degrees of freedom DOF</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::getZ</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Node.html#a48f131bb560f3d39a42a67f42dfef23a</field>
    <field name="keywords">getZ OFELI::Node::getZ Node</field>
    <field name="text">Return z-coordinate of node</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::setLevel</field>
    <field name="args">(int level)</field>
    <field name="url">classOFELI_1_1Node.html#a4c47f9adbca525f247fe53e4bc945a6d</field>
    <field name="keywords">setLevel OFELI::Node::setLevel Node</field>
    <field name="text">Assign a level to current node This member function is useful for mesh adaption Default node s level is zero</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::getDOF</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Node.html#a5454f38fe3a796017f364246f7e3ed5a</field>
    <field name="keywords">getDOF OFELI::Node::getDOF Node</field>
    <field name="text">Return label of i-th dof</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::getCode</field>
    <field name="args">(size_t dof=1) const</field>
    <field name="url">classOFELI_1_1Node.html#a60214933ce428b4380802fc97666ffcc</field>
    <field name="keywords">getCode OFELI::Node::getCode Node</field>
    <field name="text">Return code for a given DOF of node dof label of degree of freedom for which code is to be returned Default value is 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::getY</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Node.html#a6a9c9ccb06a76fe603ec20ead32c1655</field>
    <field name="keywords">getY OFELI::Node::getY Node</field>
    <field name="text">Return y-coordinate of node</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::Node</field>
    <field name="args">(size_t label, const Point&lt; real_t &gt; &amp;x)</field>
    <field name="url">classOFELI_1_1Node.html#a6f7e6895197e9787f6995544bc4fd276</field>
    <field name="keywords">Node OFELI::Node::Node Node</field>
    <field name="text">Constructor with label and coordinates label Label of node x Node coordinates</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::~Node</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Node.html#a6fa6bf60f34f1e3efb0e59333428c9c8</field>
    <field name="keywords">OFELI::Node::~Node Node</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::setCode</field>
    <field name="args">(size_t dof, int code)</field>
    <field name="url">classOFELI_1_1Node.html#a83a8351cc27666594d7d7c2850556ccf</field>
    <field name="keywords">setCode OFELI::Node::setCode Node</field>
    <field name="text">Define code for a given DOF of node dof DOF index code Code to assign to DOF</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::isOnBoundary</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Node.html#a8a4fffdf02fa950ce2dd51ae1eec8ad3</field>
    <field name="keywords">isOnBoundary OFELI::Node::isOnBoundary Node</field>
    <field name="text">Say if node is a boundary node Note this information is available only if boundary sides and nodes were determined See class Mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::getLevel</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Node.html#a8f44f2787dedf1e0950319c4d06d094a</field>
    <field name="keywords">getLevel OFELI::Node::getLevel Node</field>
    <field name="text">Return node level Node level decreases when element is refined starting from 0 If the level is 0 then the element has no parents</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::setCode</field>
    <field name="args">(const string &amp;exp, int code, size_t dof=1)</field>
    <field name="url">classOFELI_1_1Node.html#a9d491abc26d7bf766d507caa8979b178</field>
    <field name="keywords">setCode OFELI::Node::setCode Node</field>
    <field name="text">Define code by a boolean algebraic expression invoking node coordinates exp Boolean algebraic expression as required by fparser code Code to assign to node if the algebraic expression is true dof Degree of Freedom for which code is assigned Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::getX</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Node.html#aa0ec3c28abdbd621d6182a0f2d162f38</field>
    <field name="keywords">getX OFELI::Node::getX Node</field>
    <field name="text">Return x-coordinate of node</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::DOF</field>
    <field name="args">(size_t i, size_t dof)</field>
    <field name="url">classOFELI_1_1Node.html#aa1a9657431763667147be7d405317a14</field>
    <field name="keywords">DOF OFELI::Node::DOF Node</field>
    <field name="text">Define label of DOF i DOF index dof Label of DOF</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::setCode</field>
    <field name="args">(int *code)</field>
    <field name="url">classOFELI_1_1Node.html#ac386b0da48cbb290493e7d435d14216e</field>
    <field name="keywords">setCode OFELI::Node::setCode Node</field>
    <field name="text">Define codes for all node DOFs code C-array that contains code for each DOF of current node</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::n</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Node.html#ac88f0961aa7ed7c7415550ab2cad49c8</field>
    <field name="keywords">n OFELI::Node::n Node</field>
    <field name="text">Return label of node</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::setOnBoundary</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Node.html#ad742fa16927ed3e44c84a6f0b771a211</field>
    <field name="keywords">setOnBoundary OFELI::Node::setOnBoundary Node</field>
    <field name="text">Set node as boundary node This function is mostly internally used Especially in class Mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::setNbDOF</field>
    <field name="args">(size_t n)</field>
    <field name="url">classOFELI_1_1Node.html#adb53c731048031345289f952f71209f6</field>
    <field name="keywords">setNbDOF OFELI::Node::setNbDOF Node</field>
    <field name="text">Define number of DOF</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::getNeigEl</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Node.html#ae0702d29c8b6ff6473b1bc5543f8e8a1</field>
    <field name="keywords">getNeigEl OFELI::Node::getNeigEl Node</field>
    <field name="text">Return i-th neighbor element Note that the returned information is valid only if the Mesh member function getNodeNeighborElements() has been invoked before</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::setCoord</field>
    <field name="args">(size_t i, real_t x)</field>
    <field name="url">classOFELI_1_1Node.html#aed0d5940309ba25b1f01115bb2cac40c</field>
    <field name="keywords">setCoord OFELI::Node::setCoord Node</field>
    <field name="text">Set i-th coordinate i Coordinate index 1 3 x Coordinate value</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Node::setFirstDOF</field>
    <field name="args">(size_t n)</field>
    <field name="url">classOFELI_1_1Node.html#afccb14e6bc10f074283b92506c13947d</field>
    <field name="keywords">setFirstDOF OFELI::Node::setFirstDOF Node</field>
    <field name="text">Define First DOF</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::NodeList</field>
    <field name="url">classOFELI_1_1NodeList.html</field>
    <field name="keywords">NodeList</field>
    <field name="text">Class to construct a list of nodes having some common properties This class enables choosing multiple selection criteria by using function select However the intersection of these properties must be empty Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NodeList::selectCoordinate</field>
    <field name="args">(real_t x, real_t y=ANY, real_t z=ANY)</field>
    <field name="url">classOFELI_1_1NodeList.html#a11075d33938ab2c5982d2a5d28c2a770</field>
    <field name="keywords">selectCoordinate OFELI::NodeList::selectCoordinate NodeList</field>
    <field name="text">Select nodes having given coordinates x x coordinate that share the selected nodes y y coordinate that share the selected nodes Default ANY z z coordinate that share the selected nodes Default ANY Coordinates can be assigned the value ANY This means that any coordinate value is accepted For instance to select all nodes with x 0 use selectCoordinate 0 ANY ANY</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NodeList::selectCode</field>
    <field name="args">(int code, int dof=1)</field>
    <field name="url">classOFELI_1_1NodeList.html#a35661429fc740a9ecaef16a654df272e</field>
    <field name="keywords">selectCode OFELI::NodeList::selectCode NodeList</field>
    <field name="text">Select nodes having a given code for a given degree of freedom code Code that nodes share dof Degree of Freedom label Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NodeList::NodeList</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1NodeList.html#a378c921e7f279b0433a34a571616ea84</field>
    <field name="keywords">NodeList OFELI::NodeList::NodeList NodeList</field>
    <field name="text">Constructor using a Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NodeList::top</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1NodeList.html#a38e8fcffc1e158b30d9d72845d92ac57</field>
    <field name="keywords">top OFELI::NodeList::top NodeList</field>
    <field name="text">Reset list of nodes at its top position Non constant version</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NodeList::top</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1NodeList.html#a6a8d8a56b30458682d94bd05d6bbf7aa</field>
    <field name="keywords">top OFELI::NodeList::top NodeList</field>
    <field name="text">Reset list of nodes at its top position Constant version</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NodeList::get</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1NodeList.html#a77ae09edf86692655126d8342f71d79d</field>
    <field name="keywords">get OFELI::NodeList::get NodeList</field>
    <field name="text">Return pointer to current node and move to next one Constant version</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NodeList::get</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1NodeList.html#a8274e91dd34f8bf1085648804f0fd16a</field>
    <field name="keywords">get OFELI::NodeList::get NodeList</field>
    <field name="text">Return pointer to current node and move to next one Non constant version</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NodeList::~NodeList</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1NodeList.html#acea56f67a7e3357e11d42511e33aadfe</field>
    <field name="keywords">OFELI::NodeList::~NodeList NodeList</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NodeList::getNbNodes</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1NodeList.html#ade220c85ff6ecba20a6e05121f2b9257</field>
    <field name="keywords">getNbNodes OFELI::NodeList::getNbNodes NodeList</field>
    <field name="text">Return number of selected nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NodeList::unselectCode</field>
    <field name="args">(int code, int dof=1)</field>
    <field name="url">classOFELI_1_1NodeList.html#afd4634dbd776b50714209695e2aafcdd</field>
    <field name="keywords">unselectCode OFELI::NodeList::unselectCode NodeList</field>
    <field name="text">Unselect nodes having a given code for a given degree of freedom code Code of nodes to exclude dof Degree of Freedom label Default 1</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::ODESolver</field>
    <field name="url">classOFELI_1_1ODESolver.html</field>
    <field name="keywords">ODESolver</field>
    <field name="text">To solve a system of ordinary differential equations The class ODESolver enables solving by a numerical scheme a system or ordinary differential equations taking one of the forms A linear system of differential equations of the first-order A 1 t u t A 0 t u(t) f(t) A linear system of differential equations of the second-order A 2 t u t A 1 t u t A 0 t u(t) f(t) A system of ordinary differential equations of the form u t f(t,u(t)) The following time integration schemes can be used Forward Euler scheme value FORWARD_EULER for first-order systems Backward Euler scheme value BACKWARD_EULER for first-order linear systems Crank-Nicolson value CRANK_NICOLSON for first-order linear systems Heun value HEUN for first-order systems 2 nd Order Adams-Bashforth value AB2 for first-order systems 4 th order Runge-Kutta value RK4 for first-order systems 2 nd order Backward Differentiation Formula value BDF2 for linear first-order systems Newmark value NEWMARK for linear second-order systems with constant matrices Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::setLinearSolver</field>
    <field name="args">(Iteration s=DIRECT_SOLVER, Preconditioner p=DIAG_PREC)</field>
    <field name="url">classOFELI_1_1ODESolver.html#a03025e97482684280a54df4817908825</field>
    <field name="keywords">setLinearSolver OFELI::ODESolver::setLinearSolver ODESolver</field>
    <field name="text">Set linear solver data s Solver identification parameter To be chosen in the enumeration variable Iteration DIRECT_SOLVER CG_SOLVER CGS_SOLVER BICG_SOLVER BICG_STAB_SOLVER GMRES_SOLVER QMR_SOLVER Default DIRECT_SOLVER p Preconditioner identification parameter To be chosen in the enumeration variable Preconditioner IDENT_PREC DIAG_PREC ILU_PREC Default DIAG_PREC The argument p has no effect if the solver is DIRECT_SOLVER</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::setInitialRHS</field>
    <field name="args">(real_t f)</field>
    <field name="url">classOFELI_1_1ODESolver.html#a03b0ab4b60d3d19f73499d6ccf8b5c4c</field>
    <field name="keywords">setInitialRHS OFELI::ODESolver::setInitialRHS ODESolver</field>
    <field name="text">Set initial right-hand side for a single differential equation f Value of right-hand side at initial time This value is helpful for high order methods</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::setNewmarkParameters</field>
    <field name="args">(real_t beta, real_t gamma)</field>
    <field name="url">classOFELI_1_1ODESolver.html#a0af28f955ff37f212996f60348fd0385</field>
    <field name="keywords">setNewmarkParameters OFELI::ODESolver::setNewmarkParameters ODESolver</field>
    <field name="text">Define parameters for the Newmarxk scheme beta Parameter beta Default 0.25 gamma Parameter gamma Default 0.5</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::getPhase</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;x, Vect&lt; real_t &gt; &amp;v, size_t i=1)</field>
    <field name="url">classOFELI_1_1ODESolver.html#a2dd3d2023075edaec285442848f4d25b</field>
    <field name="keywords">getPhase OFELI::ODESolver::getPhase ODESolver</field>
    <field name="text">Get phase portrait vectors This function gets vectors containing solution and its time derivative to determine phase portraite of the ode The function is valid for a single ode only x Vector containing solution of the ode at each computed time step v Vector containing discrete time derivative of the ode at each computed time step i Component for which the phase is extracted Dafault 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::ODESolver</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1ODESolver.html#a2e716223fdfa1868a6a683386da026f6</field>
    <field name="keywords">ODESolver OFELI::ODESolver::ODESolver ODESolver</field>
    <field name="text">Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::setCoef</field>
    <field name="args">(real_t a0, real_t a1, real_t a2, real_t f)</field>
    <field name="url">classOFELI_1_1ODESolver.html#a2ea2722af101302a690f5874e4536748</field>
    <field name="keywords">setCoef OFELI::ODESolver::setCoef ODESolver</field>
    <field name="text">Define coefficients in the case of a scalar differential equation This function enables giving coefficients of the differential equation as an algebraic expression of time t see the function fparse a0 Coefficient of the 0 th order term a1 Coefficient of the 1 st order term a2 Coefficient of the 2 nd order term f Value of the right-hand side Naturally the equation is of the first order if a2 0</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::setDF</field>
    <field name="args">(string df, int i, int j)</field>
    <field name="url">classOFELI_1_1ODESolver.html#a30f3349b451cfe856b895eaac667a56e</field>
    <field name="keywords">setDF OFELI::ODESolver::setDF ODESolver</field>
    <field name="text">Set time derivative of the function defining the ODE This function enables prescribing the value of the 1 st derivative for a 1 st order ODE or the 2 nd one for a 2 nd-order ODE It is to be used for nonlinear ODEs of the form y t f(t,y(t)) or y t f t y(t) y t In the case of a system of ODEs this function can be called once for each equation given in the order of the unknowns</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::setF</field>
    <field name="args">(string f, int i)</field>
    <field name="url">classOFELI_1_1ODESolver.html#a3132b0abb0f9bf21aeeb616c3a4743df</field>
    <field name="keywords">setF OFELI::ODESolver::setF ODESolver</field>
    <field name="text">Set time derivative given as an algebraic expression for a nonlinear ODE This function enables prescribing the value of the 1 st derivative for a 1 st order ODE or the 2 nd one for a 2 nd-order ODE It is to be used for nonlinear ODEs of the form y t f(t,y(t)) or y t f t y(t) y t This function is to be used for the i th equation of a system of ODEs f Expression of the function i Index of equation Must be not larger than the number of equations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::setRHS</field>
    <field name="args">(string f)</field>
    <field name="url">classOFELI_1_1ODESolver.html#a3dbf209fb629cc8da401e9fe178505e8</field>
    <field name="keywords">setRHS OFELI::ODESolver::setRHS ODESolver</field>
    <field name="text">Set right-hand side value for a linear ODE</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::setTolerance</field>
    <field name="args">(real_t toler)</field>
    <field name="url">classOFELI_1_1ODESolver.html#a4d0e665f8f92335ec10c4ccf9e9171b7</field>
    <field name="keywords">setTolerance OFELI::ODESolver::setTolerance ODESolver</field>
    <field name="text">Set tolerance value for convergence This function is useful for a non linear ODE or system of ODEs if an implicit scheme is used toler Tolerance value Default 1.e 8</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::setRHS</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;b)</field>
    <field name="url">classOFELI_1_1ODESolver.html#a4dcc6c83ae5f9c7a958e9ba081f8eeb6</field>
    <field name="keywords">setRHS OFELI::ODESolver::setRHS ODESolver</field>
    <field name="text">Set right-hand side vector for a system of ODE b Vect instance containing right-hand side for a linear system of ordinary differential equations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::ODESolver</field>
    <field name="args">(size_t nb_eq)</field>
    <field name="url">classOFELI_1_1ODESolver.html#a56d53bea94b3658eea8804466f91fa96</field>
    <field name="keywords">ODESolver OFELI::ODESolver::ODESolver ODESolver</field>
    <field name="text">Constructor providing the number of equations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::set</field>
    <field name="args">(TimeScheme s, real_t time_step=theTimeStep, real_t final_time=theFinalTime)</field>
    <field name="url">classOFELI_1_1ODESolver.html#a584a3841c197ddb1ec0494389823d561</field>
    <field name="keywords">set OFELI::ODESolver::set ODESolver</field>
    <field name="text">Define data of the differential equation or system s Choice of the scheme To be chosen in the enumerated variable Scheme see the presentation of the class time_step Value of the time step This value will be modified if an adaptive method is used The default value for this parameter if the value given by the global variable theTimeStep final_time Value of the final time time starts at 0 The default value for this parameter is the value given by the global variable theFinalTime</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::setMatrices</field>
    <field name="args">(DMatrix&lt; real_t &gt; &amp;A0, DMatrix&lt; real_t &gt; &amp;A1, DMatrix&lt; real_t &gt; &amp;A2)</field>
    <field name="url">classOFELI_1_1ODESolver.html#a5cb40025ed875f05963306f97f4350aa</field>
    <field name="keywords">setMatrices OFELI::ODESolver::setMatrices ODESolver</field>
    <field name="text">Define matrices for a system of second-order ODEs Matrices are given as references to class DMatrix A0 Reference to matrix in front of the 0 th order term no time derivative A1 Reference to matrix in front of the 1 st order term first time derivative A2 Reference to matrix in front of the 2 nd order term second time derivative This function has to be called at each time step</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::ODESolver</field>
    <field name="args">(TimeScheme s, real_t time_step=theTimeStep, real_t final_time=theFinalTime, size_t nb_eq=1)</field>
    <field name="url">classOFELI_1_1ODESolver.html#a5e05bb6feba76958bec33ba5e4989d42</field>
    <field name="keywords">ODESolver OFELI::ODESolver::ODESolver ODESolver</field>
    <field name="text">Constructor using time discretization data s Choice of the scheme To be chosen in the enumerated variable Scheme see the presentation of the class time_step Value of the time step This value will be modified if an adaptive method is used The default value for this parameter if the value given by the global variable theTimeStep final_time Value of the final time time starts at 0 The default value for this parameter is the value given by the global variable theFinalTime nb_eq Number of differential equations size of the system Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::setCoef</field>
    <field name="args">(string a0, string a1, string a2, string f)</field>
    <field name="url">classOFELI_1_1ODESolver.html#a6e0120918529bcfdfbb281db4dfff8a1</field>
    <field name="keywords">setCoef OFELI::ODESolver::setCoef ODESolver</field>
    <field name="text">Define coefficients in the case of a scalar differential equation a0 Coefficient of the 0 th order term a1 Coefficient of the 1 st order term a2 Coefficient of the 2 nd order term f Value of the right-hand side Naturally the equation if of the first order if a2 0</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::setNbEq</field>
    <field name="args">(size_t n)</field>
    <field name="url">classOFELI_1_1ODESolver.html#a7853f747248fb317219c940e6cba410d</field>
    <field name="keywords">setNbEq OFELI::ODESolver::setNbEq ODESolver</field>
    <field name="text">Set the number of equations Default 1 This function is to be used if the default constructor was used</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::getNbEq</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1ODESolver.html#a7e81ee9c88f36ed678b711aaf77fcfb1</field>
    <field name="keywords">getNbEq OFELI::ODESolver::getNbEq ODESolver</field>
    <field name="text">Return number of equations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::setdFdt</field>
    <field name="args">(string df, int i)</field>
    <field name="url">classOFELI_1_1ODESolver.html#a87d0215e1305be53aa83e8ac80d415ce</field>
    <field name="keywords">setdFdt OFELI::ODESolver::setdFdt ODESolver</field>
    <field name="text">Set time derivative of the function defining the ODE This function enables prescribing the value of the 1 st derivative for a 1 st order ODE or the 2 nd one for a 2 nd-order ODE It is to be used for nonlinear ODEs of the form y t f(t,y(t)) or y t f t y(t) y t In the case of a system of ODEs this function can be called once for each equation given in the order of the unknowns</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::setRK4RHS</field>
    <field name="args">(real_t f)</field>
    <field name="url">classOFELI_1_1ODESolver.html#a8af5428b41cbdbd33226187aefbcd40c</field>
    <field name="keywords">setRK4RHS OFELI::ODESolver::setRK4RHS ODESolver</field>
    <field name="text">Set intermediate right-hand side vector for the Runge-Kutta method f Value of right-hand side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::getTimeDerivative</field>
    <field name="args">(int i=1) const</field>
    <field name="url">classOFELI_1_1ODESolver.html#a8b50b99be10cf64ab5ac8d015b9b8987</field>
    <field name="keywords">getTimeDerivative OFELI::ODESolver::getTimeDerivative ODESolver</field>
    <field name="text">Get time derivative of solution Return approximate time derivative of solution in the case of a single equation i Index of component whose time derivative is sought Time derivative of the i-th component of the solution If we are solving one equation this parameter is not used</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::setInitial</field>
    <field name="args">(real_t u, int i)</field>
    <field name="url">classOFELI_1_1ODESolver.html#a8cc9327aca93f0f3c2ac403d63c6c40c</field>
    <field name="keywords">setInitial OFELI::ODESolver::setInitial ODESolver</field>
    <field name="text">Set initial condition for a first-oder system of differential equations u Initial condition for an unknown i Index of the unknown</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::setF</field>
    <field name="args">(string f)</field>
    <field name="url">classOFELI_1_1ODESolver.html#a8e734c537232e7be6f58fd92ce129bd8</field>
    <field name="keywords">setF OFELI::ODESolver::setF ODESolver</field>
    <field name="text">Set time derivative given as an algebraic expression for a nonlinear ODE This function enables prescribing the value of the 1 st derivative for a 1 st order ODE or the 2 nd one for a 2 nd-order ODE It is to be used for nonlinear ODEs of the form y t f(t,y(t)) or y t f t y(t) y t In the case of a system of ODEs this function can be called once for each equation given in the order of the unknowns f Expression of the function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::setMatrices</field>
    <field name="args">(DMatrix&lt; real_t &gt; &amp;A0, DMatrix&lt; real_t &gt; &amp;A1)</field>
    <field name="url">classOFELI_1_1ODESolver.html#a8f294036ba5c4c042190a777923aea39</field>
    <field name="keywords">setMatrices OFELI::ODESolver::setMatrices ODESolver</field>
    <field name="text">Define matrices for a system of first-order ODEs Matrices are given as references to class DMatrix A0 Reference to matrix in front of the 0 th order term no time derivative A1 Reference to matrix in front of the 1 st order term first time derivative This function has to be called at each time step</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::setInitialRHS</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1ODESolver.html#a9b86e899eb64ac7c5d3716f3d20c2bb2</field>
    <field name="keywords">setInitialRHS OFELI::ODESolver::setInitialRHS ODESolver</field>
    <field name="text">Set initial RHS for a system of differential equations Giving the right-hand side at initial time is somtimes required for high order methods like Runge-Kutta f Vector containing right-hand side at initial time This vector is helpful for high order methods</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::setMaxIter</field>
    <field name="args">(int max_it)</field>
    <field name="url">classOFELI_1_1ODESolver.html#a9e6d15777f4c9d95999313bafae5e5e7</field>
    <field name="keywords">setMaxIter OFELI::ODESolver::setMaxIter ODESolver</field>
    <field name="text">Set maximal number of iterations This function is useful for a non linear ODE or system of ODEs if an implicit scheme is used max_it Maximal number of iterations Default 1 0 0</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::setInitial</field>
    <field name="args">(real_t u)</field>
    <field name="url">classOFELI_1_1ODESolver.html#aa4c629497b2bf3529d0e612cfafd0287</field>
    <field name="keywords">setInitial OFELI::ODESolver::setInitial ODESolver</field>
    <field name="text">Set initial condition for a first-order ordinary differential equation u Initial condition unknown value</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::setRK4RHS</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1ODESolver.html#aa7e53c44ddd0bfff4147278d5c15f3a3</field>
    <field name="keywords">setRK4RHS OFELI::ODESolver::setRK4RHS ODESolver</field>
    <field name="text">Set intermediate right-hand side vector for the Runge-Kutta method f right-hand side vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::getTimeDerivative</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;y) const</field>
    <field name="url">classOFELI_1_1ODESolver.html#aa934ebccdb8f713e8fe079c8c7f2342d</field>
    <field name="keywords">getTimeDerivative OFELI::ODESolver::getTimeDerivative ODESolver</field>
    <field name="text">Get time derivative of solution for a system Get approximate time derivative of solution in the case of an ODE system y Vector containing time derivative of solution</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::~ODESolver</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1ODESolver.html#ab12de38f58ecf7647758f97c0be1546f</field>
    <field name="keywords">OFELI::ODESolver::~ODESolver ODESolver</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::getLSolver</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1ODESolver.html#ab16f3efb733621d8147325ddc52fff1f</field>
    <field name="keywords">getLSolver OFELI::ODESolver::getLSolver ODESolver</field>
    <field name="text">Return LinearSolver instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::run</field>
    <field name="args">(bool opt=false)</field>
    <field name="url">classOFELI_1_1ODESolver.html#ab174fb4127d2dfb1b5e0d57b9e40b617</field>
    <field name="keywords">run OFELI::ODESolver::run ODESolver</field>
    <field name="text">Run the time stepping procedure opt Flag to say if problem matrix is constant while time stepping true or not Default value is false This argument is not used if the time stepping scheme is explicit</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::setRHS</field>
    <field name="args">(real_t f)</field>
    <field name="url">classOFELI_1_1ODESolver.html#ab51f289a00d4ce4f45d6e811f545cfff</field>
    <field name="keywords">setRHS OFELI::ODESolver::setRHS ODESolver</field>
    <field name="text">Set right-hand side for a linear ODE f Value of the right-hand side for a linear ordinary differential equation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::setInitial</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;u, Vect&lt; real_t &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1ODESolver.html#ac7c3734ad9c03eadfe2287c18de39945</field>
    <field name="keywords">setInitial OFELI::ODESolver::setInitial ODESolver</field>
    <field name="text">Set initial condition for a second-order system of differential equations Giving the right-hand side at initial time is somtimes required for high order methods like Runge-Kutta u Vector containing initial condition for the unknown v Vector containing initial condition for the time derivative of the unknown</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::setInitial</field>
    <field name="args">(real_t u, real_t v)</field>
    <field name="url">classOFELI_1_1ODESolver.html#acbf3a290348933de3f993096b5607a1f</field>
    <field name="keywords">setInitial OFELI::ODESolver::setInitial ODESolver</field>
    <field name="text">Set initial condition for a second-order ordinary differential equation u Initial condition unknown value v Initial condition time derivative of the unknown value</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::setConstantMatrix</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1ODESolver.html#ad0b215af0339c42514f036bf711ffffd</field>
    <field name="keywords">setConstantMatrix OFELI::ODESolver::setConstantMatrix ODESolver</field>
    <field name="text">Say that matrix problem is constant This is useful if the linear system is solved by a factorization method but has no effect otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::setNonConstantMatrix</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1ODESolver.html#ad0f5cc02d42fd6d2c81ef09d85671670</field>
    <field name="keywords">setNonConstantMatrix OFELI::ODESolver::setNonConstantMatrix ODESolver</field>
    <field name="text">Say that matrix problem is variable This is useful if the linear system is solved by a factorization method but has no effect otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::setLinear</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1ODESolver.html#ad8e782375fab63e667ddc3447b9e9a90</field>
    <field name="keywords">setLinear OFELI::ODESolver::setLinear ODESolver</field>
    <field name="text">Claim that ODE is linear Claim that the defined ODE or system of ODEs is linear</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::get</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1ODESolver.html#ad9f7cc68beb74fedbedde34c7fb10887</field>
    <field name="keywords">get OFELI::ODESolver::get ODESolver</field>
    <field name="text">Return solution in the case of a scalar equation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::seODEVectors</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;a0, Vect&lt; real_t &gt; &amp;a1, Vect&lt; real_t &gt; &amp;a2)</field>
    <field name="url">classOFELI_1_1ODESolver.html#adbc6aadf8052e73121c0398bd2599924</field>
    <field name="keywords">seODEVectors OFELI::ODESolver::seODEVectors ODESolver</field>
    <field name="text">Define matrices for an implicit nonlinear system of second-order ODEs The system has the nonlinear implicit form a2(u) a1(u) a0(u) 0 Vectors a0 a1 a2 are given as references to class Vect a0 Reference to vector in front of the 0 th order term no time derivative a1 Reference to vector in front of the 1 st order term first time derivative a2 Reference to vector in front of the 2 nd order term second time derivative This function has to be called at each time step</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::setInitial</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1ODESolver.html#af1cd58fec176472be29a4dfb1be829e3</field>
    <field name="keywords">setInitial OFELI::ODESolver::setInitial ODESolver</field>
    <field name="text">Set initial condition for a first-oder system of differential equations u Vector containing initial condition for the unknown</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::seODEVectors</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;a0, Vect&lt; real_t &gt; &amp;a1)</field>
    <field name="url">classOFELI_1_1ODESolver.html#af231347a5fe8d3a7419167f917ebfae7</field>
    <field name="keywords">seODEVectors OFELI::ODESolver::seODEVectors ODESolver</field>
    <field name="text">Define matrices for an implicit nonlinear system of first-order ODEs The system has the nonlinear implicit form a1(u) a0(u) 0 Vectors a0 a1 are given as references to class Vect a0 Reference to vector in front of the 0 th order term no time derivative a1 Reference to vector in front of the 1 st order term first time derivative This function has to be called at each time step</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ODESolver::runOneTimeStep</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1ODESolver.html#af8c8f582bd6836d2145e823ce5ed5ef4</field>
    <field name="keywords">runOneTimeStep OFELI::ODESolver::runOneTimeStep ODESolver</field>
    <field name="text">Run one time step Value of new time step if this one is updated</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::OptSolver</field>
    <field name="url">classOFELI_1_1OptSolver.html</field>
    <field name="keywords">OptSolver</field>
    <field name="text">To solve an optimization problem with bound constraints Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::setOptClass</field>
    <field name="args">(MyOpt &amp;opt)</field>
    <field name="url">classOFELI_1_1OptSolver.html#a08a5712ed432e26992954354a34373fe</field>
    <field name="keywords">setOptClass OFELI::OptSolver::setOptClass OptSolver</field>
    <field name="text">Choose user defined optimization class opt Reference to inherited user specified optimization class</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::setGradient</field>
    <field name="args">(function&lt; real_t(real_t)&gt; f)</field>
    <field name="url">classOFELI_1_1OptSolver.html#a1268c4f7cfad3ce4729eb7b28e4d622c</field>
    <field name="keywords">setGradient OFELI::OptSolver::setGradient OptSolver</field>
    <field name="text">Define the derivative of the objective function by a user defined function f Function given as a function of a real variable and returning the derivative of the objective value This function can be defined by the calling program as a C-function and then cast to an instance of class function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::setLowerBounds</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;lb)</field>
    <field name="url">classOFELI_1_1OptSolver.html#a12c4a6cc522f10b0e68d4dd64f7847ab</field>
    <field name="keywords">setLowerBounds OFELI::OptSolver::setLowerBounds OptSolver</field>
    <field name="text">Define lower bounds for optimization variables lb Vector containing lower values for variables</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::setEqBound</field>
    <field name="args">(size_t i, real_t b)</field>
    <field name="url">classOFELI_1_1OptSolver.html#a17ac4afd8f830bf91156c2bafa6caf67</field>
    <field name="keywords">setEqBound OFELI::OptSolver::setEqBound OptSolver</field>
    <field name="text">Define value to impose to a particular optimization variable Method to impose a value for a component of the optimization variable i Index of component to enforce index starts from 1 b Value to impose</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::setUpperBound</field>
    <field name="args">(real_t ub)</field>
    <field name="url">classOFELI_1_1OptSolver.html#a20425ea14b2c5a425365a8803a5caaa3</field>
    <field name="keywords">setUpperBound OFELI::OptSolver::setUpperBound OptSolver</field>
    <field name="text">Define upper bound for optimization variable Case of a one-variable problem ub Upper bound</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::setIneqConstraint</field>
    <field name="args">(string exp, real_t penal=1./OFELI_TOLERANCE)</field>
    <field name="url">classOFELI_1_1OptSolver.html#a227c3de955f3c57eeee735bde2cbd440</field>
    <field name="keywords">setIneqConstraint OFELI::OptSolver::setIneqConstraint OptSolver</field>
    <field name="text">Impose an inequatity constraint by a penalty method The constraint is of the form F(x) 0 where F is any function of the optimization variable vector v exp Regular expression defining the constraint the function F penal Penalty parameter large number Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::getNbOutOfBounds</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1OptSolver.html#a267526b4a3e4406759c400aeff633877</field>
    <field name="keywords">getNbOutOfBounds OFELI::OptSolver::getNbOutOfBounds OptSolver</field>
    <field name="text">Return the total number of trial function evaluations that would have been out of bounds This function is meaningful only if the Simulated Annealing algorithm is used</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::setGradient</field>
    <field name="args">(function&lt; Vect&lt; real_t &gt;(Vect&lt; real_t &gt;)&gt; f)</field>
    <field name="url">classOFELI_1_1OptSolver.html#a27ad63d543b6631ee068afad1b51816f</field>
    <field name="keywords">setGradient OFELI::OptSolver::setGradient OptSolver</field>
    <field name="text">Define the gradient of the objective function by a user defined function f Function given as a function of a many real variables and returning the partial derivatives of the objective value This function can be defined by the calling program as a C-function and then cast to an instance of class function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::setLowerBound</field>
    <field name="args">(real_t lb)</field>
    <field name="url">classOFELI_1_1OptSolver.html#a2fcd3aabf87c1b52076ff07417905358</field>
    <field name="keywords">setLowerBound OFELI::OptSolver::setLowerBound OptSolver</field>
    <field name="text">Define lower bound for optimization variable Case of a one-variable problem lb Lower value</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::setEqConstraint</field>
    <field name="args">(string exp, real_t penal=1./OFELI_TOLERANCE)</field>
    <field name="url">classOFELI_1_1OptSolver.html#a32f5b84705a312776240ec924d0a4596</field>
    <field name="keywords">setEqConstraint OFELI::OptSolver::setEqConstraint OptSolver</field>
    <field name="text">Impose an equatity constraint by a penalty method The constraint is of the form F(x) 0 where F is any function of the optimization variable vector v exp Regular expression defining the constraint the function F penal Penalty parameter large number Default 1</field>
  </doc>
  <doc>
    <field name="type">friend</field>
    <field name="name">OFELI::OptSolver::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const OptSolver &amp;os)</field>
    <field name="url">classOFELI_1_1OptSolver.html#a3f1c03ea316fa554006a28910fbe47c0</field>
    <field name="keywords">operator&lt;&lt; OFELI::OptSolver::operator&lt;&lt; OptSolver</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::getNbFctEval</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1OptSolver.html#a4547a06ef5db9b551c7bfeec7b35cd92</field>
    <field name="keywords">getNbFctEval OFELI::OptSolver::getNbFctEval OptSolver</field>
    <field name="text">Return the total number of function evaluations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::setMaxIterations</field>
    <field name="args">(int n)</field>
    <field name="url">classOFELI_1_1OptSolver.html#a4a379c3d1904a0f0a3ce3b59809dc139</field>
    <field name="keywords">setMaxIterations OFELI::OptSolver::setMaxIterations OptSolver</field>
    <field name="text">Set maximal number of iterations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::setTolerance</field>
    <field name="args">(real_t toler)</field>
    <field name="url">classOFELI_1_1OptSolver.html#a4d0e665f8f92335ec10c4ccf9e9171b7</field>
    <field name="keywords">setTolerance OFELI::OptSolver::setTolerance OptSolver</field>
    <field name="text">Set error tolerance toler Error tolerance for termination If the final function values from the last neps temperatures differ from the corresponding value at the current temperature by less than eps and the final function value at the current temperature differs from the current optimal function value by less than toler execution terminates and the value 0 is returned</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::setOptMethod</field>
    <field name="args">(OptMethod m)</field>
    <field name="url">classOFELI_1_1OptSolver.html#a4d4134b799ead9a585374e9bd448172e</field>
    <field name="keywords">setOptMethod OFELI::OptSolver::setOptMethod OptSolver</field>
    <field name="text">Choose optimization method m Enumerated value to choose the optimization algorithm to use Must be chosen among the enumerated values GRADIENT Gradient steepest descent method with projection for bounded constrained problems TRUNCATED_NEWTON The Nash s Truncated Newton Algorithm due to S.G Nash Newton-type Minimization via the Lanczos method SIAM J Numer Anal 2 1 1 9 8 4 7 7 0 7 7 8 SIMULATED_ANNEALING Global optimization simulated annealing method See Corana et al s article in the September 1 9 8 7 vol 1 3 no 3 pp 2 6 2 2 8 0 issue of the ACM Transactions on Mathematical Software NELDER_MEAD Global optimization Nelder-Mead method due to John Nelder Roger Mead A simplex method for function minimization Computer Journal Volume 7 1 9 6 5 pages 3 0 8 3 1 3 As implemented by R ONeill Algorithm AS 4 7 Function Minimization Using a Simplex Procedure Applied Statistics Volume 2 0 Number 3 1 9 7 1 pages 3 3 8 3 4 5</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::getTemperature</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1OptSolver.html#a4d6bb302db6bfa39e9622ade22113817</field>
    <field name="keywords">getTemperature OFELI::OptSolver::getTemperature OptSolver</field>
    <field name="text">Return the final temperature This function is meaningful only if the Simulated Annealing algorithm is used</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::run</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1OptSolver.html#a58e8be2db2660128e4e6456a9c981fb5</field>
    <field name="keywords">run OFELI::OptSolver::run OptSolver</field>
    <field name="text">Run the optimization algorithm This function runs the optimization procedure using default values for parameters To modify these values user the function run with arguments</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::OptSolver</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;x)</field>
    <field name="url">classOFELI_1_1OptSolver.html#a5ba4d4a809662f06111261797efd6841</field>
    <field name="keywords">OptSolver OFELI::OptSolver::OptSolver OptSolver</field>
    <field name="text">Constructor using vector of optimization variables x Vector having as size the number of optimization variables It contains the initial guess for the optimization algorithm After using the member function run the vector x contains the obtained solution if the optimization procedure was successful</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::setObjective</field>
    <field name="args">(function&lt; real_t(Vect&lt; real_t &gt;)&gt; f)</field>
    <field name="url">classOFELI_1_1OptSolver.html#a602d37183edb35a08184a27c68025e10</field>
    <field name="keywords">setObjective OFELI::OptSolver::setObjective OptSolver</field>
    <field name="text">Define the objective function by a user defined multi-variable function This function can be used in the case where a user defined function is to be given To be used in the multivariable case f Function given as a function of many real variables and returning the objective value This function can be defined by the calling program as a C-function and then cast to an instance of class function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::OptSolver</field>
    <field name="args">(MyOpt &amp;opt, Vect&lt; real_t &gt; &amp;x)</field>
    <field name="url">classOFELI_1_1OptSolver.html#a6ad4d1a1f2748849511fc501e8ff2741</field>
    <field name="keywords">OptSolver OFELI::OptSolver::OptSolver OptSolver</field>
    <field name="text">Constructor using vector of optimization variables opt Reference to instance of user defined optimization class This class inherits from abstract class MyOpt It must contain the member function double Objective(Vect&lt;double&gt; &amp;x) which returns the value of the objective for a given solution vector x The user defined class must contain if the optimization algorithm requires it the member function Gradient(Vect&lt;double&gt; &amp;x, Vect&lt;double&gt; &amp;g) which stores the gradient of the objective in the vector g for a given optimization vector x The user defined class must also contain if the optimization algorithm requires it the member function x Vector having as size the number of optimization variables It contains the initial guess for the optimization algorithm After using the member function run the vector x contains the obtained solution if the optimization procedure was successful</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::setHessian</field>
    <field name="args">(string exp, int i=1, int j=1)</field>
    <field name="url">classOFELI_1_1OptSolver.html#a7a081488f86e38e899508cf48bfb3995</field>
    <field name="keywords">setHessian OFELI::OptSolver::setHessian OptSolver</field>
    <field name="text">Define an entry of the Hessian matrix exp Regular expression defining the Hessian matrix entry i i th row of Hessian matrix Default 1 j j th column of Hessian matrix Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::setObjective</field>
    <field name="args">(function&lt; real_t(real_t)&gt; f)</field>
    <field name="url">classOFELI_1_1OptSolver.html#a7b3114a7c82044272d874d46a275f2cd</field>
    <field name="keywords">setObjective OFELI::OptSolver::setObjective OptSolver</field>
    <field name="text">Define the objective function by a user defined one-variable function This function can be used in the case where a user defined function is to be given To be used in the one-variable case f Function given as a function of one real variable which is the optimization variable and returning the objective value This function can be defined by the calling program as a C-function and then cast to an instance of class function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::setGradient</field>
    <field name="args">(string exp, int i=1)</field>
    <field name="url">classOFELI_1_1OptSolver.html#a845e439cb7164f4be2418681b17b46bc</field>
    <field name="keywords">setGradient OFELI::OptSolver::setGradient OptSolver</field>
    <field name="text">Define a component of the gradient of the objective function to minimize by an algebraic expression exp Regular expression defining the objective function i Component of gradient Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::getNbAcc</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1OptSolver.html#a876acadae874fb86131094924412ee5e</field>
    <field name="keywords">getNbAcc OFELI::OptSolver::getNbAcc OptSolver</field>
    <field name="text">Return the number of accepted objective function evaluations This function is meaningful only if the Simulated Annealing algorithm is used</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::setSAOpt</field>
    <field name="args">(real_t rt, int ns, int nt, int &amp;neps, int maxevl, real_t t, Vect&lt; real_t &gt; &amp;vm, Vect&lt; real_t &gt; &amp;xopt, real_t &amp;fopt)</field>
    <field name="url">classOFELI_1_1OptSolver.html#aa37719aaee7d07d34de7bc71bfe0b97d</field>
    <field name="keywords">setSAOpt OFELI::OptSolver::setSAOpt OptSolver</field>
    <field name="text">Set Simulated annealing options This member function is useful only if simulated annealing is used rt The temperature reduction factor The value suggested by Corana et al is 8 5 See Goffe et al for more advice ns Number of cycles After ns*nb_var function evaluations each element of vm is adjusted so that approximately half of all function evaluations are accepted The suggested value is 2 0 nt Number of iterations before temperature reduction After nt*ns*n function evaluations temperature t is changed by the factor rt Value suggested by Corana et al is max(100,5*nb_var) See Goffe et al for further advice neps Number of final function values used to decide upon termination See eps Suggested value is 4 maxevl The maximum number of function evaluations If it is exceeded the return code 1 t The initial temperature See Goffe et al for advice vm The step length vector On input it should encompass the region of interest given the starting value x For point x i the next trial point is selected is from x i vm i to x i vm i Since vm is adjusted so that about half of all points are accepted the input value is not very important i.e is the value is off OptimSA adjusts vm to the correct value xopt optimal values of optimization variables fopt Optimal value of objective</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::~OptSolver</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1OptSolver.html#aa74706368207208eba17cee4bb748aa7</field>
    <field name="keywords">OFELI::OptSolver::~OptSolver OptSolver</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">OFELI::OptSolver::OptMethod</field>
    <field name="url">classOFELI_1_1OptSolver.html#aa9d702a65f9c6ee14aefeb7f317eaf7d</field>
    <field name="keywords">OptMethod OFELI::OptSolver::OptMethod OptSolver</field>
    <field name="text">Choose optimization algorithm</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::OptSolver::SIMULATED_ANNEALING</field>
    <field name="url">classOFELI_1_1OptSolver.html#aa9d702a65f9c6ee14aefeb7f317eaf7da1c698dbc8b5fbb938cd617b13135c0a3</field>
    <field name="keywords">SIMULATED_ANNEALING OFELI::OptSolver::SIMULATED_ANNEALING OptSolver SIMULATED_ANNEALING OFELI::OptSolver::SIMULATED_ANNEALING OptSolver</field>
    <field name="text">Simulated annealing global optimization method</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::OptSolver::NELDER_MEAD</field>
    <field name="url">classOFELI_1_1OptSolver.html#aa9d702a65f9c6ee14aefeb7f317eaf7da2734ef2227c183fc5dac349ceb97f492</field>
    <field name="keywords">NELDER_MEAD OFELI::OptSolver::NELDER_MEAD OptSolver NELDER_MEAD OFELI::OptSolver::NELDER_MEAD OptSolver</field>
    <field name="text">Nelder-Mead global optimization method</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::OptSolver::TRUNCATED_NEWTON</field>
    <field name="url">classOFELI_1_1OptSolver.html#aa9d702a65f9c6ee14aefeb7f317eaf7da9f980ec69f65fd361e3024d7711d043c</field>
    <field name="keywords">TRUNCATED_NEWTON OFELI::OptSolver::TRUNCATED_NEWTON OptSolver TRUNCATED_NEWTON OFELI::OptSolver::TRUNCATED_NEWTON OptSolver</field>
    <field name="text">Truncated Newton method</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::OptSolver::NEWTON</field>
    <field name="url">classOFELI_1_1OptSolver.html#aa9d702a65f9c6ee14aefeb7f317eaf7dacb672e33270b2496f98d3d6995d503f2</field>
    <field name="keywords">NEWTON OFELI::OptSolver::NEWTON OptSolver NEWTON OFELI::OptSolver::NEWTON OptSolver</field>
    <field name="text">Newton s method</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::OptSolver::GRADIENT</field>
    <field name="url">classOFELI_1_1OptSolver.html#aa9d702a65f9c6ee14aefeb7f317eaf7daf12f85c0222e6f70a307308793fe473c</field>
    <field name="keywords">GRADIENT OFELI::OptSolver::GRADIENT OptSolver GRADIENT OFELI::OptSolver::GRADIENT OptSolver</field>
    <field name="text">Gradient method</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::run</field>
    <field name="args">(real_t toler, int max_it)</field>
    <field name="url">classOFELI_1_1OptSolver.html#ab14a01de29b97eb32c805905ae0c6e31</field>
    <field name="keywords">run OFELI::OptSolver::run OptSolver</field>
    <field name="text">Run the optimization algorithm toler Tolerance value for convergence testing max_it Maximal number of iterations to achieve convergence</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::setObjective</field>
    <field name="args">(string exp)</field>
    <field name="url">classOFELI_1_1OptSolver.html#ab7d2388f7ecb1367bebdb6e9a9f5459e</field>
    <field name="keywords">setObjective OFELI::OptSolver::setObjective OptSolver</field>
    <field name="text">Define the objective function to minimize by an algebraic expression exp Regular expression defining the objective function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::getNbObjEval</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1OptSolver.html#ab9dbb560913f03c4aaec3cb63b28397b</field>
    <field name="keywords">getNbObjEval OFELI::OptSolver::getNbObjEval OptSolver</field>
    <field name="text">Return number of objective function evaluations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::getSolution</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1OptSolver.html#aba304c3d0e4957bbcaf1aa014a39d32d</field>
    <field name="keywords">getSolution OFELI::OptSolver::getSolution OptSolver</field>
    <field name="text">Return solution in the case of a one variable optimization In the case of a one variable problem the solution value is returned if the optimization procedure was successful</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::setUpperBound</field>
    <field name="args">(size_t i, real_t ub)</field>
    <field name="url">classOFELI_1_1OptSolver.html#abc2fc7d6b0bd2df6ed28651c56ed00d8</field>
    <field name="keywords">setUpperBound OFELI::OptSolver::setUpperBound OptSolver</field>
    <field name="text">Define upper bound for a particular optimization variable Method to impose an upper bound for a component of the optimization variable i Index of component to bound index starts from 1 ub Upper bound</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::setBC</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;bc)</field>
    <field name="url">classOFELI_1_1OptSolver.html#abfd0d4a353c29fa726bfd347d547aa9b</field>
    <field name="keywords">setBC OFELI::OptSolver::setBC OptSolver</field>
    <field name="text">Prescribe boundary conditions as constraints This member function is useful in the case of optimization problems where the optimization variable vector is the solution of a partial differential equation For this case Dirichlet boundary conditions can be prescribed as constraints for the optimization problem bc Vector containing the values to impose on degrees of freedom This vector must have been constructed using the Mesh instance Only degrees of freedom with positive code are taken into account as prescribed</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::getOptObj</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1OptSolver.html#adecafe2ec4cb7441e4a2bf0821b5b19d</field>
    <field name="keywords">getOptObj OFELI::OptSolver::getOptObj OptSolver</field>
    <field name="text">Return Optimal value of the objective</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::setUpperBounds</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;ub)</field>
    <field name="url">classOFELI_1_1OptSolver.html#adeff0d9be23d9997a15678c1331ff997</field>
    <field name="keywords">setUpperBounds OFELI::OptSolver::setUpperBounds OptSolver</field>
    <field name="text">Define upper bounds for optimization variables ub Vector containing upper values for variables</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::getSolution</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;x) const</field>
    <field name="url">classOFELI_1_1OptSolver.html#ae41122254853b19d8e6018fba02229f8</field>
    <field name="keywords">getSolution OFELI::OptSolver::getSolution OptSolver</field>
    <field name="text">Get solution vector The vector x contains the solution of the optimization problem Note that if the constructor using an initial vector was used the vector will contain the solution once the member function run has beed used If the optimization procedure was successful x solution vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::setLowerBound</field>
    <field name="args">(size_t i, real_t lb)</field>
    <field name="url">classOFELI_1_1OptSolver.html#ae7836e3b59ebc35a6203311e7e26fce4</field>
    <field name="keywords">setLowerBound OFELI::OptSolver::setLowerBound OptSolver</field>
    <field name="text">Define lower bound for a particular optimization variable Method to impose a lower bound for a component of the optimization variable i Index of component to bound index starts from 1 lb Lower bound</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::OptSolver</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1OptSolver.html#aecc5ca639b715b9842cd644aa9d62c36</field>
    <field name="keywords">OptSolver OFELI::OptSolver::OptSolver OptSolver</field>
    <field name="text">Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::OptSolver::set</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;x)</field>
    <field name="url">classOFELI_1_1OptSolver.html#af1092043af704fa8341f649d073649b4</field>
    <field name="keywords">set OFELI::OptSolver::set OptSolver</field>
    <field name="text">Set Solution vector</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Partition</field>
    <field name="url">classOFELI_1_1Partition.html</field>
    <field name="keywords">Partition</field>
    <field name="text">To partition a finite element mesh into balanced submeshes Class Partition enables partitioning a given mesh into a given number of submeshes with a minimal connectivity Partition uses the well known metis library that is included in the OFELI library A more detailed description of metis can be found in the web site Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Partition::~Partition</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Partition.html#a06a424fc9f39cdf17053789970c8ed76</field>
    <field name="keywords">OFELI::Partition::~Partition Partition</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Partition::getSubMesh</field>
    <field name="args">(size_t sm, size_t i) const</field>
    <field name="url">classOFELI_1_1Partition.html#a1720d548b7100813d8831efcd1474328</field>
    <field name="keywords">getSubMesh OFELI::Partition::getSubMesh Partition</field>
    <field name="text">Return index of submesh that contains the i th side label in sub-mesh sm sm Submesh index i Side label Index of submesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Partition::getElementLabelInMesh</field>
    <field name="args">(size_t sm, size_t label) const</field>
    <field name="url">classOFELI_1_1Partition.html#a1c69d70a006e338a1a9050b694ee430f</field>
    <field name="keywords">getElementLabelInMesh OFELI::Partition::getElementLabelInMesh Partition</field>
    <field name="text">Return element label in initial mesh by giving its label in submesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Partition::getNbElements</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Partition.html#a1f510afaac4df90cecc30b37d89b9a85</field>
    <field name="keywords">getNbElements OFELI::Partition::getNbElements Partition</field>
    <field name="text">Return number of elements in given submesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Partition::put</field>
    <field name="args">(size_t n, string file) const</field>
    <field name="url">classOFELI_1_1Partition.html#a2d0dc13a5ef09bdf901123a267e51f3b</field>
    <field name="keywords">put OFELI::Partition::put Partition</field>
    <field name="text">Save a submesh in file n Label of submesh file Name of file in which submesh is saved</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Partition::Partition</field>
    <field name="args">(Mesh &amp;mesh, size_t n)</field>
    <field name="url">classOFELI_1_1Partition.html#a454c8dbfaa205cd813063f03cb0b5134</field>
    <field name="keywords">Partition OFELI::Partition::Partition Partition</field>
    <field name="text">Constructor to partition a mesh into submeshes mesh Mesh instance n Number of submeshes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Partition::getNodeLabelInMesh</field>
    <field name="args">(size_t sm, size_t label) const</field>
    <field name="url">classOFELI_1_1Partition.html#a4dc801e4904fe1a26c2422829b29077b</field>
    <field name="keywords">getNodeLabelInMesh OFELI::Partition::getNodeLabelInMesh Partition</field>
    <field name="text">Return node label in initial mesh by giving its label in submesh sm Label of submesh label Node label</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Partition::getNbInterfaceSides</field>
    <field name="args">(size_t sm) const</field>
    <field name="url">classOFELI_1_1Partition.html#a508e80428371e47ee99d55377e822b45</field>
    <field name="keywords">getNbInterfaceSides OFELI::Partition::getNbInterfaceSides Partition</field>
    <field name="text">Return Number of interface sides for a given sub-mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Partition::getMesh</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Partition.html#a55c0868e196af2a57bc1c1bcd6f763c1</field>
    <field name="keywords">getMesh OFELI::Partition::getMesh Partition</field>
    <field name="text">Return the global Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Partition::set</field>
    <field name="args">(Mesh &amp;mesh, size_t n)</field>
    <field name="url">classOFELI_1_1Partition.html#a8b1dccfc12683d2bbc3891a331753c42</field>
    <field name="keywords">set OFELI::Partition::set Partition</field>
    <field name="text">Set Mesh instance</field>
  </doc>
  <doc>
    <field name="type">friend</field>
    <field name="name">OFELI::Partition::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const Partition &amp;p)</field>
    <field name="url">classOFELI_1_1Partition.html#a940b6068c24830ae2b00cfb9034089eb</field>
    <field name="keywords">operator&lt;&lt; OFELI::Partition::operator&lt;&lt; Partition</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Partition::getNodeLabelInSubMesh</field>
    <field name="args">(size_t sm, size_t label) const</field>
    <field name="url">classOFELI_1_1Partition.html#a9817b910486a69d721fa48a3bd001e82</field>
    <field name="keywords">getNodeLabelInSubMesh OFELI::Partition::getNodeLabelInSubMesh Partition</field>
    <field name="text">Return node label in subdomain by giving its label in initial mesh sm Label of submesh label Label of node in initial mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Partition::getNbSubMeshes</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Partition.html#aabb3588f8ea6e6c2133d79d3a7bd6b03</field>
    <field name="keywords">getNbSubMeshes OFELI::Partition::getNbSubMeshes Partition</field>
    <field name="text">Return number of submeshes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Partition::getSubMesh</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Partition.html#aad6ac56661cc8ba68dec949b1ae08f5f</field>
    <field name="keywords">getSubMesh OFELI::Partition::getSubMesh Partition</field>
    <field name="text">Return reference to submesh i Submesh index Reference to corresponding Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Partition::Partition</field>
    <field name="args">(Mesh &amp;mesh, int n, vector&lt; int &gt; &amp;epart)</field>
    <field name="url">classOFELI_1_1Partition.html#aad9beb9f6293a70bcdafd85d2f374a57</field>
    <field name="keywords">Partition OFELI::Partition::Partition Partition</field>
    <field name="text">Constructor using already created submeshes mesh Mesh instance n Number of submeshes epart Vector containing for each element its submesh label Running from 0 to n-1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Partition::getMesh</field>
    <field name="args">(size_t i)</field>
    <field name="url">classOFELI_1_1Partition.html#ab56f4b85c57edfb19e86b513614b1d41</field>
    <field name="keywords">getMesh OFELI::Partition::getMesh Partition</field>
    <field name="text">Return the submesh of label i</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Partition::getNbConnectInSubMesh</field>
    <field name="args">(int n, int s) const</field>
    <field name="url">classOFELI_1_1Partition.html#ab7dc4066687fd4d62c9dff5730d1c090</field>
    <field name="keywords">getNbConnectInSubMesh OFELI::Partition::getNbConnectInSubMesh Partition</field>
    <field name="text">Get number of connected nodes in a submesh n Label of node for which connections are counted s Label of submesh starting from 0</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Partition::getElementLabelInSubMesh</field>
    <field name="args">(size_t sm, size_t label) const</field>
    <field name="url">classOFELI_1_1Partition.html#ad3c63b3219d5734a3f5652136be0542e</field>
    <field name="keywords">getElementLabelInSubMesh OFELI::Partition::getElementLabelInSubMesh Partition</field>
    <field name="text">Return element label in subdomain by giving its label in initial mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Partition::getNbConnectOutSubMesh</field>
    <field name="args">(int n, int s) const</field>
    <field name="url">classOFELI_1_1Partition.html#ad4f2697f2bea8d2b7b57aff597df4aa7</field>
    <field name="keywords">getNbConnectOutSubMesh OFELI::Partition::getNbConnectOutSubMesh Partition</field>
    <field name="text">Get number of connected nodes out of a submesh n Label of node for which connections are counted s Label of submesh starting from 0</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Partition::getFirstSideLabel</field>
    <field name="args">(size_t sm, size_t i) const</field>
    <field name="url">classOFELI_1_1Partition.html#ad5ba6790ef2331b2d62be143eacaf2ce</field>
    <field name="keywords">getFirstSideLabel OFELI::Partition::getFirstSideLabel Partition</field>
    <field name="text">Return i-th side label in a given submesh sm Index of submesh i Label of side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Partition::Partition</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Partition.html#aeb0b54c7a8921893997dcef564301d2e</field>
    <field name="keywords">Partition OFELI::Partition::Partition Partition</field>
    <field name="text">Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Partition::getNbNodes</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Partition.html#aef3bf8c2574cbf6ca69e21bb54fe4af9</field>
    <field name="keywords">getNbNodes OFELI::Partition::getNbNodes Partition</field>
    <field name="text">Return number of nodes in given submesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Partition::getSecondSideLabel</field>
    <field name="args">(size_t sm, size_t i) const</field>
    <field name="url">classOFELI_1_1Partition.html#afa59567d73952a09fc7fb3ed1ba4ed3f</field>
    <field name="keywords">getSecondSideLabel OFELI::Partition::getSecondSideLabel Partition</field>
    <field name="text">Return side label in the neighbouring submesh corresponding to i th side label in sub-mesh sm sm Label of submesh i Side label</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Penta6</field>
    <field name="url">classOFELI_1_1Penta6.html</field>
    <field name="keywords">Penta6</field>
    <field name="text">Defines a 6 node pentahedral finite element using P 1 interpolation in local coordinates s.x s.y and Q 1 isoparametric interpolation in local coordinates s.x s.z and s.y s.z The reference element is the cartesian product of the standard reference triangle with the line 1 1 The nodes are ordered as follows Node 1 in reference element is at s 1 0 0 Node 2 in reference element is at s 0 1 0 Node 3 in reference element is at s 0 0 0 Node 4 in reference element is at s 1 0 1 Node 5 in reference element is at s 0 1 1 Node 6 in reference element is at s 0 0 1 The user must take care to the fact that determinant of jacobian and other quantities depend on the point in the reference element where they are calculated For this before any utilization of shape functions or jacobian function setLocal() must be invoked Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Penta6::Penta6</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Penta6.html#a21af165b9f401957b3a8254847d57a9c</field>
    <field name="keywords">Penta6 OFELI::Penta6::Penta6 Penta6</field>
    <field name="text">Default Constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Penta6::getMaxEdgeLength</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Penta6.html#a25ca31b393289f740e8ed58b06a30cd3</field>
    <field name="keywords">getMaxEdgeLength OFELI::Penta6::getMaxEdgeLength Penta6</field>
    <field name="text">Return Maximum length of pentahedron edges</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Penta6::setLocal</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;s)</field>
    <field name="url">classOFELI_1_1Penta6.html#a3686dcc363945fc9705485b9200fa17e</field>
    <field name="keywords">setLocal OFELI::Penta6::setLocal Penta6</field>
    <field name="text">Initialize local point coordinates in element s Point in the reference element This function computes jacobian shape functions and their partial derivatives at s Other member functions only return these values</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Penta6::Penta6</field>
    <field name="args">(const Element *element)</field>
    <field name="url">classOFELI_1_1Penta6.html#a370d6f43c91d2f4f8469a4b4f2c707a9</field>
    <field name="keywords">Penta6 OFELI::Penta6::Penta6 Penta6</field>
    <field name="text">Constructor when data of Element el are given element Pointer to Element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Penta6::getMinEdgeLength</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Penta6.html#a3b36d8923b27960cb53038075675ebaf</field>
    <field name="keywords">getMinEdgeLength OFELI::Penta6::getMinEdgeLength Penta6</field>
    <field name="text">Return Mimimum length of pentahedron edges</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Penta6::set</field>
    <field name="args">(const Element *el)</field>
    <field name="url">classOFELI_1_1Penta6.html#a578b9f2f623966f955548e89ccce995a</field>
    <field name="keywords">set OFELI::Penta6::set Penta6</field>
    <field name="text">Choose element by giving its pointer</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Penta6::DSh</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Penta6.html#af9874722f8f8a3a315d4c2c033a7a5c3</field>
    <field name="keywords">DSh OFELI::Penta6::DSh Penta6</field>
    <field name="text">Return partial derivatives of shape functions of element nodes LocalVect instance of partial derivatives of shape functions e.g dsh(i) x dsh(i) y are partial derivatives of the i th shape function The local point at which the derivatives are computed must be chosen before by using the member function setLocal</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Penta6::~Penta6</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Penta6.html#afa54f9300b57eb271cc9a62c79f73055</field>
    <field name="keywords">OFELI::Penta6::~Penta6 Penta6</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::PhaseChange</field>
    <field name="url">classOFELI_1_1PhaseChange.html</field>
    <field name="keywords">PhaseChange</field>
    <field name="text">This class enables defining phase change laws for a given material These laws are predefined for a certain number of materials The user can set himself a specific behavior for his own materials by defining a class that inherits from PhaseChange The derived class must has at least the member function int EnthalpyToTemperature(real_t &amp;H, real_t &amp;T, real_t &amp;gamma)</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::PhaseChange::getMaterial</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1PhaseChange.html#a0731a43d34c132f05bf4358397583e61</field>
    <field name="keywords">getMaterial OFELI::PhaseChange::getMaterial PhaseChange</field>
    <field name="text">Return reference to Material instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::PhaseChange::~PhaseChange</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1PhaseChange.html#a0b2a4806e16b0513726e5297240d99a5</field>
    <field name="keywords">OFELI::PhaseChange::~PhaseChange PhaseChange</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::PhaseChange::setMaterial</field>
    <field name="args">(Material &amp;m, int code)</field>
    <field name="url">classOFELI_1_1PhaseChange.html#a15843fe28b77d456800ca1dc64e693d4</field>
    <field name="keywords">setMaterial OFELI::PhaseChange::setMaterial PhaseChange</field>
    <field name="text">Choose Material instance and material code</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::PhaseChange::E2T</field>
    <field name="args">(real_t &amp;H, real_t &amp;T, real_t &amp;gamma)</field>
    <field name="url">classOFELI_1_1PhaseChange.html#a38c8f28f91e3ad3331afbcb8aa6aecd8</field>
    <field name="keywords">E2T OFELI::PhaseChange::E2T PhaseChange</field>
    <field name="text">Calculate temperature from enthalpy This member function is to be called in any equation class that needs phase change laws H Enthalpy value T Calculated temperature value gamma Maximal slope of the curve H T</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::PhaseChange::EnthalpyToTemperature</field>
    <field name="args">(real_t &amp;H, real_t &amp;T, real_t &amp;gamma)</field>
    <field name="url">classOFELI_1_1PhaseChange.html#ae4095a91402d2959d88e8bcfcd272acb</field>
    <field name="keywords">EnthalpyToTemperature OFELI::PhaseChange::EnthalpyToTemperature PhaseChange</field>
    <field name="text">Virtual function to calculate temperature from enthalpy This member function must be implemented in any derived class in order to define user s own material laws H Enthalpy value T Calculated temperature value gamma Maximal slope of the curve H T</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Polygon</field>
    <field name="url">classOFELI_1_1Polygon.html</field>
    <field name="keywords">Polygon</field>
    <field name="text">To store and treat a polygonal figure</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Polygon::polygon</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Polygon.html#a15bf0e9badc1110318080057a7f76fce</field>
    <field name="keywords">polygon OFELI::Polygon::polygon Polygon</field>
    <field name="text">Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Polygon::getSignedDistance</field>
    <field name="args">(const Grid &amp;g, Vect&lt; real_t &gt; &amp;d) const</field>
    <field name="url">classOFELI_1_1Polygon.html#a2252be7c4949c4a2bd3ee24a4fdfd722</field>
    <field name="keywords">getSignedDistance OFELI::Polygon::getSignedDistance Polygon</field>
    <field name="text">Calculate signed distance to current figure with respect to grid points g Grid instance d Vect instance containing calculated distance from each grid index to Figure Vector d doesn t need to be sized before invoking this function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Polygon::getSignedDistance</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;p) const</field>
    <field name="url">classOFELI_1_1Polygon.html#a59bcb59a9fd6e717fa480630c7d3b57a</field>
    <field name="keywords">getSignedDistance OFELI::Polygon::getSignedDistance Polygon</field>
    <field name="text">Return signed distance from a given point to current figure p Point instance from which distance is computed</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Polygon::setVertices</field>
    <field name="args">(const Vect&lt; Point&lt; real_t &gt; &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1Polygon.html#a608f8fc85e0db7062f76c4d568b67f8e</field>
    <field name="keywords">setVertices OFELI::Polygon::setVertices Polygon</field>
    <field name="text">Assign vertices of polygon v Vector containing vertices coordinates in counter clockwise order</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Polygon::getSignedDistance</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;p) const</field>
    <field name="url">classOFELI_1_1Polygon.html#a6c92f703c9cacfbfc0158713655d844a</field>
    <field name="keywords">getSignedDistance OFELI::Polygon::getSignedDistance Polygon</field>
    <field name="text">Return signed distance of a given point from the current polygon The computed distance is negative if p lies in the polygon negative if it is outside and 0 on its boundary p Point&lt;double&gt; instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Polygon::dLine</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;p, const Point&lt; real_t &gt; &amp;a, const Point&lt; real_t &gt; &amp;b) const</field>
    <field name="url">classOFELI_1_1Polygon.html#a740ca39646f05723f2f96ab62a232b36</field>
    <field name="keywords">dLine OFELI::Polygon::dLine Polygon</field>
    <field name="text">Compute signed distance from a line p Point for which distance is computed a First vertex of line b Second vertex of line Signed distance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Polygon::operator+=</field>
    <field name="args">(real_t a)</field>
    <field name="url">classOFELI_1_1Polygon.html#aa63003acd7d475aa683090323f421aeb</field>
    <field name="keywords">operator+= OFELI::Polygon::operator+= Polygon</field>
    <field name="text">Operator Scale polygon by a factor a</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Polygon::Polygon</field>
    <field name="args">(const Vect&lt; Point&lt; real_t &gt; &gt; &amp;v, int code=1)</field>
    <field name="url">classOFELI_1_1Polygon.html#ac5fdf39c745fba4ea13ef9776cdc14e1</field>
    <field name="keywords">Polygon OFELI::Polygon::Polygon Polygon</field>
    <field name="text">Constructor v Vect instance containing list of coordinates of polygon vertices code Code to assign to the generated domain Default value 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Polygon::operator+=</field>
    <field name="args">(Point&lt; real_t &gt; a)</field>
    <field name="url">classOFELI_1_1Polygon.html#aff4d46efc6540f17ee20c030b2170299</field>
    <field name="keywords">operator+= OFELI::Polygon::operator+= Polygon</field>
    <field name="text">Operator Translate polygon by a vector a</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Prec</field>
    <field name="url">classOFELI_1_1Prec.html</field>
    <field name="keywords">Prec Prec&lt; real_t &gt;</field>
    <field name="text">To set a preconditioner The preconditioner type is chosen in the constructor Data type real_t float complex&lt;real_t&gt; Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Prec::solve</field>
    <field name="args">(Vect&lt; T_ &gt; &amp;x) const</field>
    <field name="url">classOFELI_1_1Prec.html#a0895fc50dde703387ca9924f6c51775f</field>
    <field name="keywords">solve OFELI::Prec::solve Prec&lt; T_ &gt; solve OFELI::Prec&lt; real_t &gt;::solve Prec&lt; real_t &gt;</field>
    <field name="text">Solve a linear system with preconditioning matrix x Right-hand side on input and solution on output</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Prec::TransSolve</field>
    <field name="args">(Vect&lt; T_ &gt; &amp;x) const</field>
    <field name="url">classOFELI_1_1Prec.html#a17521b7ef70d09d9a25492f0f17c6371</field>
    <field name="keywords">TransSolve OFELI::Prec::TransSolve Prec&lt; T_ &gt; TransSolve OFELI::Prec&lt; real_t &gt;::TransSolve Prec&lt; real_t &gt;</field>
    <field name="text">Solve a linear system with transposed preconditioning matrix x Right-hand side in input and solution in output</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Prec::Prec</field>
    <field name="args">(const Matrix&lt; T_ &gt; *A, int type=DIAG_PREC)</field>
    <field name="url">classOFELI_1_1Prec.html#a182e9f2d6391964730c6185bf6126552</field>
    <field name="keywords">Prec OFELI::Prec::Prec Prec&lt; T_ &gt; Prec OFELI::Prec&lt; real_t &gt;::Prec Prec&lt; real_t &gt;</field>
    <field name="text">Constructor using matrix of the linear system to precondition A Pointer to abstract Matrix class to precondition type Preconditioner type IDENT_PREC Identity preconditioner No preconditioning DIAG_PREC Diagonal preconditioner DILU_PREC Diagonal Incomplete factorization preconditioner ILU_PREC Incomplete factorization preconditioner SSOR_PREC SSOR Symmetric Successive Over Relaxation preconditioner</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Prec::setMatrix</field>
    <field name="args">(const SpMatrix&lt; T_ &gt; &amp;A)</field>
    <field name="url">classOFELI_1_1Prec.html#a1c3c6ea1cfc625154e7f3f5634a92aff</field>
    <field name="keywords">setMatrix OFELI::Prec::setMatrix Prec&lt; T_ &gt; setMatrix OFELI::Prec&lt; real_t &gt;::setMatrix Prec&lt; real_t &gt;</field>
    <field name="text">Define the matrix for preconditioning A Matrix to precondition instance of class SpMatrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Prec::TransSolve</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;b, Vect&lt; T_ &gt; &amp;x) const</field>
    <field name="url">classOFELI_1_1Prec.html#a25121c03315742b7479b5dc8b9d9e236</field>
    <field name="keywords">TransSolve OFELI::Prec::TransSolve Prec&lt; T_ &gt; TransSolve OFELI::Prec&lt; real_t &gt;::TransSolve Prec&lt; real_t &gt;</field>
    <field name="text">Solve a linear system with transposed preconditioning matrix b Right-hand side vector x Solution vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Prec::~Prec</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Prec.html#a2bfd7a55a3e6d0c0c1135b46eb7ad898</field>
    <field name="keywords">OFELI::Prec::~Prec Prec&lt; T_ &gt; OFELI::Prec&lt; real_t &gt;::~Prec Prec&lt; real_t &gt;</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Prec::solve</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;b, Vect&lt; T_ &gt; &amp;x) const</field>
    <field name="url">classOFELI_1_1Prec.html#a3bd4b8827a67d61ddbc2a13010706477</field>
    <field name="keywords">solve OFELI::Prec::solve Prec&lt; T_ &gt; solve OFELI::Prec&lt; real_t &gt;::solve Prec&lt; real_t &gt;</field>
    <field name="text">Solve a linear system with preconditioning matrix b Right-hand side x Solution vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Prec::Prec</field>
    <field name="args">(const SpMatrix&lt; T_ &gt; &amp;A, int type=DIAG_PREC)</field>
    <field name="url">classOFELI_1_1Prec.html#a6da66b2f752cc497228a8069b5d3638e</field>
    <field name="keywords">Prec OFELI::Prec::Prec Prec&lt; T_ &gt; Prec OFELI::Prec&lt; real_t &gt;::Prec Prec&lt; real_t &gt;</field>
    <field name="text">Constructor using matrix of the linear system to precondition A Matrix to precondition type Preconditioner type IDENT_PREC Identity preconditioner No preconditioning DIAG_PREC Diagonal preconditioner DILU_PREC Diagonal Incomplete factorization preconditioner ILU_PREC Incomplete factorization preconditioner SSOR_PREC SSOR Symmetric Successive Over Relaxation preconditioner</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Prec::Prec</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Prec.html#a6e355a68c9ee021945bef0d7517c4139</field>
    <field name="keywords">Prec OFELI::Prec::Prec Prec&lt; T_ &gt; Prec OFELI::Prec&lt; real_t &gt;::Prec Prec&lt; real_t &gt;</field>
    <field name="text">Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Prec::Prec</field>
    <field name="args">(int type)</field>
    <field name="url">classOFELI_1_1Prec.html#a7e510f45ed54a1a75c758b97ef5dfbb5</field>
    <field name="keywords">Prec OFELI::Prec::Prec Prec&lt; T_ &gt; Prec OFELI::Prec&lt; real_t &gt;::Prec Prec&lt; real_t &gt;</field>
    <field name="text">Constructor that chooses preconditioner type Preconditioner type IDENT_PREC Identity preconditioner No preconditioning DIAG_PREC Diagonal preconditioner DILU_PREC Diagonal Incomplete factorization preconditioner ILU_PREC Incomplete factorization preconditioner SSOR_PREC SSOR Symmetric Successive Over Relaxation preconditioner</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Prec::setMatrix</field>
    <field name="args">(const Matrix&lt; T_ &gt; *A)</field>
    <field name="url">classOFELI_1_1Prec.html#a972c2cb5338f82e2235907611a8a815d</field>
    <field name="keywords">setMatrix OFELI::Prec::setMatrix Prec&lt; T_ &gt; setMatrix OFELI::Prec&lt; real_t &gt;::setMatrix Prec&lt; real_t &gt;</field>
    <field name="text">Define pointer to matrix for preconditioning if this one is abstract A Matrix to precondition</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Prec::getPivot</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Prec.html#aca8e798578cd3d5f9f0c797a9e5086e5</field>
    <field name="keywords">getPivot OFELI::Prec::getPivot Prec&lt; T_ &gt; getPivot OFELI::Prec&lt; real_t &gt;::getPivot Prec&lt; real_t &gt;</field>
    <field name="text">Return i-th pivot of preconditioning matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Prec::setType</field>
    <field name="args">(int type)</field>
    <field name="url">classOFELI_1_1Prec.html#afd28262b8520203989617fd36f68695c</field>
    <field name="keywords">setType OFELI::Prec::setType Prec&lt; T_ &gt; setType OFELI::Prec&lt; real_t &gt;::setType Prec&lt; real_t &gt;</field>
    <field name="text">Define preconditioner type type Preconditioner type IDENT_PREC Identity preconditioner No preconditioning DIAG_PREC Diagonal preconditioner DILU_PREC Diagonal Incomplete factorization preconditioner ILU_PREC Incomplete factorization preconditioner SSOR_PREC SSOR Symmetric Successive Over Relaxation preconditioner</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Pres1DL2</field>
    <field name="url">classOFELI_1_1Pres1DL2.html</field>
    <field name="keywords">Pres1DL2</field>
    <field name="text">Builds finite element arrays for acoustic propagation in 1 D using 2 Node elements Note that members calculating element arrays have as an argument a real coef that will be multiplied by the contribution of the current element This makes possible testing different algorithms</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Pres1DL2::Pres1DL2</field>
    <field name="args">(Mesh &amp;ms, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1Pres1DL2.html#a1897775873ca19fb117156a145361b59</field>
    <field name="keywords">Pres1DL2 OFELI::Pres1DL2::Pres1DL2 Pres1DL2</field>
    <field name="text">Constructor using mesh instance and solution vector ms Mesh instance u Vect instance containing solution vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Pres1DL2::Mass</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1Pres1DL2.html#a1b558ae9bc1c76a4344c24bc78f80f44</field>
    <field name="keywords">Mass OFELI::Pres1DL2::Mass Pres1DL2</field>
    <field name="text">Add Consistent mass matrix to element matrix after multiplying it by coefficient coef coef Coefficient to multiply by added term default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Pres1DL2::Pres1DL2</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1Pres1DL2.html#a34c7a5f2b39f1403cb847f5903f2321c</field>
    <field name="keywords">Pres1DL2 OFELI::Pres1DL2::Pres1DL2 Pres1DL2</field>
    <field name="text">Constructor using mesh instance ms Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Pres1DL2::Flux</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Pres1DL2.html#a3a400c339dbb1f35a8179cbc99ed2f29</field>
    <field name="keywords">Flux OFELI::Pres1DL2::Flux Pres1DL2</field>
    <field name="text">Return constant heat flux in element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Pres1DL2::~Pres1DL2</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Pres1DL2.html#a427e0df4aa8e4aa8f2728e5bfebde745</field>
    <field name="keywords">OFELI::Pres1DL2::~Pres1DL2 Pres1DL2</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Pres1DL2::LMass</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1Pres1DL2.html#a8085a436c0055d8554baaa8cb3835922</field>
    <field name="keywords">LMass OFELI::Pres1DL2::LMass Pres1DL2</field>
    <field name="text">Add lumped mass matrix to element matrix after multiplying it by coefficient coef coef Coefficient to multiply by added term default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Pres1DL2::BodyRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1Pres1DL2.html#aa6d7e87afcbeea4276573c9576d8d6ca</field>
    <field name="keywords">BodyRHS OFELI::Pres1DL2::BodyRHS Pres1DL2</field>
    <field name="text">Add body right-hand side term to right hand side f Vector containing source at nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Pres1DL2::Diffusion</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1Pres1DL2.html#ac301bba6a75b942c88f797628c141e2c</field>
    <field name="keywords">Diffusion OFELI::Pres1DL2::Diffusion Pres1DL2</field>
    <field name="text">Add diffusion matrix to element matrix after multiplying it by coefficient coef coef Coefficient to multiply by added term default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Pres1DL2::Pres1DL2</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Pres1DL2.html#ad7624a99f9ca4cbb28ef0d19feede1f4</field>
    <field name="keywords">Pres1DL2 OFELI::Pres1DL2::Pres1DL2 Pres1DL2</field>
    <field name="text">Default Constructor Constructs an empty equation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Pres1DL2::setInput</field>
    <field name="args">(EType opt, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1Pres1DL2.html#affbdc0fae478891f2b9f63607004026f</field>
    <field name="keywords">setInput OFELI::Pres1DL2::setInput Pres1DL2</field>
    <field name="text">Set equation input data opt Parameter that selects data type for input This parameter is to be chosen in the enumerated variable EqDataType INITIAL_FIELD Initial temperature BOUNDARY_CONDITION_DATA Boundary condition Dirichlet SOURCE_DATA Heat source FLUX_DATA Heat flux Neumann boundary condition VELOCITY Velocity vector for the convection term u Vector containing input data</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Pres2DT3</field>
    <field name="url">classOFELI_1_1Pres2DT3.html</field>
    <field name="keywords">Pres2DT3</field>
    <field name="text">Builds finite element arrays for wave propagation in 2 D using 3 Node elements Note that members calculating element arrays have as an argument a real coef that will be multiplied by the contribution of the current element This makes possible testing different algorithms</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Pres2DT3::Grad</field>
    <field name="args">(Vect&lt; Point&lt; real_t &gt; &gt; &amp;g)</field>
    <field name="url">classOFELI_1_1Pres2DT3.html#a190841f9068f20d5cd91c05451f5d06d</field>
    <field name="keywords">Grad OFELI::Pres2DT3::Grad Pres2DT3</field>
    <field name="text">Compute gradient of solution g Elementwise vector containing gradient of solution</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Pres2DT3::Mass</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1Pres2DT3.html#a1b558ae9bc1c76a4344c24bc78f80f44</field>
    <field name="keywords">Mass OFELI::Pres2DT3::Mass Pres2DT3</field>
    <field name="text">Add Consistent mass matrix to element matrix after multiplying it by coefficient coef coef Coefficient to multiply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Pres2DT3::~Pres2DT3</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Pres2DT3.html#a36a9f978e2d4c375e6a59446a46b9cac</field>
    <field name="keywords">OFELI::Pres2DT3::~Pres2DT3 Pres2DT3</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Pres2DT3::Flux</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Pres2DT3.html#a4d57d6f9709935f100f3aae3bb7bc508</field>
    <field name="keywords">Flux OFELI::Pres2DT3::Flux Pres2DT3</field>
    <field name="text">Return constant heat flux in element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Pres2DT3::Pres2DT3</field>
    <field name="args">(Mesh &amp;ms, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1Pres2DT3.html#a54b633538622e8a4230b9a757b8a19ba</field>
    <field name="keywords">Pres2DT3 OFELI::Pres2DT3::Pres2DT3 Pres2DT3</field>
    <field name="text">Constructor using Mesh and initial condition ms Mesh instance u Vect instance containing initial solution</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Pres2DT3::Pres2DT3</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1Pres2DT3.html#a5f8ad0ce235d616801ddda5f9ed32833</field>
    <field name="keywords">Pres2DT3 OFELI::Pres2DT3::Pres2DT3 Pres2DT3</field>
    <field name="text">Constructor using Mesh data ms Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Pres2DT3::LMass</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1Pres2DT3.html#a8085a436c0055d8554baaa8cb3835922</field>
    <field name="keywords">LMass OFELI::Pres2DT3::LMass Pres2DT3</field>
    <field name="text">Add lumped mass matrix to element matrix after multiplying it by coefficient coef coef Coefficient to multiply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Pres2DT3::BoundaryRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1Pres2DT3.html#a9f47743e35b40517037f6c007312461c</field>
    <field name="keywords">BoundaryRHS OFELI::Pres2DT3::BoundaryRHS Pres2DT3</field>
    <field name="text">Add boundary right-hand side term to right hand side after multiplying it by coefficient coef f Vector containing source at nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Pres2DT3::BodyRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1Pres2DT3.html#aa6d7e87afcbeea4276573c9576d8d6ca</field>
    <field name="keywords">BodyRHS OFELI::Pres2DT3::BodyRHS Pres2DT3</field>
    <field name="text">Add body right-hand side term to right hand side f Vector containing source at nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Pres2DT3::Diffusion</field>
    <field name="args">(real_t coef=1)</field>
    <field name="url">classOFELI_1_1Pres2DT3.html#ac301bba6a75b942c88f797628c141e2c</field>
    <field name="keywords">Diffusion OFELI::Pres2DT3::Diffusion Pres2DT3</field>
    <field name="text">Add diffusion matrix to element matrix after multiplying it by coefficient coef coef Coefficient to multiply by added term Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Pres2DT3::Pres2DT3</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Pres2DT3.html#ad5e5dbc500a9f3f03041be18f0e229d1</field>
    <field name="keywords">Pres2DT3 OFELI::Pres2DT3::Pres2DT3 Pres2DT3</field>
    <field name="text">Default Constructor Constructs an empty equation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Pres2DT3::BodyRHS</field>
    <field name="args">(real_t f)</field>
    <field name="url">classOFELI_1_1Pres2DT3.html#af3452fd9f607e1efb0b915e90faea46f</field>
    <field name="keywords">BodyRHS OFELI::Pres2DT3::BodyRHS Pres2DT3</field>
    <field name="text">Add body right-hand side term to right hand side Case where the body right-hand side is piecewise constant f Value of thermal source Constant in element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Pres2DT3::Grad</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;u) const</field>
    <field name="url">classOFELI_1_1Pres2DT3.html#af45bbe0442fb57521bf5a98dd628e3a5</field>
    <field name="keywords">Grad OFELI::Pres2DT3::Grad Pres2DT3</field>
    <field name="text">Return gradient of a vector in element u Global vector for which gradient is computed Vector u has as size the total number of nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Pres2DT3::BoundaryRHS</field>
    <field name="args">(real_t flux)</field>
    <field name="url">classOFELI_1_1Pres2DT3.html#afc20edadf93d2135ee9873e1bd7deb4c</field>
    <field name="keywords">BoundaryRHS OFELI::Pres2DT3::BoundaryRHS Pres2DT3</field>
    <field name="text">Add boundary right-hand side flux to right hand side flux Vector containing source at side nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Pres2DT3::setInput</field>
    <field name="args">(EType opt, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1Pres2DT3.html#affbdc0fae478891f2b9f63607004026f</field>
    <field name="keywords">setInput OFELI::Pres2DT3::setInput Pres2DT3</field>
    <field name="text">Set equation input data opt Parameter to select type of input enumerated values INITIAL_FIELD Initial temperature BOUNDARY_CONDITION_DATA Boundary condition Dirichlet SOURCE Heat source FLUX Heat flux Neumann boundary condition SPEED Speed vector for the convection term u Vector containing input data</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Prescription</field>
    <field name="url">classOFELI_1_1Prescription.html</field>
    <field name="keywords">Prescription</field>
    <field name="text">To prescribe various types of data by an algebraic expression Data may consist in boundary conditions forces tractions fluxes initial condition All these data types can be defined through an enumerated variable Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Prescription::Prescription</field>
    <field name="args">(Mesh &amp;mesh, const string &amp;file)</field>
    <field name="url">classOFELI_1_1Prescription.html#a729b1e5dbc77119240896102a237a1b9</field>
    <field name="keywords">Prescription OFELI::Prescription::Prescription Prescription</field>
    <field name="text">Constructor that gives an instance of class Mesh and the data file name It reads parameters in Prescription Format from this file mesh Mesh instance file Name of Prescription file</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Prescription::Prescription</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Prescription.html#a8b0e88c4b2a26e6651cd0a26af580e86</field>
    <field name="keywords">Prescription OFELI::Prescription::Prescription Prescription</field>
    <field name="text">Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Prescription::~Prescription</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Prescription.html#abc32cb0d2029c7e0ee3eeee426c9b61d</field>
    <field name="keywords">OFELI::Prescription::~Prescription Prescription</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Prescription::get</field>
    <field name="args">(EType type, real_t time=0, size_t dof=0)</field>
    <field name="url">classOFELI_1_1Prescription.html#abdd520052d2df1b7110b785099533c64</field>
    <field name="keywords">get OFELI::Prescription::get Prescription</field>
    <field name="text">Read data in the given file and returns as a Vect instance for a chosen DOF The input value type determines the type of data to read type Type of data to seek To choose among the enumerated values BOUNDARY_CONDITION Read values for Dirichlet boundary conditions BOUNDARY_FORCE Read values for boundary force Neumann boundary condition The values TRACTION and FLUX have the same effect BODY_FORCE Read values for body or volume forces The value SOURCE has the same effect POINT_FORCE Read values for pointwise forces CONTACT_DISTANCE Read values for contact distance for contact mechanics INITIAL_FIELD Read values for initial solution SOLUTION Read values for a solution vector time Value of time for which data is read Default 0 dof DOF to store Default is 0 All DOFs are chosen</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Prescription::get</field>
    <field name="args">(EType type, Vect&lt; real_t &gt; &amp;v, real_t time=0, size_t dof=0)</field>
    <field name="url">classOFELI_1_1Prescription.html#ac84aa2218cd13af55c4519a43a36809e</field>
    <field name="keywords">get OFELI::Prescription::get Prescription</field>
    <field name="text">Read data in the given file and stores in a Vect instance for a chosen DOF The input value type determines the type of data to read type Type of data to seek To choose among the enumerated values BOUNDARY_CONDITION Read values for Dirichlet boundary conditions BOUNDARY_FORCE Read values for boundary force Neumann boundary condition The values TRACTION and FLUX have the same effect BODY_FORCE Read values for body or volume forces The value SOURCE has the same effect POINT_FORCE Read values for pointwise forces CONTACT_DISTANCE Read values for contact distance for contact mechanics INITIAL Read values for initial solution SOLUTION Read values for a solution vector v Vect instance that is instantiated on input and filled on output time Value of time for which data is read Default 0 dof DOF to store Default is 0 All DOFs are chosen</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Quad4</field>
    <field name="url">classOFELI_1_1Quad4.html</field>
    <field name="keywords">Quad4</field>
    <field name="text">Defines a 4 node quadrilateral finite element using Q 1 isoparametric interpolation The reference element is the square 1 1 x 1 1 The user must take care to the fact that determinant of jacobian and other quantities depend on the point in the reference element where they are calculated For this before any utilization of shape functions or jacobian function setLocal() must be invoked Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Quad4::Quad4</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Quad4.html#a0544c43e9d042bf3c4874393c1316b1a</field>
    <field name="keywords">Quad4 OFELI::Quad4::Quad4 Quad4</field>
    <field name="text">Default Constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Quad4::getMaxEdgeLength</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Quad4.html#a25ca31b393289f740e8ed58b06a30cd3</field>
    <field name="keywords">getMaxEdgeLength OFELI::Quad4::getMaxEdgeLength Quad4</field>
    <field name="text">Return maximal edge length of quadrilateral</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Quad4::setLocal</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;s)</field>
    <field name="url">classOFELI_1_1Quad4.html#a3686dcc363945fc9705485b9200fa17e</field>
    <field name="keywords">setLocal OFELI::Quad4::setLocal Quad4</field>
    <field name="text">Initialize local point coordinates in element s Point in the reference element This function computes jacobian shape functions and their partial derivatives at s Other member functions only return these values</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Quad4::getMinEdgeLength</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Quad4.html#a3b36d8923b27960cb53038075675ebaf</field>
    <field name="keywords">getMinEdgeLength OFELI::Quad4::getMinEdgeLength Quad4</field>
    <field name="text">Return minimal edge length of quadrilateral</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Quad4::set</field>
    <field name="args">(const Element *el)</field>
    <field name="url">classOFELI_1_1Quad4.html#a578b9f2f623966f955548e89ccce995a</field>
    <field name="keywords">set OFELI::Quad4::set Quad4</field>
    <field name="text">Choose element by giving its pointer</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Quad4::Grad</field>
    <field name="args">(const LocalVect&lt; real_t, 4 &gt; &amp;u, const Point&lt; real_t &gt; &amp;s)</field>
    <field name="url">classOFELI_1_1Quad4.html#a5b586fd99a311b9c58e11b4b4dcf12dd</field>
    <field name="keywords">Grad OFELI::Quad4::Grad Quad4</field>
    <field name="text">Return gradient of a function defined at element nodes u Vector of values at nodes s Local coordinates in 1 1 1 1 of point where the gradient is evaluated Value of gradient If the derivatives of shape functions were not computed before calling this function by calling setLocal this function will compute them</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Quad4::Quad4</field>
    <field name="args">(const Side *side)</field>
    <field name="url">classOFELI_1_1Quad4.html#a7e54563e2fcb0d9ad35dd48580cee7d4</field>
    <field name="keywords">Quad4 OFELI::Quad4::Quad4 Quad4</field>
    <field name="text">Constructor when data of Side sd are given side Pointer to Side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Quad4::~Quad4</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Quad4.html#ac42b8d9c6791810428f5eac161628ba1</field>
    <field name="keywords">OFELI::Quad4::~Quad4 Quad4</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Quad4::atGauss</field>
    <field name="args">(int n, std::vector&lt; real_t &gt; &amp;sh, std::vector&lt; Point&lt; real_t &gt; &gt; &amp;dsh, std::vector&lt; real_t &gt; &amp;w)</field>
    <field name="url">classOFELI_1_1Quad4.html#ace8d5209b5c172d4a687adffe9c2d44d</field>
    <field name="keywords">atGauss OFELI::Quad4::atGauss Quad4</field>
    <field name="text">Calculate shape functions and their partial derivatives and integration weights n Number of Gauss-Legendre integration points in each direction sh Vector of shape functions at Gauss points dsh Vector of shape function derivatives at Gauss points w Weights of integration formula at Gauss points</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Quad4::Quad4</field>
    <field name="args">(const Element *element)</field>
    <field name="url">classOFELI_1_1Quad4.html#af37209395c223d43dc763b4d01ad01b7</field>
    <field name="keywords">Quad4 OFELI::Quad4::Quad4 Quad4</field>
    <field name="text">Constructor when data of Element el are given element Pointer to Element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Quad4::set</field>
    <field name="args">(const Side *sd)</field>
    <field name="url">classOFELI_1_1Quad4.html#afef83babf0e3aeb65caca62d7995aaf5</field>
    <field name="keywords">set OFELI::Quad4::set Quad4</field>
    <field name="text">Choose side by giving its pointer</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Reconstruction</field>
    <field name="url">classOFELI_1_1Reconstruction.html</field>
    <field name="keywords">Reconstruction</field>
    <field name="text">To perform various reconstruction operations This class enables various reconstruction operations like smoothing projections Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Reconstruction::Reconstruction</field>
    <field name="args">(const Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1Reconstruction.html#a84bc8ccb6478c707e7f3988bf614b962</field>
    <field name="keywords">Reconstruction OFELI::Reconstruction::Reconstruction Reconstruction</field>
    <field name="text">Constructor using a refrence to a Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Reconstruction::setMesh</field>
    <field name="args">(const Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1Reconstruction.html#aac1177480e4b46f52a382a7d69b7d757</field>
    <field name="keywords">setMesh OFELI::Reconstruction::setMesh Reconstruction</field>
    <field name="text">Provide Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Reconstruction::~Reconstruction</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Reconstruction.html#ada5450b124ab35eaf49bc571b1ea986f</field>
    <field name="keywords">OFELI::Reconstruction::~Reconstruction Reconstruction</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Reconstruction::P0toP1</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;u, Vect&lt; real_t &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1Reconstruction.html#adc711a871c747ebe9557fb6cadee8ecc</field>
    <field name="keywords">P0toP1 OFELI::Reconstruction::P0toP1 Reconstruction</field>
    <field name="text">Smooth an elementwise field to obtain a nodewise field by L 2 projection u Vect instance that contains field to smooth v Vect instance that contains on output smoothed field</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Reconstruction::Reconstruction</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Reconstruction.html#adee1f871a316e36a588ff32232da3568</field>
    <field name="keywords">Reconstruction OFELI::Reconstruction::Reconstruction Reconstruction</field>
    <field name="text">Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Reconstruction::DP1toP1</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;u, Vect&lt; real_t &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1Reconstruction.html#afe5f987eea5ee04d2eca9dd2032d39e0</field>
    <field name="keywords">DP1toP1 OFELI::Reconstruction::DP1toP1 Reconstruction</field>
    <field name="text">Smooth a discontinuous P1 field to obtain a nodewise Continuous P 1 field by L 2 projection u Vect instance that contains field to smooth v Vect instance that contains on output smoothed field This function is valid for P 1 triangles 2 D only</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Rectangle</field>
    <field name="url">classOFELI_1_1Rectangle.html</field>
    <field name="keywords">Rectangle</field>
    <field name="text">To store and treat a rectangular figure</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Rectangle::getSignedDistance</field>
    <field name="args">(const Grid &amp;g, Vect&lt; real_t &gt; &amp;d) const</field>
    <field name="url">classOFELI_1_1Rectangle.html#a2252be7c4949c4a2bd3ee24a4fdfd722</field>
    <field name="keywords">getSignedDistance OFELI::Rectangle::getSignedDistance Rectangle</field>
    <field name="text">Calculate signed distance to current figure with respect to grid points g Grid instance d Vect instance containing calculated distance from each grid index to Figure Vector d doesn t need to be sized before invoking this function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Rectangle::Rectangle</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Rectangle.html#a254e93337c6debb79cd318ef4139a84f</field>
    <field name="keywords">Rectangle OFELI::Rectangle::Rectangle Rectangle</field>
    <field name="text">Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Rectangle::getBoundingBox1</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Rectangle.html#a3b9647b06653ab737148a017cc948913</field>
    <field name="keywords">getBoundingBox1 OFELI::Rectangle::getBoundingBox1 Rectangle</field>
    <field name="text">Return first point of bounding box</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Rectangle::getSignedDistance</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;p) const</field>
    <field name="url">classOFELI_1_1Rectangle.html#a59bcb59a9fd6e717fa480630c7d3b57a</field>
    <field name="keywords">getSignedDistance OFELI::Rectangle::getSignedDistance Rectangle</field>
    <field name="text">Return signed distance from a given point to current figure p Point instance from which distance is computed</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Rectangle::getSignedDistance</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;p) const</field>
    <field name="url">classOFELI_1_1Rectangle.html#a6c92f703c9cacfbfc0158713655d844a</field>
    <field name="keywords">getSignedDistance OFELI::Rectangle::getSignedDistance Rectangle</field>
    <field name="text">Return signed distance of a given point from the current rectangle The computed distance is negative if p lies in the rectangle negative if it is outside and 0 on its boundary p Point&lt;double&gt; instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Rectangle::operator+=</field>
    <field name="args">(real_t a)</field>
    <field name="url">classOFELI_1_1Rectangle.html#a7e863cfdb72ccf5208104351d3767467</field>
    <field name="keywords">operator+= OFELI::Rectangle::operator+= Rectangle</field>
    <field name="text">Operator Scale rectangle by a factor a</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Rectangle::getBoundingBox2</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Rectangle.html#ab1e798142ff5d7ca3b8adeba5147e808</field>
    <field name="keywords">getBoundingBox2 OFELI::Rectangle::getBoundingBox2 Rectangle</field>
    <field name="text">Return second point of bounding box</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Rectangle::operator+=</field>
    <field name="args">(Point&lt; real_t &gt; a)</field>
    <field name="url">classOFELI_1_1Rectangle.html#ac0883ee2cd36eeec8d2b6d26ac59de7d</field>
    <field name="keywords">operator+= OFELI::Rectangle::operator+= Rectangle</field>
    <field name="text">Operator Translate rectangle by a vector a</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Rectangle::Rectangle</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;bbm, const Point&lt; real_t &gt; &amp;bbM, int code=1)</field>
    <field name="url">classOFELI_1_1Rectangle.html#ae8f96a561ac988c417b6841c5ab71cdd</field>
    <field name="keywords">Rectangle OFELI::Rectangle::Rectangle Rectangle</field>
    <field name="text">Constructor bbm Left Bottom point of rectangle bbM Right Top point of rectangle code Code to assign to rectangle</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Rectangle::setBoundingBox</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;bbm, const Point&lt; real_t &gt; &amp;bbM)</field>
    <field name="url">classOFELI_1_1Rectangle.html#aebea8ead5217e3fb0ef453a9ce697647</field>
    <field name="keywords">setBoundingBox OFELI::Rectangle::setBoundingBox Rectangle</field>
    <field name="text">Assign bounding box of the rectangle bbm Left Bottom point bbM Right Top point</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Side</field>
    <field name="url">classOFELI_1_1Side.html</field>
    <field name="keywords">Side</field>
    <field name="text">To store and treat finite element sides edges in 2 D or faces in 3 D Defines a side of a finite element mesh The sides are given in particular by their shapes and a list of nodes Each node can be accessed by the member function getPtrNode() The string defining the element shape must be chosen according to the following list Shape Shape name Dimension Min number of nodes Line line 3 2 Triangle tria 3 3 Quadrilateral quad 3 4 Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::isReferenced</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Side.html#a0655dcc347dad9d444e2162d4e748845</field>
    <field name="keywords">isReferenced OFELI::Side::isReferenced Side</field>
    <field name="text">Say if side has a nonzero code or not</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::isOnBoundary</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Side.html#a070f283bd5bcab578a24fab4215d8d36</field>
    <field name="keywords">isOnBoundary OFELI::Side::isOnBoundary Side</field>
    <field name="text">Boundary side or not Returns 1 or 1 if side is on boundary Depending on whether the first or the second neighbor element is defined Returns 0 if side is an inner one This member function is valid only if member function Mesh::getAllSides() or Mesh::getBoundarySides() has been called before</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::Add</field>
    <field name="args">(Element *el)</field>
    <field name="url">classOFELI_1_1Side.html#a09bede292ad1986fef93ecdf07a12389</field>
    <field name="keywords">Add OFELI::Side::Add Side</field>
    <field name="text">Set pointer to neighbor element el Pointer to element to add as a neigbor element This function adds the pointer el only if this one is not a null pointer</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::setActive</field>
    <field name="args">(bool opt=true)</field>
    <field name="url">classOFELI_1_1Side.html#a0aa5ad2f7a98094f9a9aaa2a3f615636</field>
    <field name="keywords">setActive OFELI::Side::setActive Side</field>
    <field name="text">Set side is active default or not if argument is false</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::getFirstDOF</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Side.html#a15c86d73e9480dad550d2b6ba6f45c52</field>
    <field name="keywords">getFirstDOF OFELI::Side::getFirstDOF Side</field>
    <field name="text">Return label of first dof of node</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">OFELI::Side::SideType</field>
    <field name="url">classOFELI_1_1Side.html#a1ee4b3b0c0d87990a374f7ef5b551fcf</field>
    <field name="keywords">SideType OFELI::Side::SideType Side</field>
    <field name="text">To select side type boundary side or not</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::Side::INTERNAL_BOUNDARY</field>
    <field name="url">classOFELI_1_1Side.html#a1ee4b3b0c0d87990a374f7ef5b551fcfa1449e999f261479c679348019ca1a14c</field>
    <field name="keywords">INTERNAL_BOUNDARY OFELI::Side::INTERNAL_BOUNDARY Side INTERNAL_BOUNDARY OFELI::Side::INTERNAL_BOUNDARY Side</field>
    <field name="text">Side on internal boundary</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::Side::INTERNAL_SIDE</field>
    <field name="url">classOFELI_1_1Side.html#a1ee4b3b0c0d87990a374f7ef5b551fcfa2c56353f03a02493da3e59f7110735fb</field>
    <field name="keywords">INTERNAL_SIDE OFELI::Side::INTERNAL_SIDE Side INTERNAL_SIDE OFELI::Side::INTERNAL_SIDE Side</field>
    <field name="text">Internal side</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::Side::EXTERNAL_BOUNDARY</field>
    <field name="url">classOFELI_1_1Side.html#a1ee4b3b0c0d87990a374f7ef5b551fcfa448c8d576f147f23d3ffafe36341b3e6</field>
    <field name="keywords">EXTERNAL_BOUNDARY OFELI::Side::EXTERNAL_BOUNDARY Side EXTERNAL_BOUNDARY OFELI::Side::EXTERNAL_BOUNDARY Side</field>
    <field name="text">Side on external boundary</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::getChild</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Side.html#a2077044320a8190b935e5fb5d4a93885</field>
    <field name="keywords">getChild OFELI::Side::getChild Side</field>
    <field name="text">Return pointer to i th child side Returns null pointer is no childs</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::getNeighborElement</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Side.html#a20df322863db29638b90ec7aedc4c1d5</field>
    <field name="keywords">getNeighborElement OFELI::Side::getNeighborElement Side</field>
    <field name="text">Return pointer to i-th side neighboring element i Local label of neighbor element must be equal to 1 or 2</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::setDOF</field>
    <field name="args">(size_t &amp;first_dof, size_t nb_dof)</field>
    <field name="url">classOFELI_1_1Side.html#a256faa817829ee737c4d15145f207cf8</field>
    <field name="keywords">setDOF OFELI::Side::setDOF Side</field>
    <field name="text">Define number of DOF first_dof Label of the first DOF in input that is actualized nb_dof Number of DOF</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::getCenter</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Side.html#a29518c54ba3a66576ee2859724fc88cd</field>
    <field name="keywords">getCenter OFELI::Side::getCenter Side</field>
    <field name="text">Return coordinates of center of side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::getNbDOF</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Side.html#a2e702838dc1b95944fd571e804950aa3</field>
    <field name="keywords">getNbDOF OFELI::Side::getNbDOF Side</field>
    <field name="text">Return number of DOF</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::isActive</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Side.html#a354c7d206ec624b9bdbb81f3b788f826</field>
    <field name="keywords">isActive OFELI::Side::isActive Side</field>
    <field name="text">Return true or false whether side is active or not</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::setNode</field>
    <field name="args">(size_t i, Node *node)</field>
    <field name="url">classOFELI_1_1Side.html#a3d4c4ccc373314a2d0b069e1a4089221</field>
    <field name="keywords">setNode OFELI::Side::setNode Side</field>
    <field name="text">Assign a node given by its pointer as the i th node of side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::Add</field>
    <field name="args">(Node *node)</field>
    <field name="url">classOFELI_1_1Side.html#a48bb768563a8b7f456751ec92a901a25</field>
    <field name="keywords">Add OFELI::Side::Add Side</field>
    <field name="text">Insert a node at end of list of nodes of side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::getParent</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Side.html#a4f0033349d171a25a1c0b5a6a8b93e5c</field>
    <field name="keywords">getParent OFELI::Side::getParent Side</field>
    <field name="text">Return pointer to parent side Return null if no parent</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::set</field>
    <field name="args">(Element *el, size_t i)</field>
    <field name="url">classOFELI_1_1Side.html#a502438ee999fd06ac113439e4c6fff65</field>
    <field name="keywords">set OFELI::Side::set Side</field>
    <field name="text">Set pointer to neighbor element el Pointer to element to set as a neighbor element i Local number of neighbor element This function differs from the Add by the fact that the local label of neighbor element is given</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::getDOF</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Side.html#a5454f38fe3a796017f364246f7e3ed5a</field>
    <field name="keywords">getDOF OFELI::Side::getDOF Side</field>
    <field name="text">Return label of i th dof</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::setLabel</field>
    <field name="args">(size_t i)</field>
    <field name="url">classOFELI_1_1Side.html#a55b14e23cc522bf215f3da3a47cfe74f</field>
    <field name="keywords">setLabel OFELI::Side::setLabel Side</field>
    <field name="text">Define label of side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::getNbVertices</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Side.html#a5750242d0acee0978dba9bf1261914cd</field>
    <field name="keywords">getNbVertices OFELI::Side::getNbVertices Side</field>
    <field name="text">Return number of side vertices</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::getNormal</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Side.html#a5c17a48c0aaee7f643ba04c9fa86710e</field>
    <field name="keywords">getNormal OFELI::Side::getNormal Side</field>
    <field name="text">Return normal vector to side The normal vector is oriented from the first neighbor element to the second one The norm of this vector is equal to the measure of the side length of the edge in 2 D and area of the face in 3 D and To get the unit normal use rather the member function getUnitNormal</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::~Side</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Side.html#a5d16bf44dd78a2cdef7f21203f348f4f</field>
    <field name="keywords">OFELI::Side::~Side Side</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::Side</field>
    <field name="args">(size_t label, const string &amp;shape)</field>
    <field name="url">classOFELI_1_1Side.html#a5e67ec674d34cf6e8897cc71cbe94cc5</field>
    <field name="keywords">Side OFELI::Side::Side Side</field>
    <field name="text">Constructor initializing side label and shape label Label to assign to side shape Shape of side See class description</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::getCode</field>
    <field name="args">(size_t dof=1) const</field>
    <field name="url">classOFELI_1_1Side.html#a60214933ce428b4380802fc97666ffcc</field>
    <field name="keywords">getCode OFELI::Side::getCode Side</field>
    <field name="text">Return code for a given DOF of node dof Local label of degree of freedom Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::Add</field>
    <field name="args">(Edge *edge)</field>
    <field name="url">classOFELI_1_1Side.html#a6ed267362e5490ceae608df232cc69b6</field>
    <field name="keywords">Add OFELI::Side::Add Side</field>
    <field name="text">Insert an edge at end of list of edges of side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::Side</field>
    <field name="args">(const Side &amp;sd)</field>
    <field name="url">classOFELI_1_1Side.html#a71dbb740f62b43363751b2dfdd12c4a1</field>
    <field name="keywords">Side OFELI::Side::Side Side</field>
    <field name="text">Copy constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::getNodeLabel</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Side.html#a7acd721132e595cb11316c41a77b5bf8</field>
    <field name="keywords">getNodeLabel OFELI::Side::getNodeLabel Side</field>
    <field name="text">Return global label of node with given local label</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::getNbEq</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Side.html#a7e81ee9c88f36ed678b711aaf77fcfb1</field>
    <field name="keywords">getNbEq OFELI::Side::getNbEq Side</field>
    <field name="text">Return number of side equations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::setCode</field>
    <field name="args">(size_t dof, int code)</field>
    <field name="url">classOFELI_1_1Side.html#a83a8351cc27666594d7d7c2850556ccf</field>
    <field name="keywords">setCode OFELI::Side::setCode Side</field>
    <field name="text">Assign code to a DOF dof DOF to which code is assigned code Code to assign</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::Side</field>
    <field name="args">(size_t label, int shape)</field>
    <field name="url">classOFELI_1_1Side.html#a842b8948b287ffdd49f4542672da4f7f</field>
    <field name="keywords">Side OFELI::Side::Side Side</field>
    <field name="text">Constructor initializing side label and shape label to assign to side shape of side See enum ElementShape in Mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::getLabel</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Side.html#a893a23d685358e3dd02c8d834eafba83</field>
    <field name="keywords">getLabel OFELI::Side::getLabel Side</field>
    <field name="text">Return label of side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::getLevel</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Side.html#a8f44f2787dedf1e0950319c4d06d094a</field>
    <field name="keywords">getLevel OFELI::Side::getLevel Side</field>
    <field name="text">Return side level Side level increases when side is refined starting from 0 If the level is 0 then the element has no father</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::getShape</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Side.html#a9e8217afff8e1b47ba6901bfea655a3d</field>
    <field name="keywords">getShape OFELI::Side::getShape Side</field>
    <field name="text">Return side s shape</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::getUnitNormal</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Side.html#a9f079f7ab291f6a09bd7d828cbc5ce2d</field>
    <field name="keywords">getUnitNormal OFELI::Side::getUnitNormal Side</field>
    <field name="text">Return unit normal vector to side The unit normal vector is oriented from the first neighbor element to the second one The norm of this vector is equal to one</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::DOF</field>
    <field name="args">(size_t i, size_t dof)</field>
    <field name="url">classOFELI_1_1Side.html#aa1a9657431763667147be7d405317a14</field>
    <field name="keywords">DOF OFELI::Side::DOF Side</field>
    <field name="text">Define label of DOF i DOF index dof Its label</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::Contains</field>
    <field name="args">(const Node *nd) const</field>
    <field name="url">classOFELI_1_1Side.html#ab398a4170d768f2e58a8595353ee4ca6</field>
    <field name="keywords">Contains OFELI::Side::Contains Side</field>
    <field name="text">Say if a given node belongs to current side nd Pointer to searched node index local label of node if found 0 if not</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::Replace</field>
    <field name="args">(size_t label, Node *node)</field>
    <field name="url">classOFELI_1_1Side.html#aba9961fcc23d8f88bfb8337f5032cd2f</field>
    <field name="keywords">Replace OFELI::Side::Replace Side</field>
    <field name="text">Replace a node at a given local label</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::Side</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Side.html#abc118c4065a0362f2d06ca4c63fccad6</field>
    <field name="keywords">Side OFELI::Side::Side Side</field>
    <field name="text">Default Constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::getMeasure</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Side.html#ac089244b160bad5ca0e20e6f92cd2fef</field>
    <field name="keywords">getMeasure OFELI::Side::getMeasure Side</field>
    <field name="text">Return measure of side This member function returns length or area of side In case of quadrilaterals it returns determinant of Jacobian of mapping between reference and actual side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::n</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Side.html#ac88f0961aa7ed7c7415550ab2cad49c8</field>
    <field name="keywords">n OFELI::Side::n Side</field>
    <field name="text">Return label of side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::setOnBoundary</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Side.html#ad742fa16927ed3e44c84a6f0b771a211</field>
    <field name="keywords">setOnBoundary OFELI::Side::setOnBoundary Side</field>
    <field name="text">Say that the side is on the boundary</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::getNbNodes</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Side.html#ade220c85ff6ecba20a6e05121f2b9257</field>
    <field name="keywords">getNbNodes OFELI::Side::getNbNodes Side</field>
    <field name="text">Return number of side nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::getPtrNode</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Side.html#ae588acd710c421ee332541c1d469852a</field>
    <field name="keywords">getPtrNode OFELI::Side::getPtrNode Side</field>
    <field name="text">Return pointer to node of local label i</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::getOtherNeighborElement</field>
    <field name="args">(Element *el) const</field>
    <field name="url">classOFELI_1_1Side.html#ae713f58359cf03e0f4b387fedc141495</field>
    <field name="keywords">getOtherNeighborElement OFELI::Side::getOtherNeighborElement Side</field>
    <field name="text">Return pointer to other neighboring element than given one el Pointer to a given neighbor element If the side is on the boundary this function returns null pointer</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::setChild</field>
    <field name="args">(Side *sd)</field>
    <field name="url">classOFELI_1_1Side.html#ae72fb3dbd68d8c904910059f2766a318</field>
    <field name="keywords">setChild OFELI::Side::setChild Side</field>
    <field name="text">Assign side as child of current one and assign current side as father This function is principally used when refining is invoked e.g for mesh adaption sd Pointer to side to assign</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::operator()</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Side.html#ae88ca107de28ab4461295b0de66c4e7b</field>
    <field name="keywords">operator() OFELI::Side::operator() Side</field>
    <field name="text">Operator Return pointer to node of local label i</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::setNbDOF</field>
    <field name="args">(size_t nb_dof)</field>
    <field name="url">classOFELI_1_1Side.html#af52167e486a54757c53c69c0f50123c8</field>
    <field name="keywords">setNbDOF OFELI::Side::setNbDOF Side</field>
    <field name="text">Set number of degrees of freedom DOF</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::getNbChilds</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Side.html#afb8044c78d2743fdd88844c17957bca9</field>
    <field name="keywords">getNbChilds OFELI::Side::getNbChilds Side</field>
    <field name="text">Return number of children of side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Side::setFirstDOF</field>
    <field name="args">(size_t n)</field>
    <field name="url">classOFELI_1_1Side.html#afccb14e6bc10f074283b92506c13947d</field>
    <field name="keywords">setFirstDOF OFELI::Side::setFirstDOF Side</field>
    <field name="text">Define First DOF</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::SideList</field>
    <field name="url">classOFELI_1_1SideList.html</field>
    <field name="keywords">SideList</field>
    <field name="text">Class to construct a list of sides having some common properties This class enables choosing multiple selection criteria by using function select However the intersection of these properties must be empty Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SideList::getNbSides</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1SideList.html#a0252edb7d5457ec0225ffff64dcdccb2</field>
    <field name="keywords">getNbSides OFELI::SideList::getNbSides SideList</field>
    <field name="text">Return number of selected sides</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SideList::selectCode</field>
    <field name="args">(int code, int dof=1)</field>
    <field name="url">classOFELI_1_1SideList.html#a35661429fc740a9ecaef16a654df272e</field>
    <field name="keywords">selectCode OFELI::SideList::selectCode SideList</field>
    <field name="text">Select sides having a given code for a given degree of freedom code Code that sides share dof Degree of Freedom label Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SideList::top</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1SideList.html#a38e8fcffc1e158b30d9d72845d92ac57</field>
    <field name="keywords">top OFELI::SideList::top SideList</field>
    <field name="text">Reset list of sides at its top position Non constant version</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SideList::SideList</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1SideList.html#a39d34a189d9c8e027105bc81ba411079</field>
    <field name="keywords">SideList OFELI::SideList::SideList SideList</field>
    <field name="text">Constructor using a Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SideList::top</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1SideList.html#a6a8d8a56b30458682d94bd05d6bbf7aa</field>
    <field name="keywords">top OFELI::SideList::top SideList</field>
    <field name="text">Reset list of sides at its top position Constant version</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SideList::get</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1SideList.html#a8f572f1a487e75d18d3f2b433c8f172d</field>
    <field name="keywords">get OFELI::SideList::get SideList</field>
    <field name="text">Return pointer to current side and move to next one Constant version</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SideList::~SideList</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1SideList.html#aaf3f25087d632fadb1ccc1b1377b3cbd</field>
    <field name="keywords">OFELI::SideList::~SideList SideList</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SideList::get</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1SideList.html#af5868522614f28cbbbb8f2a109d2ebf4</field>
    <field name="keywords">get OFELI::SideList::get SideList</field>
    <field name="text">Return pointer to current side and move to next one Non constant version</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SideList::unselectCode</field>
    <field name="args">(int code, int dof=1)</field>
    <field name="url">classOFELI_1_1SideList.html#afd4634dbd776b50714209695e2aafcdd</field>
    <field name="keywords">unselectCode OFELI::SideList::unselectCode SideList</field>
    <field name="text">Unselect sides having a given code for a given degree of freedom code Code of sides to exclude dof Degree of Freedom label Default 1</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::SkMatrix</field>
    <field name="url">classOFELI_1_1SkMatrix.html</field>
    <field name="keywords">SkMatrix</field>
    <field name="text">To handle square matrices in skyline storage format This template class allows storing and manipulating a matrix in skyline storage format The matrix entries are stored in 2 vectors column by column as in the following example T_ Data type double float complex&lt;double&gt; Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::setMesh</field>
    <field name="args">(Mesh &amp;mesh, size_t dof=0)</field>
    <field name="url">classOFELI_1_1SkMatrix.html#a05b7680ed419a3422be7b7989f307496</field>
    <field name="keywords">setMesh OFELI::SkMatrix::setMesh SkMatrix&lt; T_ &gt;</field>
    <field name="text">Determine mesh graph and initialize matrix This member function is called by constructor with the same arguments mesh Mesh instance for which matrix graph is determined dof Option parameter with default value 0 dof 1 means that only one degree of freedom for each node or element or side is taken to determine matrix structure The value dof 0 means that matrix structure is determined using all DOFs</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::setSkyline</field>
    <field name="args">(Mesh &amp;mesh)</field>
    <field name="url">classOFELI_1_1SkMatrix.html#a14401de6789a804fcdd361a71e475b22</field>
    <field name="keywords">setSkyline OFELI::SkMatrix::setSkyline SkMatrix&lt; T_ &gt;</field>
    <field name="text">Determine matrix structure This member function calculates matrix structure using a Mesh instance mesh Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::get</field>
    <field name="args">(size_t i, size_t j) const</field>
    <field name="url">classOFELI_1_1SkMatrix.html#a173c0f972c4eeca07b426587bc2108e5</field>
    <field name="keywords">get OFELI::SkMatrix::get SkMatrix&lt; T_ &gt;</field>
    <field name="text">Return entry i j of matrix if this one is stored 0 else</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::add</field>
    <field name="args">(size_t i, size_t j, const T_ &amp;val)</field>
    <field name="url">classOFELI_1_1SkMatrix.html#a17592a65d5fb95d42c07f724dabad759</field>
    <field name="keywords">add OFELI::SkMatrix::add SkMatrix&lt; T_ &gt;</field>
    <field name="text">Add a constant value to an entry ofthe matrix i Row index j Column index val Constant value to add to a(i,j)</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::setDOF</field>
    <field name="args">(size_t i)</field>
    <field name="url">classOFELI_1_1SkMatrix.html#a1ab711dca30cf8665dea3f81afca1230</field>
    <field name="keywords">setDOF OFELI::SkMatrix::setDOF SkMatrix&lt; T_ &gt;</field>
    <field name="text">Choose DOF to activate This function is available only if variable dof is equal to 1 in the constructor i Index of the DOF</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::operator=</field>
    <field name="args">(const T_ &amp;x)</field>
    <field name="url">classOFELI_1_1SkMatrix.html#a1afffd90e8310dbae61fd590e7807fb1</field>
    <field name="keywords">operator= OFELI::SkMatrix::operator= SkMatrix&lt; T_ &gt;</field>
    <field name="text">Operator define the matrix as a diagonal one with all diagonal entries equal to x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::setLU</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1SkMatrix.html#a254526dadd3fc5f1ffa120bfb2357f23</field>
    <field name="keywords">setLU OFELI::SkMatrix::setLU SkMatrix&lt; T_ &gt;</field>
    <field name="text">Factorize the matrix LU factorization LU factorization of the matrix is realized Note that since this is an in place factorization the contents of the matrix are modified 0 if factorization was normally performed n if the n th pivot is null A flag in this class indicates after factorization that this one has been realized so that if the member function solve is called after this no further factorization is done</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::at</field>
    <field name="args">(size_t i, size_t j)</field>
    <field name="url">classOFELI_1_1SkMatrix.html#a276ea1877b89d46c32e207248a4573d7</field>
    <field name="keywords">at OFELI::SkMatrix::at SkMatrix&lt; T_ &gt;</field>
    <field name="text">Return a value of a matrix entry i Row index starts at 1 j Column index starts at 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::solve</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;b, Vect&lt; T_ &gt; &amp;x, bool fact=true)</field>
    <field name="url">classOFELI_1_1SkMatrix.html#a27c662f32ce66be2efa47871358fcf10</field>
    <field name="keywords">solve OFELI::SkMatrix::solve SkMatrix&lt; T_ &gt;</field>
    <field name="text">Solve linear system The linear system having the current instance as a matrix is solved by using the LU decomposition Solution is thus realized after a factorization step and a forward/backward substitution step The factorization step is realized only if this was not already done Note that this function modifies the matrix contents is a factorization is performed Naturally if the the matrix has been modified after using this function the user has to refactorize it using the function setLU This is because the class has no non-expensive way to detect if the matrix has been modified The function setLU realizes the factorization step only b Vect instance that contains right-hand side x Vect instance that contains solution fact Set true if matrix is to be factorized Default value false if not 0 if solution was normally performed n if the n th pivot is null</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::SkMatrix</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1SkMatrix.html#a2810f49c8a3ccdd2b9d917e8e1390b45</field>
    <field name="keywords">SkMatrix OFELI::SkMatrix::SkMatrix SkMatrix&lt; T_ &gt;</field>
    <field name="text">Default constructor Initializes a zero-dimension matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::SkMatrix</field>
    <field name="args">(Mesh &amp;mesh, size_t dof=0, int is_diagonal=false)</field>
    <field name="url">classOFELI_1_1SkMatrix.html#a333e0e98535bd193df5a7d90af1950de</field>
    <field name="keywords">SkMatrix OFELI::SkMatrix::SkMatrix SkMatrix&lt; T_ &gt;</field>
    <field name="text">Constructor using mesh to initialize skyline structure of matrix mesh Mesh instance for which matrix graph is determined dof Option parameter with default value 0 dof 1 means that only one degree of freedom for each node or element or side is taken to determine matrix structure The value dof 0 means that matrix structure is determined using all DOFs is_diagonal Boolean argument to say is the matrix is actually a diagonal matrix or not</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::getColHeight</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1SkMatrix.html#a35b05dbc139a5adf5a8311aa159a86ca</field>
    <field name="keywords">getColHeight OFELI::SkMatrix::getColHeight SkMatrix&lt; T_ &gt;</field>
    <field name="text">Return column height Column height at entry i is returned</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::TMultAdd</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;x, Vect&lt; T_ &gt; &amp;y) const</field>
    <field name="url">classOFELI_1_1SkMatrix.html#a3669511db9562e3f702e5ebd87c92409</field>
    <field name="keywords">TMultAdd OFELI::SkMatrix::TMultAdd SkMatrix&lt; T_ &gt;</field>
    <field name="text">Multiply transpose of matrix by vector x and add to y x Vector to multiply by matrix y Vector to add to the result y contains on output the result</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::add</field>
    <field name="args">(size_t i, const T_ &amp;val)</field>
    <field name="url">classOFELI_1_1SkMatrix.html#a3c7b029cbe1aca9bea7623ae99274795</field>
    <field name="keywords">add OFELI::SkMatrix::add SkMatrix&lt; T_ &gt;</field>
    <field name="text">Add val to entry i</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::operator+=</field>
    <field name="args">(const SkMatrix&lt; T_ &gt; &amp;m)</field>
    <field name="url">classOFELI_1_1SkMatrix.html#a4cde5c0c715bec83b6a3bc6f92aaf5c1</field>
    <field name="keywords">operator+= OFELI::SkMatrix::operator+= SkMatrix&lt; T_ &gt;</field>
    <field name="text">Operator Add matrix m to current matrix instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::SkMatrix</field>
    <field name="args">(const SkMatrix&lt; T_ &gt; &amp;m)</field>
    <field name="url">classOFELI_1_1SkMatrix.html#a520953c4bb457c42e419412d8e8e713d</field>
    <field name="keywords">SkMatrix OFELI::SkMatrix::SkMatrix SkMatrix&lt; T_ &gt;</field>
    <field name="text">Copy Constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::operator*=</field>
    <field name="args">(const T_ &amp;x)</field>
    <field name="url">classOFELI_1_1SkMatrix.html#a5cb4b84cfbcb446f50b418554d838693</field>
    <field name="keywords">operator*= OFELI::SkMatrix::operator*= SkMatrix&lt; T_ &gt;</field>
    <field name="text">Operator Premultiply matrix entries by constant value x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::set</field>
    <field name="args">(size_t i, size_t j, const T_ &amp;val)</field>
    <field name="url">classOFELI_1_1SkMatrix.html#a61cf373a94a5fedbca306e016bc489c9</field>
    <field name="keywords">set OFELI::SkMatrix::set SkMatrix&lt; T_ &gt;</field>
    <field name="text">Assign a value to an entry ofthe matrix i Row index starting at i 1 j Column index starting at i 1 val Value to assign to entry a(i,j)</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::SkMatrix</field>
    <field name="args">(size_t size, int is_diagonal=false)</field>
    <field name="url">classOFELI_1_1SkMatrix.html#a6275289820bc61dd7948610b959e8474</field>
    <field name="keywords">SkMatrix OFELI::SkMatrix::SkMatrix SkMatrix&lt; T_ &gt;</field>
    <field name="text">Constructor that initializes a dense symmetric matrix Normally for a dense matrix this is not the right class size Number of matrix rows and columns is_diagonal Boolean to select if the matrix is diagonal or not Default false</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::MultAdd</field>
    <field name="args">(T_ a, const Vect&lt; T_ &gt; &amp;x, Vect&lt; T_ &gt; &amp;y) const</field>
    <field name="url">classOFELI_1_1SkMatrix.html#a7687aa6aa85cfe87635a1c3e56625876</field>
    <field name="keywords">MultAdd OFELI::SkMatrix::MultAdd SkMatrix&lt; T_ &gt;</field>
    <field name="text">Multiply matrix by a vector and add to another one a Constant to multiply by matrix x Vector to multiply by matrix y Vector to add to the result y contains on output the result</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::operator()</field>
    <field name="args">(size_t i, size_t j) const</field>
    <field name="url">classOFELI_1_1SkMatrix.html#a78adc6c13ad0f1d1dedacffe0e80ce63</field>
    <field name="keywords">operator() OFELI::SkMatrix::operator() SkMatrix&lt; T_ &gt;</field>
    <field name="text">Operator Constant version i Row index j Column index</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::Axpy</field>
    <field name="args">(T_ a, const SkMatrix&lt; T_ &gt; &amp;m)</field>
    <field name="url">classOFELI_1_1SkMatrix.html#a80c9b6644398a05cd10cfdfa0a83ddc2</field>
    <field name="keywords">Axpy OFELI::SkMatrix::Axpy SkMatrix&lt; T_ &gt;</field>
    <field name="text">Add to matrix the product of a matrix by a scalar a Scalar to premultiply m Matrix by which a is multiplied The result is added to current instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::solve</field>
    <field name="args">(Vect&lt; T_ &gt; &amp;b, bool fact=true)</field>
    <field name="url">classOFELI_1_1SkMatrix.html#a85abe8e904adb7fd09103d7b3e8e362d</field>
    <field name="keywords">solve OFELI::SkMatrix::solve SkMatrix&lt; T_ &gt;</field>
    <field name="text">Solve linear system The linear system having the current instance as a matrix is solved by using the LU decomposition Solution is thus realized after a factorization step and a forward/backward substitution step The factorization step is realized only if this was not already done Note that this function modifies the matrix contents is a factorization is performed Naturally if the the matrix has been modified after using this function the user has to refactorize it using the function setLU This is because the class has no non-expensive way to detect if the matrix has been modified The function setLU realizes the factorization step only b Vect instance that contains right-hand side on input and solution on output fact Set true if matrix is to be factorized Default value false if not 0 if solution was normally performed n if the n th pivot is null</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::operator+=</field>
    <field name="args">(const T_ &amp;x)</field>
    <field name="url">classOFELI_1_1SkMatrix.html#a8e773e1fe3dd5e4166bc9d9d38951f98</field>
    <field name="keywords">operator+= OFELI::SkMatrix::operator+= SkMatrix&lt; T_ &gt;</field>
    <field name="text">Operator Add constant value x to matrix entries</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::SkMatrix</field>
    <field name="args">(const vector&lt; size_t &gt; &amp;ColHt)</field>
    <field name="url">classOFELI_1_1SkMatrix.html#a93d87a9e770211f72722752a61c47c51</field>
    <field name="keywords">SkMatrix OFELI::SkMatrix::SkMatrix SkMatrix&lt; T_ &gt;</field>
    <field name="text">Constructor that initializes skyline structure of matrix using vector of column heights ColHt Vect instance that contains rows lengths of matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::get</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1SkMatrix.html#a9b901ab6d955335f6b9edcabbc59d1d1</field>
    <field name="keywords">get OFELI::SkMatrix::get SkMatrix&lt; T_ &gt;</field>
    <field name="text">Return C-Array Skyline of matrix is stored row by row</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::DiagPrescribe</field>
    <field name="args">(Mesh &amp;mesh, Vect&lt; T_ &gt; &amp;b, const Vect&lt; T_ &gt; &amp;u, int flag=0)</field>
    <field name="url">classOFELI_1_1SkMatrix.html#aa5995102f100c312e0addda0ac040bea</field>
    <field name="keywords">DiagPrescribe OFELI::SkMatrix::DiagPrescribe SkMatrix&lt; T_ &gt;</field>
    <field name="text">Impose an essential boundary condition This member function modifies diagonal terms in matrix and terms in vector that correspond to degrees of freedom with nonzero code in order to impose a boundary condition It can be modified by member function setPenal mesh Mesh instance from which information is extracted b Vect instance that contains right-hand side u Vect instance that conatins imposed valued at DOFs where they are to be imposed flag Parameter to determine whether only the right-hand side is to be modified dof 0 or both matrix and right-hand side dof 0 default value</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::operator()</field>
    <field name="args">(size_t i, size_t j)</field>
    <field name="url">classOFELI_1_1SkMatrix.html#aacbbe150d69a1246cb76f24419cae7ac</field>
    <field name="keywords">operator() OFELI::SkMatrix::operator() SkMatrix&lt; T_ &gt;</field>
    <field name="text">Operator Non constant version i Row index j Column index</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::Mult</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;x, Vect&lt; T_ &gt; &amp;y) const</field>
    <field name="url">classOFELI_1_1SkMatrix.html#abd45ada90fcf5f88e65ba7a50e36ce49</field>
    <field name="keywords">Mult OFELI::SkMatrix::Mult SkMatrix&lt; T_ &gt;</field>
    <field name="text">Multiply matrix by vector x and save in y x Vector to multiply by matrix y Vector that contains on output the result</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::setDiag</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1SkMatrix.html#ac4e475404ab75bd6cfe18a2aeb76a7de</field>
    <field name="keywords">setDiag OFELI::SkMatrix::setDiag SkMatrix&lt; T_ &gt;</field>
    <field name="text">Store diagonal entries in a separate internal vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::Axpy</field>
    <field name="args">(T_ a, const Matrix&lt; T_ &gt; *m)</field>
    <field name="url">classOFELI_1_1SkMatrix.html#ac7ecd57722b088d883cdb26ac2887270</field>
    <field name="keywords">Axpy OFELI::SkMatrix::Axpy SkMatrix&lt; T_ &gt;</field>
    <field name="text">Add to matrix the product of a matrix by a scalar a Scalar to premultiply m Matrix by which a is multiplied The result is added to current instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::~SkMatrix</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1SkMatrix.html#adab7bac07980d8559413234bab7609d2</field>
    <field name="keywords">OFELI::SkMatrix::~SkMatrix SkMatrix&lt; T_ &gt;</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::operator=</field>
    <field name="args">(const SkMatrix&lt; T_ &gt; &amp;m)</field>
    <field name="url">classOFELI_1_1SkMatrix.html#ae819a1ee11707c23d246440bd7e70b79</field>
    <field name="keywords">operator= OFELI::SkMatrix::operator= SkMatrix&lt; T_ &gt;</field>
    <field name="text">Operator Copy matrix m to current matrix instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::TMult</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;x, Vect&lt; T_ &gt; &amp;y) const</field>
    <field name="url">classOFELI_1_1SkMatrix.html#aedfc628db3de37e35aee052137aab9b3</field>
    <field name="keywords">TMult OFELI::SkMatrix::TMult SkMatrix&lt; T_ &gt;</field>
    <field name="text">Multiply transpose of matrix by vector x and save in y x Vector to multiply by matrix y Vector that contains on output the result</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::DiagPrescribe</field>
    <field name="args">(Vect&lt; T_ &gt; &amp;b, const Vect&lt; T_ &gt; &amp;u, int flag=0)</field>
    <field name="url">classOFELI_1_1SkMatrix.html#aef09987e0073d32aae2ea5dfeb7118ee</field>
    <field name="keywords">DiagPrescribe OFELI::SkMatrix::DiagPrescribe SkMatrix&lt; T_ &gt;</field>
    <field name="text">Impose an essential boundary condition using the Mesh instance provided by the constructor This member function modifies diagonal terms in matrix and terms in vector that correspond to degrees of freedom with nonzero code in order to impose a boundary condition It can be modified by member function setPenal b Vect instance that contains right-hand side u Vect instance that conatins imposed valued at DOFs where they are to be imposed flag Parameter to determine whether only the right-hand side is to be modified dof 0 or both matrix and right-hand side dof 0 default value</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkMatrix::MultAdd</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;x, Vect&lt; T_ &gt; &amp;y) const</field>
    <field name="url">classOFELI_1_1SkMatrix.html#af37985f443ba4d2746059438dfb62b6c</field>
    <field name="keywords">MultAdd OFELI::SkMatrix::MultAdd SkMatrix&lt; T_ &gt;</field>
    <field name="text">Multiply matrix by vector x and add to y x Vector to multiply by matrix y Vector to add to the result y contains on output the result</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::SkSMatrix</field>
    <field name="url">classOFELI_1_1SkSMatrix.html</field>
    <field name="keywords">SkSMatrix</field>
    <field name="text">To handle symmetric matrices in skyline storage format This template class allows storing and manipulating a symmetric matrix in skyline storage format The matrix entries are stored column by column as in the following example T_ Data type double float complex&lt;double&gt; Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::setMesh</field>
    <field name="args">(Mesh &amp;mesh, size_t dof=0)</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#a05b7680ed419a3422be7b7989f307496</field>
    <field name="keywords">setMesh OFELI::SkSMatrix::setMesh SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Determine mesh graph and initialize matrix This member function is called by constructor with the same arguments mesh Mesh instance for which matrix graph is determined dof Option parameter with default value 0 dof 1 means that only one degree of freedom for each node or element or side is taken to determine matrix structure The value dof 0 means that matrix structure is determined using all DOFs</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::setSkyline</field>
    <field name="args">(Mesh &amp;mesh)</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#a14401de6789a804fcdd361a71e475b22</field>
    <field name="keywords">setSkyline OFELI::SkSMatrix::setSkyline SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Determine matrix structure This member function calculates matrix structure using Mesh instance mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::SkSMatrix</field>
    <field name="args">(const SkSMatrix&lt; T_ &gt; &amp;m)</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#a1440fb43bd9362adbd384a4288af3c9c</field>
    <field name="keywords">SkSMatrix OFELI::SkSMatrix::SkSMatrix SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Copy Constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::get</field>
    <field name="args">(size_t i, size_t j) const</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#a173c0f972c4eeca07b426587bc2108e5</field>
    <field name="keywords">get OFELI::SkSMatrix::get SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Return entry i j of matrix if this one is stored 0 else</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::add</field>
    <field name="args">(size_t i, size_t j, const T_ &amp;val)</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#a17592a65d5fb95d42c07f724dabad759</field>
    <field name="keywords">add OFELI::SkSMatrix::add SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Add a constant to an entry of the matrix i Row index j Column index val Constant value to add to a(i,j)</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::set</field>
    <field name="args">(size_t i, T_ x)</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#a182f1806e243a5baed9d2e8a1c1ef067</field>
    <field name="keywords">set OFELI::SkSMatrix::set SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Assign a value to the i-th entry of C-array containing matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::SkSMatrix</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#a1b81e0076b8bd7858a43ce7c2e03d358</field>
    <field name="keywords">SkSMatrix OFELI::SkSMatrix::SkSMatrix SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Default constructor Initializes a zero-dimension matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::at</field>
    <field name="args">(size_t i, size_t j)</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#a276ea1877b89d46c32e207248a4573d7</field>
    <field name="keywords">at OFELI::SkSMatrix::at SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Return a value of a matrix entry i Row index starts at 1 j Column index starts at 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::solve</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;b, Vect&lt; T_ &gt; &amp;x, bool fact=true)</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#a27c662f32ce66be2efa47871358fcf10</field>
    <field name="keywords">solve OFELI::SkSMatrix::solve SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Solve linear system The linear system having the current instance as a matrix is solved by using the LDLt decomposition Solution is thus realized after a factorization step and a forward/backward substitution step The factorization step is realized only if this was not already done Note that this function modifies the matrix contents is a factorization is performed Naturally if the the matrix has been modified after using this function the user has to refactorize it using the function setLDLt This is because the class has no non-expensive way to detect if the matrix has been modified The function setLDLt realizes the factorization step only b Vect instance that contains right-hand side x Vect instance that contains solution fact Set true if matrix is to be factorized Default value false if not 0 if solution was normally performed n if the n th pivot is null</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::getColHeight</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#a35b05dbc139a5adf5a8311aa159a86ca</field>
    <field name="keywords">getColHeight OFELI::SkSMatrix::getColHeight SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Return column height Column height at entry i is returned</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::SkSMatrix</field>
    <field name="args">(const Vect&lt; size_t &gt; &amp;ColHt)</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#a3789d28aeabf8c861ca45985f524def0</field>
    <field name="keywords">SkSMatrix OFELI::SkSMatrix::SkSMatrix SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Constructor that initializes skyline structure of matrix using vector of column height ColHt Vect instance that contains rows lengths of matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::add</field>
    <field name="args">(size_t i, const T_ &amp;val)</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#a3c7b029cbe1aca9bea7623ae99274795</field>
    <field name="keywords">add OFELI::SkSMatrix::add SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Add val to entry i</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::get</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#a5aeba722bfc5e1d62b0e76fa41cfd15c</field>
    <field name="keywords">get OFELI::SkSMatrix::get SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Return C-Array Skyline of matrix is stored row by row</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::set</field>
    <field name="args">(size_t i, size_t j, const T_ &amp;val)</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#a61cf373a94a5fedbca306e016bc489c9</field>
    <field name="keywords">set OFELI::SkSMatrix::set SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Assign a value to an entry ofthe matrix i Row index j Column index val Value to assign to a(i,j)</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::getColumn</field>
    <field name="args">(size_t j) const</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#a633c03c1a0941387fce940cb18d6bb7c</field>
    <field name="keywords">getColumn OFELI::SkSMatrix::getColumn SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Get j th column vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::operator=</field>
    <field name="args">(const SkSMatrix&lt; T_ &gt; &amp;m)</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#a74000d9edd22aff51f32cf1f0c8b6a91</field>
    <field name="keywords">operator= OFELI::SkSMatrix::operator= SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Operator Copy matrix m to current matrix instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::MultAdd</field>
    <field name="args">(T_ a, const Vect&lt; T_ &gt; &amp;x, Vect&lt; T_ &gt; &amp;y) const</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#a7687aa6aa85cfe87635a1c3e56625876</field>
    <field name="keywords">MultAdd OFELI::SkSMatrix::MultAdd SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Multiply matrix by vector a*x and add to y a Constant to multiply by matrix x Vector to multiply by matrix y Vector to add to the result y contains on output the result</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::operator()</field>
    <field name="args">(size_t i, size_t j) const</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#a78adc6c13ad0f1d1dedacffe0e80ce63</field>
    <field name="keywords">operator() OFELI::SkSMatrix::operator() SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Operator Constant version i Row index j Column index</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::SkSMatrix</field>
    <field name="args">(const Vect&lt; size_t &gt; &amp;I, const Vect&lt; size_t &gt; &amp;J, int opt=1)</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#a7b5afee11238e2f6a4939a376a44db2f</field>
    <field name="keywords">SkSMatrix OFELI::SkSMatrix::SkSMatrix SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Constructor for a square matrix using non zero row and column indices I Vector containing row indices J Vector containing column indices opt Flag indicating if vectors I and J are cleaned and ordered opt 1 or not opt 0 In the latter case these vectors can contain the same contents more than once and are not necessarily ordered</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::solve</field>
    <field name="args">(Vect&lt; T_ &gt; &amp;b, bool fact=true)</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#a85abe8e904adb7fd09103d7b3e8e362d</field>
    <field name="keywords">solve OFELI::SkSMatrix::solve SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Solve linear system The linear system having the current instance as a matrix is solved by using the LDLt decomposition Solution is thus realized after a factorization step and a forward/backward substitution step The factorization step is realized only if this was not already done Note that this function modifies the matrix contents is a factorization is performed Naturally if the the matrix has been modified after using this function the user has to refactorize it using the function setLU This is because the class has no non-expensive way to detect if the matrix has been modified The function setLDLt realizes the factorization step only b Vect instance that contains right-hand side on input and solution on output fact Set true if matrix is to be factorized Default value false if not 0 if solution was normally performed n if the n th pivot is null</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::operator=</field>
    <field name="args">(const T_ &amp;x)</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#a8a74404e74116623de1c4846012b04ef</field>
    <field name="keywords">operator= OFELI::SkSMatrix::operator= SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Operator define the matrix as a diagonal one with all diagonal entries equal to x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::SkSMatrix</field>
    <field name="args">(size_t size, int is_diagonal=false)</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#a8e1479c625b5775da8680be39e249035</field>
    <field name="keywords">SkSMatrix OFELI::SkSMatrix::SkSMatrix SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Constructor that initializes a dense symmetric matrix Normally for a dense matrix this is not the right class size Number of matrix rows and columns is_diagonal Boolean to select if the matrix is diagonal or not Default false</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::operator*=</field>
    <field name="args">(const T_ &amp;x)</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#aa2636cc53ce5064c413fd9f7b9e88292</field>
    <field name="keywords">operator*= OFELI::SkSMatrix::operator*= SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Operator Premultiply matrix entries by constant value x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::SkSMatrix</field>
    <field name="args">(Mesh &amp;mesh, size_t dof=0, int is_diagonal=false)</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#aa6fa7d9d64e43cfe1da5110640f08296</field>
    <field name="keywords">SkSMatrix OFELI::SkSMatrix::SkSMatrix SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Constructor using mesh to initialize skyline structure of matrix mesh Mesh instance for which matrix graph is determined dof Option parameter with default value 0 dof 1 means that only one degree of freedom for each node or element or side is taken to determine matrix structure The value dof 0 means that matrix structure is determined using all DOFs is_diagonal Boolean argument to say is the matrix is actually a diagonal matrix or not</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::operator()</field>
    <field name="args">(size_t i, size_t j)</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#aacbbe150d69a1246cb76f24419cae7ac</field>
    <field name="keywords">operator() OFELI::SkSMatrix::operator() SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Operator Non constant version i Row index j Column index To modify a value of an entry of the matrix it is safer not to modify both lower and upper triangles Otherwise wrong values will be assigned If not sure use the member functions set or add</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::solveLDLt</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;b, Vect&lt; T_ &gt; &amp;x)</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#aaf2ee5f7eb7b4983e890c96ae05b920d</field>
    <field name="keywords">solveLDLt OFELI::SkSMatrix::solveLDLt SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Solve a linear system using the LDLt Crout factorization This function solves a linear system The LDLt factorization is performed if this was not already done using the function setLU b Vect instance that contains right-hand side x Vect instance that contains solution 0 if solution was normally performed n if the n th pivot is null Solution is performed only is factorization has previouly been invoked</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::getRow</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#ab003b67a3b106d85cfba3a314f5c6f5b</field>
    <field name="keywords">getRow OFELI::SkSMatrix::getRow SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Get i th row vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::Mult</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;x, Vect&lt; T_ &gt; &amp;y) const</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#abd45ada90fcf5f88e65ba7a50e36ce49</field>
    <field name="keywords">Mult OFELI::SkSMatrix::Mult SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Multiply matrix by vector x and save in y x Vector to multiply by matrix y Vector that contains on output the result</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::operator+=</field>
    <field name="args">(const SkSMatrix&lt; T_ &gt; &amp;m)</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#abedc68f5d6a8c574ff3e88af6d2fc33c</field>
    <field name="keywords">operator+= OFELI::SkSMatrix::operator+= SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Operator Add matrix m to current matrix instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::setDiag</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#ac4e475404ab75bd6cfe18a2aeb76a7de</field>
    <field name="keywords">setDiag OFELI::SkSMatrix::setDiag SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Store diagonal entries in a separate internal vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::Axpy</field>
    <field name="args">(T_ a, const Matrix&lt; T_ &gt; *m)</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#ac7ecd57722b088d883cdb26ac2887270</field>
    <field name="keywords">Axpy OFELI::SkSMatrix::Axpy SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Add to matrix the product of a matrix by a scalar a Scalar to premultiply m Pointer to Matrix by which a is multiplied The result is added to current instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::setLDLt</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#ad177e53c00ddc5579499a4ae8a67c1ac</field>
    <field name="keywords">setLDLt OFELI::SkSMatrix::setLDLt SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Factorize matrix LDLt Crout factorization 0 if factorization was normally performed n if the n th pivot is null</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::Axpy</field>
    <field name="args">(T_ a, const SkSMatrix&lt; T_ &gt; &amp;m)</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#ad89d396e1c670020c251bdb836299de2</field>
    <field name="keywords">Axpy OFELI::SkSMatrix::Axpy SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Add to matrix the product of a matrix by a scalar a Scalar to premultiply m Matrix by which a is multiplied The result is added to current instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::SkSMatrix</field>
    <field name="args">(const Vect&lt; size_t &gt; &amp;I, const Vect&lt; size_t &gt; &amp;J, const Vect&lt; T_ &gt; &amp;a, int opt=1)</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#ae506615d68e408006353b7608a2720fc</field>
    <field name="keywords">SkSMatrix OFELI::SkSMatrix::SkSMatrix SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Constructor for a square matrix using non zero row and column indices I Vector containing row indices J Vector containing column indices a Vector containing matrix entries in the same order than the one given by I and J opt Flag indicating if vectors I and J are cleaned and ordered opt 1 or not opt 0 In the latter case these vectors can contain the same contents more than once and are not necessarily ordered</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::TMult</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;x, Vect&lt; T_ &gt; &amp;y) const</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#aedfc628db3de37e35aee052137aab9b3</field>
    <field name="keywords">TMult OFELI::SkSMatrix::TMult SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Multiply transpose of matrix by vector x and save in y x Vector to multiply by matrix y Vector that contains on output the result</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::MultAdd</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;x, Vect&lt; T_ &gt; &amp;y) const</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#af37985f443ba4d2746059438dfb62b6c</field>
    <field name="keywords">MultAdd OFELI::SkSMatrix::MultAdd SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Multiply matrix by vector x and add to y x Vector to multiply by matrix y Vector to add to the result y contains on output the result</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SkSMatrix::~SkSMatrix</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1SkSMatrix.html#af800dc68435bdd29c56403ee03a5e2f1</field>
    <field name="keywords">OFELI::SkSMatrix::~SkSMatrix SkSMatrix&lt; T_ &gt;</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::SpMatrix</field>
    <field name="url">classOFELI_1_1SpMatrix.html</field>
    <field name="keywords">SpMatrix SpMatrix&lt; real_t &gt;</field>
    <field name="text">To handle matrices in sparse storage format This template class enables storing and manipulating a sparse matrix i.e only nonzero terms are stored Internally the matrix is stored as a vector instance and uses for the definition of its graph a Vect&lt;size_t&gt; instance row_ptr and a Vect&lt;size_t&gt; instance col_ind that contains respectively addresses of first element of each row and column indices To illustrate this consider the matrix Such a matrix is stored in the vector&lt;real_t&gt; instance 1 2 3 4 5 The vectors row_ptr and col_ind are respectively 0 2 4 5 1 2 1 2 2 When the library eigen is used in conjunction with OFELI the class uses the sparse matrix class of eigen and enables then access to specific solvers see class LinearSolver T_ Data type double float complex&lt;double&gt; Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Sphere</field>
    <field name="url">classOFELI_1_1Sphere.html</field>
    <field name="keywords">Sphere</field>
    <field name="text">To store and treat a sphere</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Sphere::operator+=</field>
    <field name="args">(real_t a)</field>
    <field name="url">classOFELI_1_1Sphere.html#a01f23ae131d22d904e49b65972c75d9a</field>
    <field name="keywords">operator+= OFELI::Sphere::operator+= Sphere</field>
    <field name="text">Operator Scale sphere by a factor a</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Sphere::operator+=</field>
    <field name="args">(Point&lt; real_t &gt; a)</field>
    <field name="url">classOFELI_1_1Sphere.html#a18efc9650900a1d20f7428058a65d89f</field>
    <field name="keywords">operator+= OFELI::Sphere::operator+= Sphere</field>
    <field name="text">Operator Translate sphere by a vector a</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Sphere::getSignedDistance</field>
    <field name="args">(const Grid &amp;g, Vect&lt; real_t &gt; &amp;d) const</field>
    <field name="url">classOFELI_1_1Sphere.html#a2252be7c4949c4a2bd3ee24a4fdfd722</field>
    <field name="keywords">getSignedDistance OFELI::Sphere::getSignedDistance Sphere</field>
    <field name="text">Calculate signed distance to current figure with respect to grid points g Grid instance d Vect instance containing calculated distance from each grid index to Figure Vector d doesn t need to be sized before invoking this function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Sphere::Sphere</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Sphere.html#a252f24bfb04481b0dbfbf734b492c436</field>
    <field name="keywords">Sphere OFELI::Sphere::Sphere Sphere</field>
    <field name="text">Default construcor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Sphere::getCenter</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Sphere.html#a29518c54ba3a66576ee2859724fc88cd</field>
    <field name="keywords">getCenter OFELI::Sphere::getCenter Sphere</field>
    <field name="text">Return coordinates of center of sphere</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Sphere::getSignedDistance</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;p) const</field>
    <field name="url">classOFELI_1_1Sphere.html#a59bcb59a9fd6e717fa480630c7d3b57a</field>
    <field name="keywords">getSignedDistance OFELI::Sphere::getSignedDistance Sphere</field>
    <field name="text">Return signed distance from a given point to current figure p Point instance from which distance is computed</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Sphere::getSignedDistance</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;p) const</field>
    <field name="url">classOFELI_1_1Sphere.html#a6c92f703c9cacfbfc0158713655d844a</field>
    <field name="keywords">getSignedDistance OFELI::Sphere::getSignedDistance Sphere</field>
    <field name="text">Return signed distance of a given point from the current sphere The computed distance is negative if p lies in the ball positive if it is outside and 0 on the sphere p Point&lt;double&gt; instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Sphere::getRadius</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Sphere.html#a7e3025b296591c318448860022ff3953</field>
    <field name="keywords">getRadius OFELI::Sphere::getRadius Sphere</field>
    <field name="text">Return radius of sphere</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Sphere::setCenter</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;c)</field>
    <field name="url">classOFELI_1_1Sphere.html#a9491188c2ff473596d71fc71149ddaa7</field>
    <field name="keywords">setCenter OFELI::Sphere::setCenter Sphere</field>
    <field name="text">Assign coordinates of center of sphere</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Sphere::Sphere</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;c, real_t r, int code=1)</field>
    <field name="url">classOFELI_1_1Sphere.html#ab30812eaff60583e05a9999cf99cd4c8</field>
    <field name="keywords">Sphere OFELI::Sphere::Sphere Sphere</field>
    <field name="text">Constructor c Coordinates of center of sphere r Radius code Code to assign to the generated sphere Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Sphere::setRadius</field>
    <field name="args">(real_t r)</field>
    <field name="url">classOFELI_1_1Sphere.html#af9771f0cb4dc4e26c459bb953122913c</field>
    <field name="keywords">setRadius OFELI::Sphere::setRadius Sphere</field>
    <field name="text">Assign radius of sphere</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::SteklovPoincare2DBE</field>
    <field name="url">classOFELI_1_1SteklovPoincare2DBE.html</field>
    <field name="keywords">SteklovPoincare2DBE</field>
    <field name="text">Solver of the Steklov Poincare problem in 2 D geometries using piecewie constant boundary elemen SteklovPoincare2DBE solves the Steklov Poincare problem in 2 D Given the trace of a harmonic function on the boundary of a given inner or outer domain this class computes the normal derivative of the function The normal is considered as oriented out of the bounded inner domain in both inner and outer configurations The numerical approximation uses piecewise constant P 0 approximation on edges of the boundary Solution is obtained from the GMRES iterative solver without preconditioning The given data is the vector instance of class Vect of piecewise constant values of the harmonic function on the boundary and the returned solution is piecewise constant value of the normal derivative considered either as a Vect instance Although the mesh of the inner domain is not necessary to solve the problem this one must be provided in order to calculate the outward normal Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SteklovPoincare2DBE::setMesh</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1SteklovPoincare2DBE.html#a183a0f831838eaca359bbdfcd0747f80</field>
    <field name="keywords">setMesh OFELI::SteklovPoincare2DBE::setMesh SteklovPoincare2DBE</field>
    <field name="text">set Mesh instance ms Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SteklovPoincare2DBE::SteklovPoincare2DBE</field>
    <field name="args">(Mesh &amp;ms, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1SteklovPoincare2DBE.html#a44edfd175737f88cc2ffb18b6f720a8b</field>
    <field name="keywords">SteklovPoincare2DBE OFELI::SteklovPoincare2DBE::SteklovPoincare2DBE SteklovPoincare2DBE</field>
    <field name="text">Constructor that solves the Steklov Poincare problem This constructor calls member function setMesh and Solve ms Reference to mesh instance u Reference to solution vector It contains the solution normal derivative on boundary once problem is solved</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SteklovPoincare2DBE::setExterior</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1SteklovPoincare2DBE.html#a470c1c59bcfde3b229222678f54fa05d</field>
    <field name="keywords">setExterior OFELI::SteklovPoincare2DBE::setExterior SteklovPoincare2DBE</field>
    <field name="text">Choose domain of the Laplace equation as exterior one By default the domain where the Laplace equation is considered is the interior domain i.e bounded This function chooses the exterior of a bounded domain</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SteklovPoincare2DBE::run</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1SteklovPoincare2DBE.html#a58e8be2db2660128e4e6456a9c981fb5</field>
    <field name="keywords">run OFELI::SteklovPoincare2DBE::run SteklovPoincare2DBE</field>
    <field name="text">Solve Setklov-Poincare problem This member function builds and solves the Steklov-Poincare equation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SteklovPoincare2DBE::~SteklovPoincare2DBE</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1SteklovPoincare2DBE.html#a5bc602898b0a53cc28d215b5087d2fce</field>
    <field name="keywords">OFELI::SteklovPoincare2DBE::~SteklovPoincare2DBE SteklovPoincare2DBE</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SteklovPoincare2DBE::SteklovPoincare2DBE</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1SteklovPoincare2DBE.html#af50519fbbf21e19291ca7d5817f74a2a</field>
    <field name="keywords">SteklovPoincare2DBE OFELI::SteklovPoincare2DBE::SteklovPoincare2DBE SteklovPoincare2DBE</field>
    <field name="text">Default Constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SteklovPoincare2DBE::SteklovPoincare2DBE</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1SteklovPoincare2DBE.html#afbf1c4e9d15965e22d9aa8f920310b91</field>
    <field name="keywords">SteklovPoincare2DBE OFELI::SteklovPoincare2DBE::SteklovPoincare2DBE SteklovPoincare2DBE</field>
    <field name="text">Constructor using mesh data ms Reference to Mesh instance</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::TINS2DT3S</field>
    <field name="url">classOFELI_1_1TINS2DT3S.html</field>
    <field name="keywords">TINS2DT3S</field>
    <field name="text">Builds finite element arrays for transient incompressible fluid flow using Navier-Stokes equations in 2 D domains Numerical approximation uses stabilized 3 node triangle finite elements for velocity and pressure 2 nd-order projection scheme is used for time integration Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TINS2DT3S::TINS2DT3S</field>
    <field name="args">(Mesh &amp;mesh)</field>
    <field name="url">classOFELI_1_1TINS2DT3S.html#a37d7b46807382a4f7caa8ee20727cb79</field>
    <field name="keywords">TINS2DT3S OFELI::TINS2DT3S::TINS2DT3S TINS2DT3S</field>
    <field name="text">Constructor using mesh mesh Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TINS2DT3S::run</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1TINS2DT3S.html#a58e8be2db2660128e4e6456a9c981fb5</field>
    <field name="keywords">run OFELI::TINS2DT3S::run TINS2DT3S</field>
    <field name="text">Run in the case of one step run</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TINS2DT3S::TINS2DT3S</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1TINS2DT3S.html#a81d968746b999b53b67c2753b6a4f56b</field>
    <field name="keywords">TINS2DT3S OFELI::TINS2DT3S::TINS2DT3S TINS2DT3S</field>
    <field name="text">Default Constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TINS2DT3S::runOneTimeStep</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1TINS2DT3S.html#a97ceb92f009f5eee1340388708fd5939</field>
    <field name="keywords">runOneTimeStep OFELI::TINS2DT3S::runOneTimeStep TINS2DT3S</field>
    <field name="text">Run one time step</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TINS2DT3S::TINS2DT3S</field>
    <field name="args">(Mesh &amp;mesh, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1TINS2DT3S.html#ab5a4345f88e7cf7163b09631696487c0</field>
    <field name="keywords">TINS2DT3S OFELI::TINS2DT3S::TINS2DT3S TINS2DT3S</field>
    <field name="text">Constructor using mesh and velocity mesh Mesh instance u Vect instance containing initial velocity This vector is updated during computations and will therefore contain velocity at each time step</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TINS2DT3S::~TINS2DT3S</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1TINS2DT3S.html#ae48c1d7b75a5711a4ba2f7ab39f7ebcf</field>
    <field name="keywords">OFELI::TINS2DT3S::~TINS2DT3S TINS2DT3S</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TINS2DT3S::setInput</field>
    <field name="args">(EType opt, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1TINS2DT3S.html#affbdc0fae478891f2b9f63607004026f</field>
    <field name="keywords">setInput OFELI::TINS2DT3S::setInput TINS2DT3S</field>
    <field name="text">Set equation input data opt Parameter to select type of input enumerated values INITIAL Initial temperature BOUNDARY_CONDITION Boundary condition Dirichlet SOURCE Body force applied to fluid TRACTION Heat flux Neumann boundary condition VELOCITY Velocity vector for the convection term u Vector containing input data Vect instance</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::TINS3DT4S</field>
    <field name="url">classOFELI_1_1TINS3DT4S.html</field>
    <field name="keywords">TINS3DT4S</field>
    <field name="text">Builds finite element arrays for transient incompressible fluid flow using Navier-Stokes equations in 3 D domains Numerical approximation uses stabilized 4 node tatrahedral finite elements for velocity and pressure 2 nd-order projection scheme is used for time integration Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TINS3DT4S::TINS3DT4S</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1TINS3DT4S.html#a09d66587846a94edb0578fb1250f3b7f</field>
    <field name="keywords">TINS3DT4S OFELI::TINS3DT4S::TINS3DT4S TINS3DT4S</field>
    <field name="text">Constructor using mesh ms Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TINS3DT4S::~TINS3DT4S</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1TINS3DT4S.html#a557a93fc3a7a3e72dc95556446d26913</field>
    <field name="keywords">OFELI::TINS3DT4S::~TINS3DT4S TINS3DT4S</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TINS3DT4S::run</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1TINS3DT4S.html#a58e8be2db2660128e4e6456a9c981fb5</field>
    <field name="keywords">run OFELI::TINS3DT4S::run TINS3DT4S</field>
    <field name="text">Run in the case of one step run</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TINS3DT4S::TINS3DT4S</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1TINS3DT4S.html#a6199e16135b509746a6b40773ab8c2e0</field>
    <field name="keywords">TINS3DT4S OFELI::TINS3DT4S::TINS3DT4S TINS3DT4S</field>
    <field name="text">Default Constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TINS3DT4S::runOneTimeStep</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1TINS3DT4S.html#a97ceb92f009f5eee1340388708fd5939</field>
    <field name="keywords">runOneTimeStep OFELI::TINS3DT4S::runOneTimeStep TINS3DT4S</field>
    <field name="text">Run one time step</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TINS3DT4S::TINS3DT4S</field>
    <field name="args">(Mesh &amp;ms, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1TINS3DT4S.html#aecfc4d63501c8f2d12b8f3c2ee55e351</field>
    <field name="keywords">TINS3DT4S OFELI::TINS3DT4S::TINS3DT4S TINS3DT4S</field>
    <field name="text">Constructor using mesh and velocity ms Mesh instance u Vect instance containing initial velocity This vector is updated during computations and will therefore contain velocity at each time step</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TINS3DT4S::setInput</field>
    <field name="args">(EType opt, Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1TINS3DT4S.html#affbdc0fae478891f2b9f63607004026f</field>
    <field name="keywords">setInput OFELI::TINS3DT4S::setInput TINS3DT4S</field>
    <field name="text">Set equation input data opt Parameter to select type of input enumerated values INITIAL Initial temperature BOUNDARY_CONDITION_DATA Boundary condition Dirichlet SOURCE Heat source FLUX Heat flux Neumann boundary condition NOT IMPLEMENTED VELOCITY Velocity vector for the convection term u Vector containing input data Vect instance</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Tabulation</field>
    <field name="url">classOFELI_1_1Tabulation.html</field>
    <field name="keywords">Tabulation</field>
    <field name="text">To read and manipulate tabulated functions This class enables reading a tabulated function of one to three variables and calculating the value of the function using piecewise multilinear interpolation The file defining the function is an XML file where any function is introduced via the tag The abcissae are uniformly distributed Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Tetra4</field>
    <field name="url">classOFELI_1_1Tetra4.html</field>
    <field name="keywords">Tetra4</field>
    <field name="text">Defines a three-dimensional 4 node tetrahedral finite element using P 1 interpolation The reference element is the right tetrahedron with four unit edges interpolation Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Tetra4::CurlEdgeSh</field>
    <field name="args">(size_t k)</field>
    <field name="url">classOFELI_1_1Tetra4.html#a038469b94d6794ed525ba701dd35f5ad</field>
    <field name="keywords">CurlEdgeSh OFELI::Tetra4::CurlEdgeSh Tetra4</field>
    <field name="text">Return curl of edge shape function k Local edge number for which the curl of the edge shape function is computed Element edges are ordered as follows Edge k has end vertices k and k+1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Tetra4::EdgeSh</field>
    <field name="args">(size_t k, Point&lt; real_t &gt; s)</field>
    <field name="url">classOFELI_1_1Tetra4.html#a252979c72d219f08314466b17c9f39f4</field>
    <field name="keywords">EdgeSh OFELI::Tetra4::EdgeSh Tetra4</field>
    <field name="text">Return edge shape function k Local edge number for which the edge shape function is computed s Local coordinates in element Element edges are ordered as follows Edge k has end vertices k and k+1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Tetra4::getMaxEdgeLength</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Tetra4.html#a25ca31b393289f740e8ed58b06a30cd3</field>
    <field name="keywords">getMaxEdgeLength OFELI::Tetra4::getMaxEdgeLength Tetra4</field>
    <field name="text">Return maximal edge length of tetrahedron</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Tetra4::getMinEdgeLength</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Tetra4.html#a3b36d8923b27960cb53038075675ebaf</field>
    <field name="keywords">getMinEdgeLength OFELI::Tetra4::getMinEdgeLength Tetra4</field>
    <field name="text">Return minimal edge length of tetrahedron</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Tetra4::isIn</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;x)</field>
    <field name="url">classOFELI_1_1Tetra4.html#a497b1ac36e44c874a349867507206f25</field>
    <field name="keywords">isIn OFELI::Tetra4::isIn Tetra4</field>
    <field name="text">Check whether point x is in current tetrahedron or not</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Tetra4::set</field>
    <field name="args">(const Element *el)</field>
    <field name="url">classOFELI_1_1Tetra4.html#a578b9f2f623966f955548e89ccce995a</field>
    <field name="keywords">set OFELI::Tetra4::set Tetra4</field>
    <field name="text">Choose element by giving its pointer</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Tetra4::getVolume</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Tetra4.html#a7cbc8fa823dc83faf16d73ae42773086</field>
    <field name="keywords">getVolume OFELI::Tetra4::getVolume Tetra4</field>
    <field name="text">Return volume of element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Tetra4::Tetra4</field>
    <field name="args">(const Element *el)</field>
    <field name="url">classOFELI_1_1Tetra4.html#a9be934f7aa82f874efa8abb69f925b8d</field>
    <field name="keywords">Tetra4 OFELI::Tetra4::Tetra4 Tetra4</field>
    <field name="text">Constructor when data of Element el are given</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Tetra4::getRefCoord</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;x) const</field>
    <field name="url">classOFELI_1_1Tetra4.html#abff50ca550f56e9a0468549a7081df4c</field>
    <field name="keywords">getRefCoord OFELI::Tetra4::getRefCoord Tetra4</field>
    <field name="text">Return reference coordinates of a point x in element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Tetra4::~Tetra4</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Tetra4.html#acf0682cace284156dcbc3f9c45062241</field>
    <field name="keywords">OFELI::Tetra4::~Tetra4 Tetra4</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Tetra4::getInterpolate</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;x, const LocalVect&lt; real_t, 4 &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1Tetra4.html#aef402685d6ed44658eb81625bd9e4cd2</field>
    <field name="keywords">getInterpolate OFELI::Tetra4::getInterpolate Tetra4</field>
    <field name="text">Return interpolated value at point of coordinate x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Tetra4::Sh</field>
    <field name="args">(size_t i, Point&lt; real_t &gt; s) const</field>
    <field name="url">classOFELI_1_1Tetra4.html#af47800ddf6fa7dab39666cb7ce85d7ba</field>
    <field name="keywords">Sh OFELI::Tetra4::Sh Tetra4</field>
    <field name="text">Calculate shape function of node i at a given point s s is a point in the reference tetrahedron</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Tetra4::DSh</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Tetra4.html#afc7413cec298fd773445dc1ef45d8b21</field>
    <field name="keywords">DSh OFELI::Tetra4::DSh Tetra4</field>
    <field name="text">Calculate partial derivatives of shape functions at element nodes Vector of partial derivatives of shape functions e.g dsh i-1 x dsh i-1 y are partial derivatives of the i th shape function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Tetra4::Tetra4</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Tetra4.html#afda2840deb189b3ccb3feb1856358935</field>
    <field name="keywords">Tetra4 OFELI::Tetra4::Tetra4 Tetra4</field>
    <field name="text">Default Constructor</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::TimeStepping</field>
    <field name="url">classOFELI_1_1TimeStepping.html</field>
    <field name="keywords">TimeStepping</field>
    <field name="text">To solve time stepping problems i.e systems of linear ordinary differential equations of the form A2 y A1 y A0 y b Rachid Touzani GNU Lesser Public License Features The system may be first or second order first and/or second order time derivatives The following time integration schemes can be used For first order systems The following schemes are implemented Forward Euler value FORWARD_EULER Backward Euler value BACKWARD_EULER Crank-Nicolson value CRANK_NICOLSON Heun value HEUN 2 nd Order Adams-Bashforth value AB2 4 th order Runge-Kutta value RK4 2 nd order Backward Differentiation Formula value BDF2 For second order systems The following schemes are implemented Newmark value NEWMARK</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TimeStepping::setLinearSolver</field>
    <field name="args">(Iteration s=DIRECT_SOLVER, Preconditioner p=DIAG_PREC)</field>
    <field name="url">classOFELI_1_1TimeStepping.html#a03025e97482684280a54df4817908825</field>
    <field name="keywords">setLinearSolver OFELI::TimeStepping::setLinearSolver TimeStepping</field>
    <field name="text">Set linear solver data s Solver identification parameter To be chosen in the enumeration variable Iteration DIRECT_SOLVER CG_SOLVER CGS_SOLVER BICG_SOLVER BICG_STAB_SOLVER GMRES_SOLVER QMR_SOLVER Default DIRECT_SOLVER p Preconditioner identification parameter To be chosen in the enumeration variable Preconditioner IDENT_PREC DIAG_PREC ILU_PREC Default DIAG_PREC The argument p has no effect if the solver is DIRECT_SOLVER</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TimeStepping::setNewmarkParameters</field>
    <field name="args">(real_t beta, real_t gamma)</field>
    <field name="url">classOFELI_1_1TimeStepping.html#a0af28f955ff37f212996f60348fd0385</field>
    <field name="keywords">setNewmarkParameters OFELI::TimeStepping::setNewmarkParameters TimeStepping</field>
    <field name="text">Define parameters for the Newmark scheme beta Parameter beta Default 0.25 gamma Parameter gamma Default 0.5</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TimeStepping::SAssembly</field>
    <field name="args">(const Side &amp;sd, real_t *b, real_t *A=nullptr)</field>
    <field name="url">classOFELI_1_1TimeStepping.html#a109a9cc4bff9dfa026d796527fd050d0</field>
    <field name="keywords">SAssembly OFELI::TimeStepping::SAssembly TimeStepping</field>
    <field name="text">Assemble side arrays into global matrix and right-hand side This member function is to be called from finite element equation classes sd Reference to Side class b Pointer to side right-hand side A Pointer to matrix Default nullptr</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TimeStepping::~TimeStepping</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1TimeStepping.html#a153397546fc84bd8fbb0bb428225dec6</field>
    <field name="keywords">OFELI::TimeStepping::~TimeStepping TimeStepping</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TimeStepping::setRK3_TVDRHS</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1TimeStepping.html#a1b036e819127321d9d992f5433e4369a</field>
    <field name="keywords">setRK3_TVDRHS OFELI::TimeStepping::setRK3_TVDRHS TimeStepping</field>
    <field name="text">Set intermediate right-hand side vector for the TVD Runge-Kutta 3 method f Vector containing the RHS</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TimeStepping::setRHS</field>
    <field name="args">(string exp)</field>
    <field name="url">classOFELI_1_1TimeStepping.html#a30cca14a1350e506dc153935fbf3997d</field>
    <field name="keywords">setRHS OFELI::TimeStepping::setRHS TimeStepping</field>
    <field name="text">Set right-hand side as defined by a regular expression exp Regular expression as a function of x y z and t</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TimeStepping::TimeStepping</field>
    <field name="args">(TimeScheme s, real_t time_step=theTimeStep, real_t final_time=theFinalTime)</field>
    <field name="url">classOFELI_1_1TimeStepping.html#a335d4d37e68b7dc2cc5ae456bcb9eaf6</field>
    <field name="keywords">TimeStepping OFELI::TimeStepping::TimeStepping TimeStepping</field>
    <field name="text">Constructor using time discretization data s Choice of the scheme To be chosen in the enumerated variable TimeScheme see the presentation of the class time_step Value of the time step This value will be modified if an adaptive method is used The default value for this parameter if the value given by the global variable theTimeStep final_time Value of the final time time starts at 0 The default value for this parameter is the value given by the global variable theFinalTime</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TimeStepping::setRHS</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;b)</field>
    <field name="url">classOFELI_1_1TimeStepping.html#a4dcc6c83ae5f9c7a958e9ba081f8eeb6</field>
    <field name="keywords">setRHS OFELI::TimeStepping::setRHS TimeStepping</field>
    <field name="text">Set right-hand side vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TimeStepping::set</field>
    <field name="args">(TimeScheme s, real_t time_step=theTimeStep, real_t final_time=theFinalTime)</field>
    <field name="url">classOFELI_1_1TimeStepping.html#a584a3841c197ddb1ec0494389823d561</field>
    <field name="keywords">set OFELI::TimeStepping::set TimeStepping</field>
    <field name="text">Define data of the differential equation or system s Choice of the scheme To be chosen in the enumerated variable TimeScheme see the presentation of the class time_step Value of the time step This value will be modified if an adaptive method is used The default value for this parameter if the value given by the global variable theTimeStep final_time Value of the final time time starts at 0 The default value for this parameter is the value given by the global variable theFinalTime</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TimeStepping::setPDE</field>
    <field name="args">(Equa &amp;eq, bool nl=false)</field>
    <field name="url">classOFELI_1_1TimeStepping.html#a5f289a3c4ea8e816689810ed2659f520</field>
    <field name="keywords">setPDE OFELI::TimeStepping::setPDE TimeStepping</field>
    <field name="text">Define partial differential equation to solve The used equation class must have been constructed using the Mesh instance eq Reference to equation instance nl Toggle to say if the considered equation is linear Default 0 or not</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TimeStepping::TimeStepping</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1TimeStepping.html#a8538d4e23d3050073bd6cfc946a9b4e3</field>
    <field name="keywords">TimeStepping OFELI::TimeStepping::TimeStepping TimeStepping</field>
    <field name="text">Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TimeStepping::setInitialRHS</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1TimeStepping.html#a9b86e899eb64ac7c5d3716f3d20c2bb2</field>
    <field name="keywords">setInitialRHS OFELI::TimeStepping::setInitialRHS TimeStepping</field>
    <field name="text">Set initial RHS for a system of differential equations when the used scheme requires it Giving the right-hand side at initial time is somtimes required for high order methods like Runge-Kutta f Vector containing right-hand side at initial time This vector is helpful for high order methods This function can be used to provide solution at previous time step if a restarting procedure is used</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TimeStepping::setRK4RHS</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;f)</field>
    <field name="url">classOFELI_1_1TimeStepping.html#aa7e53c44ddd0bfff4147278d5c15f3a3</field>
    <field name="keywords">setRK4RHS OFELI::TimeStepping::setRK4RHS TimeStepping</field>
    <field name="text">Set intermediate right-hand side vector for the Runge-Kutta method f Vector containing the RHS</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TimeStepping::getLSolver</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1TimeStepping.html#ab16f3efb733621d8147325ddc52fff1f</field>
    <field name="keywords">getLSolver OFELI::TimeStepping::getLSolver TimeStepping</field>
    <field name="text">Return LinearSolver instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TimeStepping::run</field>
    <field name="args">(bool opt=false)</field>
    <field name="url">classOFELI_1_1TimeStepping.html#ab174fb4127d2dfb1b5e0d57b9e40b617</field>
    <field name="keywords">run OFELI::TimeStepping::run TimeStepping</field>
    <field name="text">Run the time stepping procedure opt Flag to say if problem matrix is constant while time stepping true or not Default value is false This argument is not used if the time stepping scheme is explicit</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TimeStepping::Assembly</field>
    <field name="args">(const Element &amp;el, real_t *b, real_t *A0, real_t *A1, real_t *A2=nullptr)</field>
    <field name="url">classOFELI_1_1TimeStepping.html#ab858796571d89a61c76ee2083477dbd7</field>
    <field name="keywords">Assembly OFELI::TimeStepping::Assembly TimeStepping</field>
    <field name="text">Assemble element arrays into global matrix and right-hand side This member function is to be called from finite element equation classes el Reference to Element class b Pointer to element right-hand side A0 Pointer to matrix of 0 th order term involving no time derivative A1 Pointer to matrix of first order term involving time first derivative A2 Pointer to matrix of second order term involving time second derivative Default nullptr</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TimeStepping::setBC</field>
    <field name="args">(int code, string exp)</field>
    <field name="url">classOFELI_1_1TimeStepping.html#ac6a1a8e58baa5ff4c9b4b69478984ca4</field>
    <field name="keywords">setBC OFELI::TimeStepping::setBC TimeStepping</field>
    <field name="text">Set boundary condition as defined by a regular expression code Code for which expression is assigned exp Regular expression to assign as a function of x y z and t</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TimeStepping::setBC</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1TimeStepping.html#ac71c03356896fe7ff3355c8bfdbca881</field>
    <field name="keywords">setBC OFELI::TimeStepping::setBC TimeStepping</field>
    <field name="text">Set vector containing boundary condition to enforce</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TimeStepping::setInitial</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;u, Vect&lt; real_t &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1TimeStepping.html#ac7c3734ad9c03eadfe2287c18de39945</field>
    <field name="keywords">setInitial OFELI::TimeStepping::setInitial TimeStepping</field>
    <field name="text">Set initial condition for a system of differential equations u Vector containing initial condition for the unknown v Vector containing initial condition for the time derivative of the unknown This function can be used to provide solution at previous time step if a restarting procedure is used This member function is to be used only in the case of a second order system</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TimeStepping::setNLTerm0</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;a0, Matrix&lt; real_t &gt; &amp;A0)</field>
    <field name="url">classOFELI_1_1TimeStepping.html#ac813a41f1f5c3d248cba17a2bf55159a</field>
    <field name="keywords">setNLTerm0 OFELI::TimeStepping::setNLTerm0 TimeStepping</field>
    <field name="text">Set vectors defining a nonlinear first order system of ODEs The ODE system has the form a1(u) a0(u) 0 a0 Reference to Vect instance defining the 0 th order term A0 Reference to Matrix instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TimeStepping::setConstantMatrix</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1TimeStepping.html#ad0b215af0339c42514f036bf711ffffd</field>
    <field name="keywords">setConstantMatrix OFELI::TimeStepping::setConstantMatrix TimeStepping</field>
    <field name="text">Say that matrix problem is constant This is useful if the linear system is solved by a factorization method but has no effect otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TimeStepping::setNonConstantMatrix</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1TimeStepping.html#ad0f5cc02d42fd6d2c81ef09d85671670</field>
    <field name="keywords">setNonConstantMatrix OFELI::TimeStepping::setNonConstantMatrix TimeStepping</field>
    <field name="text">Say that matrix problem is variable This is useful if the linear system is solved by a factorization method but has no effect otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TimeStepping::setLinearSolver</field>
    <field name="args">(LinearSolver &amp;ls)</field>
    <field name="url">classOFELI_1_1TimeStepping.html#aeb1c00c88db605d4d11f23de7c711136</field>
    <field name="keywords">setLinearSolver OFELI::TimeStepping::setLinearSolver TimeStepping</field>
    <field name="text">Set reference to LinearSolver instance ls Reference to LinearSolver instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TimeStepping::setInitial</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;u)</field>
    <field name="url">classOFELI_1_1TimeStepping.html#af1cd58fec176472be29a4dfb1be829e3</field>
    <field name="keywords">setInitial OFELI::TimeStepping::setInitial TimeStepping</field>
    <field name="text">Set initial condition for the system of differential equations u Vector containing initial condition for the unknown If a second-order differential equation is to be solved use the the same function with two initial vectors one for the unknown the second for its time derivative</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TimeStepping::runOneTimeStep</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1TimeStepping.html#af8c8f582bd6836d2145e823ce5ed5ef4</field>
    <field name="keywords">runOneTimeStep OFELI::TimeStepping::runOneTimeStep TimeStepping</field>
    <field name="text">Run one time step Value of new time step if this one is updated</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TimeStepping::setNLTerm</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;a0, Vect&lt; real_t &gt; &amp;a1, Vect&lt; real_t &gt; &amp;a2)</field>
    <field name="url">classOFELI_1_1TimeStepping.html#afa50a030ed9900fbe29d9f3632ad960e</field>
    <field name="keywords">setNLTerm OFELI::TimeStepping::setNLTerm TimeStepping</field>
    <field name="text">Set vectors defining a nonlinear second order system of ODEs The ODE system has the form a2(u) a1(u) a0(u) 0 a0 Reference to Vect instance defining the 0 th order term a1 Reference to Vect instance defining the first order term a2 Reference to Vect instance defining the second order term</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Timer</field>
    <field name="url">classOFELI_1_1Timer.html</field>
    <field name="keywords">Timer</field>
    <field name="text">To handle elapsed time counting This class is to be used when testing program performances A normal usage of the class is once an instance is constructed to use alternatively Start Stop and Resume Elapsed time can be obtained once the member function Stop is called Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Timer::Start</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Timer.html#a07aaf1227e4d645f15e0a964f54ef291</field>
    <field name="keywords">Start OFELI::Timer::Start Timer</field>
    <field name="text">Start or resume time counting This member function is to be used to start or resume time counting</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Timer::Stop</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Timer.html#a17a237457e57625296e6b24feb19c60a</field>
    <field name="keywords">Stop OFELI::Timer::Stop Timer</field>
    <field name="text">Stop time counting This function interrupts time counting This one can be resumed by the function Start</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Timer::~Timer</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Timer.html#a4f8a8b0b7dca75172a8e036314ad1794</field>
    <field name="keywords">OFELI::Timer::~Timer Timer</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Timer::Timer</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Timer.html#a6a8bc5014802d569f6d01c4f36121a81</field>
    <field name="keywords">Timer OFELI::Timer::Timer Timer</field>
    <field name="text">Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Timer::Clear</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Timer.html#aa71d36872f416feaa853788a7a7a7ef8</field>
    <field name="keywords">Clear OFELI::Timer::Clear Timer</field>
    <field name="text">Clear time value Set to zero</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Timer::Started</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Timer.html#ad75f102f97855a8c969440dc19994b16</field>
    <field name="keywords">Started OFELI::Timer::Started Timer</field>
    <field name="text">Say if time counter has started Return true if time has started false if not</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Timer::get</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Timer.html#ad9f7cc68beb74fedbedde34c7fb10887</field>
    <field name="keywords">get OFELI::Timer::get Timer</field>
    <field name="text">Return elapsed time in seconds</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Timer::getTime</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Timer.html#ae01a616f806c6e6916fd869aa09e8869</field>
    <field name="keywords">getTime OFELI::Timer::getTime Timer</field>
    <field name="text">Return elapsed time in seconds Identical to get</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::TrMatrix</field>
    <field name="url">classOFELI_1_1TrMatrix.html</field>
    <field name="keywords">TrMatrix</field>
    <field name="text">To handle tridiagonal matrices This class enables storing and manipulating tridiagonal matrices The template parameter is the type of matrix entries Any matrix entry can be accessed by the operator For instance if A is an instance of this class A(i,j) stands for the entry at the i-th row and j-th column i and j starting from 1 If is difference from i-1 i or i+1 the returned value is 0 Entries of A can be assigned a value by the same operator Only nonzero entries can be assigned T_ Data type double float complex&lt;double&gt; Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Triang3</field>
    <field name="url">classOFELI_1_1Triang3.html</field>
    <field name="keywords">Triang3</field>
    <field name="text">Defines a 3 Node P 1 triangle The reference element is the rectangle triangle with two unit edges Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triang3::Triang3</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Triang3.html#a1cfa0bb751174eb2bb35e3b662d31415</field>
    <field name="keywords">Triang3 OFELI::Triang3::Triang3 Triang3</field>
    <field name="text">Default Constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triang3::getMaxEdgeLength</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Triang3.html#a25ca31b393289f740e8ed58b06a30cd3</field>
    <field name="keywords">getMaxEdgeLength OFELI::Triang3::getMaxEdgeLength Triang3</field>
    <field name="text">Return maximal edge length of triangle</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triang3::getInterpolate</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;x, const LocalVect&lt; real_t, 3 &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1Triang3.html#a3203c9e7be1f986b70b8d3db9e8e9154</field>
    <field name="keywords">getInterpolate OFELI::Triang3::getInterpolate Triang3</field>
    <field name="text">Return interpolated value at point of coordinate x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triang3::getMinEdgeLength</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Triang3.html#a3b36d8923b27960cb53038075675ebaf</field>
    <field name="keywords">getMinEdgeLength OFELI::Triang3::getMinEdgeLength Triang3</field>
    <field name="text">Return minimal edge length of triangle</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triang3::Triang3</field>
    <field name="args">(const Side *sd)</field>
    <field name="url">classOFELI_1_1Triang3.html#a40c0ae4b8229ae1de1cdf3bcc5222f07</field>
    <field name="keywords">Triang3 OFELI::Triang3::Triang3 Triang3</field>
    <field name="text">Constructor for a side The constructed triangle is a side in a 3 D mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triang3::set</field>
    <field name="args">(const Element *el)</field>
    <field name="url">classOFELI_1_1Triang3.html#a578b9f2f623966f955548e89ccce995a</field>
    <field name="keywords">set OFELI::Triang3::set Triang3</field>
    <field name="text">Choose element by giving its pointer</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triang3::check</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Triang3.html#a597e7105fda27f445e682dbd1ff8c46d</field>
    <field name="keywords">check OFELI::Triang3::check Triang3</field>
    <field name="text">Check element area and number of nodes 0 m is the length 0 zero length Error</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triang3::Grad</field>
    <field name="args">(const LocalVect&lt; real_t, 3 &gt; &amp;u) const</field>
    <field name="url">classOFELI_1_1Triang3.html#a625021bf68d0ac8199edea2e9034a8cd</field>
    <field name="keywords">Grad OFELI::Triang3::Grad Triang3</field>
    <field name="text">Return constant gradient vector in triangle u Local vector for which the gradient is evaluated</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triang3::~Triang3</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Triang3.html#a66563676a92960146f7eb11e66fadc8d</field>
    <field name="keywords">OFELI::Triang3::~Triang3 Triang3</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triang3::Triang3</field>
    <field name="args">(const Element *el)</field>
    <field name="url">classOFELI_1_1Triang3.html#aa4099f1155cb7c60563aa16f4d59872d</field>
    <field name="keywords">Triang3 OFELI::Triang3::Triang3 Triang3</field>
    <field name="text">Constructor for an element The constructed triangle is an element in a 2 D mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triang3::Sh</field>
    <field name="args">(size_t i, Point&lt; real_t &gt; s) const</field>
    <field name="url">classOFELI_1_1Triang3.html#af47800ddf6fa7dab39666cb7ce85d7ba</field>
    <field name="keywords">Sh OFELI::Triang3::Sh Triang3</field>
    <field name="text">Calculate shape function of node at a given point i Label local of node s Natural coordinates of node where to evaluate</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triang3::DSh</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Triang3.html#afc7413cec298fd773445dc1ef45d8b21</field>
    <field name="keywords">DSh OFELI::Triang3::DSh Triang3</field>
    <field name="text">Return partial derivatives of shape functions of element nodes Vector of partial derivatives of shape functions e.g dsh i-1 x dsh i-1 y are partial derivatives of the i th shape function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triang3::set</field>
    <field name="args">(const Side *sd)</field>
    <field name="url">classOFELI_1_1Triang3.html#afef83babf0e3aeb65caca62d7995aaf5</field>
    <field name="keywords">set OFELI::Triang3::set Triang3</field>
    <field name="text">Choose side by giving its pointer</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Triang6S</field>
    <field name="url">classOFELI_1_1Triang6S.html</field>
    <field name="keywords">Triang6S</field>
    <field name="text">Defines a 6 Node straight triangular finite element using P 2 interpolation The reference element is the rectangle triangle with two unit edges Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triang6S::Triang6S</field>
    <field name="args">(const Element *el)</field>
    <field name="url">classOFELI_1_1Triang6S.html#a230570b0bb70361b641fa7f7567ae751</field>
    <field name="keywords">Triang6S OFELI::Triang6S::Triang6S Triang6S</field>
    <field name="text">Constructor for an element The constructed triangle is an element in a 2 D mesh el Pointer to Element instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triang6S::getMaxEdgeLength</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Triang6S.html#a25ca31b393289f740e8ed58b06a30cd3</field>
    <field name="keywords">getMaxEdgeLength OFELI::Triang6S::getMaxEdgeLength Triang6S</field>
    <field name="text">Return maximal edge length of triangle</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triang6S::Triang6S</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Triang6S.html#a272336e5a85a3ff4542cb826b57a541a</field>
    <field name="keywords">Triang6S OFELI::Triang6S::Triang6S Triang6S</field>
    <field name="text">Default Constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triang6S::getCenter</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Triang6S.html#a29518c54ba3a66576ee2859724fc88cd</field>
    <field name="keywords">getCenter OFELI::Triang6S::getCenter Triang6S</field>
    <field name="text">Return coordinates of center of element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triang6S::getMinEdgeLength</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Triang6S.html#a3b36d8923b27960cb53038075675ebaf</field>
    <field name="keywords">getMinEdgeLength OFELI::Triang6S::getMinEdgeLength Triang6S</field>
    <field name="text">Return minimal edge length of triangle</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triang6S::setLocal</field>
    <field name="args">(real_t s, real_t t)</field>
    <field name="url">classOFELI_1_1Triang6S.html#aa6f76929fdfad5cd35c6e6954b162584</field>
    <field name="keywords">setLocal OFELI::Triang6S::setLocal Triang6S</field>
    <field name="text">Initialize local point coordinates in element s Local first coordinate of the point where the gradient of the shape functions are evaluated t Local second coordinate of the point where the gradient of the shape functions are evaluated</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triang6S::~Triang6S</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Triang6S.html#abfda0304eee7e4de36d2da3f7b876a99</field>
    <field name="keywords">OFELI::Triang6S::~Triang6S Triang6S</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triang6S::atMidEdges</field>
    <field name="args">(std::vector&lt; Point&lt; real_t &gt; &gt; &amp;dsh, std::vector&lt; real_t &gt; &amp;w)</field>
    <field name="url">classOFELI_1_1Triang6S.html#ad86b7e5c19e0543e7b2d280b0b39d14d</field>
    <field name="keywords">atMidEdges OFELI::Triang6S::atMidEdges Triang6S</field>
    <field name="text">Compute partial derivatives of shape functions at mid edges of triangles This member function can be called for integrations using partial derivatives of shape functions and approximated by midedge integration formula dsh Vector containing partial derivatives of shape functions w Vector containing weights for the integration formula</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triang6S::Sh</field>
    <field name="args">(real_t s, real_t t, real_t *sh) const</field>
    <field name="url">classOFELI_1_1Triang6S.html#ad8e25b201b9b35f49127259267d4389c</field>
    <field name="keywords">Sh OFELI::Triang6S::Sh Triang6S</field>
    <field name="text">Calculate shape functions s Local first coordinate of the point where the gradient of the shape functions are evaluated t Local second coordinate of the point where the gradient of the shape functions are evaluated sh Array of of shape functions at s t</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triang6S::DSh</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Triang6S.html#afc7413cec298fd773445dc1ef45d8b21</field>
    <field name="keywords">DSh OFELI::Triang6S::DSh Triang6S</field>
    <field name="text">Return partial derivatives of shape functions of element nodes LocalVect instance of partial derivatives of shape functions e.g dsh(i) x dsh(i) y are partial derivatives of the i th shape function The local point at which the derivatives are computed must be chosen before by using the member function setLocal</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Triangle</field>
    <field name="url">classOFELI_1_1Triangle.html</field>
    <field name="keywords">Triangle</field>
    <field name="text">To store and treat a triangle</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triangle::setVertex1</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1Triangle.html#a0ba1f49fcf3885160bfc0f96a76c8c74</field>
    <field name="keywords">setVertex1 OFELI::Triangle::setVertex1 Triangle</field>
    <field name="text">Assign first vertex of triangle</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triangle::getSignedDistance</field>
    <field name="args">(const Grid &amp;g, Vect&lt; real_t &gt; &amp;d) const</field>
    <field name="url">classOFELI_1_1Triangle.html#a2252be7c4949c4a2bd3ee24a4fdfd722</field>
    <field name="keywords">getSignedDistance OFELI::Triangle::getSignedDistance Triangle</field>
    <field name="text">Calculate signed distance to current figure with respect to grid points g Grid instance d Vect instance containing calculated distance from each grid index to Figure Vector d doesn t need to be sized before invoking this function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triangle::operator+=</field>
    <field name="args">(Point&lt; real_t &gt; a)</field>
    <field name="url">classOFELI_1_1Triangle.html#a40712cc582cf94c03cc1e30e8ab717fc</field>
    <field name="keywords">operator+= OFELI::Triangle::operator+= Triangle</field>
    <field name="text">Operator Translate triangle by a vector a</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triangle::setVertex2</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1Triangle.html#a47212dd56493513e1b90d5d7f1478905</field>
    <field name="keywords">setVertex2 OFELI::Triangle::setVertex2 Triangle</field>
    <field name="text">Assign second vertex of triangle</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triangle::Triangle</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Triangle.html#a56e2160d21ceb4ff81a0c7dee1335dc7</field>
    <field name="keywords">Triangle OFELI::Triangle::Triangle Triangle</field>
    <field name="text">Default constructor Constructs a unit triangle with vertices 0 0 1 0 and 0 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triangle::getSignedDistance</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;p) const</field>
    <field name="url">classOFELI_1_1Triangle.html#a59bcb59a9fd6e717fa480630c7d3b57a</field>
    <field name="keywords">getSignedDistance OFELI::Triangle::getSignedDistance Triangle</field>
    <field name="text">Return signed distance from a given point to current figure p Point instance from which distance is computed</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triangle::getSignedDistance</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;p) const</field>
    <field name="url">classOFELI_1_1Triangle.html#a6c92f703c9cacfbfc0158713655d844a</field>
    <field name="keywords">getSignedDistance OFELI::Triangle::getSignedDistance Triangle</field>
    <field name="text">Return signed distance of a given point from the current triangle The computed distance is negative if p lies in the triangle positive if it is outside and 0 on its boundary p Point&lt;double&gt; instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triangle::dLine</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;p, const Point&lt; real_t &gt; &amp;a, const Point&lt; real_t &gt; &amp;b) const</field>
    <field name="url">classOFELI_1_1Triangle.html#a740ca39646f05723f2f96ab62a232b36</field>
    <field name="keywords">dLine OFELI::Triangle::dLine Triangle</field>
    <field name="text">Compute signed distance from a line p Point for which distance is computed a First vertex of line b Second vertex of line Signed distance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triangle::setVertex3</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1Triangle.html#aa4f5e68d497201d1e12f30030a2efc00</field>
    <field name="keywords">setVertex3 OFELI::Triangle::setVertex3 Triangle</field>
    <field name="text">Assign third vertex of triangle</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triangle::operator+=</field>
    <field name="args">(real_t a)</field>
    <field name="url">classOFELI_1_1Triangle.html#aac06304fc37e96f1dd95a4724b6437be</field>
    <field name="keywords">operator+= OFELI::Triangle::operator+= Triangle</field>
    <field name="text">Operator Scale triangle by a factor a</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Triangle::Triangle</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;v1, const Point&lt; real_t &gt; &amp;v2, const Point&lt; real_t &gt; &amp;v3, int code=1)</field>
    <field name="url">classOFELI_1_1Triangle.html#aecc1f3751955b2ab6b9b4fe942969727</field>
    <field name="keywords">Triangle OFELI::Triangle::Triangle Triangle</field>
    <field name="text">Constructor with vertices and code v1 Coordinates of first vertex of triangle v2 Coordinates of second vertex of triangle v3 Coordinates of third vertex of triangle code Code to assign to the generated figure Default 1 Vertices must be given in couterclockwise order</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Vect</field>
    <field name="url">classOFELI_1_1Vect.html</field>
    <field name="keywords">Vect Vect&lt; complex_t &gt; Vect&lt; int &gt; Vect&lt; OFELI::Point&lt; real_t &gt; &gt; Vect&lt; real_t &gt;</field>
    <field name="text">To handle general purpose vectors Rachid Touzani GNU Lesser Public License This template class enables defining and manipulating vectors of various data types It inherits from the class std::vector An instance of class Vect can be A simple vector of given size A vector with up to three indices i.e an entry of the vector can be a(i) a(i,j) or a(i,j,k) This feature is useful for instance in the case of a structured grid A vector associate to a finite element mesh In this case a constructor uses a reference to the Mesh instance The size of the vector is by default equal to the number of nodes x the number of degrees of freedom by node If the degrees of freedom are supported by elements or sides then the vector is sized accordingly Operators and are overloaded so that one can write for instance to set vector v entries to 1 copy vector v into vector u and assign third entry of v to 2 Note that entries of v are here v(1) v(2) v(10) i.e vector entries start at index 1 T_ Data type real_t float complex&lt;real_t&gt;</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::Vect</field>
    <field name="args">(size_t d, const Vect&lt; T_ &gt; &amp;v, const string &amp;name=&quot; &quot;)</field>
    <field name="url">classOFELI_1_1Vect.html#a0022da02aef6efa2b5a7d5e83aa4f5c8</field>
    <field name="keywords">Vect OFELI::Vect::Vect Vect&lt; T_ &gt; Vect OFELI::Vect&lt; real_t &gt;::Vect Vect&lt; real_t &gt; Vect OFELI::Vect&lt; complex_t &gt;::Vect Vect&lt; complex_t &gt; Vect OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::Vect Vect&lt; OFELI::Point&lt; real_t &gt; &gt; Vect OFELI::Vect&lt; int &gt;::Vect Vect&lt; int &gt;</field>
    <field name="text">Constructor that extracts some degrees of freedom components from given instance of Vect This constructor enables constructing a subvector of a given Vect instance It selects a given list of degrees of freedom and put it according to a given order in the instance to construct d Integer number giving the list of degrees of freedom This number is made of n digits where n is the number of degrees of freedom Let us give an example Assume that the instance v has 3 DOF by entity node element or side The choice d 2 0 1 means that the constructed instance has 2 DOF where the first DOF is the third one of v and the second DOF is the first one of f v Consequently no digit can be larger than the number of DOF the constructed instance In this example a choice d 1 0 3 would produce an error message v Vect instance from which extraction is performed name Name to assign to vector instance Default value is Don t give zeros as first digits for the argument d The number is in this case interpreted as octal</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::set</field>
    <field name="args">(size_t i, size_t j, T_ val)</field>
    <field name="url">classOFELI_1_1Vect.html#a01bee4ae700ef4920c024b7697fc6c19</field>
    <field name="keywords">set OFELI::Vect::set Vect&lt; T_ &gt; set OFELI::Vect&lt; real_t &gt;::set Vect&lt; real_t &gt; set OFELI::Vect&lt; complex_t &gt;::set Vect&lt; complex_t &gt; set OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::set Vect&lt; OFELI::Point&lt; real_t &gt; &gt; set OFELI::Vect&lt; int &gt;::set Vect&lt; int &gt;</field>
    <field name="text">Assign a value to an entry for a 2 D vector i First index in vector starts at 1 j Second index in vector starts at 1 val Value to assign</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::operator=</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1Vect.html#a05bb8812002797a4e885867f7ea1d162</field>
    <field name="keywords">operator= OFELI::Vect::operator= Vect&lt; T_ &gt; operator= OFELI::Vect&lt; real_t &gt;::operator= Vect&lt; real_t &gt; operator= OFELI::Vect&lt; complex_t &gt;::operator= Vect&lt; complex_t &gt; operator= OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::operator= Vect&lt; OFELI::Point&lt; real_t &gt; &gt; operator= OFELI::Vect&lt; int &gt;::operator= Vect&lt; int &gt;</field>
    <field name="text">Operator between vectors</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::operator()</field>
    <field name="args">(size_t i, size_t j, size_t k)</field>
    <field name="url">classOFELI_1_1Vect.html#a0e27c79f8f72a2191235ec1b018364d4</field>
    <field name="keywords">operator() OFELI::Vect::operator() Vect&lt; T_ &gt; operator() OFELI::Vect&lt; real_t &gt;::operator() Vect&lt; real_t &gt; operator() OFELI::Vect&lt; complex_t &gt;::operator() Vect&lt; complex_t &gt; operator() OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::operator() Vect&lt; OFELI::Point&lt; real_t &gt; &gt; operator() OFELI::Vect&lt; int &gt;::operator() Vect&lt; int &gt;</field>
    <field name="text">Operator with 3 D indexing Non constant version i first index in vector Number of vector components in the x grid j second index in vector Number of vector components in the y grid k third index in vector Number of vector components in the z grid v(i,j,k) starts at v(1,1,1) to v getNx() getNy() getNz()</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::getCurl</field>
    <field name="args">(Vect&lt; T_ &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1Vect.html#a0f6b7cded366b0a5813ade4586c352a4</field>
    <field name="keywords">getCurl OFELI::Vect::getCurl Vect&lt; T_ &gt; getCurl OFELI::Vect&lt; real_t &gt;::getCurl Vect&lt; real_t &gt; getCurl OFELI::Vect&lt; complex_t &gt;::getCurl Vect&lt; complex_t &gt; getCurl OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::getCurl Vect&lt; OFELI::Point&lt; real_t &gt; &gt; getCurl OFELI::Vect&lt; int &gt;::getCurl Vect&lt; int &gt;</field>
    <field name="text">Evaluate the discrete curl vector of the current vector The resulting curl is stored in a Vect instance This function handles node vectors assuming P 1 approximation The curl is then a constant vector for each element v Vect instance that contains the curl where v(n,1) v(n,2) and v(n,3) are respectively the x and y and z curl components at element n</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::getAverage</field>
    <field name="args">(const Element &amp;el, int type) const</field>
    <field name="url">classOFELI_1_1Vect.html#a106a2537ffbddd179f2ebbb53baed2f7</field>
    <field name="keywords">getAverage OFELI::Vect::getAverage Vect&lt; T_ &gt; getAverage OFELI::Vect&lt; real_t &gt;::getAverage Vect&lt; real_t &gt; getAverage OFELI::Vect&lt; complex_t &gt;::getAverage Vect&lt; complex_t &gt; getAverage OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::getAverage Vect&lt; OFELI::Point&lt; real_t &gt; &gt; getAverage OFELI::Vect&lt; int &gt;::getAverage Vect&lt; int &gt;</field>
    <field name="text">Return average value of vector in a given element el Element instance type Type of element This is to be chosen among enumerated values LINE2 TRIANG3 QUAD4 TETRA4 HEXA8 PENTA6</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::getName</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Vect.html#a134d85a189d667e7a481614c1aa67860</field>
    <field name="keywords">getName OFELI::Vect::getName Vect&lt; T_ &gt; getName OFELI::Vect&lt; real_t &gt;::getName Vect&lt; real_t &gt; getName OFELI::Vect&lt; complex_t &gt;::getName Vect&lt; complex_t &gt; getName OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::getName Vect&lt; OFELI::Point&lt; real_t &gt; &gt; getName OFELI::Vect&lt; int &gt;::getName Vect&lt; int &gt;</field>
    <field name="text">Get name of vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::set</field>
    <field name="args">(Mesh &amp;ms, const string &amp;exp, size_t dof=1)</field>
    <field name="url">classOFELI_1_1Vect.html#a17731f56bcad104c66a91748ad05849a</field>
    <field name="keywords">set OFELI::Vect::set Vect&lt; T_ &gt; set OFELI::Vect&lt; real_t &gt;::set Vect&lt; real_t &gt; set OFELI::Vect&lt; complex_t &gt;::set Vect&lt; complex_t &gt; set OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::set Vect&lt; OFELI::Point&lt; real_t &gt; &gt; set OFELI::Vect&lt; int &gt;::set Vect&lt; int &gt;</field>
    <field name="text">Initialize vector with an algebraic expression with providing mesh data ms Mesh instance exp Regular algebraic expression that defines a function of x y and z which are coordinates of nodes dof Degree of freedom to which the value is assigned Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::operator+=</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1Vect.html#a1a01e93813b0f4002bfb8913e853f681</field>
    <field name="keywords">operator+= OFELI::Vect::operator+= Vect&lt; T_ &gt; operator+= OFELI::Vect&lt; real_t &gt;::operator+= Vect&lt; real_t &gt; operator+= OFELI::Vect&lt; complex_t &gt;::operator+= Vect&lt; complex_t &gt; operator+= OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::operator+= Vect&lt; OFELI::Point&lt; real_t &gt; &gt; operator+= OFELI::Vect&lt; int &gt;::operator+= Vect&lt; int &gt;</field>
    <field name="text">Operator Add vector x to current vector instance v Vect instance to add to instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::operator()</field>
    <field name="args">(size_t i) const</field>
    <field name="url">classOFELI_1_1Vect.html#a1c5d37e1fdcfc442fb9312f89af4e205</field>
    <field name="keywords">operator() OFELI::Vect::operator() Vect&lt; T_ &gt; operator() OFELI::Vect&lt; real_t &gt;::operator() Vect&lt; real_t &gt; operator() OFELI::Vect&lt; complex_t &gt;::operator() Vect&lt; complex_t &gt; operator() OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::operator() Vect&lt; OFELI::Point&lt; real_t &gt; &gt; operator() OFELI::Vect&lt; int &gt;::operator() Vect&lt; int &gt;</field>
    <field name="text">Operator Constant version i Rank index in vector starts at 1 v(i) starts at v(1) to v(size()) v(i) is the same element as v i-1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::removeBC</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;v, int dof=0)</field>
    <field name="url">classOFELI_1_1Vect.html#a1d80593cf82ea3ef46ddc5f96dc4ecac</field>
    <field name="keywords">removeBC OFELI::Vect::removeBC Vect&lt; T_ &gt; removeBC OFELI::Vect&lt; real_t &gt;::removeBC Vect&lt; real_t &gt; removeBC OFELI::Vect&lt; complex_t &gt;::removeBC Vect&lt; complex_t &gt; removeBC OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::removeBC Vect&lt; OFELI::Point&lt; real_t &gt; &gt; removeBC OFELI::Vect&lt; int &gt;::removeBC Vect&lt; int &gt;</field>
    <field name="text">Remove boundary conditions This member function copies to current vector a vector where only non imposed DOF are retained v Vector Vect instance to copy from dof Parameter to say if all degrees of freedom are concerned Default 0 or if only one degree of freedom dof is inserted into vector v which has only one degree of freedom This member function is to be used in the case where a constructor with a Mesh has been used</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::getFFT</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Vect.html#a20654e9e92da22b740c7dc48dd5874d9</field>
    <field name="keywords">getFFT OFELI::Vect::getFFT Vect&lt; T_ &gt; getFFT OFELI::Vect&lt; real_t &gt;::getFFT Vect&lt; real_t &gt; getFFT OFELI::Vect&lt; complex_t &gt;::getFFT Vect&lt; complex_t &gt; getFFT OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::getFFT Vect&lt; OFELI::Point&lt; real_t &gt; &gt; getFFT OFELI::Vect&lt; int &gt;::getFFT Vect&lt; int &gt;</field>
    <field name="text">Compute FFT transform of vector This member function computes the FFT Fast Fourier Transform of the vector contained in the instance and returns it Vect complex&lt;double&gt; instance containing the FFT The size of Vect instance must be a power of two and must not exceed the value of 2 This value is set in the header The Vect instance can be either a Vect&lt;double&gt; or Vec complex&lt;double&gt;</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::size</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Vect.html#a259cb5a711406a8c3e5d937eb9350cca</field>
    <field name="keywords">size OFELI::Vect::size Vect&lt; T_ &gt; size OFELI::Vect&lt; real_t &gt;::size Vect&lt; real_t &gt; size OFELI::Vect&lt; complex_t &gt;::size Vect&lt; complex_t &gt; size OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::size Vect&lt; OFELI::Point&lt; real_t &gt; &gt; size OFELI::Vect&lt; int &gt;::size Vect&lt; int &gt;</field>
    <field name="text">Return vector global size</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::operator/=</field>
    <field name="args">(const T_ &amp;a)</field>
    <field name="url">classOFELI_1_1Vect.html#a289774a4a3a2c6543456522dac41433a</field>
    <field name="keywords">operator/= OFELI::Vect::operator/= Vect&lt; T_ &gt; operator/= OFELI::Vect&lt; real_t &gt;::operator/= Vect&lt; real_t &gt; operator/= OFELI::Vect&lt; complex_t &gt;::operator/= Vect&lt; complex_t &gt; operator/= OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::operator/= Vect&lt; OFELI::Point&lt; real_t &gt; &gt; operator/= OFELI::Vect&lt; int &gt;::operator/= Vect&lt; int &gt;</field>
    <field name="text">Operator a Value to divide by</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::setSideBC</field>
    <field name="args">(int code, const string &amp;exp, size_t dof)</field>
    <field name="url">classOFELI_1_1Vect.html#a2a1d65cceb84ddebce2e35713f4f945c</field>
    <field name="keywords">setSideBC OFELI::Vect::setSideBC Vect&lt; T_ &gt; setSideBC OFELI::Vect&lt; real_t &gt;::setSideBC Vect&lt; real_t &gt; setSideBC OFELI::Vect&lt; complex_t &gt;::setSideBC Vect&lt; complex_t &gt; setSideBC OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::setSideBC Vect&lt; OFELI::Point&lt; real_t &gt; &gt; setSideBC OFELI::Vect&lt; int &gt;::setSideBC Vect&lt; int &gt;</field>
    <field name="text">Assign a given function given by an interpre table algebraic expression to components of vector with given code Vector components are assumed nodewise code Code for which nodes will be assigned prescribed value exp Regular algebraic expression to prescribe dof Degree of Freedom for which the value is assigned This member function is to be used in the case where a constructor with a Mesh has been used</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::MultAdd</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;x, const T_ &amp;a)</field>
    <field name="url">classOFELI_1_1Vect.html#a2aec937327784ab7cb2d911e4fc9fbab</field>
    <field name="keywords">MultAdd OFELI::Vect::MultAdd Vect&lt; T_ &gt; MultAdd OFELI::Vect&lt; real_t &gt;::MultAdd Vect&lt; real_t &gt; MultAdd OFELI::Vect&lt; complex_t &gt;::MultAdd Vect&lt; complex_t &gt; MultAdd OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::MultAdd Vect&lt; OFELI::Point&lt; real_t &gt; &gt; MultAdd OFELI::Vect&lt; int &gt;::MultAdd Vect&lt; int &gt;</field>
    <field name="text">Multiply by a constant then add to a vector x Vect instance to add a Constant to multiply before adding</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::insertBC</field>
    <field name="args">(Mesh &amp;m, const Vect&lt; T_ &gt; &amp;v, const Vect&lt; T_ &gt; &amp;bc, int dof=0)</field>
    <field name="url">classOFELI_1_1Vect.html#a2bf3781e849a60a884abbaa66eff3ed4</field>
    <field name="keywords">insertBC OFELI::Vect::insertBC Vect&lt; T_ &gt; insertBC OFELI::Vect&lt; real_t &gt;::insertBC Vect&lt; real_t &gt; insertBC OFELI::Vect&lt; complex_t &gt;::insertBC Vect&lt; complex_t &gt; insertBC OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::insertBC Vect&lt; OFELI::Point&lt; real_t &gt; &gt; insertBC OFELI::Vect&lt; int &gt;::insertBC Vect&lt; int &gt;</field>
    <field name="text">Insert boundary conditions m Mesh instance v Vect instance from which free degrees of freedom are copied to current instance bc Vect instance from which imposed degrees of freedom are copied to current instance dof Parameter to say if all degrees of freedom are concerned 0 Default or if only one degree of freedom dof is inserted into vector v which has only one degree of freedom by node or side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::getNz</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Vect.html#a2d0d9d6ef46db37f88d35bd0a629c751</field>
    <field name="keywords">getNz OFELI::Vect::getNz Vect&lt; T_ &gt; getNz OFELI::Vect&lt; real_t &gt;::getNz Vect&lt; real_t &gt; getNz OFELI::Vect&lt; complex_t &gt;::getNz Vect&lt; complex_t &gt; getNz OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::getNz Vect&lt; OFELI::Point&lt; real_t &gt; &gt; getNz OFELI::Vect&lt; int &gt;::getNz Vect&lt; int &gt;</field>
    <field name="text">Return number of grid points in the z direction if grid indexing is set</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::getDivergence</field>
    <field name="args">(Vect&lt; T_ &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1Vect.html#a2e49c4ac4b5a80dd3598d3abc4faaca3</field>
    <field name="keywords">getDivergence OFELI::Vect::getDivergence Vect&lt; T_ &gt; getDivergence OFELI::Vect&lt; real_t &gt;::getDivergence Vect&lt; real_t &gt; getDivergence OFELI::Vect&lt; complex_t &gt;::getDivergence Vect&lt; complex_t &gt; getDivergence OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::getDivergence Vect&lt; OFELI::Point&lt; real_t &gt; &gt; getDivergence OFELI::Vect&lt; int &gt;::getDivergence Vect&lt; int &gt;</field>
    <field name="text">Evaluate the discrete Divergence of the current vector The resulting divergence is stored in a Vect instance This function handles node vectors assuming P 1 approximation The divergence is then a constant vector for each element v Vect instance that contains the divergence</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::getNbDOF</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Vect.html#a2e702838dc1b95944fd571e804950aa3</field>
    <field name="keywords">getNbDOF OFELI::Vect::getNbDOF Vect&lt; T_ &gt; getNbDOF OFELI::Vect&lt; real_t &gt;::getNbDOF Vect&lt; real_t &gt; getNbDOF OFELI::Vect&lt; complex_t &gt;::getNbDOF Vect&lt; complex_t &gt; getNbDOF OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::getNbDOF Vect&lt; OFELI::Point&lt; real_t &gt; &gt; getNbDOF OFELI::Vect&lt; int &gt;::getNbDOF Vect&lt; int &gt;</field>
    <field name="text">Return vector number of degrees of freedom</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::getMax</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Vect.html#a2ee04821fb9d4976701ca76d1a67a75d</field>
    <field name="keywords">getMax OFELI::Vect::getMax Vect&lt; T_ &gt; getMax OFELI::Vect&lt; real_t &gt;::getMax Vect&lt; real_t &gt; getMax OFELI::Vect&lt; complex_t &gt;::getMax Vect&lt; complex_t &gt; getMax OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::getMax Vect&lt; OFELI::Point&lt; real_t &gt; &gt; getMax OFELI::Vect&lt; int &gt;::getMax Vect&lt; int &gt;</field>
    <field name="text">Calculate Max value of vector entries</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::setNodeBC</field>
    <field name="args">(int code, T_ val)</field>
    <field name="url">classOFELI_1_1Vect.html#a2fe2d17f5ed6f1c5958dc4d6539462e8</field>
    <field name="keywords">setNodeBC OFELI::Vect::setNodeBC Vect&lt; T_ &gt; setNodeBC OFELI::Vect&lt; real_t &gt;::setNodeBC Vect&lt; real_t &gt; setNodeBC OFELI::Vect&lt; complex_t &gt;::setNodeBC Vect&lt; complex_t &gt; setNodeBC OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::setNodeBC Vect&lt; OFELI::Point&lt; real_t &gt; &gt; setNodeBC OFELI::Vect&lt; int &gt;::setNodeBC Vect&lt; int &gt;</field>
    <field name="text">Assign a given value to components of vector with given code Vector components are assumed nodewise Concerns 1 DOF problems code Code for which nodes will be assigned prescribed value val Value to prescribe</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::operator()</field>
    <field name="args">(size_t i, size_t j, size_t k, size_t l) const</field>
    <field name="url">classOFELI_1_1Vect.html#a31b10eb97732a17c8e8c64743736ca90</field>
    <field name="keywords">operator() OFELI::Vect::operator() Vect&lt; T_ &gt; operator() OFELI::Vect&lt; real_t &gt;::operator() Vect&lt; real_t &gt; operator() OFELI::Vect&lt; complex_t &gt;::operator() Vect&lt; complex_t &gt; operator() OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::operator() Vect&lt; OFELI::Point&lt; real_t &gt; &gt; operator() OFELI::Vect&lt; int &gt;::operator() Vect&lt; int &gt;</field>
    <field name="text">Operator with 4 D indexing Constant version i first index in vector Number of vector components in the x grid j second index in vector Number of vector components in the y grid k third index in vector Number of vector components in the z grid l third index in vector Number of vector components in the t grid v(i,j,k,l) starts at v(1,1,1,1) to v getNx() getNy() getNz() getNt()</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::getMesh</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Vect.html#a33d260bca42fe66a8536f2eac63adc64</field>
    <field name="keywords">getMesh OFELI::Vect::getMesh Vect&lt; T_ &gt; getMesh OFELI::Vect&lt; real_t &gt;::getMesh Vect&lt; real_t &gt; getMesh OFELI::Vect&lt; complex_t &gt;::getMesh Vect&lt; complex_t &gt; getMesh OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::getMesh Vect&lt; OFELI::Point&lt; real_t &gt; &gt; getMesh OFELI::Vect&lt; int &gt;::getMesh Vect&lt; int &gt;</field>
    <field name="text">Return Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::WithGrid</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Vect.html#a34e3651aa04472dd2b319c05fc1ccd13</field>
    <field name="keywords">WithGrid OFELI::Vect::WithGrid Vect&lt; T_ &gt; WithGrid OFELI::Vect&lt; real_t &gt;::WithGrid Vect&lt; real_t &gt; WithGrid OFELI::Vect&lt; complex_t &gt;::WithGrid Vect&lt; complex_t &gt; WithGrid OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::WithGrid Vect&lt; OFELI::Point&lt; real_t &gt; &gt; WithGrid OFELI::Vect&lt; int &gt;::WithGrid Vect&lt; int &gt;</field>
    <field name="text">Return true if vector contains a Grid pointer false if not A Vect instance can be constructed using grid information</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::resize</field>
    <field name="args">(size_t n, T_ v)</field>
    <field name="url">classOFELI_1_1Vect.html#a3803169278f3522304f912ad07ae874d</field>
    <field name="keywords">resize OFELI::Vect::resize Vect&lt; T_ &gt; resize OFELI::Vect&lt; real_t &gt;::resize Vect&lt; real_t &gt; resize OFELI::Vect&lt; complex_t &gt;::resize Vect&lt; complex_t &gt; resize OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::resize Vect&lt; OFELI::Point&lt; real_t &gt; &gt; resize OFELI::Vect&lt; int &gt;::resize Vect&lt; int &gt;</field>
    <field name="text">Set vector size and initialize to a constant value This function allocates memory for the vector n Size of vector v Value to assign to vector entries</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::operator()</field>
    <field name="args">(size_t i, size_t j, size_t k, size_t l)</field>
    <field name="url">classOFELI_1_1Vect.html#a38b083840e8a42e09cc24c5a05975bc6</field>
    <field name="keywords">operator() OFELI::Vect::operator() Vect&lt; T_ &gt; operator() OFELI::Vect&lt; real_t &gt;::operator() Vect&lt; real_t &gt; operator() OFELI::Vect&lt; complex_t &gt;::operator() Vect&lt; complex_t &gt; operator() OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::operator() Vect&lt; OFELI::Point&lt; real_t &gt; &gt; operator() OFELI::Vect&lt; int &gt;::operator() Vect&lt; int &gt;</field>
    <field name="text">Operator with 4 D indexing Non constant version i first index in vector Number of vector components in the x grid j second index in vector Number of vector components in the y grid k third index in vector Number of vector components in the z grid l fourth index in vector Number of vector components in the t grid v(i,j,k,l) starts at v(1,1,1,1) to v getNx() getNy() getNz() getNt()</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::select</field>
    <field name="args">(size_t n)</field>
    <field name="url">classOFELI_1_1Vect.html#a3bbf8feae9c7f46273e575512b332171</field>
    <field name="keywords">select OFELI::Vect::select Vect&lt; T_ &gt; select OFELI::Vect&lt; real_t &gt;::select Vect&lt; real_t &gt; select OFELI::Vect&lt; complex_t &gt;::select Vect&lt; complex_t &gt; select OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::select Vect&lt; OFELI::Point&lt; real_t &gt; &gt; select OFELI::Vect&lt; int &gt;::select Vect&lt; int &gt;</field>
    <field name="text">Return vector with selected one component from a given multicomponent vector n Component to extract must be 1 and 4 or Vector with selected component</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::add</field>
    <field name="args">(size_t i, size_t j, T_ val)</field>
    <field name="url">classOFELI_1_1Vect.html#a40e372694e8ff67cfb2224b8dad767aa</field>
    <field name="keywords">add OFELI::Vect::add Vect&lt; T_ &gt; add OFELI::Vect&lt; real_t &gt;::add Vect&lt; real_t &gt; add OFELI::Vect&lt; complex_t &gt;::add Vect&lt; complex_t &gt; add OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::add Vect&lt; OFELI::Point&lt; real_t &gt; &gt; add OFELI::Vect&lt; int &gt;::add Vect&lt; int &gt;</field>
    <field name="text">Add a value to an entry for a 2 index vector i First index in vector starts at 1 j Second index in vector starts at 1 val Value to assign</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::Vect</field>
    <field name="args">(size_t nx, size_t ny, size_t nz)</field>
    <field name="url">classOFELI_1_1Vect.html#a416781e8e3de348e4b4665ecfc87b123</field>
    <field name="keywords">Vect OFELI::Vect::Vect Vect&lt; T_ &gt; Vect OFELI::Vect&lt; real_t &gt;::Vect Vect&lt; real_t &gt; Vect OFELI::Vect&lt; complex_t &gt;::Vect Vect&lt; complex_t &gt; Vect OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::Vect Vect&lt; OFELI::Point&lt; real_t &gt; &gt; Vect OFELI::Vect&lt; int &gt;::Vect Vect&lt; int &gt;</field>
    <field name="text">Constructor of a 3 D index vector This constructor can be used for instance for a 3 D grid vector nx Size for the first index ny Size for the second index nz Size for the third index The size of resulting vector is nx*ny*nz</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::setSideBC</field>
    <field name="args">(Mesh &amp;m, int code, const string &amp;exp, size_t dof)</field>
    <field name="url">classOFELI_1_1Vect.html#a43cc40af518e8e6ae339ae6ab8f8e68c</field>
    <field name="keywords">setSideBC OFELI::Vect::setSideBC Vect&lt; T_ &gt; setSideBC OFELI::Vect&lt; real_t &gt;::setSideBC Vect&lt; real_t &gt; setSideBC OFELI::Vect&lt; complex_t &gt;::setSideBC Vect&lt; complex_t &gt; setSideBC OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::setSideBC Vect&lt; OFELI::Point&lt; real_t &gt; &gt; setSideBC OFELI::Vect&lt; int &gt;::setSideBC Vect&lt; int &gt;</field>
    <field name="text">Assign a given function given by an interpretable algebraic expression to components of vector corresponding to sides with given code Vector components are assumed nodewise m Instance of mesh code Code for which nodes will be assigned prescribed value exp Regular algebraic expression to prescribe dof Degree of Freedom for which the value is assigned</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::getNormMax</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Vect.html#a4828cf7db0315bd00aa069b87bcd8fbd</field>
    <field name="keywords">getNormMax OFELI::Vect::getNormMax Vect&lt; T_ &gt; getNormMax OFELI::Vect&lt; real_t &gt;::getNormMax Vect&lt; real_t &gt; getNormMax OFELI::Vect&lt; complex_t &gt;::getNormMax Vect&lt; complex_t &gt; getNormMax OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::getNormMax Vect&lt; OFELI::Point&lt; real_t &gt; &gt; getNormMax OFELI::Vect&lt; int &gt;::getNormMax Vect&lt; int &gt;</field>
    <field name="text">Calculate Max-norm Infinite norm of vector This function is available only if the template parameter is double or complex double</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::Vect</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;v, const Vect&lt; T_ &gt; &amp;bc)</field>
    <field name="url">classOFELI_1_1Vect.html#a49e50b49ab8e045872ca063738e8bd3e</field>
    <field name="keywords">Vect OFELI::Vect::Vect Vect&lt; T_ &gt; Vect OFELI::Vect&lt; real_t &gt;::Vect Vect&lt; real_t &gt; Vect OFELI::Vect&lt; complex_t &gt;::Vect Vect&lt; complex_t &gt; Vect OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::Vect Vect&lt; OFELI::Point&lt; real_t &gt; &gt; Vect OFELI::Vect&lt; int &gt;::Vect Vect&lt; int &gt;</field>
    <field name="text">Constructor using boundary conditions Boundary condition values contained in bc are reported to vector v v Vect instance to update bc Vect instance containing imposed valued at desired DOF</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::set</field>
    <field name="args">(const string &amp;exp, const Vect&lt; real_t &gt; &amp;x)</field>
    <field name="url">classOFELI_1_1Vect.html#a504825011a040cdb8d1fde45a086fd13</field>
    <field name="keywords">set OFELI::Vect::set Vect&lt; T_ &gt; set OFELI::Vect&lt; real_t &gt;::set Vect&lt; real_t &gt; set OFELI::Vect&lt; complex_t &gt;::set Vect&lt; complex_t &gt; set OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::set Vect&lt; OFELI::Point&lt; real_t &gt; &gt; set OFELI::Vect&lt; int &gt;::set Vect&lt; int &gt;</field>
    <field name="text">Initialize vector with an algebraic expression This function can be used for instance in 1 D exp Regular algebraic expression that defines a function of x which are values of vector This expression must use the variable x as coordinate of vector If the time variable t is involved in the expression the time value associated to the vector instance must be defined Default value is 0 either by using the appropriate constructor or by the member function setTime x Vector that defines coordinates</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::getCurl</field>
    <field name="args">(Vect&lt; Point&lt; T_ &gt; &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1Vect.html#a50d403a56bf5f6c81314fba97c6882c4</field>
    <field name="keywords">getCurl OFELI::Vect::getCurl Vect&lt; T_ &gt; getCurl OFELI::Vect&lt; real_t &gt;::getCurl Vect&lt; real_t &gt; getCurl OFELI::Vect&lt; complex_t &gt;::getCurl Vect&lt; complex_t &gt; getCurl OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::getCurl Vect&lt; OFELI::Point&lt; real_t &gt; &gt; getCurl OFELI::Vect&lt; int &gt;::getCurl Vect&lt; int &gt;</field>
    <field name="text">Evaluate the discrete curl vector of the current vector The resulting curl is stored in a Vect instance This function handles node vectors assuming P 1 approximation The curl is then a constant vector for each element v Vect instance that contains the curl where v(n,1) x v(n,2) y and v(n,3) z are respectively the x and y and z curl components at element n</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::operator()</field>
    <field name="args">(size_t i)</field>
    <field name="url">classOFELI_1_1Vect.html#a521ccbffbfc8f6ceabb86a09da68f864</field>
    <field name="keywords">operator() OFELI::Vect::operator() Vect&lt; T_ &gt; operator() OFELI::Vect&lt; real_t &gt;::operator() Vect&lt; real_t &gt; operator() OFELI::Vect&lt; complex_t &gt;::operator() Vect&lt; complex_t &gt; operator() OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::operator() Vect&lt; OFELI::Point&lt; real_t &gt; &gt; operator() OFELI::Vect&lt; int &gt;::operator() Vect&lt; int &gt;</field>
    <field name="text">Operator Non constant version i Rank index in vector starts at 1 v(i) starts at v(1) to v(size()) v(i) is the same element as v i-1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::Vect</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Vect.html#a5337468a6b92befb7f6d1fc0d2c71ad8</field>
    <field name="keywords">Vect OFELI::Vect::Vect Vect&lt; T_ &gt; Vect OFELI::Vect&lt; real_t &gt;::Vect Vect&lt; real_t &gt; Vect OFELI::Vect&lt; complex_t &gt;::Vect Vect&lt; complex_t &gt; Vect OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::Vect Vect&lt; OFELI::Point&lt; real_t &gt; &gt; Vect OFELI::Vect&lt; int &gt;::Vect Vect&lt; int &gt;</field>
    <field name="text">Default Constructor Initialize a zero-length vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::select</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;v, size_t nb_dof=0, size_t first_dof=1)</field>
    <field name="url">classOFELI_1_1Vect.html#a5595086707af7c13445534949ada6abc</field>
    <field name="keywords">select OFELI::Vect::select Vect&lt; T_ &gt; select OFELI::Vect&lt; real_t &gt;::select Vect&lt; real_t &gt; select OFELI::Vect&lt; complex_t &gt;::select Vect&lt; complex_t &gt; select OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::select Vect&lt; OFELI::Point&lt; real_t &gt; &gt; select OFELI::Vect&lt; int &gt;::select Vect&lt; int &gt;</field>
    <field name="text">Initialize vector with another Vect instance v Vect instance to extract from nb_dof Number of DOF per node element or side By default 0 Number of degrees of freedom extracted from the Mesh instance first_dof First DOF to extract Default 1 For instance a choice first_dof 2 and nb_dof 1 means that the second DOF of each node is copied in the vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::setIJKL</field>
    <field name="args">(const string &amp;exp)</field>
    <field name="url">classOFELI_1_1Vect.html#a5686b4f2f33b6877445c0c375635c885</field>
    <field name="keywords">setIJKL OFELI::Vect::setIJKL Vect&lt; T_ &gt; setIJKL OFELI::Vect&lt; real_t &gt;::setIJKL Vect&lt; real_t &gt; setIJKL OFELI::Vect&lt; complex_t &gt;::setIJKL Vect&lt; complex_t &gt; setIJKL OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::setIJKL Vect&lt; OFELI::Point&lt; real_t &gt; &gt; setIJKL OFELI::Vect&lt; int &gt;::setIJKL Vect&lt; int &gt;</field>
    <field name="text">Assign a given function given by an interpretable algebraic expression of indices components of vector This function enable assigning a value to vector entries as function of indices exp Regular algebraic expression to assign It must involve the variables i j k and/or l</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::resize</field>
    <field name="args">(size_t n)</field>
    <field name="url">classOFELI_1_1Vect.html#a57b2556ee8993b06958b9c14511fd4ba</field>
    <field name="keywords">resize OFELI::Vect::resize Vect&lt; T_ &gt; resize OFELI::Vect&lt; real_t &gt;::resize Vect&lt; real_t &gt; resize OFELI::Vect&lt; complex_t &gt;::resize Vect&lt; complex_t &gt; resize OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::resize Vect&lt; OFELI::Point&lt; real_t &gt; &gt; resize OFELI::Vect&lt; int &gt;::resize Vect&lt; int &gt;</field>
    <field name="text">Set vector size This function allocates memory for the vector but does not initialize its components n Size of vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::setName</field>
    <field name="args">(const string &amp;name)</field>
    <field name="url">classOFELI_1_1Vect.html#a5cc832820942d741e86edc84afbdcf88</field>
    <field name="keywords">setName OFELI::Vect::setName Vect&lt; T_ &gt; setName OFELI::Vect&lt; real_t &gt;::setName Vect&lt; real_t &gt; setName OFELI::Vect&lt; complex_t &gt;::setName Vect&lt; complex_t &gt; setName OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::setName Vect&lt; OFELI::Point&lt; real_t &gt; &gt; setName OFELI::Vect&lt; int &gt;::setName Vect&lt; int &gt;</field>
    <field name="text">Set name of vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::getWNorm1</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Vect.html#a5d793d75ceb106abd0a750c4ed68633a</field>
    <field name="keywords">getWNorm1 OFELI::Vect::getWNorm1 Vect&lt; T_ &gt; getWNorm1 OFELI::Vect&lt; real_t &gt;::getWNorm1 Vect&lt; real_t &gt; getWNorm1 OFELI::Vect&lt; complex_t &gt;::getWNorm1 Vect&lt; complex_t &gt; getWNorm1 OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::getWNorm1 Vect&lt; OFELI::Point&lt; real_t &gt; &gt; getWNorm1 OFELI::Vect&lt; int &gt;::getWNorm1 Vect&lt; int &gt;</field>
    <field name="text">Calculate weighted 1 norm of vector The wighted 1 norm is the 1 Norm of the vector divided by its size</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::setIJK</field>
    <field name="args">(const string &amp;exp)</field>
    <field name="url">classOFELI_1_1Vect.html#a5f98706508f51b38628eb74a17c36b4a</field>
    <field name="keywords">setIJK OFELI::Vect::setIJK Vect&lt; T_ &gt; setIJK OFELI::Vect&lt; real_t &gt;::setIJK Vect&lt; real_t &gt; setIJK OFELI::Vect&lt; complex_t &gt;::setIJK Vect&lt; complex_t &gt; setIJK OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::setIJK Vect&lt; OFELI::Point&lt; real_t &gt; &gt; setIJK OFELI::Vect&lt; int &gt;::setIJK Vect&lt; int &gt;</field>
    <field name="text">Assign a given function given by an interpretable algebraic expression of indices components of vector This function enable assigning a value to vector entries as function of indices exp Regular algebraic expression to assign It must involve the variables i j and/or k</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::setNodeBC</field>
    <field name="args">(Mesh &amp;m, int code, T_ val)</field>
    <field name="url">classOFELI_1_1Vect.html#a65b11a061ff5f2e4e99effece340ef7b</field>
    <field name="keywords">setNodeBC OFELI::Vect::setNodeBC Vect&lt; T_ &gt; setNodeBC OFELI::Vect&lt; real_t &gt;::setNodeBC Vect&lt; real_t &gt; setNodeBC OFELI::Vect&lt; complex_t &gt;::setNodeBC Vect&lt; complex_t &gt; setNodeBC OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::setNodeBC Vect&lt; OFELI::Point&lt; real_t &gt; &gt; setNodeBC OFELI::Vect&lt; int &gt;::setNodeBC Vect&lt; int &gt;</field>
    <field name="text">Assign a given value to components of vector with given code Vector components are assumed nodewise Here all dofs of nodes with given code will be assigned m Mesh instance code The value is assigned if the node has this code val Value to assign</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::getGrid</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Vect.html#a65bb5166998595d66b2ce28a87dc2c46</field>
    <field name="keywords">getGrid OFELI::Vect::getGrid Vect&lt; T_ &gt; getGrid OFELI::Vect&lt; real_t &gt;::getGrid Vect&lt; real_t &gt; getGrid OFELI::Vect&lt; complex_t &gt;::getGrid Vect&lt; complex_t &gt; getGrid OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::getGrid Vect&lt; OFELI::Point&lt; real_t &gt; &gt; getGrid OFELI::Vect&lt; int &gt;::getGrid Vect&lt; int &gt;</field>
    <field name="text">Return Grid instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::setNodeBC</field>
    <field name="args">(int code, const string &amp;exp)</field>
    <field name="url">classOFELI_1_1Vect.html#a68f770c5fa4c8ce7510fdc8166c5bc35</field>
    <field name="keywords">setNodeBC OFELI::Vect::setNodeBC Vect&lt; T_ &gt; setNodeBC OFELI::Vect&lt; real_t &gt;::setNodeBC Vect&lt; real_t &gt; setNodeBC OFELI::Vect&lt; complex_t &gt;::setNodeBC Vect&lt; complex_t &gt; setNodeBC OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::setNodeBC Vect&lt; OFELI::Point&lt; real_t &gt; &gt; setNodeBC OFELI::Vect&lt; int &gt;::setNodeBC Vect&lt; int &gt;</field>
    <field name="text">Assign a given function given by an interpretable algebraic expression to components of vector with given code Vector components are assumed nodewise Concerns 1 DOF problems code Code for which nodes will be assigned prescribed value exp Regular algebraic expression to prescribe This member function is to be used in the case where a constructor with a Mesh has been used</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::add</field>
    <field name="args">(size_t i, T_ val)</field>
    <field name="url">classOFELI_1_1Vect.html#a6a2e60ee668754ba31c5c084b10f6970</field>
    <field name="keywords">add OFELI::Vect::add Vect&lt; T_ &gt; add OFELI::Vect&lt; real_t &gt;::add Vect&lt; real_t &gt; add OFELI::Vect&lt; complex_t &gt;::add Vect&lt; complex_t &gt; add OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::add Vect&lt; OFELI::Point&lt; real_t &gt; &gt; add OFELI::Vect&lt; int &gt;::add Vect&lt; int &gt;</field>
    <field name="text">Add a value to an entry for a 1 index vector i Rank index in vector starts at 1 val Value to assign</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::getSCurl</field>
    <field name="args">(Vect&lt; T_ &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1Vect.html#a6e14e1aee9a896c97889af582b3dd912</field>
    <field name="keywords">getSCurl OFELI::Vect::getSCurl Vect&lt; T_ &gt; getSCurl OFELI::Vect&lt; real_t &gt;::getSCurl Vect&lt; real_t &gt; getSCurl OFELI::Vect&lt; complex_t &gt;::getSCurl Vect&lt; complex_t &gt; getSCurl OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::getSCurl Vect&lt; OFELI::Point&lt; real_t &gt; &gt; getSCurl OFELI::Vect&lt; int &gt;::getSCurl Vect&lt; int &gt;</field>
    <field name="text">Evaluate the discrete scalar curl in 2 D of the current vector The resulting curl is stored in a Vect instance This function handles node vectors assuming P 1 approximation The curl is then a constant vector for each element v Vect instance that contains the scalar curl</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::getWNorm2</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Vect.html#a75371e96f4e49e42d45e4e77bff7cb25</field>
    <field name="keywords">getWNorm2 OFELI::Vect::getWNorm2 Vect&lt; T_ &gt; getWNorm2 OFELI::Vect&lt; real_t &gt;::getWNorm2 Vect&lt; real_t &gt; getWNorm2 OFELI::Vect&lt; complex_t &gt;::getWNorm2 Vect&lt; complex_t &gt; getWNorm2 OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::getWNorm2 Vect&lt; OFELI::Point&lt; real_t &gt; &gt; getWNorm2 OFELI::Vect&lt; int &gt;::getWNorm2 Vect&lt; int &gt;</field>
    <field name="text">Calculate weighted 2 norm of vector The weighted 2 norm is the 2 Norm of the vector divided by the square root of its size</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::Vect</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;v, size_t n)</field>
    <field name="url">classOFELI_1_1Vect.html#a77147e687903cbb36d4610bf4d39bc73</field>
    <field name="keywords">Vect OFELI::Vect::Vect Vect&lt; T_ &gt; Vect OFELI::Vect&lt; real_t &gt;::Vect Vect&lt; real_t &gt; Vect OFELI::Vect&lt; complex_t &gt;::Vect Vect&lt; complex_t &gt; Vect OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::Vect Vect&lt; OFELI::Point&lt; real_t &gt; &gt; Vect OFELI::Vect&lt; int &gt;::Vect Vect&lt; int &gt;</field>
    <field name="text">Constructor to select one component from a given 2 or 3 component vector v Vect instance to extract from n Component to extract must be 1 and 4 or</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::operator()</field>
    <field name="args">(size_t i, size_t j) const</field>
    <field name="url">classOFELI_1_1Vect.html#a78adc6c13ad0f1d1dedacffe0e80ce63</field>
    <field name="keywords">operator() OFELI::Vect::operator() Vect&lt; T_ &gt; operator() OFELI::Vect&lt; real_t &gt;::operator() Vect&lt; real_t &gt; operator() OFELI::Vect&lt; complex_t &gt;::operator() Vect&lt; complex_t &gt; operator() OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::operator() Vect&lt; OFELI::Point&lt; real_t &gt; &gt; operator() OFELI::Vect&lt; int &gt;::operator() Vect&lt; int &gt;</field>
    <field name="text">Operator with 2 D indexing Constant version i first index in vector Number of vector components in the x grid j second index in vector Number of vector components in the y grid v(i,j) starts at v(1,1) to v getNx() getNy()</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::operator=</field>
    <field name="args">(const T_ &amp;a)</field>
    <field name="url">classOFELI_1_1Vect.html#a7a1a5c6a60a5a3c371d6d3bbe0aa164e</field>
    <field name="keywords">operator= OFELI::Vect::operator= Vect&lt; T_ &gt; operator= OFELI::Vect&lt; real_t &gt;::operator= Vect&lt; real_t &gt; operator= OFELI::Vect&lt; complex_t &gt;::operator= Vect&lt; complex_t &gt; operator= OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::operator= Vect&lt; OFELI::Point&lt; real_t &gt; &gt; operator= OFELI::Vect&lt; int &gt;::operator= Vect&lt; int &gt;</field>
    <field name="text">Operator Assign a constant to vector entries a Value to set</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::select</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;v, size_t n)</field>
    <field name="url">classOFELI_1_1Vect.html#a7bf473f1f7579f6a18f209ab69491e72</field>
    <field name="keywords">select OFELI::Vect::select Vect&lt; T_ &gt; select OFELI::Vect&lt; real_t &gt;::select Vect&lt; real_t &gt; select OFELI::Vect&lt; complex_t &gt;::select Vect&lt; complex_t &gt; select OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::select Vect&lt; OFELI::Point&lt; real_t &gt; &gt; select OFELI::Vect&lt; int &gt;::select Vect&lt; int &gt;</field>
    <field name="text">Select one component from a given multicomponent vector v Vect instance to extract from n Component to extract must be 1 and 4 or</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::operator-=</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1Vect.html#a7d61f6f034a7a0164a18cf6e6f4b1df6</field>
    <field name="keywords">operator-= OFELI::Vect::operator-= Vect&lt; T_ &gt; operator-= OFELI::Vect&lt; real_t &gt;::operator-= Vect&lt; real_t &gt; operator-= OFELI::Vect&lt; complex_t &gt;::operator-= Vect&lt; complex_t &gt; operator-= OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::operator-= Vect&lt; OFELI::Point&lt; real_t &gt; &gt; operator-= OFELI::Vect&lt; int &gt;::operator-= Vect&lt; int &gt;</field>
    <field name="text">Operator v Vect instance to subtract from</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::setDG</field>
    <field name="args">(int degree=1)</field>
    <field name="url">classOFELI_1_1Vect.html#a7d7317a28c3fd047820dfcf32d6743fc</field>
    <field name="keywords">setDG OFELI::Vect::setDG Vect&lt; T_ &gt; setDG OFELI::Vect&lt; real_t &gt;::setDG Vect&lt; real_t &gt; setDG OFELI::Vect&lt; complex_t &gt;::setDG Vect&lt; complex_t &gt; setDG OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::setDG Vect&lt; OFELI::Point&lt; real_t &gt; &gt; setDG OFELI::Vect&lt; int &gt;::setDG Vect&lt; int &gt;</field>
    <field name="text">Set Discontinuous Galerkin type vector When the vector is associated to a mesh this one is sized differently if the DG method is used degree Polynomial degree of the DG method Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::Assembly</field>
    <field name="args">(const Element &amp;el, const Vect&lt; T_ &gt; &amp;b)</field>
    <field name="url">classOFELI_1_1Vect.html#a7f03a8bc222f3e5d3f9f9e0d218b596f</field>
    <field name="keywords">Assembly OFELI::Vect::Assembly Vect&lt; T_ &gt; Assembly OFELI::Vect&lt; real_t &gt;::Assembly Vect&lt; real_t &gt; Assembly OFELI::Vect&lt; complex_t &gt;::Assembly Vect&lt; complex_t &gt; Assembly OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::Assembly Vect&lt; OFELI::Point&lt; real_t &gt; &gt; Assembly OFELI::Vect&lt; int &gt;::Assembly Vect&lt; int &gt;</field>
    <field name="text">Assembly of element vector into current instance el Reference to Element instance b Local vector to assemble Instance of class Vect</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::getNx</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Vect.html#a849205bb532d7f55bcc9da0916e02d1d</field>
    <field name="keywords">getNx OFELI::Vect::getNx Vect&lt; T_ &gt; getNx OFELI::Vect&lt; real_t &gt;::getNx Vect&lt; real_t &gt; getNx OFELI::Vect&lt; complex_t &gt;::getNx Vect&lt; complex_t &gt; getNx OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::getNx Vect&lt; OFELI::Point&lt; real_t &gt; &gt; getNx OFELI::Vect&lt; int &gt;::getNx Vect&lt; int &gt;</field>
    <field name="text">Return number of grid points in the x direction if grid indexing is set</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::Vect</field>
    <field name="args">(Grid &amp;g)</field>
    <field name="url">classOFELI_1_1Vect.html#a851c5f6fd53f7e6f6e5acac7085bf441</field>
    <field name="keywords">Vect OFELI::Vect::Vect Vect&lt; T_ &gt; Vect OFELI::Vect&lt; real_t &gt;::Vect Vect&lt; real_t &gt; Vect OFELI::Vect&lt; complex_t &gt;::Vect Vect&lt; complex_t &gt; Vect OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::Vect Vect&lt; OFELI::Point&lt; real_t &gt; &gt; Vect OFELI::Vect&lt; int &gt;::Vect Vect&lt; int &gt;</field>
    <field name="text">Constructor with a Grid instance The constructed vector has as size the total number of grid nodes g Grid instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::setGrid</field>
    <field name="args">(Grid &amp;g)</field>
    <field name="url">classOFELI_1_1Vect.html#a87331a9635eceef10522f1a66e60c21b</field>
    <field name="keywords">setGrid OFELI::Vect::setGrid Vect&lt; T_ &gt; setGrid OFELI::Vect&lt; real_t &gt;::setGrid Vect&lt; real_t &gt; setGrid OFELI::Vect&lt; complex_t &gt;::setGrid Vect&lt; complex_t &gt; setGrid OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::setGrid Vect&lt; OFELI::Point&lt; real_t &gt; &gt; setGrid OFELI::Vect&lt; int &gt;::setGrid Vect&lt; int &gt;</field>
    <field name="text">Define grid class to size vector g Grid instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::set</field>
    <field name="args">(size_t i, size_t j, size_t k, T_ val)</field>
    <field name="url">classOFELI_1_1Vect.html#a88a862579aab3c9a84c304c4dfb6b4df</field>
    <field name="keywords">set OFELI::Vect::set Vect&lt; T_ &gt; set OFELI::Vect&lt; real_t &gt;::set Vect&lt; real_t &gt; set OFELI::Vect&lt; complex_t &gt;::set Vect&lt; complex_t &gt; set OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::set Vect&lt; OFELI::Point&lt; real_t &gt; &gt; set OFELI::Vect&lt; int &gt;::set Vect&lt; int &gt;</field>
    <field name="text">Assign a value to an entry for a 3 D vector i First index in vector starts at 1 j Second index in vector starts at 1 k Third index in vector starts at 1 val Value to assign</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::Vect</field>
    <field name="args">(Mesh &amp;m, DOFSupport dof_type, string name, int nb_dof=0, real_t t=0.0)</field>
    <field name="url">classOFELI_1_1Vect.html#a88cc652d2ad98e453a98627ac1dc1c7d</field>
    <field name="keywords">Vect OFELI::Vect::Vect Vect&lt; T_ &gt; Vect OFELI::Vect&lt; real_t &gt;::Vect Vect&lt; real_t &gt; Vect OFELI::Vect&lt; complex_t &gt;::Vect Vect&lt; complex_t &gt; Vect OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::Vect Vect&lt; OFELI::Point&lt; real_t &gt; &gt; Vect OFELI::Vect&lt; int &gt;::Vect Vect&lt; int &gt;</field>
    <field name="text">Constructor with a mesh instance giving name and time for vector m Mesh instance dof_type Type of degrees of freedom To be given among the enumerated values NODE_DOF ELEMENT_DOF SIDE_DOF or EDGE_DOF name Name of the vector nb_dof Number of degrees of freedom per node element or side If nb_dof is set to 0 the constructor picks this number from the Mesh instance t Time value for the vector Default 0.0</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::setSideBC</field>
    <field name="args">(Mesh &amp;m, int code, T_ val, size_t dof)</field>
    <field name="url">classOFELI_1_1Vect.html#a88dd5872a50b05ef12a5422d612d29fc</field>
    <field name="keywords">setSideBC OFELI::Vect::setSideBC Vect&lt; T_ &gt; setSideBC OFELI::Vect&lt; real_t &gt;::setSideBC Vect&lt; real_t &gt; setSideBC OFELI::Vect&lt; complex_t &gt;::setSideBC Vect&lt; complex_t &gt; setSideBC OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::setSideBC Vect&lt; OFELI::Point&lt; real_t &gt; &gt; setSideBC OFELI::Vect&lt; int &gt;::setSideBC Vect&lt; int &gt;</field>
    <field name="text">Assign a given value to components of vector corresponding to sides with given code Vector components are assumed nodewise m Instance of mesh code Code for which nodes will be assigned prescribed value val Value to prescribe dof Degree of Freedom for which the value is assigned default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::insertBC</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;v, int dof=0)</field>
    <field name="url">classOFELI_1_1Vect.html#a895554f9c712da8df521d3ccd78937db</field>
    <field name="keywords">insertBC OFELI::Vect::insertBC Vect&lt; T_ &gt; insertBC OFELI::Vect&lt; real_t &gt;::insertBC Vect&lt; real_t &gt; insertBC OFELI::Vect&lt; complex_t &gt;::insertBC Vect&lt; complex_t &gt; insertBC OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::insertBC Vect&lt; OFELI::Point&lt; real_t &gt; &gt; insertBC OFELI::Vect&lt; int &gt;::insertBC Vect&lt; int &gt;</field>
    <field name="text">Insert boundary conditions DOF with imposed boundary conditions are set to zero v Vect instance from which free degrees of freedom are copied to current instance dof Parameter to say if all degrees of freedom are concerned 0 Default or if only one degree of freedom dof is inserted into vector v which has only one degree of freedom by node or side This member function is to be used in the case where a constructor with a Mesh has been used</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::Vect</field>
    <field name="args">(size_t n, T_ *x)</field>
    <field name="url">classOFELI_1_1Vect.html#a8a4f1696826d3621a451457b78d8bf3c</field>
    <field name="keywords">Vect OFELI::Vect::Vect Vect&lt; T_ &gt; Vect OFELI::Vect&lt; real_t &gt;::Vect Vect&lt; real_t &gt; Vect OFELI::Vect&lt; complex_t &gt;::Vect Vect&lt; complex_t &gt; Vect OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::Vect Vect&lt; OFELI::Point&lt; real_t &gt; &gt; Vect OFELI::Vect&lt; int &gt;::Vect Vect&lt; int &gt;</field>
    <field name="text">Create an instance of class Vect as an image of a C/C++ array n Dimension of vector to construct x C-array to copy</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::getNt</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Vect.html#a91faf65f2c429d03b0603f47033fbe1a</field>
    <field name="keywords">getNt OFELI::Vect::getNt Vect&lt; T_ &gt; getNt OFELI::Vect&lt; real_t &gt;::getNt Vect&lt; real_t &gt; getNt OFELI::Vect&lt; complex_t &gt;::getNt Vect&lt; complex_t &gt; getNt OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::getNt Vect&lt; OFELI::Point&lt; real_t &gt; &gt; getNt OFELI::Vect&lt; int &gt;::getNt Vect&lt; int &gt;</field>
    <field name="text">Return number of grid points in the t direction if grid indexing is set</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::getNb</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Vect.html#a92782f6619be7589c322169d3e2ccc5b</field>
    <field name="keywords">getNb OFELI::Vect::getNb Vect&lt; T_ &gt; getNb OFELI::Vect&lt; real_t &gt;::getNb Vect&lt; real_t &gt; getNb OFELI::Vect&lt; complex_t &gt;::getNb Vect&lt; complex_t &gt; getNb OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::getNb Vect&lt; OFELI::Point&lt; real_t &gt; &gt; getNb OFELI::Vect&lt; int &gt;::getNb Vect&lt; int &gt;</field>
    <field name="text">Return vector number of entities nodes elements or sides</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::push_back</field>
    <field name="args">(const T_ &amp;v)</field>
    <field name="url">classOFELI_1_1Vect.html#a94407a2ae16d8766df36fe20489d050d</field>
    <field name="keywords">push_back OFELI::Vect::push_back Vect&lt; T_ &gt; push_back OFELI::Vect&lt; real_t &gt;::push_back Vect&lt; real_t &gt; push_back OFELI::Vect&lt; complex_t &gt;::push_back Vect&lt; complex_t &gt; push_back OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::push_back Vect&lt; OFELI::Point&lt; real_t &gt; &gt; push_back OFELI::Vect&lt; int &gt;::push_back Vect&lt; int &gt;</field>
    <field name="text">Add an entry to the vector This function is an overload of the member function push_back of the parent class vector It adjusts in addition some vector parameters v Entry value to add</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::transferBC</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;bc, int dof=0)</field>
    <field name="url">classOFELI_1_1Vect.html#a9627c869a561014b0bf376f16f909af5</field>
    <field name="keywords">transferBC OFELI::Vect::transferBC Vect&lt; T_ &gt; transferBC OFELI::Vect&lt; real_t &gt;::transferBC Vect&lt; real_t &gt; transferBC OFELI::Vect&lt; complex_t &gt;::transferBC Vect&lt; complex_t &gt; transferBC OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::transferBC Vect&lt; OFELI::Point&lt; real_t &gt; &gt; transferBC OFELI::Vect&lt; int &gt;::transferBC Vect&lt; int &gt;</field>
    <field name="text">Transfer boundary conditions to the vector bc Vect instance from which imposed degrees of freedom are copied to current instance dof Parameter to say if all degrees of freedom are concerned 0 Default or if only one degree of freedom dof is inserted into vector v which has only one degree of freedom</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::setSideBC</field>
    <field name="args">(int code, T_ val, size_t dof)</field>
    <field name="url">classOFELI_1_1Vect.html#a9852b46c94046f66c6b97d8638042c20</field>
    <field name="keywords">setSideBC OFELI::Vect::setSideBC Vect&lt; T_ &gt; setSideBC OFELI::Vect&lt; real_t &gt;::setSideBC Vect&lt; real_t &gt; setSideBC OFELI::Vect&lt; complex_t &gt;::setSideBC Vect&lt; complex_t &gt; setSideBC OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::setSideBC Vect&lt; OFELI::Point&lt; real_t &gt; &gt; setSideBC OFELI::Vect&lt; int &gt;::setSideBC Vect&lt; int &gt;</field>
    <field name="text">Assign a given value to components of vector with given code Vector components are assumed nodewise code Code for which nodes will be assigned prescribed value val Value to prescribe dof Degree of Freedom for which the value is assigned This member function is to be used in the case where a constructor with a Mesh has been used</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::Vect</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;v, size_t nb_dof, size_t first_dof)</field>
    <field name="url">classOFELI_1_1Vect.html#a9927681632ff0a5310521db6e14698fa</field>
    <field name="keywords">Vect OFELI::Vect::Vect Vect&lt; T_ &gt; Vect OFELI::Vect&lt; real_t &gt;::Vect Vect&lt; real_t &gt; Vect OFELI::Vect&lt; complex_t &gt;::Vect Vect&lt; complex_t &gt; Vect OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::Vect Vect&lt; OFELI::Point&lt; real_t &gt; &gt; Vect OFELI::Vect&lt; int &gt;::Vect Vect&lt; int &gt;</field>
    <field name="text">Constructor to select some components of a given vector v Vect instance to extract from nb_dof Number of DOF to extract first_dof First DOF to extract For instance a choice first_dof 2 and nb_dof 1 means that the second DOF of each node is copied in the vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::set</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;x, const string &amp;exp)</field>
    <field name="url">classOFELI_1_1Vect.html#a99f36e06d9f3ef69be0f0c5c86f42598</field>
    <field name="keywords">set OFELI::Vect::set Vect&lt; T_ &gt; set OFELI::Vect&lt; real_t &gt;::set Vect&lt; real_t &gt; set OFELI::Vect&lt; complex_t &gt;::set Vect&lt; complex_t &gt; set OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::set Vect&lt; OFELI::Point&lt; real_t &gt; &gt; set OFELI::Vect&lt; int &gt;::set Vect&lt; int &gt;</field>
    <field name="text">Initialize vector with an algebraic expression x Vect instance that contains coordinates of points exp Regular algebraic expression that defines a function of x and i which are coordinates Consider for instance that we want to initialize the Vect instance with the values v i exp 1 x i then we use this member function as follows v.set 1 x x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::insertBC</field>
    <field name="args">(Mesh &amp;m, const Vect&lt; T_ &gt; &amp;v, int dof=0)</field>
    <field name="url">classOFELI_1_1Vect.html#a9b00900f0b1070c202072e777280be92</field>
    <field name="keywords">insertBC OFELI::Vect::insertBC Vect&lt; T_ &gt; insertBC OFELI::Vect&lt; real_t &gt;::insertBC Vect&lt; real_t &gt; insertBC OFELI::Vect&lt; complex_t &gt;::insertBC Vect&lt; complex_t &gt; insertBC OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::insertBC Vect&lt; OFELI::Point&lt; real_t &gt; &gt; insertBC OFELI::Vect&lt; int &gt;::insertBC Vect&lt; int &gt;</field>
    <field name="text">Insert boundary conditions DOF with imposed boundary conditions are set to zero m Mesh instance v Vect instance from which free degrees of freedom are copied to current instance dof Parameter to say if all degrees of freedom are concerned 0 Default or if only one degree of freedom dof is inserted into vector v which has only one degree of freedom by node or side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::Vect</field>
    <field name="args">(size_t n)</field>
    <field name="url">classOFELI_1_1Vect.html#aa1b768ae78c0259094a91e8a05782578</field>
    <field name="keywords">Vect OFELI::Vect::Vect Vect&lt; T_ &gt; Vect OFELI::Vect&lt; real_t &gt;::Vect Vect&lt; real_t &gt; Vect OFELI::Vect&lt; complex_t &gt;::Vect Vect&lt; complex_t &gt; Vect OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::Vect Vect&lt; OFELI::Point&lt; real_t &gt; &gt; Vect OFELI::Vect&lt; int &gt;::Vect Vect&lt; int &gt;</field>
    <field name="text">Constructor setting vector size n Size of vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::Vect</field>
    <field name="args">(size_t nx, size_t ny)</field>
    <field name="url">classOFELI_1_1Vect.html#aa1dd275b488f2327773b736953ce4ac2</field>
    <field name="keywords">Vect OFELI::Vect::Vect Vect&lt; T_ &gt; Vect OFELI::Vect&lt; real_t &gt;::Vect Vect&lt; real_t &gt; Vect OFELI::Vect&lt; complex_t &gt;::Vect Vect&lt; complex_t &gt; Vect OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::Vect Vect&lt; OFELI::Point&lt; real_t &gt; &gt; Vect OFELI::Vect&lt; int &gt;::Vect Vect&lt; int &gt;</field>
    <field name="text">Constructor of a 2 D index vector This constructor can be used for instance for a 2 D grid vector nx Size for the first index ny Size for the second index The size of resulting vector is nx*ny</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::setSideBC</field>
    <field name="args">(Mesh &amp;m, int code, const string &amp;exp)</field>
    <field name="url">classOFELI_1_1Vect.html#aa49d082774cbf6a27bad4cb5acb28df3</field>
    <field name="keywords">setSideBC OFELI::Vect::setSideBC Vect&lt; T_ &gt; setSideBC OFELI::Vect&lt; real_t &gt;::setSideBC Vect&lt; real_t &gt; setSideBC OFELI::Vect&lt; complex_t &gt;::setSideBC Vect&lt; complex_t &gt; setSideBC OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::setSideBC Vect&lt; OFELI::Point&lt; real_t &gt; &gt; setSideBC OFELI::Vect&lt; int &gt;::setSideBC Vect&lt; int &gt;</field>
    <field name="text">Assign a given function given by an interpretable algebraic expression to components of vector corresponding to sides with given code Vector components are assumed nodewise Case of 1 DOF problem m Instance of mesh code Code for which nodes will be assigned prescribed value exp Regular algebraic expression to prescribe</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::getNorm1</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Vect.html#aa6522ea43e75d329c46165c7f76c393a</field>
    <field name="keywords">getNorm1 OFELI::Vect::getNorm1 Vect&lt; T_ &gt; getNorm1 OFELI::Vect&lt; real_t &gt;::getNorm1 Vect&lt; real_t &gt; getNorm1 OFELI::Vect&lt; complex_t &gt;::getNorm1 Vect&lt; complex_t &gt; getNorm1 OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::getNorm1 Vect&lt; OFELI::Point&lt; real_t &gt; &gt; getNorm1 OFELI::Vect&lt; int &gt;::getNorm1 Vect&lt; int &gt;</field>
    <field name="text">Calculate 1 norm of vector This function is available only if the template parameter is double or complex double</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::setUniform</field>
    <field name="args">(T_ vmin, T_ vmax, size_t n)</field>
    <field name="url">classOFELI_1_1Vect.html#aa74190fbaa94ac9ed6d7f9218dd64c8a</field>
    <field name="keywords">setUniform OFELI::Vect::setUniform Vect&lt; T_ &gt; setUniform OFELI::Vect&lt; real_t &gt;::setUniform Vect&lt; real_t &gt; setUniform OFELI::Vect&lt; complex_t &gt;::setUniform Vect&lt; complex_t &gt; setUniform OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::setUniform Vect&lt; OFELI::Point&lt; real_t &gt; &gt; setUniform OFELI::Vect&lt; int &gt;::setUniform Vect&lt; int &gt;</field>
    <field name="text">Initialize vector entries by setting extremal values and interval vmin Minimal value to assign to the first entry vmax Maximal value to assign to the lase entry n Number of points including extremities The vector has a size of n It is sized in this function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::Assembly</field>
    <field name="args">(const Side &amp;sd, const Vect&lt; T_ &gt; &amp;b)</field>
    <field name="url">classOFELI_1_1Vect.html#aa9db35a0146daf1f325ffba340ee68bb</field>
    <field name="keywords">Assembly OFELI::Vect::Assembly Vect&lt; T_ &gt; Assembly OFELI::Vect&lt; real_t &gt;::Assembly Vect&lt; real_t &gt; Assembly OFELI::Vect&lt; complex_t &gt;::Assembly Vect&lt; complex_t &gt; Assembly OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::Assembly Vect&lt; OFELI::Point&lt; real_t &gt; &gt; Assembly OFELI::Vect&lt; int &gt;::Assembly Vect&lt; int &gt;</field>
    <field name="text">Assembly of side vector into Vect instance sd Reference to Side instance b Local vector to assemble Instance of class Vect</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::setSize</field>
    <field name="args">(size_t nx, size_t ny=1, size_t nz=1, size_t nt=1)</field>
    <field name="url">classOFELI_1_1Vect.html#aabb704be55965afdc4fd270c84936f92</field>
    <field name="keywords">setSize OFELI::Vect::setSize Vect&lt; T_ &gt; setSize OFELI::Vect&lt; real_t &gt;::setSize Vect&lt; real_t &gt; setSize OFELI::Vect&lt; complex_t &gt;::setSize Vect&lt; complex_t &gt; setSize OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::setSize Vect&lt; OFELI::Point&lt; real_t &gt; &gt; setSize OFELI::Vect&lt; int &gt;::setSize Vect&lt; int &gt;</field>
    <field name="text">Set vector size for 1 D 2 D or 3 D cases and 3 D time This function allocates memory for the vector but does not initialize its components nx Number of grid points in x direction ny Number of grid points in y direction Default 1 nz Number of grid points in z direction Default 1 nt Number of grid points in t direction Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::operator=</field>
    <field name="args">(string s)</field>
    <field name="url">classOFELI_1_1Vect.html#aac845d683211bff51178563e0a732a45</field>
    <field name="keywords">operator= OFELI::Vect::operator= Vect&lt; T_ &gt; operator= OFELI::Vect&lt; real_t &gt;::operator= Vect&lt; real_t &gt; operator= OFELI::Vect&lt; complex_t &gt;::operator= Vect&lt; complex_t &gt; operator= OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::operator= Vect&lt; OFELI::Point&lt; real_t &gt; &gt; operator= OFELI::Vect&lt; int &gt;::operator= Vect&lt; int &gt;</field>
    <field name="text">Operator Assign an algebraic expression to vector entries This operator has the same effect as the member function set(s) s String defining the algebraic expression as a function of coordinates and time A Mesh instance must has been introduced before e.g by a constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::operator()</field>
    <field name="args">(size_t i, size_t j)</field>
    <field name="url">classOFELI_1_1Vect.html#aacbbe150d69a1246cb76f24419cae7ac</field>
    <field name="keywords">operator() OFELI::Vect::operator() Vect&lt; T_ &gt; operator() OFELI::Vect&lt; real_t &gt;::operator() Vect&lt; real_t &gt; operator() OFELI::Vect&lt; complex_t &gt;::operator() Vect&lt; complex_t &gt; operator() OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::operator() Vect&lt; OFELI::Point&lt; real_t &gt; &gt; operator() OFELI::Vect&lt; int &gt;::operator() Vect&lt; int &gt;</field>
    <field name="text">Operator with 2 D indexing Non constant version case of a grid vector i first index in vector Number of vector components in the x grid j second index in vector Number of vector components in the y grid v(i,j) starts at v(1,1) to v getNx() getNy()</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::set</field>
    <field name="args">(const string &amp;exp, size_t dof=1)</field>
    <field name="url">classOFELI_1_1Vect.html#aae7d214f021da61f322d63f473150fb2</field>
    <field name="keywords">set OFELI::Vect::set Vect&lt; T_ &gt; set OFELI::Vect&lt; real_t &gt;::set Vect&lt; real_t &gt; set OFELI::Vect&lt; complex_t &gt;::set Vect&lt; complex_t &gt; set OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::set Vect&lt; OFELI::Point&lt; real_t &gt; &gt; set OFELI::Vect&lt; int &gt;::set Vect&lt; int &gt;</field>
    <field name="text">Initialize vector with an algebraic expression This function is to be used is a Mesh instance is associated to the vector exp Regular algebraic expression that defines a function of x y z which are coordinates of nodes and t which is the time value dof Degree of freedom to which the value is assigned Default 1 If the time variable t is involved in the expression the time value associated to the vector instance must be defined Default value is 0 either by using the appropriate constructor or by the member function setTime</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::set</field>
    <field name="args">(size_t i, T_ val)</field>
    <field name="url">classOFELI_1_1Vect.html#ab2de1f5bbeb4e8d838636f9defdcdb4a</field>
    <field name="keywords">set OFELI::Vect::set Vect&lt; T_ &gt; set OFELI::Vect&lt; real_t &gt;::set Vect&lt; real_t &gt; set OFELI::Vect&lt; complex_t &gt;::set Vect&lt; complex_t &gt; set OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::set Vect&lt; OFELI::Point&lt; real_t &gt; &gt; set OFELI::Vect&lt; int &gt;::set Vect&lt; int &gt;</field>
    <field name="text">Assign a value to an entry for a 1 D vector i Rank index in vector starts at 1 val Value to assign</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::getGradient</field>
    <field name="args">(class Vect&lt; T_ &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1Vect.html#ab4371b03bc62514d6bb86d61372c54aa</field>
    <field name="keywords">getGradient OFELI::Vect::getGradient Vect&lt; T_ &gt; getGradient OFELI::Vect&lt; real_t &gt;::getGradient Vect&lt; real_t &gt; getGradient OFELI::Vect&lt; complex_t &gt;::getGradient Vect&lt; complex_t &gt; getGradient OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::getGradient Vect&lt; OFELI::Point&lt; real_t &gt; &gt; getGradient OFELI::Vect&lt; int &gt;::getGradient Vect&lt; int &gt;</field>
    <field name="text">Evaluate the discrete Gradient vector of the current vector The resulting gradient is stored in a Vect instance This function handles node vectors assuming P 1 approximation The gradient is then a constant vector for each element v Vect instance that contains the gradient where v(n,1) v(n,2) and v(n,3) are respectively the x and y and z derivatives at element n</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::setMesh</field>
    <field name="args">(Mesh &amp;m, DOFSupport dof_type=NODE_DOF, size_t nb_dof=0)</field>
    <field name="url">classOFELI_1_1Vect.html#ab60b041f7019e4ff9b32a86180844795</field>
    <field name="keywords">setMesh OFELI::Vect::setMesh Vect&lt; T_ &gt; setMesh OFELI::Vect&lt; real_t &gt;::setMesh Vect&lt; real_t &gt; setMesh OFELI::Vect&lt; complex_t &gt;::setMesh Vect&lt; complex_t &gt; setMesh OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::setMesh Vect&lt; OFELI::Point&lt; real_t &gt; &gt; setMesh OFELI::Vect&lt; int &gt;::setMesh Vect&lt; int &gt;</field>
    <field name="text">Define mesh class to size vector m Mesh instance dof_type Parameter to precise the type of degrees of freedom To be chosen among the enumerated values NODE_DOF ELEMENT_DOF SIDE_DOF EDGE_DOF Default NODE_DOF nb_dof Number of degrees of freedom per node element or side If nb_dof is set to 0 the constructor picks this number from the Mesh instance Default 0</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::Norm</field>
    <field name="args">(NormType t) const</field>
    <field name="url">classOFELI_1_1Vect.html#ab8672face78a895a146197d78a895a12</field>
    <field name="keywords">Norm OFELI::Vect::Norm Vect&lt; T_ &gt; Norm OFELI::Vect&lt; real_t &gt;::Norm Vect&lt; real_t &gt; Norm OFELI::Vect&lt; complex_t &gt;::Norm Vect&lt; complex_t &gt; Norm OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::Norm Vect&lt; OFELI::Point&lt; real_t &gt; &gt; Norm OFELI::Vect&lt; int &gt;::Norm Vect&lt; int &gt;</field>
    <field name="text">Compute a norm of vector t Norm type to compute To choose among enumerate values NORM1 1 norm WNORM1 Weighted 1 norm Discrete L1-norm NORM2 2 norm WNORM2 Weighted 2 norm Discrete L2-norm NORM_MAX max norm Infinity norm Value of norm This function is available for real valued vectors only</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::getMin</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Vect.html#ab9a84bbc934e6f989a16586f40abf39d</field>
    <field name="keywords">getMin OFELI::Vect::getMin Vect&lt; T_ &gt; getMin OFELI::Vect&lt; real_t &gt;::getMin Vect&lt; real_t &gt; getMin OFELI::Vect&lt; complex_t &gt;::getMin Vect&lt; complex_t &gt; getMin OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::getMin Vect&lt; OFELI::Point&lt; real_t &gt; &gt; getMin OFELI::Vect&lt; int &gt;::getMin Vect&lt; int &gt;</field>
    <field name="text">Calculate Min value of vector entries</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::setNodeBC</field>
    <field name="args">(int code, T_ val, size_t dof)</field>
    <field name="url">classOFELI_1_1Vect.html#abac508b24a746a43fc0d3a2500f04911</field>
    <field name="keywords">setNodeBC OFELI::Vect::setNodeBC Vect&lt; T_ &gt; setNodeBC OFELI::Vect&lt; real_t &gt;::setNodeBC Vect&lt; real_t &gt; setNodeBC OFELI::Vect&lt; complex_t &gt;::setNodeBC Vect&lt; complex_t &gt; setNodeBC OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::setNodeBC Vect&lt; OFELI::Point&lt; real_t &gt; &gt; setNodeBC OFELI::Vect&lt; int &gt;::setNodeBC Vect&lt; int &gt;</field>
    <field name="text">Assign a given value to components of vector with given code Vector components are assumed nodewise code Code for which nodes will be assigned prescribed value val Value to prescribe dof Degree of Freedom for which the value is assigned default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::Vect</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1Vect.html#abd742447a661c711a5a5d30244d09270</field>
    <field name="keywords">Vect OFELI::Vect::Vect Vect&lt; T_ &gt; Vect OFELI::Vect&lt; real_t &gt;::Vect Vect&lt; real_t &gt; Vect OFELI::Vect&lt; complex_t &gt;::Vect Vect&lt; complex_t &gt; Vect OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::Vect Vect&lt; OFELI::Point&lt; real_t &gt; &gt; Vect OFELI::Vect&lt; int &gt;::Vect Vect&lt; int &gt;</field>
    <field name="text">Copy constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::Assembly</field>
    <field name="args">(const Side &amp;sd, const T_ *b)</field>
    <field name="url">classOFELI_1_1Vect.html#abe3ce8dd975970f9d42fc8b7a374cb56</field>
    <field name="keywords">Assembly OFELI::Vect::Assembly Vect&lt; T_ &gt; Assembly OFELI::Vect&lt; real_t &gt;::Assembly Vect&lt; real_t &gt; Assembly OFELI::Vect&lt; complex_t &gt;::Assembly Vect&lt; complex_t &gt; Assembly OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::Assembly Vect&lt; OFELI::Point&lt; real_t &gt; &gt; Assembly OFELI::Vect&lt; int &gt;::Assembly Vect&lt; int &gt;</field>
    <field name="text">Assembly of side vector as C-array into Vect instance sd Reference to Side instance b Local vector to assemble C-Array</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::removeBC</field>
    <field name="args">(const Mesh &amp;ms, const Vect&lt; T_ &gt; &amp;v, int dof=0)</field>
    <field name="url">classOFELI_1_1Vect.html#ac36abf40f2b531bf1da7bdd8dcdb882f</field>
    <field name="keywords">removeBC OFELI::Vect::removeBC Vect&lt; T_ &gt; removeBC OFELI::Vect&lt; real_t &gt;::removeBC Vect&lt; real_t &gt; removeBC OFELI::Vect&lt; complex_t &gt;::removeBC Vect&lt; complex_t &gt; removeBC OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::removeBC Vect&lt; OFELI::Point&lt; real_t &gt; &gt; removeBC OFELI::Vect&lt; int &gt;::removeBC Vect&lt; int &gt;</field>
    <field name="text">Remove boundary conditions This member function copies to current vector a vector where only non imposed DOF are retained ms Mesh instance v Vector Vect instance to copy from dof Parameter to say if all degrees of freedom are concerned 0 Default or if only one degree of freedom dof is inserted into vector v which has only one degree of freedom</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::operator+=</field>
    <field name="args">(const T_ &amp;a)</field>
    <field name="url">classOFELI_1_1Vect.html#ac7683253bcfd13a88718b24deab9e37e</field>
    <field name="keywords">operator+= OFELI::Vect::operator+= Vect&lt; T_ &gt; operator+= OFELI::Vect&lt; real_t &gt;::operator+= Vect&lt; real_t &gt; operator+= OFELI::Vect&lt; complex_t &gt;::operator+= Vect&lt; complex_t &gt; operator+= OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::operator+= Vect&lt; OFELI::Point&lt; real_t &gt; &gt; operator+= OFELI::Vect&lt; int &gt;::operator+= Vect&lt; int &gt;</field>
    <field name="text">Operator Add a constant to current vector entries a Value to add to vector entries</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::clear</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Vect.html#ac8bb3912a3ce86b15842e79d0b421204</field>
    <field name="keywords">clear OFELI::Vect::clear Vect&lt; T_ &gt; clear OFELI::Vect&lt; real_t &gt;::clear Vect&lt; real_t &gt; clear OFELI::Vect&lt; complex_t &gt;::clear Vect&lt; complex_t &gt; clear OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::clear Vect&lt; OFELI::Point&lt; real_t &gt; &gt; clear OFELI::Vect&lt; int &gt;::clear Vect&lt; int &gt;</field>
    <field name="text">Clear vector Set all its elements to zero</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::insertBC</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;v, const Vect&lt; T_ &gt; &amp;bc, int dof=0)</field>
    <field name="url">classOFELI_1_1Vect.html#acc1590941f7bd3a45693675f1870a351</field>
    <field name="keywords">insertBC OFELI::Vect::insertBC Vect&lt; T_ &gt; insertBC OFELI::Vect&lt; real_t &gt;::insertBC Vect&lt; real_t &gt; insertBC OFELI::Vect&lt; complex_t &gt;::insertBC Vect&lt; complex_t &gt; insertBC OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::insertBC Vect&lt; OFELI::Point&lt; real_t &gt; &gt; insertBC OFELI::Vect&lt; int &gt;::insertBC Vect&lt; int &gt;</field>
    <field name="text">Insert boundary conditions v Vect instance from which free degrees of freedom are copied to current instance bc Vect instance from which imposed degrees of freedom are copied to current instance dof Parameter to say if all degrees of freedom are concerned 0 Default or if only one degree of freedom dof is inserted into vector v which has only one degree of freedom by node or side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::Vect</field>
    <field name="args">(Mesh &amp;m, DOFSupport dof_type=NODE_DOF, int nb_dof=0)</field>
    <field name="url">classOFELI_1_1Vect.html#acdc0f24d05a22f1012e7b4e9a046bbd9</field>
    <field name="keywords">Vect OFELI::Vect::Vect Vect&lt; T_ &gt; Vect OFELI::Vect&lt; real_t &gt;::Vect Vect&lt; real_t &gt; Vect OFELI::Vect&lt; complex_t &gt;::Vect Vect&lt; complex_t &gt; Vect OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::Vect Vect&lt; OFELI::Point&lt; real_t &gt; &gt; Vect OFELI::Vect&lt; int &gt;::Vect Vect&lt; int &gt;</field>
    <field name="text">Constructor with a mesh instance m Mesh instance dof_type Type of degrees of freedom To be given among the enumerated values NODE_DOF ELEMENT_DOF SIDE_DOF or EDGE_DOF Default NODE_DOF nb_dof Number of degrees of freedom per node element or side If nb_dof is set to 0 default value the constructor picks this number from the Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::setSideBC</field>
    <field name="args">(int code, T_ val)</field>
    <field name="url">classOFELI_1_1Vect.html#ace44fa2233957af35d9370e31c618992</field>
    <field name="keywords">setSideBC OFELI::Vect::setSideBC Vect&lt; T_ &gt; setSideBC OFELI::Vect&lt; real_t &gt;::setSideBC Vect&lt; real_t &gt; setSideBC OFELI::Vect&lt; complex_t &gt;::setSideBC Vect&lt; complex_t &gt; setSideBC OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::setSideBC Vect&lt; OFELI::Point&lt; real_t &gt; &gt; setSideBC OFELI::Vect&lt; int &gt;::setSideBC Vect&lt; int &gt;</field>
    <field name="text">Assign a given value to components of vector with given code Vector components are assumed nodewise Concerns 1 DOF problems code Code for which nodes will be assigned prescribed value val Value to prescribe This member function is to be used in the case where a constructor with a Mesh has been used</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::operator*=</field>
    <field name="args">(const T_ &amp;a)</field>
    <field name="url">classOFELI_1_1Vect.html#ace76a0b38716f77a4c6399999fb9f9fc</field>
    <field name="keywords">operator*= OFELI::Vect::operator*= Vect&lt; T_ &gt; operator*= OFELI::Vect&lt; real_t &gt;::operator*= Vect&lt; real_t &gt; operator*= OFELI::Vect&lt; complex_t &gt;::operator*= Vect&lt; complex_t &gt; operator*= OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::operator*= Vect&lt; OFELI::Point&lt; real_t &gt; &gt; operator*= OFELI::Vect&lt; int &gt;::operator*= Vect&lt; int &gt;</field>
    <field name="text">Operator a Value to multiply by</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::set</field>
    <field name="args">(const T_ *v, size_t n)</field>
    <field name="url">classOFELI_1_1Vect.html#ace847de83f86cb6a02920d61c0d88db1</field>
    <field name="keywords">set OFELI::Vect::set Vect&lt; T_ &gt; set OFELI::Vect&lt; real_t &gt;::set Vect&lt; real_t &gt; set OFELI::Vect&lt; complex_t &gt;::set Vect&lt; complex_t &gt; set OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::set Vect&lt; OFELI::Point&lt; real_t &gt; &gt; set OFELI::Vect&lt; int &gt;::set Vect&lt; int &gt;</field>
    <field name="text">Initialize vector with a c-array v c-array pointer to initialize Vect n size of array</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::getMeshPtr</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Vect.html#ad2caf39b0a090338a4cacf6559af2a07</field>
    <field name="keywords">getMeshPtr OFELI::Vect::getMeshPtr Vect&lt; T_ &gt; getMeshPtr OFELI::Vect&lt; real_t &gt;::getMeshPtr Vect&lt; real_t &gt; getMeshPtr OFELI::Vect&lt; complex_t &gt;::getMeshPtr Vect&lt; complex_t &gt; getMeshPtr OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::getMeshPtr Vect&lt; OFELI::Point&lt; real_t &gt; &gt; getMeshPtr OFELI::Vect&lt; int &gt;::getMeshPtr Vect&lt; int &gt;</field>
    <field name="text">Return reference to Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::operator-=</field>
    <field name="args">(const T_ &amp;a)</field>
    <field name="url">classOFELI_1_1Vect.html#ad41551a1ae858a37597b317d79cd429f</field>
    <field name="keywords">operator-= OFELI::Vect::operator-= Vect&lt; T_ &gt; operator-= OFELI::Vect&lt; real_t &gt;::operator-= Vect&lt; real_t &gt; operator-= OFELI::Vect&lt; complex_t &gt;::operator-= Vect&lt; complex_t &gt; operator-= OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::operator-= Vect&lt; OFELI::Point&lt; real_t &gt; &gt; operator-= OFELI::Vect&lt; int &gt;::operator-= Vect&lt; int &gt;</field>
    <field name="text">Operator Subtract constant from vector entries a Value to subtract from</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::Vect</field>
    <field name="args">(const Side *sd, const Vect&lt; T_ &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1Vect.html#ad49cef8738f9d4bba77ff27b8c6aabdd</field>
    <field name="keywords">Vect OFELI::Vect::Vect Vect&lt; T_ &gt; Vect OFELI::Vect&lt; real_t &gt;::Vect Vect&lt; real_t &gt; Vect OFELI::Vect&lt; complex_t &gt;::Vect Vect&lt; complex_t &gt; Vect OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::Vect Vect&lt; OFELI::Point&lt; real_t &gt; &gt; Vect OFELI::Vect&lt; int &gt;::Vect Vect&lt; int &gt;</field>
    <field name="text">Constructor of a side vector The constructed vector has local numbering of nodes sd Pointer to Side to localize v Global vector to localize</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::Axpy</field>
    <field name="args">(T_ a, const Vect&lt; T_ &gt; &amp;x)</field>
    <field name="url">classOFELI_1_1Vect.html#ad549cf0857fc340838eec060fec2d675</field>
    <field name="keywords">Axpy OFELI::Vect::Axpy Vect&lt; T_ &gt; Axpy OFELI::Vect&lt; real_t &gt;::Axpy Vect&lt; real_t &gt; Axpy OFELI::Vect&lt; complex_t &gt;::Axpy Vect&lt; complex_t &gt; Axpy OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::Axpy Vect&lt; OFELI::Point&lt; real_t &gt; &gt; Axpy OFELI::Vect&lt; int &gt;::Axpy Vect&lt; int &gt;</field>
    <field name="text">Add to vector the product of a vector by a scalar a Scalar to premultiply x Vect instance by which a is multiplied The result is added to current instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::add</field>
    <field name="args">(size_t i, size_t j, size_t k, T_ val)</field>
    <field name="url">classOFELI_1_1Vect.html#ad6e02dc6ade159cb5cc1952ac8563f1d</field>
    <field name="keywords">add OFELI::Vect::add Vect&lt; T_ &gt; add OFELI::Vect&lt; real_t &gt;::add Vect&lt; real_t &gt; add OFELI::Vect&lt; complex_t &gt;::add Vect&lt; complex_t &gt; add OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::add Vect&lt; OFELI::Point&lt; real_t &gt; &gt; add OFELI::Vect&lt; int &gt;::add Vect&lt; int &gt;</field>
    <field name="text">Assign a value to an entry for a 3 index vector i First index in vector starts at 1 j Second index in vector starts at 1 k Third index in vector starts at 1 val Value to assign</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::setDOFType</field>
    <field name="args">(DOFSupport dof_type)</field>
    <field name="url">classOFELI_1_1Vect.html#ad74ba3f11d18c260343e122e11d1736e</field>
    <field name="keywords">setDOFType OFELI::Vect::setDOFType Vect&lt; T_ &gt; setDOFType OFELI::Vect&lt; real_t &gt;::setDOFType Vect&lt; real_t &gt; setDOFType OFELI::Vect&lt; complex_t &gt;::setDOFType Vect&lt; complex_t &gt; setDOFType OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::setDOFType Vect&lt; OFELI::Point&lt; real_t &gt; &gt; setDOFType OFELI::Vect&lt; int &gt;::setDOFType Vect&lt; int &gt;</field>
    <field name="text">Set DOF type of vector The DOF type combined with number of DOF per component enable determining the size of vector dof_type Type of degrees of freedom Value to be chosen among the enumerated values NODE_DOF ELEMENT_DOF SIDE_DOF or EDGE_DOF</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::WithMesh</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Vect.html#adbe5435915dea54c0407879712a4391a</field>
    <field name="keywords">WithMesh OFELI::Vect::WithMesh Vect&lt; T_ &gt; WithMesh OFELI::Vect&lt; real_t &gt;::WithMesh Vect&lt; real_t &gt; WithMesh OFELI::Vect&lt; complex_t &gt;::WithMesh Vect&lt; complex_t &gt; WithMesh OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::WithMesh Vect&lt; OFELI::Point&lt; real_t &gt; &gt; WithMesh OFELI::Vect&lt; int &gt;::WithMesh Vect&lt; int &gt;</field>
    <field name="text">Return true if vector contains a Mesh pointer false if not A Vect instance can be constructed using mesh information</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::getTime</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Vect.html#ae01a616f806c6e6916fd869aa09e8869</field>
    <field name="keywords">getTime OFELI::Vect::getTime Vect&lt; T_ &gt; getTime OFELI::Vect&lt; real_t &gt;::getTime Vect&lt; real_t &gt; getTime OFELI::Vect&lt; complex_t &gt;::getTime Vect&lt; complex_t &gt; getTime OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::getTime Vect&lt; OFELI::Point&lt; real_t &gt; &gt; getTime OFELI::Vect&lt; int &gt;::getTime Vect&lt; int &gt;</field>
    <field name="text">Get time value for vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::Vect</field>
    <field name="args">(size_t nx, size_t ny, size_t nz, size_t nt)</field>
    <field name="url">classOFELI_1_1Vect.html#ae07008296c5fb41157c7ff9ed45c1a94</field>
    <field name="keywords">Vect OFELI::Vect::Vect Vect&lt; T_ &gt; Vect OFELI::Vect&lt; real_t &gt;::Vect Vect&lt; real_t &gt; Vect OFELI::Vect&lt; complex_t &gt;::Vect Vect&lt; complex_t &gt; Vect OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::Vect Vect&lt; OFELI::Point&lt; real_t &gt; &gt; Vect OFELI::Vect&lt; int &gt;::Vect Vect&lt; int &gt;</field>
    <field name="text">Constructor of a 4 D index vector This constructor can be used for instance for a 4 D grid vector nx Size for the first index ny Size for the second index nz Size for the third index nt Size for the fourth index The size of resulting vector is nx*ny*nz*nt</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::operator,</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;v) const</field>
    <field name="url">classOFELI_1_1Vect.html#ae084e5e70f269dc6e3fbd3a969039868</field>
    <field name="keywords">operator, OFELI::Vect::operator, Vect&lt; T_ &gt; operator, OFELI::Vect&lt; real_t &gt;::operator, Vect&lt; real_t &gt; operator, OFELI::Vect&lt; complex_t &gt;::operator, Vect&lt; complex_t &gt; operator, OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::operator, Vect&lt; OFELI::Point&lt; real_t &gt; &gt; operator, OFELI::Vect&lt; int &gt;::operator, Vect&lt; int &gt;</field>
    <field name="text">Return Dot scalar product of two vectors A typical use of this operator is double a v w where v and w are 2 instances of Vect&lt;double&gt; v Vect instance by which the current instance is multiplied</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::Vect</field>
    <field name="args">(const Element *el, const Vect&lt; T_ &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1Vect.html#ae172b64746bc5ad782b85fc3a3e24fe5</field>
    <field name="keywords">Vect OFELI::Vect::Vect Vect&lt; T_ &gt; Vect OFELI::Vect&lt; real_t &gt;::Vect Vect&lt; real_t &gt; Vect OFELI::Vect&lt; complex_t &gt;::Vect Vect&lt; complex_t &gt; Vect OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::Vect Vect&lt; OFELI::Point&lt; real_t &gt; &gt; Vect OFELI::Vect&lt; int &gt;::Vect Vect&lt; int &gt;</field>
    <field name="text">Constructor of an element vector The constructed vector has local numbering of nodes el Pointer to Element to localize v Global vector to localize</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::getInvFFT</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Vect.html#ae19efa23199572c9930c800cf0855dad</field>
    <field name="keywords">getInvFFT OFELI::Vect::getInvFFT Vect&lt; T_ &gt; getInvFFT OFELI::Vect&lt; real_t &gt;::getInvFFT Vect&lt; real_t &gt; getInvFFT OFELI::Vect&lt; complex_t &gt;::getInvFFT Vect&lt; complex_t &gt; getInvFFT OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::getInvFFT Vect&lt; OFELI::Point&lt; real_t &gt; &gt; getInvFFT OFELI::Vect&lt; int &gt;::getInvFFT Vect&lt; int &gt;</field>
    <field name="text">Compute Inverse FFT transform of vector This member function computes the inverse FFT Fast Fourier Transform of the vector contained in the instance and returns it Vect complex&lt;double&gt; instance containing the FFT The size of Vect instance must be a power of two and must not exceed the value of 2 This value is set in the header The Vect instance can be either a Vect&lt;double&gt; or Vec complex&lt;double&gt;</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::setNodeBC</field>
    <field name="args">(int code, const string &amp;exp, size_t dof)</field>
    <field name="url">classOFELI_1_1Vect.html#ae2807596586406ad3642a8593512cd56</field>
    <field name="keywords">setNodeBC OFELI::Vect::setNodeBC Vect&lt; T_ &gt; setNodeBC OFELI::Vect&lt; real_t &gt;::setNodeBC Vect&lt; real_t &gt; setNodeBC OFELI::Vect&lt; complex_t &gt;::setNodeBC Vect&lt; complex_t &gt; setNodeBC OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::setNodeBC Vect&lt; OFELI::Point&lt; real_t &gt; &gt; setNodeBC OFELI::Vect&lt; int &gt;::setNodeBC Vect&lt; int &gt;</field>
    <field name="text">Assign a given function given by an interpretable algebraic expression to components of vector with given code Vector components are assumed nodewise code Code for which nodes will be assigned prescribed value exp Regular algebraic expression to prescribe dof Degree of Freedom for which the value is assigned default 1 This member function is to be used in the case where a constructor with a Mesh has been used</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::Assembly</field>
    <field name="args">(const Element &amp;el, const T_ *b)</field>
    <field name="url">classOFELI_1_1Vect.html#ae515e2df7bb8ea9bf653746efe540057</field>
    <field name="keywords">Assembly OFELI::Vect::Assembly Vect&lt; T_ &gt; Assembly OFELI::Vect&lt; real_t &gt;::Assembly Vect&lt; real_t &gt; Assembly OFELI::Vect&lt; complex_t &gt;::Assembly Vect&lt; complex_t &gt; Assembly OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::Assembly Vect&lt; OFELI::Point&lt; real_t &gt; &gt; Assembly OFELI::Vect&lt; int &gt;::Assembly Vect&lt; int &gt;</field>
    <field name="text">Assembly of element vector as C-array into Vect instance el Reference to Element instance b Local vector to assemble C-Array</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::~Vect</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1Vect.html#ae651112ac283815a6b96c3ba9995cac8</field>
    <field name="keywords">OFELI::Vect::~Vect Vect&lt; T_ &gt; OFELI::Vect&lt; real_t &gt;::~Vect Vect&lt; real_t &gt; OFELI::Vect&lt; complex_t &gt;::~Vect Vect&lt; complex_t &gt; OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::~Vect Vect&lt; OFELI::Point&lt; real_t &gt; &gt; OFELI::Vect&lt; int &gt;::~Vect Vect&lt; int &gt;</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::getNy</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Vect.html#aeea0ee66ff8e29ad86071be29a9f744b</field>
    <field name="keywords">getNy OFELI::Vect::getNy Vect&lt; T_ &gt; getNy OFELI::Vect&lt; real_t &gt;::getNy Vect&lt; real_t &gt; getNy OFELI::Vect&lt; complex_t &gt;::getNy Vect&lt; complex_t &gt; getNy OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::getNy Vect&lt; OFELI::Point&lt; real_t &gt; &gt; getNy OFELI::Vect&lt; int &gt;::getNy Vect&lt; int &gt;</field>
    <field name="text">Return number of grid points in the y direction if grid indexing is set</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::getNorm2</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Vect.html#af1186f6d5040d52baa8441aad123e67e</field>
    <field name="keywords">getNorm2 OFELI::Vect::getNorm2 Vect&lt; T_ &gt; getNorm2 OFELI::Vect&lt; real_t &gt;::getNorm2 Vect&lt; real_t &gt; getNorm2 OFELI::Vect&lt; complex_t &gt;::getNorm2 Vect&lt; complex_t &gt; getNorm2 OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::getNorm2 Vect&lt; OFELI::Point&lt; real_t &gt; &gt; getNorm2 OFELI::Vect&lt; int &gt;::getNorm2 Vect&lt; int &gt;</field>
    <field name="text">Calculate 2 norm Euclidean norm of vector This function is available only if the template parameter is double or complex double</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::getGradient</field>
    <field name="args">(Vect&lt; Point&lt; T_ &gt; &gt; &amp;v)</field>
    <field name="url">classOFELI_1_1Vect.html#af28323e0c7691a37d7e338908e8c5dc1</field>
    <field name="keywords">getGradient OFELI::Vect::getGradient Vect&lt; T_ &gt; getGradient OFELI::Vect&lt; real_t &gt;::getGradient Vect&lt; real_t &gt; getGradient OFELI::Vect&lt; complex_t &gt;::getGradient Vect&lt; complex_t &gt; getGradient OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::getGradient Vect&lt; OFELI::Point&lt; real_t &gt; &gt; getGradient OFELI::Vect&lt; int &gt;::getGradient Vect&lt; int &gt;</field>
    <field name="text">Evaluate the discrete Gradient vector of the current vector The resulting gradient is stored in an Vect instance This function handles node vectors assuming P 1 approximation The gradient is then a constant vector for each element v Vect instance that contains the gradient where v(n,1) x v(n,2) y and v(n,3) z are respectively the x and y and z derivatives at element n</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::setSideBC</field>
    <field name="args">(int code, const string &amp;exp)</field>
    <field name="url">classOFELI_1_1Vect.html#af2a4a3c10889bf0ef3d85333d0d1c2b1</field>
    <field name="keywords">setSideBC OFELI::Vect::setSideBC Vect&lt; T_ &gt; setSideBC OFELI::Vect&lt; real_t &gt;::setSideBC Vect&lt; real_t &gt; setSideBC OFELI::Vect&lt; complex_t &gt;::setSideBC Vect&lt; complex_t &gt; setSideBC OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::setSideBC Vect&lt; OFELI::Point&lt; real_t &gt; &gt; setSideBC OFELI::Vect&lt; int &gt;::setSideBC Vect&lt; int &gt;</field>
    <field name="text">Assign a given function given by an interpre table algebraic expression to components of vector with given code Vector components are assumed nodewise Case of 1 DOF problem code Code for which nodes will be assigned prescribed value exp Regular algebraic expression to prescribe This member function is to be used in the case where a constructor with a Mesh has been used</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::operator()</field>
    <field name="args">(size_t i, size_t j, size_t k) const</field>
    <field name="url">classOFELI_1_1Vect.html#af2b25e4efc9cea3ce4398f05b129cfb2</field>
    <field name="keywords">operator() OFELI::Vect::operator() Vect&lt; T_ &gt; operator() OFELI::Vect&lt; real_t &gt;::operator() Vect&lt; real_t &gt; operator() OFELI::Vect&lt; complex_t &gt;::operator() Vect&lt; complex_t &gt; operator() OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::operator() Vect&lt; OFELI::Point&lt; real_t &gt; &gt; operator() OFELI::Vect&lt; int &gt;::operator() Vect&lt; int &gt;</field>
    <field name="text">Operator with 3 D indexing Constant version i first index in vector Number of vector components in the x grid j second index in vector Number of vector components in the y grid k third index in vector Number of vector components in the z grid v(i,j,k) starts at v(1,1,1) to v getNx() getNy() getNz()</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::setNodeBC</field>
    <field name="args">(Mesh &amp;m, int code, const string &amp;exp)</field>
    <field name="url">classOFELI_1_1Vect.html#af8c034890212d42f39812506b3ccf0bf</field>
    <field name="keywords">setNodeBC OFELI::Vect::setNodeBC Vect&lt; T_ &gt; setNodeBC OFELI::Vect&lt; real_t &gt;::setNodeBC Vect&lt; real_t &gt; setNodeBC OFELI::Vect&lt; complex_t &gt;::setNodeBC Vect&lt; complex_t &gt; setNodeBC OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::setNodeBC Vect&lt; OFELI::Point&lt; real_t &gt; &gt; setNodeBC OFELI::Vect&lt; int &gt;::setNodeBC Vect&lt; int &gt;</field>
    <field name="text">Assign a given function given by an interpretable algebraic expression to components of vector with given code Vector components are assumed nodewise Case of 1 DOF problem m Instance of mesh code Code for which nodes will be assigned prescribed value exp Regular algebraic expression to prescribe</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::setTime</field>
    <field name="args">(real_t t)</field>
    <field name="url">classOFELI_1_1Vect.html#af910aabb8c41158f77202936fa117182</field>
    <field name="keywords">setTime OFELI::Vect::setTime Vect&lt; T_ &gt; setTime OFELI::Vect&lt; real_t &gt;::setTime Vect&lt; real_t &gt; setTime OFELI::Vect&lt; complex_t &gt;::setTime Vect&lt; complex_t &gt; setTime OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::setTime Vect&lt; OFELI::Point&lt; real_t &gt; &gt; setTime OFELI::Vect&lt; int &gt;::setTime Vect&lt; int &gt;</field>
    <field name="text">Set time value for vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::getDOFType</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1Vect.html#afcebc57c317d0be7c29e9bbe0480053c</field>
    <field name="keywords">getDOFType OFELI::Vect::getDOFType Vect&lt; T_ &gt; getDOFType OFELI::Vect&lt; real_t &gt;::getDOFType Vect&lt; real_t &gt; getDOFType OFELI::Vect&lt; complex_t &gt;::getDOFType Vect&lt; complex_t &gt; getDOFType OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::getDOFType Vect&lt; OFELI::Point&lt; real_t &gt; &gt; getDOFType OFELI::Vect&lt; int &gt;::getDOFType Vect&lt; int &gt;</field>
    <field name="text">Return DOF type of vector dof_type Type of degrees of freedom Value among the enumerated values NODE_DOF ELEMENT_DOF SIDE_DOF or EDGE_DOF</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::setNodeBC</field>
    <field name="args">(Mesh &amp;m, int code, T_ val, size_t dof)</field>
    <field name="url">classOFELI_1_1Vect.html#afd38d51dca4e67ac80fdcbea87c23c46</field>
    <field name="keywords">setNodeBC OFELI::Vect::setNodeBC Vect&lt; T_ &gt; setNodeBC OFELI::Vect&lt; real_t &gt;::setNodeBC Vect&lt; real_t &gt; setNodeBC OFELI::Vect&lt; complex_t &gt;::setNodeBC Vect&lt; complex_t &gt; setNodeBC OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::setNodeBC Vect&lt; OFELI::Point&lt; real_t &gt; &gt; setNodeBC OFELI::Vect&lt; int &gt;::setNodeBC Vect&lt; int &gt;</field>
    <field name="text">Assign a given value to components of vector with given code Vector components are assumed nodewise m Mesh instance code The value is assigned if the node has this code val Value to assign dof Degree of freedom to assign</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Vect::setNodeBC</field>
    <field name="args">(Mesh &amp;m, int code, const string &amp;exp, size_t dof)</field>
    <field name="url">classOFELI_1_1Vect.html#afe393a3ce74956d45145675d750fdc7e</field>
    <field name="keywords">setNodeBC OFELI::Vect::setNodeBC Vect&lt; T_ &gt; setNodeBC OFELI::Vect&lt; real_t &gt;::setNodeBC Vect&lt; real_t &gt; setNodeBC OFELI::Vect&lt; complex_t &gt;::setNodeBC Vect&lt; complex_t &gt; setNodeBC OFELI::Vect&lt; OFELI::Point&lt; real_t &gt; &gt;::setNodeBC Vect&lt; OFELI::Point&lt; real_t &gt; &gt; setNodeBC OFELI::Vect&lt; int &gt;::setNodeBC Vect&lt; int &gt;</field>
    <field name="text">Assign a given function given by an interpretable algebraic expression to components of vector with given code Vector components are assumed nodewise m Instance of mesh code Code for which nodes will be assigned prescribed value exp Regular algebraic expression to prescribe dof Degree of Freedom for which the value is assigned</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::WaterPorous2D</field>
    <field name="url">classOFELI_1_1WaterPorous2D.html</field>
    <field name="keywords">WaterPorous2D</field>
    <field name="text">To solve water flow equations in porous media 1 D To solve water flow equations in porous media 2 D Class WaterPorous2D solves the fluid flow equations of water or any incompressible or slightly compressible fluid in a porous medium in two-dimensional configurations Porous media flows are modelled here by the Darcy law The water or any other fluid is considered as slightly compressible i.e its compressibility coefficient is constant Space discretization uses the P 1 2 Node line finite element method Time integration uses class TimeStepping that provides various well known time integration schemes Class WaterPorous2D solves the fluid flow equations of water or any incompressible or slightly compressible fluid in a porous medium in two-dimensional configurations Porous media flows are modelled here by the Darcy law The water or any other fluid is considered as slightly compressible i.e its compressibility coefficient is constant Space discretization uses the P 1 3 Node triangle finite element method Time integration uses class TimeStepping that provides various well known time integration schemes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::WaterPorous2D::setCoef</field>
    <field name="args">(real_t cw, real_t phi, real_t rho, real_t Kx, real_t Ky, real_t mu)</field>
    <field name="url">classOFELI_1_1WaterPorous2D.html#a04b5fe3eb21acfb21862572e8f8af66c</field>
    <field name="keywords">setCoef OFELI::WaterPorous2D::setCoef WaterPorous2D</field>
    <field name="text">Set constant coefficients cw Compressibility coefficient phi Porosity rho Density Kx x-Absolute permeability Ky y-Absolute permeability mu Viscosity</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::WaterPorous2D::WaterPorous2D</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">classOFELI_1_1WaterPorous2D.html#a32160f26591950b634b81fb04654133c</field>
    <field name="keywords">WaterPorous2D OFELI::WaterPorous2D::WaterPorous2D WaterPorous2D</field>
    <field name="text">Constructor This constructor uses mesh and reservoir information ms Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::WaterPorous2D::BodyRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;bf)</field>
    <field name="url">classOFELI_1_1WaterPorous2D.html#a35b782d3e1af2065e372c2d932615ff4</field>
    <field name="keywords">BodyRHS OFELI::WaterPorous2D::BodyRHS WaterPorous2D</field>
    <field name="text">Add source right-hand side term to right-hand side bf Vector containing source at nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::WaterPorous2D::Mass</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1WaterPorous2D.html#a3e80867e15ab5fd5f7fb377b1c964246</field>
    <field name="keywords">Mass OFELI::WaterPorous2D::Mass WaterPorous2D</field>
    <field name="text">Add mass term contribution the element matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::WaterPorous2D::WaterPorous2D</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1WaterPorous2D.html#a40aeb1a1134f44d2a4c2c989b35263bc</field>
    <field name="keywords">WaterPorous2D OFELI::WaterPorous2D::WaterPorous2D WaterPorous2D</field>
    <field name="text">Default Constructor Constructs an empty equation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::WaterPorous2D::BoundaryRHS</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;sf)</field>
    <field name="url">classOFELI_1_1WaterPorous2D.html#a5bd66e267fd02585d4001d88b39750a7</field>
    <field name="keywords">BoundaryRHS OFELI::WaterPorous2D::BoundaryRHS WaterPorous2D</field>
    <field name="text">Add boundary right-hand side term to right-hand side sf Vector containing source at nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::WaterPorous2D::Mobility</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1WaterPorous2D.html#abf6c16b31e45652f96b74a2a40c4d7d8</field>
    <field name="keywords">Mobility OFELI::WaterPorous2D::Mobility WaterPorous2D</field>
    <field name="text">Add mobility term contribution the element matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::WaterPorous2D::~WaterPorous2D</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1WaterPorous2D.html#af90ab5c1daff88f8d598c1036729b74b</field>
    <field name="keywords">OFELI::WaterPorous2D::~WaterPorous2D WaterPorous2D</field>
    <field name="text">Destructor</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::triangle</field>
    <field name="url">classOFELI_1_1triangle.html</field>
    <field name="keywords">triangle</field>
    <field name="text">Defines a triangle The reference element is the rectangle triangle with two unit edges Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::triangle::triangle</field>
    <field name="args">(const Element *el)</field>
    <field name="url">classOFELI_1_1triangle.html#a1b9973d57f98cf47364d3831b011b610</field>
    <field name="keywords">triangle OFELI::triangle::triangle triangle</field>
    <field name="text">Constructor for an element Constructor for an element Constructor for an element The constructed triangle is an element in a 2 D mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::triangle::getMaxEdgeLength</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1triangle.html#a25ca31b393289f740e8ed58b06a30cd3</field>
    <field name="keywords">getMaxEdgeLength OFELI::triangle::getMaxEdgeLength triangle</field>
    <field name="text">Return maximal edge length of triangle Return maximal edge length of triangle Return maximal edge length of triangle</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::triangle::getCenter</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1triangle.html#a29518c54ba3a66576ee2859724fc88cd</field>
    <field name="keywords">getCenter OFELI::triangle::getCenter triangle</field>
    <field name="text">Return coordinates of center of element Return coordinates of center of element Return coordinates of center of element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::triangle::getCircumcenter</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1triangle.html#a308c380e011cbe1ad5b93d351b41ffdf</field>
    <field name="keywords">getCircumcenter OFELI::triangle::getCircumcenter triangle</field>
    <field name="text">Return coordinates of circumcenter of element Return coordinates of circumcenter of element Return coordinates of circumcenter of element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::triangle::getMinEdgeLength</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1triangle.html#a3b36d8923b27960cb53038075675ebaf</field>
    <field name="keywords">getMinEdgeLength OFELI::triangle::getMinEdgeLength triangle</field>
    <field name="text">Return minimal edge length of triangle Return minimal edge length of triangle Return minimal edge length of triangle</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::triangle::getArea</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1triangle.html#a6c6c22a4828902098b5e2d99309f74e9</field>
    <field name="keywords">getArea OFELI::triangle::getArea triangle</field>
    <field name="text">Return element area Return element area Return element area</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::triangle::getCircumRadius</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1triangle.html#a785f6dd02cd055fd0198900b139cb711</field>
    <field name="keywords">getCircumRadius OFELI::triangle::getCircumRadius triangle</field>
    <field name="text">Return radius of circumscribed circle of triangle Return radius of circumscribed circle of triangle Return radius of circumscribed circle of triangle</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::triangle::isIn</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;x) const</field>
    <field name="url">classOFELI_1_1triangle.html#a97ecf0b3b6b8ff4a52dc88effc6e6067</field>
    <field name="keywords">isIn OFELI::triangle::isIn triangle</field>
    <field name="text">Check whether point x is in current triangle or not Check whether point x is in current triangle or not Check whether point x is in current triangle or not</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::triangle::~triangle</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1triangle.html#aa90c33c4ab76e39be4b39f3eaaa232ef</field>
    <field name="keywords">OFELI::triangle::~triangle triangle</field>
    <field name="text">Destructor Destructor Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::triangle::getRefCoord</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;x) const</field>
    <field name="url">classOFELI_1_1triangle.html#abff50ca550f56e9a0468549a7081df4c</field>
    <field name="keywords">getRefCoord OFELI::triangle::getRefCoord triangle</field>
    <field name="text">Return reference coordinates of a point x in element Return reference coordinates of a point x in element Return reference coordinates of a point x in element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::triangle::triangle</field>
    <field name="args">(const Side *sd)</field>
    <field name="url">classOFELI_1_1triangle.html#ad2a357d65aef4a524ae63a11801f9b12</field>
    <field name="keywords">triangle OFELI::triangle::triangle triangle</field>
    <field name="text">Constructor for a side Constructor for a side Constructor for a side The constructed triangle is a side in a 3 D mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::triangle::triangle</field>
    <field name="args">()</field>
    <field name="url">classOFELI_1_1triangle.html#aee18579fe54e859a60b719481c024adb</field>
    <field name="keywords">triangle OFELI::triangle::triangle triangle</field>
    <field name="text">Default Constructor Default Constructor Default Constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::triangle::isStrictlyIn</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;x) const</field>
    <field name="url">classOFELI_1_1triangle.html#af751dd4345c2727431fce3e2d2d20c24</field>
    <field name="keywords">isStrictlyIn OFELI::triangle::isStrictlyIn triangle</field>
    <field name="text">Check whether point x is strictly in current triangle not on the boundary or not Check whether point x is strictly in current triangle not on the boundary or not Check whether point x is strictly in current triangle not on the boundary or not</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::triangle::getInRadius</field>
    <field name="args">() const</field>
    <field name="url">classOFELI_1_1triangle.html#afdd44adb228f1ffb8c6d270576cd4f79</field>
    <field name="keywords">getInRadius OFELI::triangle::getInRadius triangle</field>
    <field name="text">Return radius of inscribed circle of triangle Return radius of inscribed circle of triangle Return radius of inscribed circle of triangle</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">constants.h</field>
    <field name="url">constants_8h.html</field>
    <field name="keywords">constants.h</field>
    <field name="text">File that contains some widely used constants</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">getMesh.h</field>
    <field name="url">getMesh_8h.html</field>
    <field name="keywords">getMesh.h</field>
    <field name="text">Definition file for mesh conversion functions</field>
  </doc>
  <doc>
    <field name="type">group</field>
    <field name="name">Acoustics</field>
    <field name="url">group__Acoustics.html</field>
    <field name="keywords">Acoustic wave propagation problems</field>
    <field name="text">Acoustic wave propagation problems</field>
  </doc>
  <doc>
    <field name="type">group</field>
    <field name="name">ConservationLaws</field>
    <field name="url">group__ConservationLaws.html</field>
    <field name="keywords">Conservation Law Equations</field>
    <field name="text">Conservation law equations</field>
  </doc>
  <doc>
    <field name="type">group</field>
    <field name="name">Electromagnetics</field>
    <field name="url">group__Electromagnetics.html</field>
    <field name="keywords">Electromagnetics</field>
    <field name="text">Electromagnetic equations</field>
  </doc>
  <doc>
    <field name="type">group</field>
    <field name="name">Equation</field>
    <field name="url">group__Equation.html</field>
    <field name="keywords">General Purpose Equations</field>
    <field name="text">Gathers equation related classes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::side_assembly</field>
    <field name="args">(const Element &amp;e, const LocalVect&lt; T_, N_ &gt; &amp;be, Vect&lt; T_ &gt; &amp;b)</field>
    <field name="url">group__Equation.html#ga09b2cd612110a8fb93417512cf2d141d</field>
    <field name="keywords">side_assembly OFELI::side_assembly OFELI</field>
    <field name="text">Side assembly of local vector into global vector e Reference to local Element be Local vector b Global vector Rachid Touzani GNU Lesser Public License Side assembly of local vector into global vector e Reference to local Element be Local vector b Global vector Rachid Touzani GNU Lesser Public License Side assembly of local vector into global vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::element_assembly</field>
    <field name="args">(const E_ &amp;e, const LocalMatrix&lt; T_, N_, N_ &gt; &amp;ae, SkMatrix&lt; T_ &gt; &amp;A)</field>
    <field name="url">group__Equation.html#ga363fdfdc50f1efdfe62be86b991b5252</field>
    <field name="keywords">element_assembly OFELI::element_assembly OFELI</field>
    <field name="text">Assemble local matrix into global skyline matrix e Reference to local entity Element or Side ae Local matrix A Global matrix Rachid Touzani GNU Lesser Public License Assemble local matrix into global skyline matrix e Reference to local entity Element or Side ae Local matrix A Global matrix Rachid Touzani GNU Lesser Public License Assemble local matrix into global skyline matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::element_assembly</field>
    <field name="args">(const E_ &amp;e, const LocalMatrix&lt; T_, N_, N_ &gt; &amp;ae, SkSMatrix&lt; T_ &gt; &amp;A)</field>
    <field name="url">group__Equation.html#ga3958e7128e6bb653e831b78b9a032ff2</field>
    <field name="keywords">element_assembly OFELI::element_assembly OFELI</field>
    <field name="text">Assemble local matrix into global symmetric skyline matrix e Reference to local entity Element or Side ae Local matrix A Global matrix Rachid Touzani GNU Lesser Public License Assemble local matrix into global symmetric skyline matrix e Reference to local entity Element or Side ae Local matrix A Global matrix Rachid Touzani GNU Lesser Public License Assemble local matrix into global symmetric skyline matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::element_assembly</field>
    <field name="args">(const E_ &amp;e, const LocalVect&lt; T_, N_ &gt; &amp;be, Vect&lt; T_ &gt; &amp;b)</field>
    <field name="url">group__Equation.html#ga3ab579500de8769de3b183cea42dce14</field>
    <field name="keywords">element_assembly OFELI::element_assembly OFELI</field>
    <field name="text">Assemble local vector into global vector e Reference to local entity Element or Side be Local vector b Global vector Rachid Touzani GNU Lesser Public License Assemble local vector into global vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::element_assembly</field>
    <field name="args">(const E_ &amp;e, const LocalMatrix&lt; T_, N_, N_ &gt; &amp;ae, Matrix&lt; T_ &gt; *A)</field>
    <field name="url">group__Equation.html#ga5196cbacca486311a018f33717b4c697</field>
    <field name="keywords">element_assembly OFELI::element_assembly OFELI</field>
    <field name="text">Assemble local matrix into global matrix This function is to be called with an abstract pointer to matrix class Matrix e Reference to local entity Element or Side ae Local matrix A Pointer to global matrix Rachid Touzani GNU Lesser Public License Assemble local matrix into global matrix This function is to be called with an abstract pointer to matrix class Matrix e Reference to local entity Element or Side ae Local matrix A Pointer to global matrix Rachid Touzani GNU Lesser Public License Assemble local matrix into global matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::element_assembly</field>
    <field name="args">(const E_ &amp;e, const LocalMatrix&lt; T_, N_, N_ &gt; &amp;ae, Vect&lt; T_ &gt; &amp;b)</field>
    <field name="url">group__Equation.html#ga6a4f8e95d21ba585acf772e445f4ab9d</field>
    <field name="keywords">element_assembly OFELI::element_assembly OFELI</field>
    <field name="text">Assemble diagonal local vector into global vector e Reference to local entity Element or Side ae Local matrix b Global vector Rachid Touzani GNU Lesser Public License Assemble diagonal local vector into global vector e Reference to local entity Element or Side ae Local matrix b Global vector Rachid Touzani GNU Lesser Public License Assemble diagonal local vector into global vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::side_assembly</field>
    <field name="args">(const Element &amp;e, const LocalMatrix&lt; T_, N_, N_ &gt; &amp;ae, SkSMatrix&lt; T_ &gt; &amp;A)</field>
    <field name="url">group__Equation.html#gaaee6ce61574dcd9923e54b97a2a60a87</field>
    <field name="keywords">side_assembly OFELI::side_assembly OFELI</field>
    <field name="text">Side assembly of local matrix into global matrix as instance of class SkSMatrix e Reference to local Element ae Local matrix A Global matrix Rachid Touzani GNU Lesser Public License Side assembly of local matrix into global matrix as instance of class SkSMatrix e Reference to local Element ae Local matrix A Global matrix Rachid Touzani GNU Lesser Public License Side assembly of local matrix into global matrix as instance of class SkSMatrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::side_assembly</field>
    <field name="args">(const Element &amp;e, const LocalMatrix&lt; T_, N_, N_ &gt; &amp;ae, SpMatrix&lt; T_ &gt; &amp;A)</field>
    <field name="url">group__Equation.html#gadb888bcd56b25d968de26cbe2330f050</field>
    <field name="keywords">side_assembly OFELI::side_assembly OFELI</field>
    <field name="text">Side assembly of local matrix into global matrix as instance of class SpMatrix e Reference to local Element ae Local matrix A Global matrix Rachid Touzani GNU Lesser Public License Side assembly of local matrix into global matrix as instance of class SpMatrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::side_assembly</field>
    <field name="args">(const Element &amp;e, const LocalMatrix&lt; T_, N_, N_ &gt; &amp;ae, SkMatrix&lt; T_ &gt; &amp;A)</field>
    <field name="url">group__Equation.html#gae67cc928e5b6ad1298348b3de27e61f2</field>
    <field name="keywords">side_assembly OFELI::side_assembly OFELI</field>
    <field name="text">Side assembly of local matrix into global matrix as instance of class SkMatrix e Reference to local Element ae Local matrix A Global matrix Rachid Touzani GNU Lesser Public License Side assembly of local matrix into global matrix as instance of class SkMatrix e Reference to local Element ae Local matrix A Global matrix Rachid Touzani GNU Lesser Public License Side assembly of local matrix into global matrix as instance of class SkMatrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::element_assembly</field>
    <field name="args">(const E_ &amp;e, const LocalMatrix&lt; T_, N_, N_ &gt; &amp;ae, SpMatrix&lt; T_ &gt; &amp;A)</field>
    <field name="url">group__Equation.html#gafaa49315c672f500e012c2ade1fdebb3</field>
    <field name="keywords">element_assembly OFELI::element_assembly OFELI</field>
    <field name="text">Assemble local matrix into global sparse matrix e Reference to local entity Element or Side ae Local matrix A Global matrix Rachid Touzani GNU Lesser Public License Assemble local matrix into global sparse matrix e Reference to local entity Element or Side ae Local matrix A Global matrix Rachid Touzani GNU Lesser Public License Assemble local matrix into global sparse matrix</field>
  </doc>
  <doc>
    <field name="type">group</field>
    <field name="name">Fluid</field>
    <field name="url">group__Fluid.html</field>
    <field name="keywords">Fluid Dynamics</field>
    <field name="text">Fluid Dynamics equations</field>
  </doc>
  <doc>
    <field name="type">group</field>
    <field name="name">Generic</field>
    <field name="url">group__Generic.html</field>
    <field name="keywords">Generic</field>
    <field name="text">Generic partial differential equation</field>
  </doc>
  <doc>
    <field name="type">group</field>
    <field name="name">Global</field>
    <field name="url">group__Global.html</field>
    <field name="keywords">Global Variables</field>
    <field name="text">All global variables in the library</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">OFELI::theElement</field>
    <field name="url">group__Global.html#ga19531d741e72f835756252dd9cb15b42</field>
    <field name="keywords">theElement OFELI::theElement OFELI</field>
    <field name="text">A pointer to Element A pointer to Element Useful for loops on elements A pointer to Element</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">OFELI::Converged</field>
    <field name="url">group__Global.html#ga310de78bb611319b9c3964af2385d3d3</field>
    <field name="keywords">Converged OFELI::Converged OFELI</field>
    <field name="text">Boolean variable to say if an iterative procedure has converged Boolean variable to say if an iterative procedure has converged Its default value is false Boolean variable to say if an iterative procedure has converged</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">OFELI::theStep</field>
    <field name="url">group__Global.html#ga38d2fb1712228d1c76ac3f54b1d5872b</field>
    <field name="keywords">theStep OFELI::theStep OFELI</field>
    <field name="text">Time step counter Time step counter This counter must be initialized by the user if the macro timeLoop is not used May be used in conjunction with the macro TimeLoop In this case it has to be initialized before Its default value is 1 Time step counter</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">OFELI::theIteration</field>
    <field name="url">group__Global.html#ga39ce19b74a25e69e88ea1b39436fdfa4</field>
    <field name="keywords">theIteration OFELI::theIteration OFELI</field>
    <field name="text">Iteration counter Iteration counter This counter must be initialized by the user May be used in conjunction with the macro IterationLoop Its default value is 1 Iteration counter</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">OFELI::theFinalTime</field>
    <field name="url">group__Global.html#ga3fb590e5375a439474a2799323b4572b</field>
    <field name="keywords">theFinalTime OFELI::theFinalTime OFELI</field>
    <field name="text">Final time value Final time value May be used in conjunction with the macro TimeLoop In this case it has to be initialized before Final time value</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">OFELI::InitPetsc</field>
    <field name="url">group__Global.html#ga456491ea5cf5a6e7c0824c4bfa9caa1d</field>
    <field name="keywords">InitPetsc OFELI::InitPetsc OFELI</field>
    <field name="text">Boolean to say if PETSc use was initialized Useful only if PETSc is used</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">OFELI::MaxNbIterations</field>
    <field name="url">group__Global.html#ga534f6e466357af135f45bb1ce6f517c9</field>
    <field name="keywords">MaxNbIterations OFELI::MaxNbIterations OFELI</field>
    <field name="text">Maximal number of iterations Maximal number of iterations May be used in conjunction with the macro IterationLoop Its default value is 1 0 0 0 Maximal number of iterations</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">OFELI::NbTimeSteps</field>
    <field name="url">group__Global.html#ga564656b52180eab7d5f9abb58eb90fcf</field>
    <field name="keywords">NbTimeSteps OFELI::NbTimeSteps OFELI</field>
    <field name="text">Number of time steps Number of time steps May be used in conjunction with the macro TimeLoop Number of time steps</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">OFELI::theEdge</field>
    <field name="url">group__Global.html#ga5a8d24695c6d5aed37431999548a6dde</field>
    <field name="keywords">theEdge OFELI::theEdge OFELI</field>
    <field name="text">A pointer to Edge A pointer to Edge Useful for loops on edges A pointer to Edge</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">OFELI::theTolerance</field>
    <field name="url">group__Global.html#ga6ab70b3b92e55c6d63eae8004ef0c790</field>
    <field name="keywords">theTolerance OFELI::theTolerance OFELI</field>
    <field name="text">Tolerance value for convergence Tolerance value for convergence May be used within an iterative procedure Its default value is 1.e 8 Tolerance value for convergence</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">OFELI::theNode</field>
    <field name="url">group__Global.html#ga6db969dfc2364b6aac6068e60e97e43c</field>
    <field name="keywords">theNode OFELI::theNode OFELI</field>
    <field name="text">A pointer to Node A pointer to Node Useful for loops on nodes A pointer to Node</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">OFELI::theSide</field>
    <field name="url">group__Global.html#ga708182f7bc3372d09a486e26a7d9d7f9</field>
    <field name="keywords">theSide OFELI::theSide OFELI</field>
    <field name="text">A pointer to Side A pointer to Side Useful for loops on sides A pointer to Side</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">OFELI::theDiscrepancy</field>
    <field name="url">group__Global.html#ga88c4c57c48696938621b4c2911a1375f</field>
    <field name="keywords">theDiscrepancy OFELI::theDiscrepancy OFELI</field>
    <field name="text">Value of discrepancy for an iterative procedure Its default value is 1.0 Value of discrepancy for an iterative procedure Its default value is 1.0 Value of discrepancy for an iterative procedure Its default value is 1.0</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">OFELI::theTime</field>
    <field name="url">group__Global.html#gaa68f42f3d7b7cbe240136012d57e0d09</field>
    <field name="keywords">theTime OFELI::theTime OFELI</field>
    <field name="text">Time value Time value May be used in conjunction with the macro TimeLoop Its default value is 0.0 Time value</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">OFELI::Verbosity</field>
    <field name="url">group__Global.html#gab00944552a5ef41ef0c18de744dd8207</field>
    <field name="keywords">Verbosity OFELI::Verbosity OFELI</field>
    <field name="text">Verbosity parameter Verbosity parameter Parameter for verbosity of message outputting The value of Verbosity can be modified anywhere in the calling programs It allows outputting messages in function of the used class or function To see how this parameter is used in any class the OFELI user has to read corresponding documentation Its default value is 1 Verbosity parameter</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">OFELI::theTimeStep</field>
    <field name="url">group__Global.html#gafe343e984bb2022a960c0285c90ba97d</field>
    <field name="keywords">theTimeStep OFELI::theTimeStep OFELI</field>
    <field name="text">Time step label Time step label May be used in conjunction with the macro TimeLoop In this case it has to be initialized before Time step label</field>
  </doc>
  <doc>
    <field name="type">group</field>
    <field name="name">IO</field>
    <field name="url">group__IO.html</field>
    <field name="keywords">Input Output</field>
    <field name="text">Input/Output utility classes</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MAX_ARRAY_SIZE</field>
    <field name="url">group__IO.html#ga40af4217190d59d7145e58a278f9f87d</field>
    <field name="keywords">MAX_ARRAY_SIZE</field>
    <field name="text">Maximum array size Maximum array size Used in class IPF</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">FILENAME_LENGTH</field>
    <field name="url">group__IO.html#ga610ce22de673afc7b1e8b0e7b3c9fe7a</field>
    <field name="keywords">FILENAME_LENGTH</field>
    <field name="text">Length of a string defining a file name Length of a string defining a file name</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MAX_NB_PAR</field>
    <field name="url">group__IO.html#ga97ca5377821329e0968969b872036ebb</field>
    <field name="keywords">MAX_NB_PAR</field>
    <field name="text">Maximum number of parameters Maximum number of parameters Used in class IPF</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MAX_FFT_SIZE</field>
    <field name="url">group__IO.html#ga98cbec7e63ecb2bee0ba38e7511177c5</field>
    <field name="keywords">MAX_FFT_SIZE</field>
    <field name="text">Maximal size for the FFT Table This table can be used by the FFT for any number of points from 2 up to MAX_FFT_SIZE For example if MAX_FFT_SIZE 1 4 then we can transform anywhere from 2 to 2 3 2 7 6 8 points using the same sine and cosine table Maximal size for the FFT Table This table can be used by the FFT for any number of points from 2 up to MAX_FFT_SIZE For example if MAX_FFT_SIZE 1 4 then we can transform anywhere from 2 to 2 3 2 7 6 8 points using the same sine and cosine table</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MAX_INPUT_STRING_LENGTH</field>
    <field name="url">group__IO.html#gada5cee067e2e94be1e183047e5ecfb0f</field>
    <field name="keywords">MAX_INPUT_STRING_LENGTH</field>
    <field name="text">Maximum string length Maximum string length Used in class IPF</field>
  </doc>
  <doc>
    <field name="type">group</field>
    <field name="name">Laplace</field>
    <field name="url">group__Laplace.html</field>
    <field name="keywords">Laplace equation</field>
    <field name="text">Laplace and Poisson equations</field>
  </doc>
  <doc>
    <field name="type">group</field>
    <field name="name">Mesh</field>
    <field name="url">group__Mesh.html</field>
    <field name="keywords">Finite Element Mesh</field>
    <field name="text">Mesh management classes</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MAX_NB_ELEMENT_EDGES</field>
    <field name="url">group__Mesh.html#ga003f3cf9431098efb339a1860e864ce2</field>
    <field name="keywords">MAX_NB_ELEMENT_EDGES</field>
    <field name="text">Maximum number of edges by element Maximum number of edges by element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const Material &amp;m)</field>
    <field name="url">group__Mesh.html#ga00741e0b93b5ca44406b8415d9c7b623</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output material data Output material data Output material data Output material data</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Label</field>
    <field name="args">(const Side &amp;sd)</field>
    <field name="url">group__Mesh.html#ga0cfab4a49b72cfbfacebd45b767a9de4</field>
    <field name="keywords">Label OFELI::Label OFELI</field>
    <field name="text">Return label of a given side Return label of a given side sd Reference to Side instance Label of side Rachid Touzani GNU Lesser Public License Return label of a given side sd Reference to Side instance Label of side Rachid Touzani GNU Lesser Public License Return label of a given side</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TheEdge</field>
    <field name="url">group__Mesh.html#ga1252f53d07d9cec25e22d9acb3bdd84e</field>
    <field name="keywords">TheEdge</field>
    <field name="text">A macro that gives the instance pointed by theEdge</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">ElementLoop</field>
    <field name="args">(m)</field>
    <field name="url">group__Mesh.html#ga19c27797de77ab1720d2f83695c9a7dc</field>
    <field name="keywords">ElementLoop</field>
    <field name="text">A macro to loop on mesh elements m Instance of Mesh Each iteration updates the pointer theElement to current Element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const NodeList &amp;nl)</field>
    <field name="url">group__Mesh.html#ga1ee0a59054febd4d637a2b7494e00bf3</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output NodeList instance Output NodeList instance Rachid Touzani GNU Lesser Public License Output NodeList instance Rachid Touzani GNU Lesser Public License Output NodeList instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Code</field>
    <field name="args">(const Side &amp;sd, size_t i=1)</field>
    <field name="url">group__Mesh.html#ga1ef0529cd0cf43f0f3de8f89712237e6</field>
    <field name="keywords">Code OFELI::Code OFELI</field>
    <field name="text">Return code of a given degree of freedom of side Return code of a given degree of freedom of side sd Reference to Side instance i Label of dof Default 1 Code of dof of side Rachid Touzani GNU Lesser Public License Return code of a given degree of freedom of side sd Reference to Side instance i Label of dof Default 1 Code of dof of side Rachid Touzani GNU Lesser Public License Return code of a given degree of freedom of side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::getMinSize</field>
    <field name="args">(const Mesh &amp;m)</field>
    <field name="url">group__Mesh.html#ga222ea5b5c106bfd3d524a8903f0b6a18</field>
    <field name="keywords">getMinSize OFELI::getMinSize OFELI</field>
    <field name="text">Return minimal size of element edges for given mesh Return minimal size of element edges for given mesh m Reference to mesh instance Rachid Touzani GNU Lesser Public License Return minimal size of element edges for given mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::setBoundaryNodeCodes</field>
    <field name="args">(Mesh &amp;m, const string &amp;exp, int code, size_t dof=1)</field>
    <field name="url">group__Mesh.html#ga22c2f4fb3ae7dccef5c6d9fe55a55f45</field>
    <field name="keywords">setBoundaryNodeCodes OFELI::setBoundaryNodeCodes OFELI</field>
    <field name="text">Assign a given code to all nodes on boundary that satisfy a boolean expression using node coordinates Assign a given code to all nodes on boundary that satisfy a boolean expression using node coordinates m Reference to mesh instance exp Regular expression using x y and z coordinates of nodes according to exprtk parser code Code to assign dof Degree of freedom for which code is assigned Default 1 Rachid Touzani GNU Lesser Public License Assign a given code to all nodes on boundary that satisfy a boolean expression using node coordinates</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">GRAPH_MEMORY</field>
    <field name="url">group__Mesh.html#ga2c0a8e83033b6e3ab82b31600463e2f8</field>
    <field name="keywords">GRAPH_MEMORY</field>
    <field name="text">Memory necessary to store matrix graph Memory necessary to store matrix graph This value is necessary only if nodes are to be renumbered</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator||</field>
    <field name="args">(const Figure &amp;f1, const Figure &amp;f2)</field>
    <field name="url">group__Mesh.html#ga30ab6256f4524f01f0d6671a85f099c9</field>
    <field name="keywords">operator|| OFELI::operator|| OFELI</field>
    <field name="text">Function to define a Figure instance as the union of two Figure instances Function to define a Figure instance as the union of two Figure instances f1 First Figure instance f2 Second Figure instance Updated resulting Figure instance Function to define a Figure instance as the union of two Figure instances</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MAX_NB_ELEMENT_SIDES</field>
    <field name="url">group__Mesh.html#ga38511b4ea90e7503df46d50c5350a140</field>
    <field name="keywords">MAX_NB_ELEMENT_SIDES</field>
    <field name="text">Maximum number of sides by element Maximum number of sides by element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::getMeanElementMeasure</field>
    <field name="args">(const Mesh &amp;m)</field>
    <field name="url">group__Mesh.html#ga3fb62a9b8624a4560c06afdbeb1f5ca9</field>
    <field name="keywords">getMeanElementMeasure OFELI::getMeanElementMeasure OFELI</field>
    <field name="text">Return average measure length area or volume of elements of given mesh Return average measure length area or volume of elements of given mesh m Reference to mesh instance Rachid Touzani GNU Lesser Public License Return average measure length area or volume of elements of given mesh</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MAX_NBDOF_NODE</field>
    <field name="url">group__Mesh.html#ga40a5bd90ad089ad1c389d2a658cdaae3</field>
    <field name="keywords">MAX_NBDOF_NODE</field>
    <field name="text">Maximum number of DOF supported by each node Maximum number of DOF supported by each node</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MAX_NBDOF_EDGE</field>
    <field name="url">group__Mesh.html#ga40d36b9cdf73d4f7d0f227271e7c7dcc</field>
    <field name="keywords">MAX_NBDOF_EDGE</field>
    <field name="text">Maximum number of DOF supported by each edge Maximum number of DOF supported by each edge</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MAX_NB_SIDE_NODES</field>
    <field name="url">group__Mesh.html#ga474f9f4c830403657a6e68c6325f87f6</field>
    <field name="keywords">MAX_NB_SIDE_NODES</field>
    <field name="text">Maximum number of nodes by side Maximum number of nodes by side</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MAX_NB_ELEMENTS</field>
    <field name="url">group__Mesh.html#ga479eaed1f01548318f5663b403998f06</field>
    <field name="keywords">MAX_NB_ELEMENTS</field>
    <field name="text">Maximal Number of elements Maximal Number of elements</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::getMaxSideMeasure</field>
    <field name="args">(const Mesh &amp;m)</field>
    <field name="url">group__Mesh.html#ga5d5ff7ab83d556b599b15197d05d784f</field>
    <field name="keywords">getMaxSideMeasure OFELI::getMaxSideMeasure OFELI</field>
    <field name="text">Return maximal measure length or area of sides of given mesh Return maximal measure length or area of sides of given mesh m Reference to mesh instance Use this function only if sides are present in the mesh and for 2 D meshes Rachid Touzani GNU Lesser Public License Return maximal measure length or area of sides of given mesh</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MAX_NB_SIDES</field>
    <field name="url">group__Mesh.html#ga5fcb06efde605db5590999bc8ddd26cf</field>
    <field name="keywords">MAX_NB_SIDES</field>
    <field name="text">Maximal number of sides in Maximal number of sides in</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">theSideNodeLabel</field>
    <field name="args">(i)</field>
    <field name="url">group__Mesh.html#ga60d7ec282bbda0cbd2914e2f408d3aa0</field>
    <field name="keywords">theSideNodeLabel</field>
    <field name="text">A macro that returns label of i th node of side using macro MeshSides</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NodeInElement</field>
    <field name="args">(const Node *nd, const Element *el)</field>
    <field name="url">group__Mesh.html#ga60e492ffc6d6eff1f60d68e7633e334f</field>
    <field name="keywords">NodeInElement OFELI::NodeInElement OFELI</field>
    <field name="text">Say if a given node belongs to a given element Say if a given node belongs to a given element nd Pointer to Node el Pointer to Element Local label of the node if this one is found 0 if not Rachid Touzani GNU Lesser Public License Say if a given node belongs to a given element</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MAX_NB_NODES</field>
    <field name="url">group__Mesh.html#ga60ef3fd9ede8c5ae58ba71ad4e59bc01</field>
    <field name="keywords">MAX_NB_NODES</field>
    <field name="text">Maximal number of nodes Maximal number of nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Code</field>
    <field name="args">(const Element &amp;el)</field>
    <field name="url">group__Mesh.html#ga63e99fcf928d0f2ac636d6e4eb65db61</field>
    <field name="keywords">Code OFELI::Code OFELI</field>
    <field name="text">Return code of a given element Return code of a given element el Reference to Element instance Code of element Rachid Touzani GNU Lesser Public License Return code of a given element el Reference to Element instance Code of element Rachid Touzani GNU Lesser Public License Return code of a given element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Label</field>
    <field name="args">(const Edge &amp;ed)</field>
    <field name="url">group__Mesh.html#ga6623077f3ff9428e25bff64fbca84848</field>
    <field name="keywords">Label OFELI::Label OFELI</field>
    <field name="text">Return label of a given edge Return label of a given edge ed Reference to Edge instance Label of edge Rachid Touzani GNU Lesser Public License Return label of a given edge ed Reference to Edge instance Label of edge Rachid Touzani GNU Lesser Public License Return label of a given edge</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Coord</field>
    <field name="args">(const Node &amp;nd)</field>
    <field name="url">group__Mesh.html#ga668c55a4d1a38ecb7820a7ae6f1df112</field>
    <field name="keywords">Coord OFELI::Coord OFELI</field>
    <field name="text">Return coordinates of a given node Return coordinates of a given node nd Reference to Node instance Coordinates of node Rachid Touzani GNU Lesser Public License Return coordinates of a given node</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NodeLabel</field>
    <field name="args">(const Side &amp;sd, size_t n)</field>
    <field name="url">group__Mesh.html#ga68335d851731c48d2d20d3d45bb016f3</field>
    <field name="keywords">NodeLabel OFELI::NodeLabel OFELI</field>
    <field name="text">Return global label of node local label in side Return global label of node local label in side sd Reference to Side instance n Local label of node in side Global label of node Rachid Touzani GNU Lesser Public License Return global label of node local label in side sd Reference to Side instance n Local label of node in side Global label of node Rachid Touzani GNU Lesser Public License Return global label of node local label in side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const Node &amp;nd)</field>
    <field name="url">group__Mesh.html#ga69f311f65830478cfd737dc917a1676c</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output node data Output node data Rachid Touzani GNU Lesser Public License Output node data Rachid Touzani GNU Lesser Public License Output node data</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshToMesh</field>
    <field name="args">(Mesh &amp;m1, Mesh &amp;m2, const Vect&lt; real_t &gt; &amp;u1, Vect&lt; real_t &gt; &amp;u2, size_t nx, size_t ny=0, size_t nz=0, size_t dof=1)</field>
    <field name="url">group__Mesh.html#ga6e565e6ac49eaa854204991e81cf028a</field>
    <field name="keywords">MeshToMesh OFELI::MeshToMesh OFELI</field>
    <field name="text">Function to redefine a vector defined on a mesh to a new mesh Function to redefine a vector defined on a mesh to a new mesh The program interpolates piecewise linear first the vector on a finer structured grid Then the values on the new mesh nodes are computed For efficiency the number of grid cells must be large enough so that interpolation provides efficient accuracy m1 Reference to the first mesh instance m2 Reference to the second mesh instance u1 Input vector of nodal values defined on first mesh u2 Output vector of nodal values defined on second mesh nx Number of cells in the x direction in the fine structured grid ny Number of cells in the y direction in the fine structured grid The default value of ny is 0 i.e a 1 D grid nz Number of cells in the z direction in the fine structured grid The default value of nz is 0 i.e a 1 D or 2 D grid dof Label of degree of freedom of vector u Only this dof is considered Default 1 The input vector u1 is a one degree of freedom per node vector i.e its size must be equal or greater than the total number of nodes of mesh m1 The size of vector u2 is deduced from the mesh m2 Rachid Touzani GNU Lesser Public License Function to redefine a vector defined on a mesh to a new mesh</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MAX_NB_SIDE_DOF</field>
    <field name="url">group__Mesh.html#ga71976112e8b2fe1b4c1611ae6b6ab4d7</field>
    <field name="keywords">MAX_NB_SIDE_DOF</field>
    <field name="text">Maximum number of dof by side Maximum number of dof by side</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MAX_NB_ELEMENT_NODES</field>
    <field name="url">group__Mesh.html#ga7207248737670076e2fb30e8ec03a081</field>
    <field name="keywords">MAX_NB_ELEMENT_NODES</field>
    <field name="text">Maximum number of nodes by element Maximum number of nodes by element</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">ElementNodeLoop</field>
    <field name="args">(el, nd)</field>
    <field name="url">group__Mesh.html#ga7b3d530cadc2ae26340c1176e953f7bd</field>
    <field name="keywords">ElementNodeLoop</field>
    <field name="text">A macro to loop on element nodes el Instance of Element nd Pointer to pointed node</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NodeInSide</field>
    <field name="args">(const Node *nd, const Side *sd)</field>
    <field name="url">group__Mesh.html#ga7d64779043bb9c354d4156ab6370bb68</field>
    <field name="keywords">NodeInSide OFELI::NodeInSide OFELI</field>
    <field name="text">Say if a given node belongs to a given side Say if a given node belongs to a given side nd Pointer to Node sd Pointer to Side Local label of the node if this one is found 0 if not Rachid Touzani GNU Lesser Public License Say if a given node belongs to a given side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::getMinElementMeasure</field>
    <field name="args">(const Mesh &amp;m)</field>
    <field name="url">group__Mesh.html#ga7e9f8e948210880fb1cb00c94a8c5e25</field>
    <field name="keywords">getMinElementMeasure OFELI::getMinElementMeasure OFELI</field>
    <field name="text">Return minimal measure length area or volume of elements of given mesh Return minimal measure length area or volume of elements of given mesh m Reference to mesh instance Rachid Touzani GNU Lesser Public License Return minimal measure length area or volume of elements of given mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::setNodeCodes</field>
    <field name="args">(Mesh &amp;m, const string &amp;exp, int code, size_t dof=1)</field>
    <field name="url">group__Mesh.html#ga7efd85959a24ac8d055526aaca941d6f</field>
    <field name="keywords">setNodeCodes OFELI::setNodeCodes OFELI</field>
    <field name="text">Assign a given code to all nodes satisfying a boolean expression using node coordinates Assign a given code to all nodes satisfying a boolean expression using node coordinates m Reference to mesh instance exp Regular expression using x y and z coordinates of nodes according to exprtk parser code Code to assign dof Degree of freedom for which code is assigned Default 1 Assign a given code to all nodes satisfying a boolean expression using node coordinates</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const Side &amp;sd)</field>
    <field name="url">group__Mesh.html#ga814c02c7e063f4024ce0e6f58f8cb757</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output side data Output side data Rachid Touzani GNU Lesser Public License Output side data Rachid Touzani GNU Lesser Public License Output side data</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::getMaxElementMeasure</field>
    <field name="args">(const Mesh &amp;m)</field>
    <field name="url">group__Mesh.html#ga8355140ca7a9f6b6440417dc82d0a601</field>
    <field name="keywords">getMaxElementMeasure OFELI::getMaxElementMeasure OFELI</field>
    <field name="text">Return maximal measure length area or volume of elements of given mesh Return maximal measure length area or volume of elements of given mesh m Reference to mesh instance Rachid Touzani GNU Lesser Public License Return maximal measure length area or volume of elements of given mesh</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">theElementLabel</field>
    <field name="url">group__Mesh.html#ga85216122677728e8286782781ba62ac2</field>
    <field name="keywords">theElementLabel</field>
    <field name="text">A macro that returns element label in a loop using macro MeshElements</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator==</field>
    <field name="args">(const Element &amp;el1, const Element &amp;el2)</field>
    <field name="url">group__Mesh.html#ga897f2558bcb74a08d5fae16482c8a598</field>
    <field name="keywords">operator== OFELI::operator== OFELI</field>
    <field name="text">Check equality between 2 elements Check equality between 2 elements el1 Reference to first Side instance el2 Reference to second Side instance true is elements are equal i.e if they have the same nodes false if not Rachid Touzani GNU Lesser Public License Check equality between 2 elements el1 Reference to first Side instance el2 Reference to second Side instance true is elements are equal i.e if they have the same nodes false if not Rachid Touzani GNU Lesser Public License Check equality between 2 elements</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SideInElement</field>
    <field name="args">(const Side *sd, const Element *el)</field>
    <field name="url">group__Mesh.html#ga8a0226842b4b8abc4cc0bfb02432756b</field>
    <field name="keywords">SideInElement OFELI::SideInElement OFELI</field>
    <field name="text">Say if a given side belongs to a given element Say if a given side belongs to a given element sd Pointer to Side el Pointer to Element Local label of the side if this one is found 0 if not Rachid Touzani GNU Lesser Public License Say if a given side belongs to a given element</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MAX_NB_ELEMENT_DOF</field>
    <field name="url">group__Mesh.html#ga8e76338d30108fa44f065ac2b205fcfd</field>
    <field name="keywords">MAX_NB_ELEMENT_DOF</field>
    <field name="text">Maximum number of dof by element Maximum number of dof by element</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MAX_NBDOF_SIDE</field>
    <field name="url">group__Mesh.html#ga933e348999ecbac5373e86fa388d9d80</field>
    <field name="keywords">MAX_NBDOF_SIDE</field>
    <field name="text">Maximum number of DOF supported by each side Maximum number of DOF supported by each side</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">theSideLabel</field>
    <field name="url">group__Mesh.html#ga96ea7be723f7ae3e2992c967dc5b25c8</field>
    <field name="keywords">theSideLabel</field>
    <field name="text">A macro that returns side label in a loop using macro MeshSides</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator-</field>
    <field name="args">(const Figure &amp;f1, const Figure &amp;f2)</field>
    <field name="url">group__Mesh.html#gaa0af2abfee4aabcdc0158974eff61547</field>
    <field name="keywords">operator- OFELI::operator- OFELI</field>
    <field name="text">Function to define a Figure instance as the set subtraction of two Figure instances Function to define a Figure instance as the set subtraction of two Figure instances f1 First Figure instance to subtract from f2 Second Figure instance to subtract Updated resulting Figure instance Function to define a Figure instance as the set subtraction of two Figure instances f1 First Figure instance to subtract from f2 Second Figure instance to subtract Updated resulting Figure instance Function to define a Figure instance as the set subtraction of two Figure instances</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">SideLoop</field>
    <field name="args">(m)</field>
    <field name="url">group__Mesh.html#gaa1b3c39568791f5a2b58466faea320c1</field>
    <field name="keywords">SideLoop</field>
    <field name="text">A macro to loop on mesh sides m Instance of Mesh Each iteration updates the pointer theSide to current Element</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MAX_NB_MATERIALS</field>
    <field name="url">group__Mesh.html#gaa562119043fe912bfb74fd3db35f066a</field>
    <field name="keywords">MAX_NB_MATERIALS</field>
    <field name="text">Maximum number of materials Maximum number of materials</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TheElement</field>
    <field name="url">group__Mesh.html#gaa69c6ccad068735a8bf740b6e76d616f</field>
    <field name="keywords">TheElement</field>
    <field name="text">A macro that gives the instance pointed by theElement</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">NodeLoop</field>
    <field name="args">(m)</field>
    <field name="url">group__Mesh.html#gaa6a948c148b19b713e86836f3b70182b</field>
    <field name="keywords">NodeLoop</field>
    <field name="text">A macro to loop on mesh nodes m Instance of Mesh Each iteration updates the pointer theNode to current Node</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">theElementNodeLabel</field>
    <field name="args">(i)</field>
    <field name="url">group__Mesh.html#gaabb07af5efe0c1033c4987740e06c66e</field>
    <field name="keywords">theElementNodeLabel</field>
    <field name="text">A macro that returns label of i th node of element using macro MeshElements</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Label</field>
    <field name="args">(const Element &amp;el)</field>
    <field name="url">group__Mesh.html#gab2edbefc99671d2f9577fed1b3803dca</field>
    <field name="keywords">Label OFELI::Label OFELI</field>
    <field name="text">Return label of a given element Return label of a given element el Reference to Element instance Label of element Rachid Touzani GNU Lesser Public License Return label of a given element el Reference to Element instance Label of element Rachid Touzani GNU Lesser Public License Return label of a given element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshToMesh</field>
    <field name="args">(Mesh &amp;m1, Mesh &amp;m2, const Vect&lt; real_t &gt; &amp;u1, Vect&lt; real_t &gt; &amp;u2, const Point&lt; real_t &gt; &amp;xmin, const Point&lt; real_t &gt; &amp;xmax, size_t nx, size_t ny, size_t nz, size_t dof=1)</field>
    <field name="url">group__Mesh.html#gab36e808be92e5fdb424aeae1c43a9c5f</field>
    <field name="keywords">MeshToMesh OFELI::MeshToMesh OFELI</field>
    <field name="text">Function to redefine a vector defined on a mesh to a new mesh Function to redefine a vector defined on a mesh to a new mesh The program interpolates piecewise linear first the vector on a finer structured grid Then the values on the new mesh nodes are computed In this function the grid rectangle is defined so that this one can cover only a submesh of m1 For efficiency the number of grid cells must be large enough so that interpolation provides efficient accuracy m1 Reference to the first mesh instance m2 Reference to the second mesh instance u1 Input vector of nodal values defined on first mesh u2 Output vector of nodal values defined on second mesh xmin Point instance containing minimal coordinates of the rectangle that defines the grid xmax Point instance containing maximal coordinates of the rectangle that defines the grid nx Number of cells in the x direction in the fine structured grid ny Number of cells in the y direction in the fine structured grid The default value of ny is 0 i.e a 1 D grid nz Number of cells in the z direction in the fine structured grid The default value of nz is 0 i.e a 1 D or 2 D grid dof Label of degree of freedom of vector u Only this dof is considered Default 1 The input vector u1 is a one degree of freedom per node vector i.e its size must be equal or greater than the total number of nodes of mesh m1 The size of vector u2 is deduced from the mesh m2 Rachid Touzani GNU Lesser Public License Function to redefine a vector defined on a mesh to a new mesh The program interpolates piecewise linear first the vector on a finer structured grid Then the values on the new mesh nodes are computed In this function the grid rectangle is defined so that this one can cover only a submesh of m1 For efficiency the number of grid cells must be large enough so that interpolation provides efficient accuracy m1 Reference to the first mesh instance m2 Reference to the second mesh instance u1 Input vector of nodal values defined on first mesh u2 Output vector of nodal values defined on second mesh xmin Point instance containing minimal coordinates of the rectangle that defines the grid xmax Point instance containing maximal coordinates of the rectangle that defines the grid nx Number of cells in the x direction in the fine structured grid ny Number of cells in the y direction in the fine structured grid The default value of ny is 0 i.e a 1 D grid nz Number of cells in the z direction in the fine structured grid The default value of nz is 0 i.e a 1 D or 2 D grid dof Label of degree of freedom of vector u Only this dof is considered Default 1 The input vector u1 is a one degree of freedom per node vector i.e its size must be equal or greater than the total number of nodes of mesh m1 The size of vector u2 is deduced from the mesh m2 Rachid Touzani GNU Lesser Public License Function to redefine a vector defined on a mesh to a new mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const SideList &amp;sl)</field>
    <field name="url">group__Mesh.html#gab459bf12bcf41b75aab9a4591deb924e</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output SideList instance Output SideList instance Rachid Touzani GNU Lesser Public License Output SideList instance Rachid Touzani GNU Lesser Public License Output SideList instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Label</field>
    <field name="args">(const Node &amp;nd)</field>
    <field name="url">group__Mesh.html#gab78bee3c2df43cdbbd4d26f680a5f877</field>
    <field name="keywords">Label OFELI::Label OFELI</field>
    <field name="text">Return label of a given node Return label of a given node nd Reference to Node instance Label of node Rachid Touzani GNU Lesser Public License Return label of a given node</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator==</field>
    <field name="args">(const Side &amp;sd1, const Side &amp;sd2)</field>
    <field name="url">group__Mesh.html#gab8be96fe0a953cc8e29286e99c70a3c4</field>
    <field name="keywords">operator== OFELI::operator== OFELI</field>
    <field name="text">Check equality between 2 sides Check equality between 2 sides sd1 Reference to first Side instance sd2 Reference to second Side instance true is sides are equal i.e if they have the same nodes false if not Rachid Touzani GNU Lesser Public License Check equality between 2 sides sd1 Reference to first Side instance sd2 Reference to second Side instance true is sides are equal i.e if they have the same nodes false if not Rachid Touzani GNU Lesser Public License Check equality between 2 sides</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TheNode</field>
    <field name="url">group__Mesh.html#gab9113f712aa27b17dd20d78f55803f64</field>
    <field name="keywords">TheNode</field>
    <field name="text">A macro that gives the instance pointed by theNode</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Code</field>
    <field name="args">(const Node &amp;nd, size_t i=1)</field>
    <field name="url">group__Mesh.html#gaba8ae4cc55753350096264881bc5c7e2</field>
    <field name="keywords">Code OFELI::Code OFELI</field>
    <field name="text">Return code of a given degree of freedom of node Return code of a given degree of freedom of node nd Reference to Node instance i Label of dof Default 1 Code of dof of node Rachid Touzani GNU Lesser Public License Return code of a given degree of freedom of node</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TheSide</field>
    <field name="url">group__Mesh.html#gac0d139dec5249a2a733d3d1fd6e2e12c</field>
    <field name="keywords">TheSide</field>
    <field name="text">A macro that gives the instance pointed by theSide</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">theNodeLabel</field>
    <field name="url">group__Mesh.html#gac0da7b0e4d7bc50b6715074046b8b14a</field>
    <field name="keywords">theNodeLabel</field>
    <field name="text">A macro that returns node label in a loop using macro MeshNodes</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MAX_NB_EDGES</field>
    <field name="url">group__Mesh.html#gac30c4b48322f1174cc4a236bb1704317</field>
    <field name="keywords">MAX_NB_EDGES</field>
    <field name="text">Maximal Number of edges Maximal Number of edges</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::getMaxSize</field>
    <field name="args">(const Mesh &amp;m)</field>
    <field name="url">group__Mesh.html#gac4f8b33423c951496edacab6d78720cb</field>
    <field name="keywords">getMaxSize OFELI::getMaxSize OFELI</field>
    <field name="text">Return maximal size of element edges for given mesh Return maximal size of element edges for given mesh m Reference to mesh instance Rachid Touzani GNU Lesser Public License Return maximal size of element edges for given mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const MeshAdapt &amp;a)</field>
    <field name="url">group__Mesh.html#gac73536dfbba4cb6d4926621cf080d834</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output MeshAdapt class data Output MeshAdapt class data Output MeshAdapt class data Output MeshAdapt class data</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::MeshToMesh</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;u1, Vect&lt; real_t &gt; &amp;u2, size_t nx, size_t ny=0, size_t nz=0, size_t dof=1)</field>
    <field name="url">group__Mesh.html#gacaca48c0f12dbebb6a7b3b95a9796116</field>
    <field name="keywords">MeshToMesh OFELI::MeshToMesh OFELI</field>
    <field name="text">Function to redefine a vector defined on a mesh to a new mesh Function to redefine a vector defined on a mesh to a new mesh The program interpolates piecewise linear first the vector on a finer structured grid Then the values on the new mesh nodes are computed For efficiency the number of grid cells must be large enough so that interpolation provides efficient accuracy u1 Input vector of nodal values defined on first mesh This vector instance must contain Mesh instance u2 Output vector of nodal values defined on second mesh This vector instance must contain Mesh instance nx Number of cells in the x direction in the fine structured grid ny Number of cells in the y direction in the fine structured grid The default value of ny is 0 i.e a 1 D grid nz Number of cells in the z direction in the fine structured grid The default value of nz is 0 i.e a 1 D or 2 D grid dof Label of degree of freedom of vector u Only this dof is considered Default 1 The input vector u1 is a one degree of freedom per node vector i.e its size must be equal or greater than the total number of nodes of mesh m1 The size of vector u2 is deduced from the mesh m2 Rachid Touzani GNU Lesser Public License Function to redefine a vector defined on a mesh to a new mesh The program interpolates piecewise linear first the vector on a finer structured grid Then the values on the new mesh nodes are computed For efficiency the number of grid cells must be large enough so that interpolation provides efficient accuracy u1 Input vector of nodal values defined on first mesh This vector instance must contain Mesh instance u2 Output vector of nodal values defined on second mesh This vector instance must contain Mesh instance nx Number of cells in the x direction in the fine structured grid ny Number of cells in the y direction in the fine structured grid The default value of ny is 0 i.e a 1 D grid nz Number of cells in the z direction in the fine structured grid The default value of nz is 0 i.e a 1 D or 2 D grid dof Label of degree of freedom of vector u Only this dof is considered Default 1 The input vector u1 is a one degree of freedom per node vector i.e its size must be equal or greater than the total number of nodes of mesh m1 The size of vector u2 is deduced from the mesh m2 Rachid Touzani GNU Lesser Public License Function to redefine a vector defined on a mesh to a new mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const ElementList &amp;el)</field>
    <field name="url">group__Mesh.html#gad22ca1ba6c55f97c2a1d1ca585cba816</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output ElementList instance Output ElementList instance Rachid Touzani GNU Lesser Public License Output ElementList instance Rachid Touzani GNU Lesser Public License Output ElementList instance</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">BoundaryNodeLoop</field>
    <field name="args">(m)</field>
    <field name="url">group__Mesh.html#gad26c3b207bd26b1eb5279785170ccae7</field>
    <field name="keywords">BoundaryNodeLoop</field>
    <field name="text">A macro to loop on mesh nodes m Instance of Mesh Each iteration updates the pointer theNode to current Node</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const Mesh &amp;ms)</field>
    <field name="url">group__Mesh.html#gad2fa9fa8df6ed7cf1f2e116e0f5a3523</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output mesh data Output mesh data Level of mesh output depends on the global variable Verbosity If Verbosity 0 or Verbosity 1 this function outputs only principal mesh parameters number of nodes number of elements If Verbosity 1 this function outputs in addition the list of 1 0 first nodes elements and sides If Verbosity 2 this function outputs in addition the list of 5 0 first nodes elements and sides If Verbosity 3 this function outputs all mesh data Output mesh data Level of mesh output depends on the global variable Verbosity If Verbosity 0 or Verbosity 1 this function outputs only principal mesh parameters number of nodes number of elements If Verbosity 1 this function outputs in addition the list of 1 0 first nodes elements and sides If Verbosity 2 this function outputs in addition the list of 5 0 first nodes elements and sides If Verbosity 3 this function outputs all mesh data Output mesh data</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::getMeanSideMeasure</field>
    <field name="args">(const Mesh &amp;m)</field>
    <field name="url">group__Mesh.html#gada461ce7d5ec3c49f1b3ce7c071941e8</field>
    <field name="keywords">getMeanSideMeasure OFELI::getMeanSideMeasure OFELI</field>
    <field name="text">Return average measure length or area of sides of given mesh Return average measure length or area of sides of given mesh m Reference to mesh instance Use this function only if sides are present in the mesh and for 2 D meshes Rachid Touzani GNU Lesser Public License Return average measure length or area of sides of given mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::DeformMesh</field>
    <field name="args">(Mesh &amp;mesh, const Vect&lt; real_t &gt; &amp;u, real_t rate=0.2)</field>
    <field name="url">group__Mesh.html#gae5f9cc6c333261b60d1e71ec28d0eb40</field>
    <field name="keywords">DeformMesh OFELI::DeformMesh OFELI</field>
    <field name="text">Calculate deformed mesh using a displacement field Calculate deformed mesh using a displacement field mesh Mesh instance On output node coordinates are modified to take into account the displacement u Displacement field at nodes a Maximal deformation rate Default 1 A typical value is 0.2 i.e 2 0 Rachid Touzani GNU Lesser Public License Calculate deformed mesh using a displacement field</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&amp;&amp;</field>
    <field name="args">(const Figure &amp;f1, const Figure &amp;f2)</field>
    <field name="url">group__Mesh.html#gae87aa9fb0bfb847d62e55e09af615143</field>
    <field name="keywords">operator&amp;&amp; OFELI::operator&amp;&amp; OFELI</field>
    <field name="text">Function to define a Figure instance as the intersection of two Figure instances Function to define a Figure instance as the intersection of two Figure instances f1 First Figure instance f2 Second Figure instance Updated resulting Figure instance Function to define a Figure instance as the intersection of two Figure instances</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">BoundarySideLoop</field>
    <field name="args">(m)</field>
    <field name="url">group__Mesh.html#gae880f748f6813a39287d6b5ef1eed813</field>
    <field name="keywords">BoundarySideLoop</field>
    <field name="text">A macro to loop on mesh boundary sides m Instance of Mesh Each iteration updates the pointer theSide to current Node</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::NodeLabel</field>
    <field name="args">(const Element &amp;el, size_t n)</field>
    <field name="url">group__Mesh.html#gaec3074e83dca887535dd39fd9b2362d0</field>
    <field name="keywords">NodeLabel OFELI::NodeLabel OFELI</field>
    <field name="text">Return global label of node local label in element Return global label of node local label in element el Reference to Element instance n Local label of node in element Global label of node Rachid Touzani GNU Lesser Public License Return global label of node local label in element</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const EdgeList &amp;el)</field>
    <field name="url">group__Mesh.html#gaecd3ac0dcd1df0627e7189152e6cb05d</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output EdgeList instance Output EdgeList instance Rachid Touzani GNU Lesser Public License Output EdgeList instance Rachid Touzani GNU Lesser Public License Output EdgeList instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::getMinSideMeasure</field>
    <field name="args">(const Mesh &amp;m)</field>
    <field name="url">group__Mesh.html#gaed4c6a91270b3423f9754bc220f3ffde</field>
    <field name="keywords">getMinSideMeasure OFELI::getMinSideMeasure OFELI</field>
    <field name="text">Return minimal measure length or area of sides of given mesh Return minimal measure length or area of sides of given mesh m Reference to mesh instance Use this function only if sides are present in the mesh and for 2 D meshes Rachid Touzani GNU Lesser Public License Return minimal measure length or area of sides of given mesh</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MAX_NB_INT_PTS</field>
    <field name="url">group__Mesh.html#gaee5c1bb64023150a9a8aa923c49b00b0</field>
    <field name="keywords">MAX_NB_INT_PTS</field>
    <field name="text">Maximum number of integration points in element Maximum number of integration points in element</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">EdgeLoop</field>
    <field name="args">(m)</field>
    <field name="url">group__Mesh.html#gaf4159792870600ca2a31534d5a19c6d3</field>
    <field name="keywords">EdgeLoop</field>
    <field name="text">A macro to loop on mesh edges m Instance of Mesh Each iteration updates the pointer theEdge to current Edge</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const Element &amp;el)</field>
    <field name="url">group__Mesh.html#gaf7ef339dbd0f05fdf9898d60a3828381</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output element data Output element data Output element data Output element data</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const Edge &amp;ed)</field>
    <field name="url">group__Mesh.html#gaf9b09b452f388266880ddea6e252fc84</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output edge data Output edge data Output edge data Output edge data</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">ElementSideLoop</field>
    <field name="args">(el, sd)</field>
    <field name="url">group__Mesh.html#gaf9dbbba985121c95914821dc4fc99905</field>
    <field name="keywords">ElementSideLoop</field>
    <field name="text">A macro to loop on element sides el Instance of Element sd Pointer to pointed side</field>
  </doc>
  <doc>
    <field name="type">group</field>
    <field name="name">OFELI</field>
    <field name="url">group__OFELI.html</field>
    <field name="keywords">OFELI</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FuncApprox::setLeastSquare</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;x, const Vect&lt; real_t &gt; &amp;y, real_t &amp;a0, real_t &amp;a1)</field>
    <field name="url">group__OFELI.html#ga01c9e91de8d397ba9dbf69622edfd2b3</field>
    <field name="keywords">setLeastSquare OFELI::FuncApprox::setLeastSquare FuncApprox</field>
    <field name="text">Constructor foDefine least square approximation using linear regression Define 1 degree polynomial to approximate in the sense of least squares of a given set of points in the plane The resulting line has the equation y a0 a1*x x Vector defining x-coordinates of points y Vector defining y-coordinates of points a0 Coefficient of constant term a1 Coefficient of first degree term Constructor foDefine least square approximation using linear regression</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IOField::get</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;v, const string &amp;name)</field>
    <field name="url">group__OFELI.html#ga04a05aa14f4be9c79cef16ed8cc78128</field>
    <field name="keywords">get OFELI::IOField::get IOField</field>
    <field name="text">Get Vect v instance from file if the field has the given name First time step is read from the XML file v Vect instance name Name to seek in the XML file Get Vect v instance from file if the field has the given name</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Prev</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#ga04a415af958a1c154132435edb1a47ce</field>
    <field name="keywords">Prev OFELI::Prev OFELI</field>
    <field name="text">Return element previous vector This is the vector given in time dependent constructor It is returned as a C-array Return element previous vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::Grid</field>
    <field name="args">(Point&lt; real_t &gt; m, Point&lt; real_t &gt; M, size_t npx, size_t npy)</field>
    <field name="url">group__OFELI.html#ga0528674c839ad69c4ab242ddc0dcf655</field>
    <field name="keywords">Grid OFELI::Grid::Grid Grid</field>
    <field name="text">Construct a 2 D structured grid given its extremal coordinates and number of intervals m Minimal coordinate value M Maximal coordinate value npx Number of grid intervals in the x direction npy Number of grid intervals in the y direction Construct a 2 D structured grid given its extremal coordinates and number of intervals</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::setMesh</field>
    <field name="args">(Mesh &amp;mesh, size_t dof=0)</field>
    <field name="url">group__OFELI.html#ga05b7680ed419a3422be7b7989f307496</field>
    <field name="keywords">setMesh OFELI::SpMatrix::setMesh SpMatrix&lt; T_ &gt; setMesh OFELI::SpMatrix&lt; real_t &gt;::setMesh SpMatrix&lt; real_t &gt;</field>
    <field name="text">Determine mesh graph and initialize matrix This member function is called by constructor with the same arguments mesh Mesh instance for which matrix graph is determined dof Option parameter with default value 0 dof 1 means that only one degree of freedom for each node or element or side is taken to determine matrix structure The value dof 0 means that matrix structure is determined using all DOFs Determine mesh graph and initialize matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LeastSquare::LeastSquare</field>
    <field name="args">(vector&lt; Fct * &gt; &amp;f, const Vect&lt; real_t &gt; &amp;x, const Vect&lt; real_t &gt; &amp;y, Vect&lt; real_t &gt; &amp;a)</field>
    <field name="url">group__OFELI.html#ga066f972d728a2edf73e4bbf5a12a1425</field>
    <field name="keywords">LeastSquare OFELI::LeastSquare::LeastSquare LeastSquare</field>
    <field name="text">Constructor of least square approximation using given basis functions The least square approximation defines the function a 0 0 a 1 1 a N N f Vector of references to functions class Fct defining basis of least square approximation x Vector defining x-coordinates of points y Vector defining y-coordinates of points a Vector containing solution Coefficients of basis functions Constructor of least square approximation using given basis functions</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::CrossProduct</field>
    <field name="args">(const SpaceTime &amp;lp, const SpaceTime &amp;rp)</field>
    <field name="url">group__OFELI.html#ga09a3d2337a0fad225d02e9760756e2c4</field>
    <field name="keywords">CrossProduct OFELI::CrossProduct OFELI</field>
    <field name="text">Return Cross product of two vectors lp and rp Return Cross product of two vectors lp and rp Return Cross product of two vectors lp and rp</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">OFELI::BCType</field>
    <field name="url">group__OFELI.html#ga0a00003814ee8095a2c39d1d5cba08fa</field>
    <field name="keywords">BCType OFELI::BCType OFELI</field>
    <field name="text">To select special boundary conditions</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::Grid</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#ga0a335d0339fe70071fcdf4cd5b1c7b5f</field>
    <field name="keywords">Grid OFELI::Grid::Grid Grid</field>
    <field name="text">Construct a default grid with 1 0 intervals in each direction Construct a default grid with 1 0 intervals in each direction</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::isActive</field>
    <field name="args">(size_t i, size_t j, size_t k) const</field>
    <field name="url">group__OFELI.html#ga0affc9f29715642d93bac3c5ed460f0e</field>
    <field name="keywords">isActive OFELI::Grid::isActive Grid</field>
    <field name="text">Say if cell is active or not 3 D grid i i th index of cell j j th index of cell k k th index of cell 1 if cell is active 0 if not Say if cell is active or not 3 D grid</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::setDomain</field>
    <field name="args">(real_t xmin, real_t xmax, real_t ymin, real_t ymax, real_t zmin, real_t zmax)</field>
    <field name="url">group__OFELI.html#ga0c6c8c9cf29134901b832311148f2b64</field>
    <field name="keywords">setDomain OFELI::Grid::setDomain Grid</field>
    <field name="text">Set Dimensions of the domain 3 D case xmin Minimal value of x coordinate xmax Maximal value of x coordinate ymin Minimal value of y coordinate ymax Maximal value of y coordinate zmin Minimal value of z coordinate zmax Maximal value of z coordinate Set Dimensions of the domain 3 D case</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::GeoModel::BSpline</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#ga0c8eb9746a6bd03bc77f81d4e211d2c4</field>
    <field name="keywords">BSpline OFELI::GeoModel::BSpline GeoModel</field>
    <field name="text">Run bspline modelling The resulting vector of curve points is the vector p given by the constructor or by setData Run bspline modelling</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Tabulation::~Tabulation</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#ga0f5d1d2a63565d063de7b58cd86b44cd</field>
    <field name="keywords">OFELI::Tabulation::~Tabulation Tabulation</field>
    <field name="text">Destructor Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FuncApprox::setBezierSurface</field>
    <field name="args">(size_t m, size_t n, size_t npu, size_t npw, const Vect&lt; real_t &gt; &amp;b, Vect&lt; real_t &gt; &amp;p)</field>
    <field name="url">group__OFELI.html#ga132380063b1aba64f3c3499ef7dbb987</field>
    <field name="keywords">setBezierSurface OFELI::FuncApprox::setBezierSurface FuncApprox</field>
    <field name="text">Define Bezier surface modelling m One less than the number of polygon vertices in w direction n One less than the number of polygon vertices in u direction npu Number of parametric lines in the u direction npw Number of parametric lines in the w direction b Vector containing the defining polygon vertices p Vector containing the resulting curve points Define Bezier surface modelling</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::Diagonal</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#ga1391f8c21e85ef8a89765a7979ea404f</field>
    <field name="keywords">Diagonal OFELI::SpMatrix::Diagonal SpMatrix&lt; T_ &gt; Diagonal OFELI::TrMatrix::Diagonal TrMatrix&lt; T_ &gt; Diagonal OFELI::SpMatrix&lt; real_t &gt;::Diagonal SpMatrix&lt; real_t &gt;</field>
    <field name="text">Define matrix as a diagonal one Define matrix as a diagonal one Define matrix as a diagonal one Define matrix as a diagonal one</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::getHy</field>
    <field name="args">() const</field>
    <field name="url">group__OFELI.html#ga16a17818b266e52b6891e997d20fb179</field>
    <field name="keywords">getHy OFELI::Grid::getHy Grid</field>
    <field name="text">Return grid size in the y-direction Return grid size in the y-direction</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Tabulation::getValue</field>
    <field name="args">(string funct, real_t x, real_t y, real_t z, real_t t)</field>
    <field name="url">group__OFELI.html#ga16a31147f05e9b0cd8c20b519c8294df</field>
    <field name="keywords">getValue OFELI::Tabulation::getValue Tabulation</field>
    <field name="text">Return the calculated value of the function Case of a function of three variables funct Name of the funct to be evaluated as read from input file x Value of the first variable y Value of the second variable z Value of the third variable t Value of the fourth variable Computed value of the function Return the calculated value of the function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::~Grid</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#ga16d42516a2abe71deb47c2f4b2796074</field>
    <field name="keywords">OFELI::Grid::~Grid Grid</field>
    <field name="text">Destructor Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::get</field>
    <field name="args">(size_t i, size_t j) const</field>
    <field name="url">group__OFELI.html#ga173c0f972c4eeca07b426587bc2108e5</field>
    <field name="keywords">get OFELI::SpMatrix::get SpMatrix&lt; T_ &gt; get OFELI::TrMatrix::get TrMatrix&lt; T_ &gt; get OFELI::SpMatrix&lt; real_t &gt;::get SpMatrix&lt; real_t &gt;</field>
    <field name="text">Return entry i j of matrix if this one is stored 0 otherwise Return entry i j of matrix i Row index Starting from 1 j Column index Starting from 1 Return entry i j of matrix if this one is stored 0 otherwise Return entry i j of matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::add</field>
    <field name="args">(size_t i, size_t j, const T_ &amp;val)</field>
    <field name="url">group__OFELI.html#ga17592a65d5fb95d42c07f724dabad759</field>
    <field name="keywords">add OFELI::SpMatrix::add SpMatrix&lt; T_ &gt; add OFELI::TrMatrix::add TrMatrix&lt; T_ &gt; add OFELI::SpMatrix&lt; real_t &gt;::add SpMatrix&lt; real_t &gt;</field>
    <field name="text">Add a value to an entry of the matrix Add constant val value to an entry i j of the matrix i Row index j Column index val Constant value to add to a(i,j) Add a value to an entry of the matrix Add constant val value to an entry i j of the matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FuncApprox::setNurbs</field>
    <field name="args">(size_t n, size_t c, size_t np, const Vect&lt; real_t &gt; &amp;b, const Vect&lt; real_t &gt; &amp;h, Vect&lt; real_t &gt; &amp;p)</field>
    <field name="url">group__OFELI.html#ga1768ad077affc82b1f36d2d757d50d74</field>
    <field name="keywords">setNurbs OFELI::FuncApprox::setNurbs FuncApprox</field>
    <field name="text">Define for Nurbs modelling n Number of defining polygon vertices c Order of the B-spline basis function np Number of points to be calculated on the curve b Vector containing the defining polygon vertices h Vector containing the homogeneous weighting factors p Vector containing the resulting curve points Define for Nurbs modelling</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::getCenter</field>
    <field name="args">(size_t i, size_t j, size_t k) const</field>
    <field name="url">group__OFELI.html#ga17ab06c2470b362bd74437a374588f4b</field>
    <field name="keywords">getCenter OFELI::Grid::getCenter Grid</field>
    <field name="text">Return coordinates of center of a 3 D cell with indices i j k i+1 j k i+1 j+1 k i j+1 k i j k+1 i+1 j k+1 i+1 j+1 k+1 i j+1 k+1 Return coordinates of center of a 3 D cell with indices i j k i+1 j k i+1 j+1 k i j+1 k i j k+1 i+1 j k+1 i+1 j+1 k+1 i j+1 k+1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::isActive</field>
    <field name="args">(size_t i) const</field>
    <field name="url">group__OFELI.html#ga18966a8ac286ad8cd54f069e41507187</field>
    <field name="keywords">isActive OFELI::Grid::isActive Grid</field>
    <field name="text">Say if cell is active or not 1 D grid i Index of cell 1 if cell is active 0 if not Say if cell is active or not 1 D grid</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::GeoModel::BSplineSurface</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#ga1a483b982f0098d857419d459bc114f8</field>
    <field name="keywords">BSplineSurface OFELI::GeoModel::BSplineSurface GeoModel</field>
    <field name="text">Run surface bspline modelling The resulting vector of curve points is the vector p given by the constructor or by setData Run surface bspline modelling</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::isActive</field>
    <field name="args">(size_t i, size_t j) const</field>
    <field name="url">group__OFELI.html#ga1be439c1d25468af972464683e8da10d</field>
    <field name="keywords">isActive OFELI::Grid::isActive Grid</field>
    <field name="text">Say if cell is active or not 2 D grid i i th index of cell j j th index of cell 1 if cell is active 0 if not Say if cell is active or not 2 D grid</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::operator()</field>
    <field name="args">(size_t i) const</field>
    <field name="url">group__OFELI.html#ga1c5d37e1fdcfc442fb9312f89af4e205</field>
    <field name="keywords">operator() OFELI::SpMatrix::operator() SpMatrix&lt; T_ &gt; operator() OFELI::SpMatrix&lt; real_t &gt;::operator() SpMatrix&lt; real_t &gt;</field>
    <field name="text">Operator with one argument Constant version Returns i th position in the array storing matrix entries The first entry is at location 1 Entries are stored row by row Operator with one argument Constant version</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Tabulation::getMinVar</field>
    <field name="args">(size_t n, size_t i) const</field>
    <field name="url">group__OFELI.html#ga1de8cf61e4442819054e8769a9afe08e</field>
    <field name="keywords">getMinVar OFELI::Tabulation::getMinVar Tabulation</field>
    <field name="text">Get minimal value of a variable n index of function i index of variable Between 1 and 3 Minimal value Get minimal value of a variable</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::Grid</field>
    <field name="args">(real_t xm, real_t xM, real_t ym, real_t yM, real_t zm, real_t zM, size_t npx, size_t npy, size_t npz)</field>
    <field name="url">group__OFELI.html#ga1eab4d5181c7b7294bca6e650da4f061</field>
    <field name="keywords">Grid OFELI::Grid::Grid Grid</field>
    <field name="text">Construct a 3 D structured grid given its extremal coordinates and number of intervals xm Minimal value for x xM Maximal value for x ym Minimal value for y yM Maximal value for y zm Minimal value for z zM Maximal value for z npx Number of grid intervals in the x direction npy Number of grid intervals in the y direction npz Number of grid intervals in the z direction Construct a 3 D structured grid given its extremal coordinates and number of intervals</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IOField::put</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;v)</field>
    <field name="url">group__OFELI.html#ga2127a22a0b5ed50ea9b932c05073dc3a</field>
    <field name="keywords">put OFELI::IOField::put IOField</field>
    <field name="text">Store Vect instance v in file v Vect instance to store Store Vect instance v in file</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::setCode</field>
    <field name="args">(int side, int code)</field>
    <field name="url">group__OFELI.html#ga214f158f212516a7d6a94760feb467f6</field>
    <field name="keywords">setCode OFELI::Grid::setCode Grid</field>
    <field name="text">Set a code for grid points on sides side Side for which code is assigned Possible values are MIN_X MAX_X MIN_Y MAX_Y MIN_Z MAX_Z code Code to assign Set a code for grid points on sides</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Tabulation::setFile</field>
    <field name="args">(string file)</field>
    <field name="url">group__OFELI.html#ga21f9cb9c9b2d2b1abc8865d9d56613c7</field>
    <field name="keywords">setFile OFELI::Tabulation::setFile Tabulation</field>
    <field name="text">Set file name This function is to be used when the default constructor is invoked Set file name</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TrMatrix::TrMatrix</field>
    <field name="args">(size_t size)</field>
    <field name="url">group__OFELI.html#ga24676057e126b92328fa706c094fda0b</field>
    <field name="keywords">TrMatrix OFELI::TrMatrix::TrMatrix TrMatrix&lt; T_ &gt;</field>
    <field name="text">Constructor for a tridiagonal matrix with size rows Constructor for a tridiagonal matrix with size rows</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TrMatrix::~TrMatrix</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#ga2584dd5ded61125880eb0a303975a86d</field>
    <field name="keywords">OFELI::TrMatrix::~TrMatrix TrMatrix&lt; T_ &gt;</field>
    <field name="text">Destructor Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::GeoModel::setData</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;b, const Vect&lt; real_t &gt; &amp;h, Vect&lt; real_t &gt; &amp;p)</field>
    <field name="url">group__OFELI.html#ga25ba8c34d74f215eb5fa62036ef83c1e</field>
    <field name="keywords">setData OFELI::GeoModel::setData GeoModel</field>
    <field name="text">Set vector data for Nurbs b Vector containing the defining polygon vertices h Vector containing the homogeneous weighting factors p Vector containing the resulting curve points Set vector data for Nurbs</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::at</field>
    <field name="args">(size_t i, size_t j)</field>
    <field name="url">group__OFELI.html#ga276ea1877b89d46c32e207248a4573d7</field>
    <field name="keywords">at OFELI::SpMatrix::at SpMatrix&lt; T_ &gt; at OFELI::TrMatrix::at TrMatrix&lt; T_ &gt; at OFELI::SpMatrix&lt; real_t &gt;::at SpMatrix&lt; real_t &gt;</field>
    <field name="text">Return a value of a matrix entry Return a value of a matrix entry i Row index starts at 1 j Column index starts at 1 i Row index starts at 1 j Column index starts at 1 Return a value of a matrix entry Return a value of a matrix entry</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Tabulation::getNbVar</field>
    <field name="args">(size_t n) const</field>
    <field name="url">group__OFELI.html#ga2a0368c292caac9d4ebe94f1b770868b</field>
    <field name="keywords">getNbVar OFELI::Tabulation::getNbVar Tabulation</field>
    <field name="text">Get number of variables of a given function n index of function Number of variables Get number of variables of a given function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LeastSquare::~LeastSquare</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#ga2cbfad7170ba5833c51ea7653c33fb78</field>
    <field name="keywords">OFELI::LeastSquare::~LeastSquare LeastSquare</field>
    <field name="text">Destructor Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::getNz</field>
    <field name="args">() const</field>
    <field name="url">group__OFELI.html#ga2d0d9d6ef46db37f88d35bd0a629c751</field>
    <field name="keywords">getNz OFELI::Grid::getNz Grid</field>
    <field name="text">Return number of grid intervals in the z-direction nz 0 for 1 D segments and 2 D domains rectangles Return number of grid intervals in the z-direction</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FuncApprox::setLeastSquare</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;x, const Vect&lt; real_t &gt; &amp;y, size_t N, Vect&lt; real_t &gt; &amp;a)</field>
    <field name="url">group__OFELI.html#ga2e59eaea69646ad8caa59b989a16b1a8</field>
    <field name="keywords">setLeastSquare OFELI::FuncApprox::setLeastSquare FuncApprox</field>
    <field name="text">Define least square approximation using polynomial regression Define N-degree polynomial to approximate in the sense of least squares of a given set of points in the plane The resulting line has the equation y a 0 a 1 a N x Vector defining x-coordinates of points y Vector defining y-coordinates of points N Degree of approximation polynomial a Vector of coefficients of polynomial as defined here above Define least square approximation using polynomial regression</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::getNbDOF</field>
    <field name="args">() const</field>
    <field name="url">group__OFELI.html#ga2e702838dc1b95944fd571e804950aa3</field>
    <field name="keywords">getNbDOF OFELI::Grid::getNbDOF Grid</field>
    <field name="text">Return total number of dof Return total number of dof</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">OFELI::FEType</field>
    <field name="url">group__OFELI.html#ga31f830fd5deccf18a6e312b026bbe13b</field>
    <field name="keywords">FEType OFELI::FEType OFELI</field>
    <field name="text">Choose Finite Element Type</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::Axpy</field>
    <field name="args">(T_ a, const SpMatrix&lt; T_ &gt; &amp;m)</field>
    <field name="url">group__OFELI.html#ga33e92450a126af2dabdae55f0a7f77ea</field>
    <field name="keywords">Axpy OFELI::SpMatrix::Axpy SpMatrix&lt; T_ &gt; Axpy OFELI::SpMatrix&lt; real_t &gt;::Axpy SpMatrix&lt; real_t &gt;</field>
    <field name="text">Add to matrix the product of a matrix by a scalar a Scalar to premultiply m Matrix by which a is multiplied The result is added to current instance Add to matrix the product of a matrix by a scalar</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::SpMatrix</field>
    <field name="args">(size_t nr, size_t nc)</field>
    <field name="url">group__OFELI.html#ga353a1fc335d51ea6dc16913eceac2e58</field>
    <field name="keywords">SpMatrix OFELI::SpMatrix::SpMatrix SpMatrix&lt; T_ &gt; SpMatrix OFELI::SpMatrix&lt; real_t &gt;::SpMatrix SpMatrix&lt; real_t &gt;</field>
    <field name="text">Constructor that initializes current instance as a dense matrix Normally for a dense matrix this is not the right class nr Number of matrix rows nc Number of matrix columns Constructor that initializes current instance as a dense matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Tabulation::getFunctName</field>
    <field name="args">(size_t n) const</field>
    <field name="url">group__OFELI.html#ga35d6cc5fdf1cbb7a1cc7f2fe908fb96c</field>
    <field name="keywords">getFunctName OFELI::Tabulation::getFunctName Tabulation</field>
    <field name="text">Get the name of a read function n index of function Name of function Get the name of a read function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::getY</field>
    <field name="args">(size_t j) const</field>
    <field name="url">group__OFELI.html#ga3812778b481984c13f6943ef139b8434</field>
    <field name="keywords">getY OFELI::Grid::getY Grid</field>
    <field name="text">Return y-coordinate of point with index j Return y-coordinate of point with index j</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">OFELI::Analysis</field>
    <field name="url">group__OFELI.html#ga3915e2ca621626d1d2797d8365196f1b</field>
    <field name="keywords">Analysis OFELI::Analysis OFELI</field>
    <field name="text">Selects Analysis type</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::GeoModel::~GeoModel</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#ga394e8243329f5ce186c6209e6930c293</field>
    <field name="keywords">OFELI::GeoModel::~GeoModel GeoModel</field>
    <field name="text">Destructor Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::setX</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;x)</field>
    <field name="url">group__OFELI.html#ga39a572506205e17b5459af94ac724fca</field>
    <field name="keywords">setX OFELI::Grid::setX Grid</field>
    <field name="text">Set node x-coordinates of grid This function is to be used to define a nonuniform grid x Vector of x-coordinates of nodes Set node x-coordinates of grid</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IOField::IOField</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#ga3b25b6d6a084dad58b0c4024e3c5566a</field>
    <field name="keywords">IOField OFELI::IOField::IOField IOField</field>
    <field name="text">Default constructor Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TrMatrix::Axpy</field>
    <field name="args">(T_ a, const TrMatrix&lt; T_ &gt; &amp;m)</field>
    <field name="url">group__OFELI.html#ga3b826b1a0e56d2a7994d829c8c32a089</field>
    <field name="keywords">Axpy OFELI::TrMatrix::Axpy TrMatrix&lt; T_ &gt;</field>
    <field name="text">Add to matrix the product of a matrix by a scalar a Scalar to premultiply m Matrix by which a is multiplied The result is added to current instance Add to matrix the product of a matrix by a scalar</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::add</field>
    <field name="args">(size_t i, const T_ &amp;val)</field>
    <field name="url">group__OFELI.html#ga3c7b029cbe1aca9bea7623ae99274795</field>
    <field name="keywords">add OFELI::SpMatrix::add SpMatrix&lt; T_ &gt; add OFELI::TrMatrix::add TrMatrix&lt; T_ &gt; add OFELI::SpMatrix&lt; real_t &gt;::add SpMatrix&lt; real_t &gt;</field>
    <field name="text">Add val to entry i Add val to entry i Add val to entry i Add val to entry i</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LeastSquare::set</field>
    <field name="args">(vector&lt; Fct * &gt; &amp;f, const Vect&lt; real_t &gt; &amp;x, const Vect&lt; real_t &gt; &amp;y, Vect&lt; real_t &gt; &amp;a)</field>
    <field name="url">group__OFELI.html#ga3ed7a8095fe2dc7e0c8de24f1c6dcc78</field>
    <field name="keywords">set OFELI::LeastSquare::set LeastSquare</field>
    <field name="text">Set least square approximation using given basis functions The least square approximation defines the function a 0 0 a 1 1 a N N f Vector of references to functions class Fct defining basis of least square approximation x Vector defining x-coordinates of points y Vector defining y-coordinates of points a Vector containing solution Coefficients of basis functions Set least square approximation using given basis functions</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TrMatrix::operator=</field>
    <field name="args">(const T_ &amp;x)</field>
    <field name="url">group__OFELI.html#ga40c66e0b6df22eb68b336744624b280e</field>
    <field name="keywords">operator= OFELI::TrMatrix::operator= TrMatrix&lt; T_ &gt;</field>
    <field name="text">Operator Assign matrix to identity times x Operator Assign matrix to identity times x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::GeoModel::BezierSurface</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#ga417ee6ae3a4e5a6748df5c796a562f5c</field>
    <field name="keywords">BezierSurface OFELI::GeoModel::BezierSurface GeoModel</field>
    <field name="text">Run Surface Bezier modelling The resulting vector of curve points is the vector p given by the constructor or by setData Run Surface Bezier modelling</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::setSolver</field>
    <field name="args">(Iteration solver=CG_SOLVER, Preconditioner prec=DIAG_PREC, int max_it=1000, real_t toler=1.e-8)</field>
    <field name="url">group__OFELI.html#ga41a8962995d98e2f2bcae545eccbf698</field>
    <field name="keywords">setSolver OFELI::SpMatrix::setSolver SpMatrix&lt; T_ &gt; setSolver OFELI::SpMatrix&lt; real_t &gt;::setSolver SpMatrix&lt; real_t &gt;</field>
    <field name="text">Choose solver and preconditioner for an iterative procedure solver Option to choose iterative solver in an enumerated variable CG_SOLVER Conjugate Gradient default CGS_SOLVER Squared conjugate gradient BICG_SOLVER Biconjugate gradient BICG_STAB_SOLVER Biconjugate gradient stabilized GMRES_SOLVER Generalized Minimal Residual Default value is CG_SOLVER prec Option to choose preconditioner in an enumerated variable IDENT_PREC Identity preconditioner no preconditioning DIAG_PREC Diagonal preconditioner default SSOR_PREC SSOR Symmetric Successive Over Relaxation preconditioner DILU_PREC ILU Diagonal Incomplete factorization preconditioner ILU_PREC ILU Incomplete factorization preconditioner Default value is DIAG_PREC max_it Maximum number of allowed iterations Default value is 1 0 0 0 toler Tolerance for convergence Default value is 1.e 8 Choose solver and preconditioner for an iterative procedure</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::SpMatrix</field>
    <field name="args">(const SpMatrix &amp;m)</field>
    <field name="url">group__OFELI.html#ga42a459de96e7e110a3c31fc73df559cd</field>
    <field name="keywords">SpMatrix OFELI::SpMatrix::SpMatrix SpMatrix&lt; T_ &gt; SpMatrix OFELI::SpMatrix&lt; real_t &gt;::SpMatrix SpMatrix&lt; real_t &gt;</field>
    <field name="text">Copy constructor Copy constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Tabulation::getMaxVar</field>
    <field name="args">(size_t n, size_t i) const</field>
    <field name="url">group__OFELI.html#ga42ae90bbcdaf8ef6f229471c9d3f85c2</field>
    <field name="keywords">getMaxVar OFELI::Tabulation::getMaxVar Tabulation</field>
    <field name="text">Get maximal value of a variable n index of function i index of variable between 1 and 3 Get maximal value of a variable</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::SpMatrix</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#ga42eb67beab2111425cb10da4678d5ac7</field>
    <field name="keywords">SpMatrix OFELI::SpMatrix::SpMatrix SpMatrix&lt; T_ &gt; SpMatrix OFELI::SpMatrix&lt; real_t &gt;::SpMatrix SpMatrix&lt; real_t &gt;</field>
    <field name="text">Default constructor Initialize a zero-dimension matrix Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::getXMax</field>
    <field name="args">() const</field>
    <field name="url">group__OFELI.html#ga47c46a3174e4a7d8c991a6b85268c6c2</field>
    <field name="keywords">getXMax OFELI::Grid::getXMax Grid</field>
    <field name="text">Return max Coordinates of the domain Return max Coordinates of the domain</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::GeoModel::Bezier</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#ga49e9f5cfb40f32148dcb5beb187bfcf3</field>
    <field name="keywords">Bezier OFELI::GeoModel::Bezier GeoModel</field>
    <field name="text">Run Bezier modelling The resulting vector of curve points is the vector p given by the constructor or by setData Run Bezier modelling</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LeastSquare::LeastSquare</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;x, const Vect&lt; real_t &gt; &amp;y, size_t N, Vect&lt; real_t &gt; &amp;a)</field>
    <field name="url">group__OFELI.html#ga4ad6b660f95a1f0709a1b11d655eaaa5</field>
    <field name="keywords">LeastSquare OFELI::LeastSquare::LeastSquare LeastSquare</field>
    <field name="text">Constructor for polynomial regression Define N-degree polynomial to approximate in the sense of least squares of a given set of points in the plane The resulting line has the equation y a 0 a 1 a N x Vector defining x-coordinates of points y Vector defining y-coordinates of points N Degree of approximation polynomial a Vector of coefficients of polynomial as defined here above Constructor for polynomial regression</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::SpMatrix</field>
    <field name="args">(const vector&lt; RC &gt; &amp;I, const Vect&lt; T_ &gt; &amp;a, int opt=1)</field>
    <field name="url">group__OFELI.html#ga4d0304a20c37b4edf58fb8deced283ed</field>
    <field name="keywords">SpMatrix OFELI::SpMatrix::SpMatrix SpMatrix&lt; T_ &gt; SpMatrix OFELI::SpMatrix&lt; real_t &gt;::SpMatrix SpMatrix&lt; real_t &gt;</field>
    <field name="text">Constructor for a square matrix using non zero row and column indices I Vector containing pairs of row and column indices a Vector containing matrix entries in the same order than the one given by I opt Flag indicating if vector I is cleaned and ordered opt 1 default or not opt 0 In the latter case this vector can have the same contents more than once and are not necessarily ordered Constructor for a square matrix using non zero row and column indices</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::SpMatrix</field>
    <field name="args">(const vector&lt; size_t &gt; &amp;row_ptr, const vector&lt; size_t &gt; &amp;col_ind)</field>
    <field name="url">group__OFELI.html#ga5129663659e1ea3496bde43f143bb267</field>
    <field name="keywords">SpMatrix OFELI::SpMatrix::SpMatrix SpMatrix&lt; T_ &gt; SpMatrix OFELI::SpMatrix&lt; real_t &gt;::SpMatrix SpMatrix&lt; real_t &gt;</field>
    <field name="text">Constructor for a rectangle matrix row_ptr Vector of row pointers See the above description of this class col_ind Vector of column indices See the above description of this class Constructor for a rectangle matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Iter::Iter</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#ga52a964fddab510b9f151dc0e0fd611b8</field>
    <field name="keywords">Iter OFELI::Iter::Iter Iter&lt; T_ &gt; Iter OFELI::Iter&lt; real_t &gt;::Iter Iter&lt; real_t &gt;</field>
    <field name="text">Default Constructor This constructor set default values the maximal number of iterations is set to 1 0 0 and the tolerance to 1.e 8 Default Constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Tabulation::getSize</field>
    <field name="args">(size_t n, size_t i) const</field>
    <field name="url">group__OFELI.html#ga5408a34fa874469743edb3e92d14b9a3</field>
    <field name="keywords">getSize OFELI::Tabulation::getSize Tabulation</field>
    <field name="text">Get number of points defining tabulation n index of function Starting from 1 i index of variable Between 1 and 3 Size Get number of points defining tabulation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::getCoord</field>
    <field name="args">(size_t i, size_t j) const</field>
    <field name="url">group__OFELI.html#ga587abd7c9fdaaa93ce30cc431f1d781a</field>
    <field name="keywords">getCoord OFELI::Grid::getCoord Grid</field>
    <field name="text">Return coordinates a point with label i j in a 2 D grid Return coordinates a point with label i j in a 2 D grid</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FuncApprox::run</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#ga58e8be2db2660128e4e6456a9c981fb5</field>
    <field name="keywords">run OFELI::FuncApprox::run FuncApprox run OFELI::LeastSquare::run LeastSquare</field>
    <field name="text">Run approximation process Compute least square approximation Results are stored in designated vector(s) 0 if no problem occurred given in set functions Run approximation process Compute least square approximation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::Identity</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#ga59a581e26a983fbd21d2accce938bc08</field>
    <field name="keywords">Identity OFELI::SpMatrix::Identity SpMatrix&lt; T_ &gt; Identity OFELI::TrMatrix::Identity TrMatrix&lt; T_ &gt; Identity OFELI::SpMatrix&lt; real_t &gt;::Identity SpMatrix&lt; real_t &gt;</field>
    <field name="text">Define matrix as identity Define matrix as identity matrix Define matrix as identity Define matrix as identity matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IOField::close</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#ga5ae591df94fc66ccb85cbb6565368bca</field>
    <field name="keywords">close OFELI::IOField::close IOField</field>
    <field name="text">Close file Close file</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LeastSquare::set</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;x, const Vect&lt; real_t &gt; &amp;y, real_t &amp;a0, real_t &amp;a1)</field>
    <field name="url">group__OFELI.html#ga5af0d4697439a9299bed0baa4cf54b23</field>
    <field name="keywords">set OFELI::LeastSquare::set LeastSquare</field>
    <field name="text">Set least square approximation by linear regression Define 1 degree polynomial to approximate in the sense of least squares of a given set of points in the plane The resulting line has the equation y a0 a1*x x Vector defining x-coordinates of points y Vector defining y-coordinates of points a0 Coefficient of constant term a1 Coefficient of first degree term Set least square approximation by linear regression</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::GeoModel::setBezierSurfacePar</field>
    <field name="args">(size_t m, size_t n, size_t npu, size_t npw)</field>
    <field name="url">group__OFELI.html#ga5b8d0ce210dc001c30a7834a4b1676c8</field>
    <field name="keywords">setBezierSurfacePar OFELI::GeoModel::setBezierSurfacePar GeoModel</field>
    <field name="text">Set parameters for BSpline modelling m One less than the number of polygon vertices in w direction n One less than the number of polygon vertices in u direction npu Number of parametric lines in the u direction npw Number of parametric lines in the w direction Set parameters for BSpline modelling</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::setXMax</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;x)</field>
    <field name="url">group__OFELI.html#ga5cd060d87716f96df1fe751da2458ab1</field>
    <field name="keywords">setXMax OFELI::Grid::setXMax Grid</field>
    <field name="text">Set max coordinates of the domain x Maximal values of coordinates</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::setCode</field>
    <field name="args">(string exp, int code)</field>
    <field name="url">group__OFELI.html#ga5d8498e490acb140283ba216b5a8be8a</field>
    <field name="keywords">setCode OFELI::Grid::setCode Grid</field>
    <field name="text">Set a code for some grid points exp Regular expression that determines the set of grid points on which the code is applied code Code to assign Set a code for some grid points</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::getZ</field>
    <field name="args">(size_t k) const</field>
    <field name="url">group__OFELI.html#ga5f8ccc9b62fb6544c807c8376c78c2d6</field>
    <field name="keywords">getZ OFELI::Grid::getZ Grid</field>
    <field name="text">Return z-coordinate of point with index k Return z-coordinate of point with index k</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::solve</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;b, Vect&lt; T_ &gt; &amp;x, bool fact=false)</field>
    <field name="url">group__OFELI.html#ga60abf009c8cdb7ca5f86cf266752cb97</field>
    <field name="keywords">solve OFELI::SpMatrix::solve SpMatrix&lt; T_ &gt; solve OFELI::TrMatrix::solve TrMatrix&lt; T_ &gt; solve OFELI::SpMatrix&lt; real_t &gt;::solve SpMatrix&lt; real_t &gt;</field>
    <field name="text">Solve the linear system of equations Solve a linear system with current matrix forward and back substitution The default parameters are CG_SOLVER for solver DIAG_PREC for preconditioner Max Number of iterations is 1 0 0 0 Tolerance is 1.e 8 To change these values call function setSolver before this function b Vector that contains right-hand side x Vector that contains the obtained solution fact Unused argument Number of actual performed iterations b Vect instance that contains right-hand side x Vect instance that contains solution fact Unused argument 0 if solution was normally performed n if the n th pivot is null Warning Matrix is modified after this function Solve the linear system of equations Solve a linear system with current matrix forward and back substitution</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::set</field>
    <field name="args">(size_t i, size_t j, const T_ &amp;val)</field>
    <field name="url">group__OFELI.html#ga61cf373a94a5fedbca306e016bc489c9</field>
    <field name="keywords">set OFELI::SpMatrix::set SpMatrix&lt; T_ &gt; set OFELI::TrMatrix::set TrMatrix&lt; T_ &gt; set OFELI::SpMatrix&lt; real_t &gt;::set SpMatrix&lt; real_t &gt;</field>
    <field name="text">Assign a value to an entry of the matrix Assign constant val to an entry i j of the matrix i Row index j Column index val Value to assign to a(i,j) Assign a value to an entry of the matrix Assign constant val to an entry i j of the matrix</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">OFELI::PDECoefType</field>
    <field name="url">group__OFELI.html#ga62536dd8609c49611ad03866df7cde66</field>
    <field name="keywords">PDECoefType OFELI::PDECoefType OFELI</field>
    <field name="text">Choose PDE Coefficient</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::getHz</field>
    <field name="args">() const</field>
    <field name="url">group__OFELI.html#ga627a8904509d0fc54fb816fd55e79fd5</field>
    <field name="keywords">getHz OFELI::Grid::getHz Grid</field>
    <field name="text">Return grid size in the z-direction Return grid size in the z-direction</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::getColumn</field>
    <field name="args">(size_t j) const</field>
    <field name="url">group__OFELI.html#ga633c03c1a0941387fce940cb18d6bb7c</field>
    <field name="keywords">getColumn OFELI::SpMatrix::getColumn SpMatrix&lt; T_ &gt; getColumn OFELI::SpMatrix&lt; real_t &gt;::getColumn SpMatrix&lt; real_t &gt;</field>
    <field name="text">Get j th column vector Get j th column vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TrMatrix::Laplace1D</field>
    <field name="args">(real_t h)</field>
    <field name="url">group__OFELI.html#ga66108fdafb60f5416ea87fed1378f821</field>
    <field name="keywords">Laplace1D OFELI::TrMatrix::Laplace1D TrMatrix&lt; T_ &gt;</field>
    <field name="text">Define matrix as the one of 3 point finite difference discretization of the second derivative h mesh size Define matrix as the one of 3 point finite difference discretization of the second derivative</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">OFELI::TimeScheme</field>
    <field name="url">group__OFELI.html#ga672626c8ddef10da0244c15db4085f40</field>
    <field name="keywords">TimeScheme OFELI::TimeScheme OFELI</field>
    <field name="text">Selects Time integration scheme</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::getCode</field>
    <field name="args">(size_t i, size_t j, size_t k) const</field>
    <field name="url">group__OFELI.html#ga6aae4b2697c916a777b89675d01beaf5</field>
    <field name="keywords">getCode OFELI::Grid::getCode Grid</field>
    <field name="text">Return code for a grid point i i th index for node for which code is to be returned j j th index for node for which code is to be returned k k th index for node for which code is to be returned Return code for a grid point</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::getCoord</field>
    <field name="args">(size_t i) const</field>
    <field name="url">group__OFELI.html#ga6ca375e1b939af26b5f3d942c0e67c48</field>
    <field name="keywords">getCoord OFELI::Grid::getCoord Grid</field>
    <field name="text">Return coordinates a point with label i in a 1 D grid Return coordinates a point with label i in a 1 D grid</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::setSize</field>
    <field name="args">(size_t nr, size_t nc)</field>
    <field name="url">group__OFELI.html#ga6cd98f8e60c54091bc2249e99677f8c3</field>
    <field name="keywords">setSize OFELI::SpMatrix::setSize SpMatrix&lt; T_ &gt; setSize OFELI::SpMatrix&lt; real_t &gt;::setSize SpMatrix&lt; real_t &gt;</field>
    <field name="text">Set size number of rows of matrix nr Number of rows nc Number of columns Set size number of rows of matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::GeoModel::setBezierPar</field>
    <field name="args">(size_t n, size_t nc)</field>
    <field name="url">group__OFELI.html#ga6ce02f2598c20931edbbec2fb32ced4e</field>
    <field name="keywords">setBezierPar OFELI::GeoModel::setBezierPar GeoModel</field>
    <field name="text">Set parameters for BSpline modelling n Number of defining polygon vertices nc Number of points to be calculated on the curve Set parameters for BSpline modelling</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::setDomain</field>
    <field name="args">(Point&lt; real_t &gt; xmin, Point&lt; real_t &gt; xmax)</field>
    <field name="url">group__OFELI.html#ga6e293fe603f3854e0b2adfa755874e2a</field>
    <field name="keywords">setDomain OFELI::Grid::setDomain Grid</field>
    <field name="text">Set Dimensions of the domain 3 D case xmin Minimal coordinate value xmax Maximal coordinate value Set Dimensions of the domain 3 D case</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IOField::IOField</field>
    <field name="args">(const string &amp;mesh_file, const string &amp;file, Mesh &amp;ms, AccessType access, bool compact=true)</field>
    <field name="url">group__OFELI.html#ga6e6cbc3a44125cea963f12f8583dd0dc</field>
    <field name="keywords">IOField OFELI::IOField::IOField IOField</field>
    <field name="text">Constructor using file name mesh file and mesh mesh_file File containing mesh file File that contains field stored or to store ms Mesh instance access Access code This number is to be chosen among two enumerated values IOField::IN to read the file IOField::OUT to write on it compact Flag to choose a compact storage or not Default true Constructor using file name mesh file and mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IOField::IOField</field>
    <field name="args">(const string &amp;file, Mesh &amp;ms, AccessType access, bool compact=true)</field>
    <field name="url">group__OFELI.html#ga6fe62f18d2c6de28b1ae3e619681ef08</field>
    <field name="keywords">IOField OFELI::IOField::IOField IOField</field>
    <field name="text">Constructor using file name and mesh file File that contains field stored or to store ms Mesh instance access Access code This number is to be chosen among two enumerated values IOField::IN to read the file IOField::OUT to write on it compact Flag to choose a compact storage or not Default true Constructor using file name and mesh</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Tabulation::getValue</field>
    <field name="args">(string funct, real_t x, real_t y)</field>
    <field name="url">group__OFELI.html#ga7184daa78a310ca3987dcb2544d2b4d0</field>
    <field name="keywords">getValue OFELI::Tabulation::getValue Tabulation</field>
    <field name="text">Return the calculated value of the function Case of a function of two variables funct Name of the function to be evaluated as read from input file x Value of the first variable y Value of the second variable Computed value of the function Return the calculated value of the function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::~SpMatrix</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#ga73db26aec81b831490a6b9bd06d8201e</field>
    <field name="keywords">OFELI::SpMatrix::~SpMatrix SpMatrix&lt; T_ &gt; OFELI::SpMatrix&lt; real_t &gt;::~SpMatrix SpMatrix&lt; real_t &gt;</field>
    <field name="text">Destructor Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::setXY</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;x, const Vect&lt; real_t &gt; &amp;y)</field>
    <field name="url">group__OFELI.html#ga7482fc5e189c21ccd803852742b441b3</field>
    <field name="keywords">setXY OFELI::Grid::setXY Grid</field>
    <field name="text">Set node x- and y-coordinates of grid This function is to be used to define a nonuniform grid x Vector of x-coordinates of nodes y Vector of y-coordinates of nodes Set node x- and y-coordinates of grid</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IOField::put</field>
    <field name="args">(Mesh &amp;ms)</field>
    <field name="url">group__OFELI.html#ga75adb8e69a3fe0158b5298fce60f17d9</field>
    <field name="keywords">put OFELI::IOField::put IOField</field>
    <field name="text">Store mesh in file Store mesh in file</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">OFELI::PDE_Terms</field>
    <field name="url">group__OFELI.html#ga76756c7eef4f22bb13ac06f6c8c197cb</field>
    <field name="keywords">PDE_Terms OFELI::PDE_Terms OFELI</field>
    <field name="text">Enumerate class to select various terms in partial differential equations</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::MultAdd</field>
    <field name="args">(T_ a, const Vect&lt; T_ &gt; &amp;x, Vect&lt; T_ &gt; &amp;y) const</field>
    <field name="url">group__OFELI.html#ga7687aa6aa85cfe87635a1c3e56625876</field>
    <field name="keywords">MultAdd OFELI::SpMatrix::MultAdd SpMatrix&lt; T_ &gt; MultAdd OFELI::TrMatrix::MultAdd TrMatrix&lt; T_ &gt; MultAdd OFELI::SpMatrix&lt; real_t &gt;::MultAdd SpMatrix&lt; real_t &gt;</field>
    <field name="text">Multiply matrix by vector a*x and add to y Multiply matrix by vector a*x and add result to y a Constant to multiply by matrix x Vector to multiply by matrix y Vector to add to the result y contains on output the result Multiply matrix by vector a*x and add to y Multiply matrix by vector a*x and add result to y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::GeoModel::GeoModel</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;b, const Vect&lt; real_t &gt; &amp;h, Vect&lt; real_t &gt; &amp;p)</field>
    <field name="url">group__OFELI.html#ga77fa3e35d33d1bb270ed490c61aa15a8</field>
    <field name="keywords">GeoModel OFELI::GeoModel::GeoModel GeoModel</field>
    <field name="text">Constructor with given data for nurbs This function is to be used if the default constructed was used b Vector containing the defining polygon vertices h Vector containing the homogeneous weighting factors p Vector containing the resulting curve points Constructor with given data for nurbs</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::operator()</field>
    <field name="args">(size_t i, size_t j) const</field>
    <field name="url">group__OFELI.html#ga78adc6c13ad0f1d1dedacffe0e80ce63</field>
    <field name="keywords">operator() OFELI::SpMatrix::operator() SpMatrix&lt; T_ &gt; operator() OFELI::TrMatrix::operator() TrMatrix&lt; T_ &gt; operator() OFELI::SpMatrix&lt; real_t &gt;::operator() SpMatrix&lt; real_t &gt;</field>
    <field name="text">Operator Constant version Operator Constant version i Row index j Column index i Row index j Column index Operator Constant version Operator Constant version</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Tabulation::getValue</field>
    <field name="args">(string funct, real_t x, real_t y, real_t z)</field>
    <field name="url">group__OFELI.html#ga78af8a026d491363609080d9462076b8</field>
    <field name="keywords">getValue OFELI::Tabulation::getValue Tabulation</field>
    <field name="text">Return the calculated value of the function Case of a function of three variables funct Name of the funct to be evaluated as read from input file x Value of the first variable y Value of the second variable z Value of the third variable Computed value of the function Return the calculated value of the function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::GeoModel::setData</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;b, Vect&lt; real_t &gt; &amp;p)</field>
    <field name="url">group__OFELI.html#ga7b51c783ad91edcff67bdf394782d4b4</field>
    <field name="keywords">setData OFELI::GeoModel::setData GeoModel</field>
    <field name="text">Set vector data b Vector containing the defining polygon vertices p Vector containing the resulting curve points Set vector data</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IOField::saveGMSH</field>
    <field name="args">(string output_file, string mesh_file)</field>
    <field name="url">group__OFELI.html#ga7c7ba481e60ac659834eee4ac657aea8</field>
    <field name="keywords">saveGMSH OFELI::IOField::saveGMSH IOField</field>
    <field name="text">Save field vectors in a file using GMSH format This member function enables avoiding the use of cfield It must be used once all field vectors have been stored in output file It closes this file and copies its contents to a GMSH file output_file Output file name where to store using GMSH format mesh_file File containing mesh data Save field vectors in a file using GMSH format</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FuncApprox::getLeastSquare</field>
    <field name="args">(Fct &amp;f)</field>
    <field name="url">group__OFELI.html#ga7e0f44528e64ceb4354b6cd37ece6e67</field>
    <field name="keywords">getLeastSquare OFELI::FuncApprox::getLeastSquare FuncApprox</field>
    <field name="text">Compute the resulting least square fitting function Once the function run() is invoked this member function gives the analytical expression of the resulting least square fitting function f Reference to approximating function using the least square method Compute the resulting least square fitting function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TrMatrix::operator=</field>
    <field name="args">(const TrMatrix&lt; T_ &gt; &amp;m)</field>
    <field name="url">group__OFELI.html#ga7f4784218a2a1e8ba6d8f806fa66053b</field>
    <field name="keywords">operator= OFELI::TrMatrix::operator= TrMatrix&lt; T_ &gt;</field>
    <field name="text">Operator Copy matrix m to current matrix instance Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TrMatrix::operator*=</field>
    <field name="args">(const T_ &amp;x)</field>
    <field name="url">group__OFELI.html#ga80094bed88352caef2725874c164db81</field>
    <field name="keywords">operator*= OFELI::TrMatrix::operator*= TrMatrix&lt; T_ &gt;</field>
    <field name="text">Operator Premultiply matrix entries by constant value x Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::DiagPrescribe</field>
    <field name="args">(Mesh &amp;mesh, Vect&lt; T_ &gt; &amp;b, const Vect&lt; T_ &gt; &amp;u)</field>
    <field name="url">group__OFELI.html#ga8298c88e2554c1140fdc531e8efc50db</field>
    <field name="keywords">DiagPrescribe OFELI::SpMatrix::DiagPrescribe SpMatrix&lt; T_ &gt; DiagPrescribe OFELI::SpMatrix&lt; real_t &gt;::DiagPrescribe SpMatrix&lt; real_t &gt;</field>
    <field name="text">Impose by a diagonal method an essential boundary condition This member function modifies diagonal terms in matrix and terms in vector that correspond to degrees of freedom with nonzero code in order to impose a boundary condition The penalty parameter is defined by default equal to 1.e20 It can be modified by member function setPenal mesh Mesh instance from which information is extracted b Vect instance that contains right-hand side u Vect instance that conatins imposed valued at DOFs where they are to be imposed Impose by a diagonal method an essential boundary condition</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::b</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#ga83908271a0678c49cbf9df0cfae052eb</field>
    <field name="keywords">b OFELI::b OFELI</field>
    <field name="text">Return element right-hand side Right-hand side is returned as a C-array Return element right-hand side</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IOField::open</field>
    <field name="args">(const string &amp;file, AccessType access)</field>
    <field name="url">group__OFELI.html#ga83af62d1213ad076c09a9e0adb6d58a1</field>
    <field name="keywords">open OFELI::IOField::open IOField</field>
    <field name="text">Open file file File name access Access code This number is to be chosen among two enumerated values IOField::IN to read the file IOField::OUT to write on it Open file</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FuncApprox::setLeastSquare</field>
    <field name="args">(DMatrix&lt; real_t &gt; &amp;B, const Vect&lt; real_t &gt; &amp;y, Vect&lt; real_t &gt; &amp;a)</field>
    <field name="url">group__OFELI.html#ga83df464ff0de59d7542360770442f45e</field>
    <field name="keywords">setLeastSquare OFELI::FuncApprox::setLeastSquare FuncApprox</field>
    <field name="text">Define least square approximation with given least square matrix Matrix entries is defined by B(k,i) as the k-th basis function evaluated at x(i) B Rectangle matrix of Least square approximation y Vector defining y-coordinates of points a Vector containing solution Coefficients of basis functions Define least square approximation with given least square matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::getNx</field>
    <field name="args">() const</field>
    <field name="url">group__OFELI.html#ga849205bb532d7f55bcc9da0916e02d1d</field>
    <field name="keywords">getNx OFELI::Grid::getNx Grid</field>
    <field name="text">Return number of grid intervals in the x direction Return number of grid intervals in the x direction</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Iter::Iter</field>
    <field name="args">(int max_it, real_t toler)</field>
    <field name="url">group__OFELI.html#ga84d8bca72783e4b905ec5f00831222c3</field>
    <field name="keywords">Iter OFELI::Iter::Iter Iter&lt; T_ &gt; Iter OFELI::Iter&lt; real_t &gt;::Iter Iter&lt; real_t &gt;</field>
    <field name="text">Constructor with iteration parameters max_it Maximum number of iterations toler Tolerance value for convergence Constructor with iteration parameters</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TrMatrix::solve</field>
    <field name="args">(Vect&lt; T_ &gt; &amp;b, bool fact=true)</field>
    <field name="url">group__OFELI.html#ga85abe8e904adb7fd09103d7b3e8e362d</field>
    <field name="keywords">solve OFELI::TrMatrix::solve TrMatrix&lt; T_ &gt;</field>
    <field name="text">Solve a linear system with current matrix forward and back substitution b Vect instance that contains right-hand side on input and solution on output fact Ununsed argument 0 if solution was normally performed n if the n th pivot is null Warning Matrix is modified after this function Solve a linear system with current matrix forward and back substitution</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::getXMin</field>
    <field name="args">() const</field>
    <field name="url">group__OFELI.html#ga85e619baa4e47cab21ee988c8dd0e346</field>
    <field name="keywords">getXMin OFELI::Grid::getXMin Grid</field>
    <field name="text">Return min Coordinates of the domain Return min Coordinates of the domain</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::Deactivate</field>
    <field name="args">(size_t i)</field>
    <field name="url">group__OFELI.html#ga89f7cf12c09343988c846c1bc31a8950</field>
    <field name="keywords">Deactivate OFELI::Grid::Deactivate Grid</field>
    <field name="text">Change state of a cell from active to inactive 1 D grid i grid cell to remove Change state of a cell from active to inactive 1 D grid</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">OFELI::EigenMethod</field>
    <field name="url">group__OFELI.html#ga8c89e2f95eb1149cbab804231338c2d5</field>
    <field name="keywords">EigenMethod OFELI::EigenMethod OFELI</field>
    <field name="text">Enumerate methods to solve the eigenvalue problem Enumerate methods to solve the eigenvalue problem Enumerate methods to solve the eigenvalue problem</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::SpMatrix</field>
    <field name="args">(size_t nr, size_t nc, const vector&lt; size_t &gt; &amp;row_ptr, const vector&lt; size_t &gt; &amp;col_ind, const vector&lt; T_ &gt; &amp;a)</field>
    <field name="url">group__OFELI.html#ga8cf0a869cdde57597f040be0dc13a253</field>
    <field name="keywords">SpMatrix OFELI::SpMatrix::SpMatrix SpMatrix&lt; T_ &gt; SpMatrix OFELI::SpMatrix&lt; real_t &gt;::SpMatrix SpMatrix&lt; real_t &gt;</field>
    <field name="text">Constructor for a rectangle matrix nr Number of rows nc Number of columns row_ptr Vector of row pointers See the above description of this class col_ind Vector of column indices See the above description of this class a vector instance containing matrix entries stored columnwise Constructor for a rectangle matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::getXY</field>
    <field name="args">(size_t i, size_t j) const</field>
    <field name="url">group__OFELI.html#ga8e906e0e7512c9d26923e502bf2ed5a7</field>
    <field name="keywords">getXY OFELI::Grid::getXY Grid</field>
    <field name="text">Return coordinates of point with indices i j Return coordinates of point with indices i j</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::Dense</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#ga8f380d4460b7d04a502b59bc28959d32</field>
    <field name="keywords">Dense OFELI::SpMatrix::Dense SpMatrix&lt; T_ &gt; Dense OFELI::SpMatrix&lt; real_t &gt;::Dense SpMatrix&lt; real_t &gt;</field>
    <field name="text">Define matrix as a dense one Define matrix as a dense one</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::GeoModel::setNurbsPar</field>
    <field name="args">(size_t n, size_t c, size_t np)</field>
    <field name="url">group__OFELI.html#ga905d3581717ef2ef807c744191bca620</field>
    <field name="keywords">setNurbsPar OFELI::GeoModel::setNurbsPar GeoModel</field>
    <field name="text">Set parameters for Nurbs modelling n Number of defining polygon vertices c Order of the B-spline basis function np Number of points to be calculated on the curve Set parameters for Nurbs modelling</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::setDomain</field>
    <field name="args">(real_t xmin, real_t xmax)</field>
    <field name="url">group__OFELI.html#ga908ba56330052baa8b0a5507e1e1ab54</field>
    <field name="keywords">setDomain OFELI::Grid::setDomain Grid</field>
    <field name="text">Set Dimensions of the domain 1 D case xmin Minimal value of x coordinate xmax Maximal value of x coordinate Set Dimensions of the domain 1 D case</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::SpMatrix</field>
    <field name="args">(const vector&lt; RC &gt; &amp;I, int opt=1)</field>
    <field name="url">group__OFELI.html#ga92a04a7a27dcb3bfe6d5bbec0412d0aa</field>
    <field name="keywords">SpMatrix OFELI::SpMatrix::SpMatrix SpMatrix&lt; T_ &gt; SpMatrix OFELI::SpMatrix&lt; real_t &gt;::SpMatrix SpMatrix&lt; real_t &gt;</field>
    <field name="text">Constructor for a square matrix using non zero row and column indices I Vector containing pairs of row and column indices opt Flag indicating if vectors I is cleaned and ordered opt 1 or not opt 0 In the latter case this vector can have the same contents more than once and are not necessarily ordered Constructor for a square matrix using non zero row and column indices</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FuncApprox::setNurbsSurface</field>
    <field name="args">(size_t m, size_t n, size_t c, size_t d, size_t npu, size_t npw, const Vect&lt; real_t &gt; &amp;b, Vect&lt; real_t &gt; &amp;p)</field>
    <field name="url">group__OFELI.html#ga94cdbc4d399b18d23acda22e80360b9b</field>
    <field name="keywords">setNurbsSurface OFELI::FuncApprox::setNurbsSurface FuncApprox</field>
    <field name="text">Define Nurbs surface modelling m Number of polygon vertices in w direction n Number of polygon vertices in u direction c Order of the B-spline basis function in w direction d Order of the B-spline basis function in u direction npu Number of parametric lines in the u direction npw Number of parametric lines in the w direction b Vector containing the defining polygon vertices p Vector containing the resulting curve points Define Nurbs surface modelling</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::operator*</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;x) const</field>
    <field name="url">group__OFELI.html#ga94d383ee6eb0e15880d40bfe43ab21d5</field>
    <field name="keywords">operator* OFELI::SpMatrix::operator* SpMatrix&lt; T_ &gt; operator* OFELI::SpMatrix&lt; real_t &gt;::operator* SpMatrix&lt; real_t &gt;</field>
    <field name="text">Operator to multiply matrix by a vector x Vect instance to multiply by Vector product of matrix by x Operator to multiply matrix by a vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LeastSquare::set</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;x, const Vect&lt; real_t &gt; &amp;y, size_t N, Vect&lt; real_t &gt; &amp;a)</field>
    <field name="url">group__OFELI.html#ga95f75e379289142ff87fceb294f8d718</field>
    <field name="keywords">set OFELI::LeastSquare::set LeastSquare</field>
    <field name="text">Set least square approximation by polynomial regression Define N-degree polynomial to approximate in the sense of least squares of a given set of points in the plane The resulting line has the equation y a 0 a 1 a N x Vector defining x-coordinates of points y Vector defining y-coordinates of points N Degree of approximation polynomial a Vector of coefficients of polynomial as defined here above Set least square approximation by polynomial regression</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::getCenter</field>
    <field name="args">(size_t i, size_t j) const</field>
    <field name="url">group__OFELI.html#ga967a67168b3b19c99dd1c6be2f7f3c58</field>
    <field name="keywords">getCenter OFELI::Grid::getCenter Grid</field>
    <field name="text">Return coordinates of center of a 2 D cell with indices i j i+1 j i+1 j+1 i j+1 Return coordinates of center of a 2 D cell with indices i j i+1 j i+1 j+1 i j+1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LeastSquare::LeastSquare</field>
    <field name="args">(DMatrix&lt; real_t &gt; &amp;B, const Vect&lt; real_t &gt; &amp;y, Vect&lt; real_t &gt; &amp;a)</field>
    <field name="url">group__OFELI.html#ga96ab8f7db523dc4809afc1f0311b6912</field>
    <field name="keywords">LeastSquare OFELI::LeastSquare::LeastSquare LeastSquare</field>
    <field name="text">Constructor with given least square matrix Matrix entries is defined by B(k,i) as the k-th basis function evaluated at x(i) B Rectangle matrix of Least square approximation y Vector defining y-coordinates of points a Vector containing solution Coefficients of basis functions Constructor with given least square matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FuncApprox::setLagrange</field>
    <field name="args">(int n, const Vect&lt; real_t &gt; &amp;x, const Vect&lt; real_t &gt; &amp;y, Fct &amp;f)</field>
    <field name="url">group__OFELI.html#ga973019c85316cddc6cb3822bd0aaab9c</field>
    <field name="keywords">setLagrange OFELI::FuncApprox::setLagrange FuncApprox</field>
    <field name="text">Define Lagrange interpolation This member function defines Lagrange interpolation data n Degree of interpolation polynomial must be 1 x Abcissa of defining points y Values of points to interpolate f Function that will contain Lagrange interpolation polynomial once the function run() is invoked Define Lagrange interpolation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::setSize</field>
    <field name="args">(size_t size)</field>
    <field name="url">group__OFELI.html#ga97deb13018c1b55b18bfe25a9e339e8d</field>
    <field name="keywords">setSize OFELI::SpMatrix::setSize SpMatrix&lt; T_ &gt; setSize OFELI::TrMatrix::setSize TrMatrix&lt; T_ &gt; setSize OFELI::SpMatrix&lt; real_t &gt;::setSize SpMatrix&lt; real_t &gt;</field>
    <field name="text">Set size of matrix case where it s a square matrix Set size number of rows of matrix size Number of rows and columns size Number of rows and columns Set size of matrix case where it s a square matrix Set size number of rows of matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::Deactivate</field>
    <field name="args">(size_t i, size_t j, size_t k)</field>
    <field name="url">group__OFELI.html#ga9b422946d495c9d3d8688068ea466c33</field>
    <field name="keywords">Deactivate OFELI::Grid::Deactivate Grid</field>
    <field name="text">Change state of a cell from active to inactive 2 D grid i i th index for grid cell to remove If this value is 0 all cells j k are deactivated j j th index for grid cell to remove If this value is 0 all cells i k are deactivated k k th index for grid cell to remove If this value is 0 all cells i j are deactivated Change state of a cell from active to inactive 2 D grid</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::get</field>
    <field name="args">() const</field>
    <field name="url">group__OFELI.html#ga9b901ab6d955335f6b9edcabbc59d1d1</field>
    <field name="keywords">get OFELI::SpMatrix::get SpMatrix&lt; T_ &gt; get OFELI::TrMatrix::get TrMatrix&lt; T_ &gt; get OFELI::SpMatrix&lt; real_t &gt;::get SpMatrix&lt; real_t &gt;</field>
    <field name="text">Return C-Array Return C-Array Non zero terms of matrix is stored row by row Return C-Array Return C-Array</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IOField::IOField</field>
    <field name="args">(const string &amp;file, AccessType access, const string &amp;name)</field>
    <field name="url">group__OFELI.html#ga9bfca0c089dcb12f26119d6ea1ceff4b</field>
    <field name="keywords">IOField OFELI::IOField::IOField IOField</field>
    <field name="text">Constructor using file name and field name file File that contains field stored or to store access Access code This number is to be chosen among two enumerated values IOField::IN to read the file IOField::OUT to write on it name Seek a specific field with given name Constructor using file name and field name</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LeastSquare::LeastSquare</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#ga9c3579959c69ddd69d23943caddd03da</field>
    <field name="keywords">LeastSquare OFELI::LeastSquare::LeastSquare LeastSquare</field>
    <field name="text">Default constructor The functions set(...) must be used to define data before computing the approximation using run() Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::GeoModel::GeoModel</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;b, Vect&lt; real_t &gt; &amp;p)</field>
    <field name="url">group__OFELI.html#ga9c49227455bdcadc4550ebbcb2b0f596</field>
    <field name="keywords">GeoModel OFELI::GeoModel::GeoModel GeoModel</field>
    <field name="text">Constructor with given polygon points and solution vector This function is to be used if the default constructed was used b Vector containing the defining polygon vertices p Vector containing the resulting curve points Constructor with given polygon points and solution vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Tabulation::getValue</field>
    <field name="args">(string funct, real_t x)</field>
    <field name="url">group__OFELI.html#ga9cde7b734fea932d61cfdbf55f6a0e0b</field>
    <field name="keywords">getValue OFELI::Tabulation::getValue Tabulation</field>
    <field name="text">Return the calculated value of the function Case of a function of one variable funct Name of the function to be evaluated as read from input file x Value of the variable Computed value of the function Return the calculated value of the function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IOField::open</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#ga9e8555112049fc2b4945120b3c45f8ab</field>
    <field name="keywords">open OFELI::IOField::open IOField</field>
    <field name="text">Open file Case where file name has been previously given in the constructor Open file</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::GeoModel::setBSplineSurfacePar</field>
    <field name="args">(size_t m, size_t n, size_t c, size_t d, size_t npu, size_t npw)</field>
    <field name="url">group__OFELI.html#ga9ecdfbdf68055c09f184fe5f26b9fa70</field>
    <field name="keywords">setBSplineSurfacePar OFELI::GeoModel::setBSplineSurfacePar GeoModel</field>
    <field name="text">Set parameters for BSplineS modelling m One less than the number of polygon vertices in w direction n One less than the number of polygon vertices in u direction c Order of the B-spline basis function in w direction d Order of the B-spline basis function in u direction npu Number of parametric lines in the u direction npw Number of parametric lines in the w direction Set parameters for BSplineS modelling</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::setXMin</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;x)</field>
    <field name="url">group__OFELI.html#ga9f65f5226354bc55b1419cfec3c8bf84</field>
    <field name="keywords">setXMin OFELI::Grid::setXMin Grid</field>
    <field name="text">Set min coordinates of the domain x Minimal values of coordinates Set min coordinates of the domain</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Tabulation::getDerivative</field>
    <field name="args">(string funct, real_t x)</field>
    <field name="url">group__OFELI.html#gaa0c37e288bfcbc3e7884748405663dbe</field>
    <field name="keywords">getDerivative OFELI::Tabulation::getDerivative Tabulation</field>
    <field name="text">Return the derivative of the function at a given point Case of a function of one variable funct Name of the function to be evaluated as read from input file x Value of the variable Derivative value Return the derivative of the function at a given point</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::getDim</field>
    <field name="args">() const</field>
    <field name="url">group__OFELI.html#gaa217066db3a717424604bab3fcb6ec4b</field>
    <field name="keywords">getDim OFELI::Grid::getDim Grid</field>
    <field name="text">Return space dimension Return space dimension</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::getHx</field>
    <field name="args">() const</field>
    <field name="url">group__OFELI.html#gaa24fe5642b6c1ce7e373553d25e63916</field>
    <field name="keywords">getHx OFELI::Grid::getHx Grid</field>
    <field name="text">Return grid size in the x-direction Return grid size in the x-direction</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::GeoModel::Nurbs</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#gaa442b2b3efe857fc517d2d8e8ba51e70</field>
    <field name="keywords">Nurbs OFELI::GeoModel::Nurbs GeoModel</field>
    <field name="text">Run Nurbs modelling The resulting vector of curve points is the vector p given by the constructor or by setData Run Nurbs modelling</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FuncApprox::FuncApprox</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#gaa7d0387fa742ec6a4e2a760ddb7e3c96</field>
    <field name="keywords">FuncApprox OFELI::FuncApprox::FuncApprox FuncApprox</field>
    <field name="text">Default constructor The function setData can then be used Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::Grid</field>
    <field name="args">(real_t xm, real_t xM, real_t ym, real_t yM, size_t npx, size_t npy)</field>
    <field name="url">group__OFELI.html#gaa7f0e09e0868e20292e3b418e0a3fce9</field>
    <field name="keywords">Grid OFELI::Grid::Grid Grid</field>
    <field name="text">Construct a 2 D structured grid given its extremal coordinates and number of intervals xm Minimal value for x xM Maximal value for x ym Minimal value for y yM Maximal value for y npx Number of grid intervals in the x direction npy Number of grid intervals in the y direction Construct a 2 D structured grid given its extremal coordinates and number of intervals</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::getCoord</field>
    <field name="args">(size_t i, size_t j, size_t k) const</field>
    <field name="url">group__OFELI.html#gaa84001fe910adff6028e98330eee3f88</field>
    <field name="keywords">getCoord OFELI::Grid::getCoord Grid</field>
    <field name="text">Return coordinates a point with label i j k in a 3 D grid Return coordinates a point with label i j k in a 3 D grid</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::operator[]</field>
    <field name="args">(size_t i) const</field>
    <field name="url">group__OFELI.html#gaa900a16c18fb216763d5813cc5d9cbd6</field>
    <field name="keywords">operator[] OFELI::SpMatrix::operator[] SpMatrix&lt; T_ &gt; operator[] OFELI::SpMatrix&lt; real_t &gt;::operator[] SpMatrix&lt; real_t &gt;</field>
    <field name="text">Operator Constant version Returns i th position in the array storing matrix entries The first entry is at location 0 Entries are stored row by row Operator Constant version</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::operator=</field>
    <field name="args">(const T_ &amp;x)</field>
    <field name="url">group__OFELI.html#gaaa13c39e3e681f7d695f4fff8f54c20a</field>
    <field name="keywords">operator= OFELI::SpMatrix::operator= SpMatrix&lt; T_ &gt; operator= OFELI::SpMatrix&lt; real_t &gt;::operator= SpMatrix&lt; real_t &gt;</field>
    <field name="text">Operator Assign constant value x to all matrix entries Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::setDomain</field>
    <field name="args">(real_t xmin, real_t xmax, real_t ymin, real_t ymax)</field>
    <field name="url">group__OFELI.html#gaaa946270292476658200512e284668c1</field>
    <field name="keywords">setDomain OFELI::Grid::setDomain Grid</field>
    <field name="text">Set Dimensions of the domain 2 D case xmin Minimal value of x coordinate xmax Maximal value of x coordinate ymin Minimal value of y coordinate ymax Maximal value of y coordinate Set Dimensions of the domain 2 D case</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::GeoModel::setBSplinePar</field>
    <field name="args">(size_t n, size_t c, size_t np)</field>
    <field name="url">group__OFELI.html#gaabac2a91c9ac7dd2cc28e34e42783155</field>
    <field name="keywords">setBSplinePar OFELI::GeoModel::setBSplinePar GeoModel</field>
    <field name="text">Set parameters for BSpline modelling n Number of defining polygon vertices c Order of the B-spline basis function np Number of points to be calculated on the curve Set parameters for BSpline modelling</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::Laplace1D</field>
    <field name="args">(size_t n, real_t h)</field>
    <field name="url">group__OFELI.html#gaac4b0d8283c26efc8adeb593bebe590e</field>
    <field name="keywords">Laplace1D OFELI::SpMatrix::Laplace1D SpMatrix&lt; T_ &gt; Laplace1D OFELI::SpMatrix&lt; real_t &gt;::Laplace1D SpMatrix&lt; real_t &gt;</field>
    <field name="text">Sets the matrix as the one for the Laplace equation in 1 D The matrix is initialized as the one resulting from P 1 finite element discretization of the classical elliptic operator u f with homogeneous Dirichlet boundary conditions This function is available for real valued matrices only n Size of matrix Number of rows h Mesh size assumed constant Sets the matrix as the one for the Laplace equation in 1 D</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::operator()</field>
    <field name="args">(size_t i, size_t j)</field>
    <field name="url">group__OFELI.html#gaacbbe150d69a1246cb76f24419cae7ac</field>
    <field name="keywords">operator() OFELI::SpMatrix::operator() SpMatrix&lt; T_ &gt; operator() OFELI::TrMatrix::operator() TrMatrix&lt; T_ &gt; operator() OFELI::SpMatrix&lt; real_t &gt;::operator() SpMatrix&lt; real_t &gt;</field>
    <field name="text">Operator Non constant version Operator Non constant version i Row index j Column index i Row index j Column index Operator Non constant version Operator Non constant version</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::getRow</field>
    <field name="args">(size_t i) const</field>
    <field name="url">group__OFELI.html#gab003b67a3b106d85cfba3a314f5c6f5b</field>
    <field name="keywords">getRow OFELI::SpMatrix::getRow SpMatrix&lt; T_ &gt; getRow OFELI::SpMatrix&lt; real_t &gt;::getRow SpMatrix&lt; real_t &gt;</field>
    <field name="text">Get i th row vector Get i th row vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Tabulation::getNbFuncts</field>
    <field name="args">() const</field>
    <field name="url">group__OFELI.html#gab0a94db2d11e6117b0953e1b6ceabf39</field>
    <field name="keywords">getNbFuncts OFELI::Tabulation::getNbFuncts Tabulation</field>
    <field name="text">Get the Number of read functions size_t Number of functions Get the Number of read functions</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LeastSquare::set</field>
    <field name="args">(DMatrix&lt; real_t &gt; &amp;B, const Vect&lt; real_t &gt; &amp;y, Vect&lt; real_t &gt; &amp;a)</field>
    <field name="url">group__OFELI.html#gab14074b08149d4fe54b28d88575f2e1a</field>
    <field name="keywords">set OFELI::LeastSquare::set LeastSquare</field>
    <field name="text">Set least square approximation using least square matrix Matrix entries is defined by B(k,i) as the k-th basis function evaluated at x(i) B Rectangle matrix of Least square approximation y Vector defining y-coordinates of points a Vector containing solution Coefficients of basis functions Set least square approximation using least square matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::DiagPrescribe</field>
    <field name="args">(Vect&lt; T_ &gt; &amp;b, const Vect&lt; T_ &gt; &amp;u)</field>
    <field name="url">group__OFELI.html#gab1df9bcbafe4b605f7dd449e55f98dd9</field>
    <field name="keywords">DiagPrescribe OFELI::SpMatrix::DiagPrescribe SpMatrix&lt; T_ &gt; DiagPrescribe OFELI::SpMatrix&lt; real_t &gt;::DiagPrescribe SpMatrix&lt; real_t &gt;</field>
    <field name="text">Impose by a diagonal method an essential boundary condition using the Mesh instance provided by the constructor This member function modifies diagonal terms in matrix and terms in vector that correspond to degrees of freedom with nonzero code in order to impose a boundary condition The penalty parameter is defined by default equal to 1.e20 It can be modified by member function setPenal b Vect instance that contains right-hand side u Vect instance that conatins imposed valued at DOFs where they are to be imposed Impose by a diagonal method an essential boundary condition using the Mesh instance provided by the constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IOField::setMeshFile</field>
    <field name="args">(const string &amp;file)</field>
    <field name="url">group__OFELI.html#gab2b9819f0e12bada7d7378d5272e35a6</field>
    <field name="keywords">setMeshFile OFELI::IOField::setMeshFile IOField</field>
    <field name="text">Set mesh file file Mesh file Set mesh file</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::Diagonal</field>
    <field name="args">(const T_ &amp;a)</field>
    <field name="url">group__OFELI.html#gab2dc6d9a8fed22c57529176cd4643804</field>
    <field name="keywords">Diagonal OFELI::SpMatrix::Diagonal SpMatrix&lt; T_ &gt; Diagonal OFELI::TrMatrix::Diagonal TrMatrix&lt; T_ &gt; Diagonal OFELI::SpMatrix&lt; real_t &gt;::Diagonal SpMatrix&lt; real_t &gt;</field>
    <field name="text">Define matrix as a diagonal one with diagonal entries equal to a Define matrix as a diagona one and assign value a to all diagonal entries Define matrix as a diagonal one with diagonal entries equal to a Define matrix as a diagona one and assign value a to all diagonal entries</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::getMesh</field>
    <field name="args">(Mesh &amp;mesh)</field>
    <field name="url">group__OFELI.html#gab50a62ca3636fe05fc9b8a2d346bd1b8</field>
    <field name="keywords">getMesh OFELI::SpMatrix::getMesh SpMatrix&lt; T_ &gt; getMesh OFELI::SpMatrix&lt; real_t &gt;::getMesh SpMatrix&lt; real_t &gt;</field>
    <field name="text">Get mesh instance whose reference will be stored in current instance of SpMatrix Get mesh instance whose reference will be stored in current instance of SpMatrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::getColInd</field>
    <field name="args">(size_t i) const</field>
    <field name="url">group__OFELI.html#gab63bec2ebae17dd0df568bf5eeeaf2e9</field>
    <field name="keywords">getColInd OFELI::SpMatrix::getColInd SpMatrix&lt; T_ &gt; getColInd OFELI::SpMatrix&lt; real_t &gt;::getColInd SpMatrix&lt; real_t &gt;</field>
    <field name="text">Return storage information Column index of the i th stored element in matrix Return storage information</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IOField::get</field>
    <field name="args">(DMatrix&lt; real_t &gt; &amp;A, const string &amp;name)</field>
    <field name="url">group__OFELI.html#gab656dc837ae98925a46f5fbb9f2555d7</field>
    <field name="keywords">get OFELI::IOField::get IOField</field>
    <field name="text">Get DMatrix A instance from file if the field has the given name First time step is read from the XML file A DMatrix instance name Name to seek in the XML file Get DMatrix A instance from file if the field has the given name</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::getXYZ</field>
    <field name="args">(size_t i, size_t j, size_t k) const</field>
    <field name="url">group__OFELI.html#gab6df73b0901364485a266ea46bfc4375</field>
    <field name="keywords">getXYZ OFELI::Grid::getXYZ Grid</field>
    <field name="text">Return coordinates of point with indices i j k Return coordinates of point with indices i j k</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FuncApprox::setBSplineSurface</field>
    <field name="args">(size_t m, size_t n, size_t c, size_t d, size_t npu, size_t npw, const Vect&lt; real_t &gt; &amp;b, Vect&lt; real_t &gt; &amp;p)</field>
    <field name="url">group__OFELI.html#gaba03264b03c63ce83975295ac716a17f</field>
    <field name="keywords">setBSplineSurface OFELI::FuncApprox::setBSplineSurface FuncApprox</field>
    <field name="text">Define BSpline surface modelling m One less than the number of polygon vertices in w direction n One less than the number of polygon vertices in u direction c Order of the B-spline basis function in w direction d Order of the B-spline basis function in u direction npu Number of parametric lines in the u direction npw Number of parametric lines in the w direction b Vector containing the defining polygon vertices p Vector containing the resulting curve points Define BSpline surface modelling</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::SpMatrix</field>
    <field name="args">(size_t nr, size_t nc, const vector&lt; size_t &gt; &amp;row_ptr, const vector&lt; size_t &gt; &amp;col_ind)</field>
    <field name="url">group__OFELI.html#gabac2c8f80cc65f2e94dac6be513c963e</field>
    <field name="keywords">SpMatrix OFELI::SpMatrix::SpMatrix SpMatrix&lt; T_ &gt; SpMatrix OFELI::SpMatrix&lt; real_t &gt;::SpMatrix SpMatrix&lt; real_t &gt;</field>
    <field name="text">Constructor for a rectangle matrix nr Number of rows nc Number of columns row_ptr Vector of row pointers See the above description of this class col_ind Vector of column indices See the above description of this class Constructor for a rectangle matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::getCode</field>
    <field name="args">(size_t i, size_t j) const</field>
    <field name="url">group__OFELI.html#gabaf34b41992fd0c7e87c59e4923fb946</field>
    <field name="keywords">getCode OFELI::Grid::getCode Grid</field>
    <field name="text">Return code for a grid point i i th index for node for which code is to be returned j j th index for node for which code is to be returned Return code for a grid point</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::Mult</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;x, Vect&lt; T_ &gt; &amp;y) const</field>
    <field name="url">group__OFELI.html#gabd45ada90fcf5f88e65ba7a50e36ce49</field>
    <field name="keywords">Mult OFELI::SpMatrix::Mult SpMatrix&lt; T_ &gt; Mult OFELI::TrMatrix::Mult TrMatrix&lt; T_ &gt; Mult OFELI::SpMatrix&lt; real_t &gt;::Mult SpMatrix&lt; real_t &gt;</field>
    <field name="text">Multiply matrix by vector and save in another one Multiply matrix by vector x and save result in y x Vector to multiply by matrix y Vector that contains on output the result Multiply matrix by vector and save in another one Multiply matrix by vector x and save result in y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IOField::~IOField</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#gabe6440e2e3aae4e393dfdabf7c69de84</field>
    <field name="keywords">OFELI::IOField::~IOField IOField</field>
    <field name="text">Destructor Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IOField::get</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;v, real_t t)</field>
    <field name="url">group__OFELI.html#gac122ddec3ea162cf681ed9494fadf5de</field>
    <field name="keywords">get OFELI::IOField::get IOField</field>
    <field name="text">Get Vect v instance from file corresponding to a specific time value The sought vector corresponding to the time value is read from the XML file v Vector instance t Time value Get Vect v instance from file corresponding to a specific time value</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::setOneDOF</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#gac1d3aaea63e250685e774e6fb65ab5a0</field>
    <field name="keywords">setOneDOF OFELI::SpMatrix::setOneDOF SpMatrix&lt; T_ &gt; setOneDOF OFELI::SpMatrix&lt; real_t &gt;::setOneDOF SpMatrix&lt; real_t &gt;</field>
    <field name="text">Activate 1 DOF per node option Activate 1 DOF per node option</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::setDiag</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#gac4e475404ab75bd6cfe18a2aeb76a7de</field>
    <field name="keywords">setDiag OFELI::SpMatrix::setDiag SpMatrix&lt; T_ &gt; setDiag OFELI::SpMatrix&lt; real_t &gt;::setDiag SpMatrix&lt; real_t &gt;</field>
    <field name="text">Store diagonal entries in a separate internal vector Store diagonal entries in a separate internal vector</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">OFELI::IntegrationScheme</field>
    <field name="url">group__OFELI.html#gac6182f91e9b5b2e053c56e00a35de854</field>
    <field name="keywords">IntegrationScheme OFELI::IntegrationScheme OFELI</field>
    <field name="text">Choose numerical integration scheme</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IOField::get</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;v)</field>
    <field name="url">group__OFELI.html#gac7bfa1abadcecdecec5db7fe9180e879</field>
    <field name="keywords">get OFELI::IOField::get IOField</field>
    <field name="text">Get Vect v instance from file First time step is read from the XML file Get Vect v instance from file</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::Axpy</field>
    <field name="args">(T_ a, const Matrix&lt; T_ &gt; *m)</field>
    <field name="url">group__OFELI.html#gac7ecd57722b088d883cdb26ac2887270</field>
    <field name="keywords">Axpy OFELI::SpMatrix::Axpy SpMatrix&lt; T_ &gt; Axpy OFELI::TrMatrix::Axpy TrMatrix&lt; T_ &gt; Axpy OFELI::SpMatrix&lt; real_t &gt;::Axpy SpMatrix&lt; real_t &gt;</field>
    <field name="text">Add to matrix the product of a matrix by a scalar Add to matrix the product of a matrix by a scalar a Scalar to premultiply m Pointer to Matrix by which a is multiplied The result is added to current instance a Scalar to premultiply m Matrix by which a is multiplied The result is added to current instance Add to matrix the product of a matrix by a scalar Add to matrix the product of a matrix by a scalar</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TrMatrix::TrMatrix</field>
    <field name="args">(const TrMatrix &amp;m)</field>
    <field name="url">group__OFELI.html#gac857b1007a8066b0304572925028d8ba</field>
    <field name="keywords">TrMatrix OFELI::TrMatrix::TrMatrix TrMatrix&lt; T_ &gt;</field>
    <field name="text">Copy Constructor Copy Constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::clear</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#gac8bb3912a3ce86b15842e79d0b421204</field>
    <field name="keywords">clear OFELI::SpMatrix::clear SpMatrix&lt; T_ &gt; clear OFELI::SpMatrix&lt; real_t &gt;::clear SpMatrix&lt; real_t &gt;</field>
    <field name="text">brief Set all matrix entries to zero brief Set all matrix entries to zero</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FuncApprox::setLeastSquare</field>
    <field name="args">(const vector&lt; Fct * &gt; &amp;f, const Vect&lt; real_t &gt; &amp;x, const Vect&lt; real_t &gt; &amp;y, Vect&lt; real_t &gt; &amp;a)</field>
    <field name="url">group__OFELI.html#gac96c5aabfb4bd1296dfe95e9b880b1b7</field>
    <field name="keywords">setLeastSquare OFELI::FuncApprox::setLeastSquare FuncApprox</field>
    <field name="text">Define least square approximation using given basis functions The least square approximation defines the function a 0 0 a 1 1 a N N f Vector of references to functions class Fct defining basis of least square approximation x Vector defining x-coordinates of points y Vector defining y-coordinates of points a Vector containing solution Coefficients of basis functions Define least square approximation using given basis functions</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Tabulation::Tabulation</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#gaca17e078142a69b94a36e473bb74e005</field>
    <field name="keywords">Tabulation OFELI::Tabulation::Tabulation Tabulation</field>
    <field name="text">Default constructor Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::setXYZ</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;x, const Vect&lt; real_t &gt; &amp;y, const Vect&lt; real_t &gt; &amp;z)</field>
    <field name="url">group__OFELI.html#gacbaf13c4c8f77a9bb95c2e003d477174</field>
    <field name="keywords">setXYZ OFELI::Grid::setXYZ Grid</field>
    <field name="text">Set node x- y- and z-coordinates of grid This function is to be used to define a nonuniform grid x Vector of x-coordinates of nodes y Vector of y-coordinates of nodes z Vector of z-coordinates of nodes Set node x- y- and z-coordinates of grid</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::getX</field>
    <field name="args">(size_t i) const</field>
    <field name="url">group__OFELI.html#gacbb430de549bf51debc2e0428b147ac9</field>
    <field name="keywords">getX OFELI::Grid::getX Grid</field>
    <field name="text">Return x-coordinate of point with index i Return x-coordinate of point with index i</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">OFELI::MatrixType</field>
    <field name="url">group__OFELI.html#gacc6ad8472c2abfd2f63e100474b977f9</field>
    <field name="keywords">MatrixType OFELI::MatrixType OFELI</field>
    <field name="text">Choose matrix storage and type</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Iter::check</field>
    <field name="args">(T_ &amp;u, const T_ &amp;v)</field>
    <field name="url">group__OFELI.html#gacd18d8209c23c006d7a0ba574cda652b</field>
    <field name="keywords">check OFELI::Iter::check Iter&lt; T_ &gt; check OFELI::Iter&lt; real_t &gt;::check Iter&lt; real_t &gt;</field>
    <field name="text">Check convergence for a scalar case one equation u Solution at previous iteration v Solution at current iteration true if convergence criterion is satisfied false if not After checking this function copied v into u Check convergence for a scalar case one equation</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">OFELI::Iteration</field>
    <field name="url">group__OFELI.html#gad0624a8576d3ca1d4af97479546930ea</field>
    <field name="keywords">Iteration OFELI::Iteration OFELI</field>
    <field name="text">Choose iterative solver for the linear system Choose iterative solver for the linear system Choose iterative solver for the linear system</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FuncApprox::setBezier</field>
    <field name="args">(size_t n, size_t nc, const Vect&lt; real_t &gt; &amp;b, Vect&lt; real_t &gt; &amp;p)</field>
    <field name="url">group__OFELI.html#gad4a1ba7522a5ae99754fdaebd036dfe0</field>
    <field name="keywords">setBezier OFELI::FuncApprox::setBezier FuncApprox</field>
    <field name="text">Define Bezier modelling n Number of defining polygon vertices nc Number of points to be calculated on the curve b Vector containing the defining polygon vertices p Vector containing the resulting curve points Define Bezier modelling</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::setN</field>
    <field name="args">(size_t nx, size_t ny=0, size_t nz=0)</field>
    <field name="url">group__OFELI.html#gad6b564dcefa010a74d10ae72d42fb432</field>
    <field name="keywords">setN OFELI::Grid::setN Grid</field>
    <field name="text">Set number of grid intervals in the x y and z directions Number of points is the number of intervals plus one in each direction nx Number of grid intervals in the x direction ny Number of grid intervals in the y direction Default 0 1 D grid nz Number of grid intervals in the z direction Default 0 1 D or 2 D grid The size of the grid xmin and xmax must have been defined before Set number of grid intervals in the x y and z directions</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::Deactivate</field>
    <field name="args">(size_t i, size_t j)</field>
    <field name="url">group__OFELI.html#gad75e7ed91f3c0c6741741c02616bce7b</field>
    <field name="keywords">Deactivate OFELI::Grid::Deactivate Grid</field>
    <field name="text">Change state of a cell from active to inactive 2 D grid i i th index for grid cell to remove If this value is 0 all cells j are deactivated j j th index for grid cell to remove If this value is 0 all cells i are deactivated if i and j have value 0 all grid cells are deactivated Change state of a cell from active to inactive 2 D grid</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">OFELI::IOField::AccessType</field>
    <field name="url">group__OFELI.html#gad8aff9e545a5f496a179a16667431478</field>
    <field name="keywords">AccessType OFELI::IOField::AccessType IOField</field>
    <field name="text">Enumerated values for file access type Enumerated values for file access type</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">OFELI::Preconditioner</field>
    <field name="url">group__OFELI.html#gadac1c2aa74e98e485c02f73279b71a38</field>
    <field name="keywords">Preconditioner OFELI::Preconditioner OFELI</field>
    <field name="text">Choose preconditioner for the linear system Choose preconditioner for the linear system Choose preconditioner for the linear system</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IOField::get</field>
    <field name="args">(DSMatrix&lt; real_t &gt; &amp;A, const string &amp;name)</field>
    <field name="url">group__OFELI.html#gadaece78efd238f51bef73d8c6e989bc8</field>
    <field name="keywords">get OFELI::IOField::get IOField</field>
    <field name="text">Get DSMatrix A instance from file if the field has the given name First time step is read from the XML file A DSMatrix instance name Name to seek in the XML file Get DSMatrix A instance from file if the field has the given name</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::SpMatrix</field>
    <field name="args">(const vector&lt; size_t &gt; &amp;row_ptr, const vector&lt; size_t &gt; &amp;col_ind, const vector&lt; T_ &gt; &amp;a)</field>
    <field name="url">group__OFELI.html#gadb1afe7db840241160f2f896fa24a08d</field>
    <field name="keywords">SpMatrix OFELI::SpMatrix::SpMatrix SpMatrix&lt; T_ &gt; SpMatrix OFELI::SpMatrix&lt; real_t &gt;::SpMatrix SpMatrix&lt; real_t &gt;</field>
    <field name="text">Constructor for a rectangle matrix row_ptr Vector of row pointers See the above description of this class col_ind Vector of column indices See the above description of this class a vector instance that contain matrix entries stored row by row Number of rows is extracted from vector row_ptr Constructor for a rectangle matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::setNbDOF</field>
    <field name="args">(size_t n)</field>
    <field name="url">group__OFELI.html#gadb53c731048031345289f952f71209f6</field>
    <field name="keywords">setNbDOF OFELI::Grid::setNbDOF Grid</field>
    <field name="text">Set number of degrees of freedom for a node Default 1 Set number of degrees of freedom for a node Default 1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::SpMatrix</field>
    <field name="args">(size_t size, int is_diagonal=false)</field>
    <field name="url">group__OFELI.html#gadba40d108b84ea1d9c8a52c591831338</field>
    <field name="keywords">SpMatrix OFELI::SpMatrix::SpMatrix SpMatrix&lt; T_ &gt; SpMatrix OFELI::SpMatrix&lt; real_t &gt;::SpMatrix SpMatrix&lt; real_t &gt;</field>
    <field name="text">Constructor that initializes current instance as a dense matrix Normally for a dense matrix this is not the right class size Number of matrix rows and columns is_diagonal Boolean argument to say is the matrix is actually a diagonal matrix or not Constructor that initializes current instance as a dense matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::operator*=</field>
    <field name="args">(const T_ &amp;a)</field>
    <field name="url">group__OFELI.html#gadd453c88b293e77171f9fc6993c28f1f</field>
    <field name="keywords">operator*= OFELI::SpMatrix::operator*= SpMatrix&lt; T_ &gt; operator*= OFELI::SpMatrix&lt; real_t &gt;::operator*= SpMatrix&lt; real_t &gt;</field>
    <field name="text">Operator to premultiply matrix by a constant a Constant to multiply matrix by Resulting matrix Operator to premultiply matrix by a constant</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::getNbNodes</field>
    <field name="args">() const</field>
    <field name="url">group__OFELI.html#gade220c85ff6ecba20a6e05121f2b9257</field>
    <field name="keywords">getNbNodes OFELI::Grid::getNbNodes Grid</field>
    <field name="text">Return total number of grid nodes Return total number of grid nodes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FuncApprox::~FuncApprox</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#gade51dae9bafad478abfb51dc51d725ed</field>
    <field name="keywords">OFELI::FuncApprox::~FuncApprox FuncApprox</field>
    <field name="text">Destructor Destructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::Grid</field>
    <field name="args">(Point&lt; real_t &gt; m, Point&lt; real_t &gt; M, size_t npx, size_t npy, size_t npz)</field>
    <field name="url">group__OFELI.html#gae195c690cdc77fe012f139e11a13e25b</field>
    <field name="keywords">Grid OFELI::Grid::Grid Grid</field>
    <field name="text">Construct a 3 D structured grid given its extremal coordinates and number of intervals m Minimal coordinate value M Maximal coordinate value npx Number of grid intervals in the x direction npy Number of grid intervals in the y direction npz Number of grid intervals in the z direction Construct a 3 D structured grid given its extremal coordinates and number of intervals</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::GeoModel::GeoModel</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#gae36cda6ebd5f80dc9f69ee63dc85d47a</field>
    <field name="keywords">GeoModel OFELI::GeoModel::GeoModel GeoModel</field>
    <field name="text">Default constructor The function setData can then be used Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const Grid &amp;g)</field>
    <field name="url">group__OFELI.html#gae67160a730c8f7015b6433aba19cb142</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output grid data Output grid data Output grid data</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::Laplace2D</field>
    <field name="args">(size_t nx, size_t ny)</field>
    <field name="url">group__OFELI.html#gae84a5130be2183f9dacaf41bcbf85820</field>
    <field name="keywords">Laplace2D OFELI::SpMatrix::Laplace2D SpMatrix&lt; T_ &gt; Laplace2D OFELI::SpMatrix&lt; real_t &gt;::Laplace2D SpMatrix&lt; real_t &gt;</field>
    <field name="text">Sets the matrix as the one for the Laplace equation in 2 D The matrix is initialized as the one resulting from P 1 finite element discretization of the classical elliptic operator Delta u f with homogeneous Dirichlet boundary conditions This function is available for real valued matrices only nx Number of unknowns in the x direction ny Number of unknowns in the y direction The number of rows is equal to nx*ny Sets the matrix as the one for the Laplace equation in 2 D</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::setGraph</field>
    <field name="args">(const vector&lt; RC &gt; &amp;I, int opt=1)</field>
    <field name="url">group__OFELI.html#gae854deae85a59963c3e2bc45f7ea7cbd</field>
    <field name="keywords">setGraph OFELI::SpMatrix::setGraph SpMatrix&lt; T_ &gt; setGraph OFELI::SpMatrix&lt; real_t &gt;::setGraph SpMatrix&lt; real_t &gt;</field>
    <field name="text">Set graph of matrix by giving a vector of its nonzero entries I Vector containing pairs of row and column indices opt Flag indicating if vector I is cleaned and ordered opt 1 default or not opt 0 In the latter case this vector can have the same contents more than once and are not necessarily ordered Set graph of matrix by giving a vector of its nonzero entries</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::getRowPtr</field>
    <field name="args">(size_t i) const</field>
    <field name="url">group__OFELI.html#gaec2afa17c6d60914f89986b9853a0165</field>
    <field name="keywords">getRowPtr OFELI::SpMatrix::getRowPtr SpMatrix&lt; T_ &gt; getRowPtr OFELI::SpMatrix&lt; real_t &gt;::getRowPtr SpMatrix&lt; real_t &gt;</field>
    <field name="text">Return Row pointer at position i Return Row pointer at position i</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Iter::check</field>
    <field name="args">(Vect&lt; T_ &gt; &amp;u, const Vect&lt; T_ &gt; &amp;v, int opt=2)</field>
    <field name="url">group__OFELI.html#gaec86278ba42d21024e3e9da1a57ee08d</field>
    <field name="keywords">check OFELI::Iter::check Iter&lt; T_ &gt; check OFELI::Iter&lt; real_t &gt;::check Iter&lt; real_t &gt;</field>
    <field name="text">Check convergence u Solution vector at previous iteration v Solution vector at current iteration opt Vector norm for convergence checking 1 1 norm 2 2 norm 0 Max norm Default 2 true if convergence criterion is satisfied false if not After checking this function copied v into u Check convergence</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::TMult</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;x, Vect&lt; T_ &gt; &amp;y) const</field>
    <field name="url">group__OFELI.html#gaedfc628db3de37e35aee052137aab9b3</field>
    <field name="keywords">TMult OFELI::SpMatrix::TMult SpMatrix&lt; T_ &gt; TMult OFELI::TrMatrix::TMult TrMatrix&lt; T_ &gt; TMult OFELI::SpMatrix&lt; real_t &gt;::TMult SpMatrix&lt; real_t &gt;</field>
    <field name="text">Multiply transpose of matrix by vector x and save in y Multiply transpose of matrix by vector x and save result in y x Vector to multiply by matrix y Vector that contains on output the result Multiply transpose of matrix by vector x and save in y Multiply transpose of matrix by vector x and save result in y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::getNy</field>
    <field name="args">() const</field>
    <field name="url">group__OFELI.html#gaeea0ee66ff8e29ad86071be29a9f744b</field>
    <field name="keywords">getNy OFELI::Grid::getNy Grid</field>
    <field name="text">Return number of grid intervals in the y direction ny 0 for 1 D domains segments Return number of grid intervals in the y direction</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::Grid</field>
    <field name="args">(real_t xm, real_t xM, size_t npx)</field>
    <field name="url">group__OFELI.html#gaef6c769c18847566879724e0641d93ae</field>
    <field name="keywords">Grid OFELI::Grid::Grid Grid</field>
    <field name="text">Construct a 1 D structured grid given its extremal coordinates and number of intervals xm Minimal value for x xM Maximal value for x npx Number of grid intervals in the x direction Construct a 1 D structured grid given its extremal coordinates and number of intervals</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::CrossProduct</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;lp, const Point&lt; real_t &gt; &amp;rp)</field>
    <field name="url">group__OFELI.html#gaef9d669a098656b69469feaaf099cba7</field>
    <field name="keywords">CrossProduct OFELI::CrossProduct OFELI</field>
    <field name="text">Return Cross product of two vectors lp and rp Return Cross product of two vectors lp and rp Return Cross product of two vectors lp and rp</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::SpMatrix</field>
    <field name="args">(Mesh &amp;mesh, size_t dof=0, int is_diagonal=false)</field>
    <field name="url">group__OFELI.html#gaefd772ba6093ce0f83ab67955402352b</field>
    <field name="keywords">SpMatrix OFELI::SpMatrix::SpMatrix SpMatrix&lt; T_ &gt; SpMatrix OFELI::SpMatrix&lt; real_t &gt;::SpMatrix SpMatrix&lt; real_t &gt;</field>
    <field name="text">Constructor using a Mesh instance mesh Mesh instance from which matrix graph is extracted dof Option parameter with default value 0 dof 1 means that only one degree of freedom for each node or element or side is taken to determine matrix structure The value dof 0 means that matrix structure is determined using all DOFs is_diagonal Boolean argument to say is the matrix is actually a diagonal matrix or not Constructor using a Mesh instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::TrMatrix::TrMatrix</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#gaf1e54b4b3b909ff7078d821e3f773d19</field>
    <field name="keywords">TrMatrix OFELI::TrMatrix::TrMatrix TrMatrix&lt; T_ &gt;</field>
    <field name="text">Default constructor Initialize a zero dimension tridiagonal matrix Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::MultAdd</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;x, Vect&lt; T_ &gt; &amp;y) const</field>
    <field name="url">group__OFELI.html#gaf37985f443ba4d2746059438dfb62b6c</field>
    <field name="keywords">MultAdd OFELI::SpMatrix::MultAdd SpMatrix&lt; T_ &gt; MultAdd OFELI::TrMatrix::MultAdd TrMatrix&lt; T_ &gt; MultAdd OFELI::SpMatrix&lt; real_t &gt;::MultAdd SpMatrix&lt; real_t &gt;</field>
    <field name="text">Multiply matrix by vector x and add to y Multiply matrix by vector x and add result to y x Vector to multiply by matrix y Vector to add to the result y contains on output the result Multiply matrix by vector x and add to y Multiply matrix by vector x and add result to y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::LeastSquare::LeastSquare</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;x, const Vect&lt; real_t &gt; &amp;y, real_t &amp;a0, real_t &amp;a1)</field>
    <field name="url">group__OFELI.html#gaf3a6045aaa71a8e6d8e8829716cb906c</field>
    <field name="keywords">LeastSquare OFELI::LeastSquare::LeastSquare LeastSquare</field>
    <field name="text">Constructor for linear regression Define 1 degree polynomial to approximate in the sense of least squares of a given set of points in the plane The resulting line has the equation y a0 a1*x x Vector defining x-coordinates of points y Vector defining y-coordinates of points a0 Coefficient of constant term a1 Coefficient of first degree term Constructor for linear regression</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::FuncApprox::setBSpline</field>
    <field name="args">(size_t n, size_t c, size_t np, const Vect&lt; real_t &gt; &amp;b, Vect&lt; real_t &gt; &amp;p)</field>
    <field name="url">group__OFELI.html#gaf57b39df590265a6ae74083caa0cc090</field>
    <field name="keywords">setBSpline OFELI::FuncApprox::setBSpline FuncApprox</field>
    <field name="text">Define BSpline approximation We set here BSpline approximation data No computation are done yet n Number of defining polygon vertices c Order of the B-spline basis function np Number of points to be calculated on the curve b Vector containing the defining polygon vertices p Vector containing the resulting curve points Define BSpline approximation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::getCenter</field>
    <field name="args">(size_t i) const</field>
    <field name="url">group__OFELI.html#gaf6e9619ad121053aecf172453f4f749f</field>
    <field name="keywords">getCenter OFELI::Grid::getCenter Grid</field>
    <field name="text">Return coordinates of center of a 1 D cell with indices i i+1 Return coordinates of center of a 1 D cell with indices i i+1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpMatrix::setSides</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#gaf9449887e1b8ca6b5184f015285eacf2</field>
    <field name="keywords">setSides OFELI::SpMatrix::setSides SpMatrix&lt; T_ &gt; setSides OFELI::SpMatrix&lt; real_t &gt;::setSides SpMatrix&lt; real_t &gt;</field>
    <field name="text">Activate Sides option Activate Sides option</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Grid::getCode</field>
    <field name="args">(int side) const</field>
    <field name="url">group__OFELI.html#gafc63e4fd68dec6065c1fc94eccab6e43</field>
    <field name="keywords">getCode OFELI::Grid::getCode Grid</field>
    <field name="text">Return code for a side number side Side for which code is returned Possible values are MIN_X MAX_X MIN_Y MAX_Y MIN_Z MAX_Z Return code for a side number</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Tabulation::Tabulation</field>
    <field name="args">(string file)</field>
    <field name="url">group__OFELI.html#gafc7ec0aad8474cb94287d2cf4135861b</field>
    <field name="keywords">Tabulation OFELI::Tabulation::Tabulation Tabulation</field>
    <field name="text">Constructor using file name Constructor using file name</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::IOField::IOField</field>
    <field name="args">(const string &amp;file, AccessType access, bool compact=true)</field>
    <field name="url">group__OFELI.html#gafd2d11c3d81fcbe26d93ddf677852744</field>
    <field name="keywords">IOField OFELI::IOField::IOField IOField</field>
    <field name="text">Constructor using file name file File name access Access code This number is to be chosen among two enumerated values IOField::IN to read the file IOField::OUT to write on it compact Flag to choose a compact storage or not Default true Constructor using file name</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::A</field>
    <field name="args">()</field>
    <field name="url">group__OFELI.html#gaff2bccc7b3973578722a265d297352a5</field>
    <field name="keywords">A OFELI::A OFELI</field>
    <field name="text">Return element matrix Matrix is returned as a C-array Return element matrix</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PERIODIC_A</field>
    <field name="url">group__OFELI.html#gga0a00003814ee8095a2c39d1d5cba08faa003e94a435ea42747befbc8b1e13a7c7</field>
    <field name="keywords">PERIODIC_A OFELI::PERIODIC_A OFELI PERIODIC_A OFELI::PERIODIC_A OFELI</field>
    <field name="text">Periodic Boundary condition first side</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::CONTACT_BC</field>
    <field name="url">group__OFELI.html#gga0a00003814ee8095a2c39d1d5cba08faa4854a917618a97220bdec42fc5c51d23</field>
    <field name="keywords">CONTACT_BC OFELI::CONTACT_BC OFELI CONTACT_BC OFELI::CONTACT_BC OFELI</field>
    <field name="text">Contact Boundary conditions</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::CONTACT_M</field>
    <field name="url">group__OFELI.html#gga0a00003814ee8095a2c39d1d5cba08faa5e60ff2c6c850fb5f528a8a8bff5bb52</field>
    <field name="keywords">CONTACT_M OFELI::CONTACT_M OFELI CONTACT_M OFELI::CONTACT_M OFELI</field>
    <field name="text">Contact Boundary condition set as master side</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PERIODIC_B</field>
    <field name="url">group__OFELI.html#gga0a00003814ee8095a2c39d1d5cba08faa6b651a95fd94be3f231ac95c5df1acf5</field>
    <field name="keywords">PERIODIC_B OFELI::PERIODIC_B OFELI PERIODIC_B OFELI::PERIODIC_B OFELI</field>
    <field name="text">Periodic Boundary condition second side</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::SLIP</field>
    <field name="url">group__OFELI.html#gga0a00003814ee8095a2c39d1d5cba08faa8f403421f8fac76eda80625cedb6f18f</field>
    <field name="keywords">SLIP OFELI::SLIP OFELI SLIP OFELI::SLIP OFELI</field>
    <field name="text">Slip Boundary condition</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::CONTACT_S</field>
    <field name="url">group__OFELI.html#gga0a00003814ee8095a2c39d1d5cba08faab8dcd04f88deac8b0d8b4c8fc0fbde36</field>
    <field name="keywords">CONTACT_S OFELI::CONTACT_S OFELI CONTACT_S OFELI::CONTACT_S OFELI</field>
    <field name="text">Contact Boundary condition set as slave side</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::FE_2D_3N</field>
    <field name="url">group__OFELI.html#gga31f830fd5deccf18a6e312b026bbe13ba007572c4024eef516a38c8aaa8835bc1</field>
    <field name="keywords">FE_2D_3N OFELI::FE_2D_3N OFELI FE_2D_3N OFELI::FE_2D_3N OFELI</field>
    <field name="text">2 D elements 3 Nodes P1</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::FE_2D_4N</field>
    <field name="url">group__OFELI.html#gga31f830fd5deccf18a6e312b026bbe13ba02785d6f18b0d1b91ec039a78bdde357</field>
    <field name="keywords">FE_2D_4N OFELI::FE_2D_4N OFELI FE_2D_4N OFELI::FE_2D_4N OFELI</field>
    <field name="text">2 D elements 4 Nodes Q1</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::FE_3D_4N</field>
    <field name="url">group__OFELI.html#gga31f830fd5deccf18a6e312b026bbe13ba03b4a1040ddeafcd0d4e0205efa45ac8</field>
    <field name="keywords">FE_3D_4N OFELI::FE_3D_4N OFELI FE_3D_4N OFELI::FE_3D_4N OFELI</field>
    <field name="text">3 D elements 4 Nodes P1</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::FE_2D_6N</field>
    <field name="url">group__OFELI.html#gga31f830fd5deccf18a6e312b026bbe13ba25d07d0ca0d02363155bcc4c0d9381bf</field>
    <field name="keywords">FE_2D_6N OFELI::FE_2D_6N OFELI FE_2D_6N OFELI::FE_2D_6N OFELI</field>
    <field name="text">2 D elements 6 Nodes P2</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::FE_3D_8N</field>
    <field name="url">group__OFELI.html#gga31f830fd5deccf18a6e312b026bbe13ba57de6aadb8f48f2c4c20861f28f839b5</field>
    <field name="keywords">FE_3D_8N OFELI::FE_3D_8N OFELI FE_3D_8N OFELI::FE_3D_8N OFELI</field>
    <field name="text">3 D elements 8 Nodes Q1</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::FE_3D_AXI_3N</field>
    <field name="url">group__OFELI.html#gga31f830fd5deccf18a6e312b026bbe13bac9b781d0a757ab56bc6596f80769d877</field>
    <field name="keywords">FE_3D_AXI_3N OFELI::FE_3D_AXI_3N OFELI FE_3D_AXI_3N OFELI::FE_3D_AXI_3N OFELI</field>
    <field name="text">3 D Axisymmetric elements 3 Nodes P1</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::TRANSIENT</field>
    <field name="url">group__OFELI.html#gga3915e2ca621626d1d2797d8365196f1ba189628bd9c66ada3fb11593230091ad4</field>
    <field name="keywords">TRANSIENT OFELI::TRANSIENT OFELI TRANSIENT OFELI::TRANSIENT OFELI</field>
    <field name="text">Transient problem</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::STEADY_STATE</field>
    <field name="url">group__OFELI.html#gga3915e2ca621626d1d2797d8365196f1ba69ecc1a10183e7d50f0fc8250fb1ba73</field>
    <field name="keywords">STEADY_STATE OFELI::STEADY_STATE OFELI STEADY_STATE OFELI::STEADY_STATE OFELI</field>
    <field name="text">Steady State analysis</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::OPTIMIZATION</field>
    <field name="url">group__OFELI.html#gga3915e2ca621626d1d2797d8365196f1ba6ef8a480aeb43698dffee7100e741521</field>
    <field name="keywords">OPTIMIZATION OFELI::OPTIMIZATION OFELI OPTIMIZATION OFELI::OPTIMIZATION OFELI</field>
    <field name="text">Optimization problem</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::EIGEN</field>
    <field name="url">group__OFELI.html#gga3915e2ca621626d1d2797d8365196f1bac3892dc70e4f10d83174a21b0fe8f4ab</field>
    <field name="keywords">EIGEN OFELI::EIGEN OFELI EIGEN OFELI::EIGEN OFELI</field>
    <field name="text">Eigenvalue problem</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::STATIONARY</field>
    <field name="url">group__OFELI.html#gga3915e2ca621626d1d2797d8365196f1bac84bd0ee013c388bd7cc8139be7206a2</field>
    <field name="keywords">STATIONARY OFELI::STATIONARY OFELI</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::TRANSIENT_ONE_STEP</field>
    <field name="url">group__OFELI.html#gga3915e2ca621626d1d2797d8365196f1baf48c46569bd47443a7884f4f929498b6</field>
    <field name="keywords">TRANSIENT_ONE_STEP OFELI::TRANSIENT_ONE_STEP OFELI TRANSIENT_ONE_STEP OFELI::TRANSIENT_ONE_STEP OFELI</field>
    <field name="text">Transient problem perform only one time step</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDECoefType::MAGNETIC_PERMEABILITY</field>
    <field name="url">group__OFELI.html#gga62536dd8609c49611ad03866df7cde66a046b8cddb3ba54b1ab50e1e79b0c9f3c</field>
    <field name="keywords">MAGNETIC_PERMEABILITY OFELI::PDECoefType::MAGNETIC_PERMEABILITY OFELI</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDECoefType::C01</field>
    <field name="url">group__OFELI.html#gga62536dd8609c49611ad03866df7cde66a06b15c098025a23be964680f0b735ce1</field>
    <field name="keywords">C01 OFELI::PDECoefType::C01 OFELI</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDECoefType::SIGMA</field>
    <field name="url">group__OFELI.html#gga62536dd8609c49611ad03866df7cde66a0b1c668dfc6023057dda34a2684e557a</field>
    <field name="keywords">SIGMA OFELI::PDECoefType::SIGMA OFELI</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDECoefType::VISCOSITY</field>
    <field name="url">group__OFELI.html#gga62536dd8609c49611ad03866df7cde66a13d621435dde53f9c38dce061f879e4b</field>
    <field name="keywords">VISCOSITY OFELI::PDECoefType::VISCOSITY OFELI</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDECoefType::OMEGA</field>
    <field name="url">group__OFELI.html#gga62536dd8609c49611ad03866df7cde66a1d408da87e4c838f8915be22bc56387c</field>
    <field name="keywords">OMEGA OFELI::PDECoefType::OMEGA OFELI</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDECoefType::THERMAL_CONDUCTIVITY</field>
    <field name="url">group__OFELI.html#gga62536dd8609c49611ad03866df7cde66a33e36166fd9b3c5d0e1ebc35053f3cb6</field>
    <field name="keywords">THERMAL_CONDUCTIVITY OFELI::PDECoefType::THERMAL_CONDUCTIVITY OFELI</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDECoefType::BETA</field>
    <field name="url">group__OFELI.html#gga62536dd8609c49611ad03866df7cde66a36b84f8e3fba5bf993e3ba352d62d146</field>
    <field name="keywords">BETA OFELI::PDECoefType::BETA OFELI</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDECoefType::MMU</field>
    <field name="url">group__OFELI.html#gga62536dd8609c49611ad03866df7cde66a3c372f8694cac8646be0e75149c4396f</field>
    <field name="keywords">MMU OFELI::PDECoefType::MMU OFELI</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDECoefType::C20</field>
    <field name="url">group__OFELI.html#gga62536dd8609c49611ad03866df7cde66a412ebb2097d7532320e593d56b9c8d3b</field>
    <field name="keywords">C20 OFELI::PDECoefType::C20 OFELI</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDECoefType::EPSILON</field>
    <field name="url">group__OFELI.html#gga62536dd8609c49611ad03866df7cde66a48d3e3d06977ae5b32d170485108630a</field>
    <field name="keywords">EPSILON OFELI::PDECoefType::EPSILON OFELI</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDECoefType::KAPPA</field>
    <field name="url">group__OFELI.html#gga62536dd8609c49611ad03866df7cde66a55b8000cc76d015e79c6faf29593a5b6</field>
    <field name="keywords">KAPPA OFELI::PDECoefType::KAPPA OFELI</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDECoefType::DYNAMIC_VISCOSITY</field>
    <field name="url">group__OFELI.html#gga62536dd8609c49611ad03866df7cde66a55f6bded27a824d99e13fedb71719f4d</field>
    <field name="keywords">DYNAMIC_VISCOSITY OFELI::PDECoefType::DYNAMIC_VISCOSITY OFELI</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDECoefType::YOUNG</field>
    <field name="url">group__OFELI.html#gga62536dd8609c49611ad03866df7cde66a85f61422ff6569131e86ce73f232e0d3</field>
    <field name="keywords">YOUNG OFELI::PDECoefType::YOUNG OFELI</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDECoefType::POISSON</field>
    <field name="url">group__OFELI.html#gga62536dd8609c49611ad03866df7cde66a92a9a9519a6a4f5edd0b2694fe1c9122</field>
    <field name="keywords">POISSON OFELI::PDECoefType::POISSON OFELI</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDECoefType::ELECTRIC_PERMITTIVITY</field>
    <field name="url">group__OFELI.html#gga62536dd8609c49611ad03866df7cde66a98f3aefe271c857936a3facc3ba311c1</field>
    <field name="keywords">ELECTRIC_PERMITTIVITY OFELI::PDECoefType::ELECTRIC_PERMITTIVITY OFELI</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDECoefType::C00</field>
    <field name="url">group__OFELI.html#gga62536dd8609c49611ad03866df7cde66aa80a5c578c72b49a367e90e395996834</field>
    <field name="keywords">C00 OFELI::PDECoefType::C00 OFELI</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDECoefType::ANGULAR_FREQUENCY</field>
    <field name="url">group__OFELI.html#gga62536dd8609c49611ad03866df7cde66aae33ab2f168af23bfe9f9b03da2492a0</field>
    <field name="keywords">ANGULAR_FREQUENCY OFELI::PDECoefType::ANGULAR_FREQUENCY OFELI</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDECoefType::CP</field>
    <field name="url">group__OFELI.html#gga62536dd8609c49611ad03866df7cde66ab78cc6909042016daaa04d83bac97e90</field>
    <field name="keywords">CP OFELI::PDECoefType::CP OFELI</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDECoefType::DENSITY</field>
    <field name="url">group__OFELI.html#gga62536dd8609c49611ad03866df7cde66ab7fbdcfe60bed91ec158ce4369512109</field>
    <field name="keywords">DENSITY OFELI::PDECoefType::DENSITY OFELI</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDECoefType::VV</field>
    <field name="url">group__OFELI.html#gga62536dd8609c49611ad03866df7cde66ac0055fa4cdc19a2690bfee3643413a7d</field>
    <field name="keywords">VV OFELI::PDECoefType::VV OFELI</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDECoefType::ELECTRIC_CONDUCTIVITY</field>
    <field name="url">group__OFELI.html#gga62536dd8609c49611ad03866df7cde66acb9e4a73f3e42f232155914e8a8b651c</field>
    <field name="keywords">ELECTRIC_CONDUCTIVITY OFELI::PDECoefType::ELECTRIC_CONDUCTIVITY OFELI</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDECoefType::C10</field>
    <field name="url">group__OFELI.html#gga62536dd8609c49611ad03866df7cde66ada1627473e75135af30e0f041c93607a</field>
    <field name="keywords">C10 OFELI::PDECoefType::C10 OFELI</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDECoefType::C02</field>
    <field name="url">group__OFELI.html#gga62536dd8609c49611ad03866df7cde66ae0a6eee6b13d760618954b429446c6b6</field>
    <field name="keywords">C02 OFELI::PDECoefType::C02 OFELI</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDECoefType::RHO</field>
    <field name="url">group__OFELI.html#gga62536dd8609c49611ad03866df7cde66af9aa08bdd53c7d265d4f22edc92ec26d</field>
    <field name="keywords">RHO OFELI::PDECoefType::RHO OFELI</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::RK3_TVD</field>
    <field name="url">group__OFELI.html#gga672626c8ddef10da0244c15db4085f40a17e2f23cb60e09ba554a7681ec8acd3c</field>
    <field name="keywords">RK3_TVD OFELI::RK3_TVD OFELI RK3_TVD OFELI::RK3_TVD OFELI</field>
    <field name="text">3 rd Order Runge-Kutta TVD scheme</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::BUILTIN</field>
    <field name="url">group__OFELI.html#gga672626c8ddef10da0244c15db4085f40a19ee6d41e59c93f16fed0dba11a81648</field>
    <field name="keywords">BUILTIN OFELI::BUILTIN OFELI BUILTIN OFELI::BUILTIN OFELI</field>
    <field name="text">Builtin scheme implemented in equation class</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::NEWMARK</field>
    <field name="url">group__OFELI.html#gga672626c8ddef10da0244c15db4085f40a21f27170951fe396ea71ac3c6d63db9b</field>
    <field name="keywords">NEWMARK OFELI::NEWMARK OFELI NEWMARK OFELI::NEWMARK OFELI</field>
    <field name="text">Newmark scheme</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::RK4</field>
    <field name="url">group__OFELI.html#gga672626c8ddef10da0244c15db4085f40a5df275d4d2ef6e60437567adc263d488</field>
    <field name="keywords">RK4 OFELI::RK4 OFELI RK4 OFELI::RK4 OFELI</field>
    <field name="text">4 th Order Runge-Kutta scheme 4 th Order</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::BACKWARD_EULER</field>
    <field name="url">group__OFELI.html#gga672626c8ddef10da0244c15db4085f40a6217bf15718bb5b23e5dde491626aec6</field>
    <field name="keywords">BACKWARD_EULER OFELI::BACKWARD_EULER OFELI BACKWARD_EULER OFELI::BACKWARD_EULER OFELI</field>
    <field name="text">Backward Euler scheme Implicit</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::FORWARD_EULER</field>
    <field name="url">group__OFELI.html#gga672626c8ddef10da0244c15db4085f40a88052013bcaeb036f6fd739a56f4cccc</field>
    <field name="keywords">FORWARD_EULER OFELI::FORWARD_EULER OFELI FORWARD_EULER OFELI::FORWARD_EULER OFELI</field>
    <field name="text">Forward Euler scheme Explicit</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::ADAMS_BASHFORTH</field>
    <field name="url">group__OFELI.html#gga672626c8ddef10da0244c15db4085f40a88e6af20a0ce84e04718516b7c911ef3</field>
    <field name="keywords">ADAMS_BASHFORTH OFELI::ADAMS_BASHFORTH OFELI</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::AB2</field>
    <field name="url">group__OFELI.html#gga672626c8ddef10da0244c15db4085f40a91271a0b286e0d50cda54284c7febd2f</field>
    <field name="keywords">AB2 OFELI::AB2 OFELI AB2 OFELI::AB2 OFELI</field>
    <field name="text">Adams-Bashforth scheme 2 nd Order</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::CRANK_NICOLSON</field>
    <field name="url">group__OFELI.html#gga672626c8ddef10da0244c15db4085f40abbd1ebd69b82357b2dd7e0d08aff007f</field>
    <field name="keywords">CRANK_NICOLSON OFELI::CRANK_NICOLSON OFELI CRANK_NICOLSON OFELI::CRANK_NICOLSON OFELI</field>
    <field name="text">Crank-Nicolson scheme</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::NONE</field>
    <field name="url">group__OFELI.html#gga672626c8ddef10da0244c15db4085f40ac157bdf0b85a40d2619cbc8bc1ae5fe2</field>
    <field name="keywords">NONE OFELI::NONE OFELI NONE OFELI::NONE OFELI</field>
    <field name="text">No time integration scheme</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::LEAP_FROG</field>
    <field name="url">group__OFELI.html#gga672626c8ddef10da0244c15db4085f40ac624788afc3b839c11a13cc4dbbaff57</field>
    <field name="keywords">LEAP_FROG OFELI::LEAP_FROG OFELI LEAP_FROG OFELI::LEAP_FROG OFELI</field>
    <field name="text">Leap Frog scheme</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::HEUN</field>
    <field name="url">group__OFELI.html#gga672626c8ddef10da0244c15db4085f40ad1d1dc68298638158aaa1bf28a29c7b9</field>
    <field name="keywords">HEUN OFELI::HEUN OFELI HEUN OFELI::HEUN OFELI</field>
    <field name="text">Heun scheme</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::RUNGE_KUTTA</field>
    <field name="url">group__OFELI.html#gga672626c8ddef10da0244c15db4085f40ae4d8522f5abcb1ebce2c9b3dde324ace</field>
    <field name="keywords">RUNGE_KUTTA OFELI::RUNGE_KUTTA OFELI</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::BDF2</field>
    <field name="url">group__OFELI.html#gga672626c8ddef10da0244c15db4085f40ae7886dfb157f796fc69f25417aa681d2</field>
    <field name="keywords">BDF2 OFELI::BDF2 OFELI BDF2 OFELI::BDF2 OFELI</field>
    <field name="text">Backward Difference Formula 2 nd Order</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::L20</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cba09162d0433d739b5b19e2cc1676f6b90</field>
    <field name="keywords">L20 OFELI::PDE_Terms::L20 OFELI L20 OFELI::PDE_Terms::L20 OFELI</field>
    <field name="text">2 nd order in time 0 th order in space to LHS</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::VISCOSITY</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cba13d621435dde53f9c38dce061f879e4b</field>
    <field name="keywords">VISCOSITY OFELI::PDE_Terms::VISCOSITY OFELI VISCOSITY OFELI::PDE_Terms::VISCOSITY OFELI</field>
    <field name="text">Viscosity term</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::LUMPED_MASS</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cba1b2e5127f418cd952f9fb0fa050b6709</field>
    <field name="keywords">LUMPED_MASS OFELI::PDE_Terms::LUMPED_MASS OFELI LUMPED_MASS OFELI::PDE_Terms::LUMPED_MASS OFELI</field>
    <field name="text">Lumped mass or capacity term</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::CONSISTENT_MASS</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cba25fde2868c4dc4355fb7e9ddfd8122e5</field>
    <field name="keywords">CONSISTENT_MASS OFELI::PDE_Terms::CONSISTENT_MASS OFELI CONSISTENT_MASS OFELI::PDE_Terms::CONSISTENT_MASS OFELI</field>
    <field name="text">Consistent mass or capacity term</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::NEUMANN</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cba2f2dd8d12511598975b5475371963bd4</field>
    <field name="keywords">NEUMANN OFELI::PDE_Terms::NEUMANN OFELI NEUMANN OFELI::PDE_Terms::NEUMANN OFELI</field>
    <field name="text">Given right-hand side on boundary</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::BUOYANCY</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cba30a029b093634f0a681bc122f6130eaa</field>
    <field name="keywords">BUOYANCY OFELI::PDE_Terms::BUOYANCY OFELI BUOYANCY OFELI::PDE_Terms::BUOYANCY OFELI</field>
    <field name="text">Buoyancy force term</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::BOUNDARY_RHS</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cba548795c463d0ada94cb952eca426176e</field>
    <field name="keywords">BOUNDARY_RHS OFELI::PDE_Terms::BOUNDARY_RHS OFELI BOUNDARY_RHS OFELI::PDE_Terms::BOUNDARY_RHS OFELI</field>
    <field name="text">Given right-hand side on boundary</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::DILATATION</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cba57ee47bd02e9623eada587253bc69514</field>
    <field name="keywords">DILATATION OFELI::PDE_Terms::DILATATION OFELI DILATATION OFELI::PDE_Terms::DILATATION OFELI</field>
    <field name="text">Dilatational term</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::ELECTRIC</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cba596b9c4b008256066d216f9eb4426497</field>
    <field name="keywords">ELECTRIC OFELI::PDE_Terms::ELECTRIC OFELI ELECTRIC OFELI::PDE_Terms::ELECTRIC OFELI</field>
    <field name="text">Electric term</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::CAPACITY</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cba5b3bc952620c21981c4b3b304fbd74f8</field>
    <field name="keywords">CAPACITY OFELI::PDE_Terms::CAPACITY OFELI CAPACITY OFELI::PDE_Terms::CAPACITY OFELI</field>
    <field name="text">Lumped mass or capacity term</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::LOAD</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cba615d2885ef7576cedd9aafbb2578f028</field>
    <field name="keywords">LOAD OFELI::PDE_Terms::LOAD OFELI LOAD OFELI::PDE_Terms::LOAD OFELI</field>
    <field name="text">Body load term</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::BODY_RHS</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cba63e637d5f9aca5de88c627c9c534968e</field>
    <field name="keywords">BODY_RHS OFELI::PDE_Terms::BODY_RHS OFELI BODY_RHS OFELI::PDE_Terms::BODY_RHS OFELI</field>
    <field name="text">Body load term</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::L01</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cba7879f640467664d3c1242457da8cfe75</field>
    <field name="keywords">L01 OFELI::PDE_Terms::L01 OFELI L01 OFELI::PDE_Terms::L01 OFELI</field>
    <field name="text">0 th order in time 1 st order in space to LHS</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::LORENTZ_FORCE</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cba7fae9e7bebe4a4c30ae01b7bedcb3928</field>
    <field name="keywords">LORENTZ_FORCE OFELI::PDE_Terms::LORENTZ_FORCE OFELI LORENTZ_FORCE OFELI::PDE_Terms::LORENTZ_FORCE OFELI</field>
    <field name="text">Lorentz force term</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::CONSISTENT_CAPACITY</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cba8bfd09658c7d48cc60f6840cd439dc30</field>
    <field name="keywords">CONSISTENT_CAPACITY OFELI::PDE_Terms::CONSISTENT_CAPACITY OFELI CONSISTENT_CAPACITY OFELI::PDE_Terms::CONSISTENT_CAPACITY OFELI</field>
    <field name="text">Consistent mass or capacity term</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::L11</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cba8e7ee9b50b48be2b02231b9bd3509b7c</field>
    <field name="keywords">L11 OFELI::PDE_Terms::L11 OFELI L11 OFELI::PDE_Terms::L11 OFELI</field>
    <field name="text">1 st order in time 1 st order in space to LHS</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::L10</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cba90e317300449f3f0b77b5331ec0cf0f7</field>
    <field name="keywords">L10 OFELI::PDE_Terms::L10 OFELI L10 OFELI::PDE_Terms::L10 OFELI</field>
    <field name="text">1 st order in time 0 th order in space to LHS</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::CONVECTION</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cba9a585672110a5dc4cb56372c6639dea1</field>
    <field name="keywords">CONVECTION OFELI::PDE_Terms::CONVECTION OFELI CONVECTION OFELI::PDE_Terms::CONVECTION OFELI</field>
    <field name="text">Convection term</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::DEVIATORIC</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cba9e13c8a493c18000a283832b179b3dc4</field>
    <field name="keywords">DEVIATORIC OFELI::PDE_Terms::DEVIATORIC OFELI DEVIATORIC OFELI::PDE_Terms::DEVIATORIC OFELI</field>
    <field name="text">Deviatoric term</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::STIFFNESS</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cbaa231c1d74fe18f9e82224588887d1971</field>
    <field name="keywords">STIFFNESS OFELI::PDE_Terms::STIFFNESS OFELI STIFFNESS OFELI::PDE_Terms::STIFFNESS OFELI</field>
    <field name="text">Stiffness term</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::L00</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cbaa299c58fcdd0752beab4049168288705</field>
    <field name="keywords">L00 OFELI::PDE_Terms::L00 OFELI L00 OFELI::PDE_Terms::L00 OFELI</field>
    <field name="text">0 th order in time and space to LHS</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::NOTERM</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cbaaf8a806916cc39b1a027246e06a64aae</field>
    <field name="keywords">NOTERM OFELI::PDE_Terms::NOTERM OFELI NOTERM OFELI::PDE_Terms::NOTERM OFELI</field>
    <field name="text">No term empty equation</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::LUMPED_CAPACITY</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cbab0f7435a7395b8a2d88240e7d1c5c690</field>
    <field name="keywords">LUMPED_CAPACITY OFELI::PDE_Terms::LUMPED_CAPACITY OFELI LUMPED_CAPACITY OFELI::PDE_Terms::LUMPED_CAPACITY OFELI</field>
    <field name="text">Lumped mass or capacity term</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::L02</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cbab480d6f94dc9b3085740406fc26ce917</field>
    <field name="keywords">L02 OFELI::PDE_Terms::L02 OFELI L02 OFELI::PDE_Terms::L02 OFELI</field>
    <field name="text">0 th order in time 2 nd order in space to LHS</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::CONTACT</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cbac0241eae411627c19ba9835b6d194b1c</field>
    <field name="keywords">CONTACT OFELI::PDE_Terms::CONTACT OFELI CONTACT OFELI::PDE_Terms::CONTACT OFELI</field>
    <field name="text">Signorini contact</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::BOUNDARY_TRACTION</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cbac10ff580f320cb720c4b30be43df7e82</field>
    <field name="keywords">BOUNDARY_TRACTION OFELI::PDE_Terms::BOUNDARY_TRACTION OFELI BOUNDARY_TRACTION OFELI::PDE_Terms::BOUNDARY_TRACTION OFELI</field>
    <field name="text">Given right-hand side on boundary</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::DIFFUSION</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cbac9f4e4b1345e4e958a307bf67ae358a7</field>
    <field name="keywords">DIFFUSION OFELI::PDE_Terms::DIFFUSION OFELI DIFFUSION OFELI::PDE_Terms::DIFFUSION OFELI</field>
    <field name="text">Diffusion term</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::MASS</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cbacb6c2c4b3c8f95f9b58ad13f0a97245d</field>
    <field name="keywords">MASS OFELI::PDE_Terms::MASS OFELI MASS OFELI::PDE_Terms::MASS OFELI</field>
    <field name="text">Lumped mass or capacity term</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::MOBILITY</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cbadf9db257294a6f11ff6ce0e2d9448616</field>
    <field name="keywords">MOBILITY OFELI::PDE_Terms::MOBILITY OFELI MOBILITY OFELI::PDE_Terms::MOBILITY OFELI</field>
    <field name="text">Mobility term</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::FLUX</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cbae098247bc6652dd88c76644b275260ed</field>
    <field name="keywords">FLUX OFELI::PDE_Terms::FLUX OFELI FLUX OFELI::PDE_Terms::FLUX OFELI</field>
    <field name="text">Given right-hand side on boundary</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::SOURCE</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cbae60b4854b44ccfb2d92aa6f035171bb4</field>
    <field name="keywords">SOURCE OFELI::PDE_Terms::SOURCE OFELI SOURCE OFELI::PDE_Terms::SOURCE OFELI</field>
    <field name="text">Body load term</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::DAMPING</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cbaea33eb7e054446cf1e471808d2a46e71</field>
    <field name="keywords">DAMPING OFELI::PDE_Terms::DAMPING OFELI DAMPING OFELI::PDE_Terms::DAMPING OFELI</field>
    <field name="text">Damping term</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::PDE_Terms::MAGNETIC</field>
    <field name="url">group__OFELI.html#gga76756c7eef4f22bb13ac06f6c8c197cbaf842701a27bcc1bf7de20c30600718d3</field>
    <field name="keywords">MAGNETIC OFELI::PDE_Terms::MAGNETIC OFELI MAGNETIC OFELI::PDE_Terms::MAGNETIC OFELI</field>
    <field name="text">Magnetic term</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::SUBSPACE</field>
    <field name="url">group__OFELI.html#gga8c89e2f95eb1149cbab804231338c2d5a36232ea128af26ab5ad326e3734299e7</field>
    <field name="keywords">SUBSPACE OFELI::SUBSPACE OFELI SUBSPACE OFELI::SUBSPACE OFELI</field>
    <field name="text">Subspace iteration method for symmetric matrices</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::QR</field>
    <field name="url">group__OFELI.html#gga8c89e2f95eb1149cbab804231338c2d5a427d8933c3f220f92b96cd2fe4a08351</field>
    <field name="keywords">QR OFELI::QR OFELI QR OFELI::QR OFELI</field>
    <field name="text">QR reduction method Martin Parlett Peters Reinsch and Wilkinson</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::TRAPEZOIDAL</field>
    <field name="url">group__OFELI.html#ggac6182f91e9b5b2e053c56e00a35de854a492124afa39e48a6ceb6b989957e8e65</field>
    <field name="keywords">TRAPEZOIDAL OFELI::TRAPEZOIDAL OFELI TRAPEZOIDAL OFELI::TRAPEZOIDAL OFELI</field>
    <field name="text">Trapezoidal rule</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::MID_RECTANGLE</field>
    <field name="url">group__OFELI.html#ggac6182f91e9b5b2e053c56e00a35de854a625027990376a5fea0ef660d8aca10bb</field>
    <field name="keywords">MID_RECTANGLE OFELI::MID_RECTANGLE OFELI MID_RECTANGLE OFELI::MID_RECTANGLE OFELI</field>
    <field name="text">Midpoint central rectangle formula</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::RIGHT_RECTANGLE</field>
    <field name="url">group__OFELI.html#ggac6182f91e9b5b2e053c56e00a35de854a716f0f5b9e6226c472b24965a1a84718</field>
    <field name="keywords">RIGHT_RECTANGLE OFELI::RIGHT_RECTANGLE OFELI RIGHT_RECTANGLE OFELI::RIGHT_RECTANGLE OFELI</field>
    <field name="text">Right rectangle integration formula</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::LEFT_RECTANGLE</field>
    <field name="url">group__OFELI.html#ggac6182f91e9b5b2e053c56e00a35de854a7ef7eba8bae1abe4bccc081d83c21ec2</field>
    <field name="keywords">LEFT_RECTANGLE OFELI::LEFT_RECTANGLE OFELI LEFT_RECTANGLE OFELI::LEFT_RECTANGLE OFELI</field>
    <field name="text">Left rectangle integration formula</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::SIMPSON</field>
    <field name="url">group__OFELI.html#ggac6182f91e9b5b2e053c56e00a35de854ac1d3a99ecfcebc21a68caf8a05646584</field>
    <field name="keywords">SIMPSON OFELI::SIMPSON OFELI SIMPSON OFELI::SIMPSON OFELI</field>
    <field name="text">Simpson formula</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::GAUSS_LEGENDRE</field>
    <field name="url">group__OFELI.html#ggac6182f91e9b5b2e053c56e00a35de854aec225970c1b4a846c4f36d1e3f916203</field>
    <field name="keywords">GAUSS_LEGENDRE OFELI::GAUSS_LEGENDRE OFELI GAUSS_LEGENDRE OFELI::GAUSS_LEGENDRE OFELI</field>
    <field name="text">Gauss-Legendre quadrature formulae</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::SPARSE</field>
    <field name="url">group__OFELI.html#ggacc6ad8472c2abfd2f63e100474b977f9a2b6758a3fe10dd98bd594ddf6f341a4d</field>
    <field name="keywords">SPARSE OFELI::SPARSE OFELI SPARSE OFELI::SPARSE OFELI</field>
    <field name="text">Sparse storage</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::UNSYMMETRIC</field>
    <field name="url">group__OFELI.html#ggacc6ad8472c2abfd2f63e100474b977f9a33cc63ae02b32064d96dfe7d576a480d</field>
    <field name="keywords">UNSYMMETRIC OFELI::UNSYMMETRIC OFELI UNSYMMETRIC OFELI::UNSYMMETRIC OFELI</field>
    <field name="text">Unsymmetric matrix</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::SYMMETRIC</field>
    <field name="url">group__OFELI.html#ggacc6ad8472c2abfd2f63e100474b977f9a4b2338c5e1fba3b9cfb3a3473dfcc856</field>
    <field name="keywords">SYMMETRIC OFELI::SYMMETRIC OFELI SYMMETRIC OFELI::SYMMETRIC OFELI</field>
    <field name="text">Symmetric matrix</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::DENSE</field>
    <field name="url">group__OFELI.html#ggacc6ad8472c2abfd2f63e100474b977f9a6ac7a6371c0aa9606976335c895cadb0</field>
    <field name="keywords">DENSE OFELI::DENSE OFELI DENSE OFELI::DENSE OFELI</field>
    <field name="text">Dense storage</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::SKYLINE</field>
    <field name="url">group__OFELI.html#ggacc6ad8472c2abfd2f63e100474b977f9a873f671aa4a19efda55823bca23bede6</field>
    <field name="keywords">SKYLINE OFELI::SKYLINE OFELI SKYLINE OFELI::SKYLINE OFELI</field>
    <field name="text">Skyline storage</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::DIAGONAL</field>
    <field name="url">group__OFELI.html#ggacc6ad8472c2abfd2f63e100474b977f9a8e42703f6475b007d3b817ffcc08f6cf</field>
    <field name="keywords">DIAGONAL OFELI::DIAGONAL OFELI DIAGONAL OFELI::DIAGONAL OFELI</field>
    <field name="text">Diagonal storage</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::BAND</field>
    <field name="url">group__OFELI.html#ggacc6ad8472c2abfd2f63e100474b977f9aaeb8b7fcd13eaf49974b5ed6dac131ed</field>
    <field name="keywords">BAND OFELI::BAND OFELI BAND OFELI::BAND OFELI</field>
    <field name="text">Band storage</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::TRIDIAGONAL</field>
    <field name="url">group__OFELI.html#ggacc6ad8472c2abfd2f63e100474b977f9ab2be0eb731e585ab86387902f0871ff1</field>
    <field name="keywords">TRIDIAGONAL OFELI::TRIDIAGONAL OFELI TRIDIAGONAL OFELI::TRIDIAGONAL OFELI</field>
    <field name="text">Tridiagonal storage</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::IDENTITY</field>
    <field name="url">group__OFELI.html#ggacc6ad8472c2abfd2f63e100474b977f9af235bf7b95ec64961eab8529ec59311d</field>
    <field name="keywords">IDENTITY OFELI::IDENTITY OFELI IDENTITY OFELI::IDENTITY OFELI</field>
    <field name="text">Identity matrix</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::GMRES_SOLVER</field>
    <field name="url">group__OFELI.html#ggad0624a8576d3ca1d4af97479546930eaa2304995c282b45b65b1adc2e35b4bce3</field>
    <field name="keywords">GMRES_SOLVER OFELI::GMRES_SOLVER OFELI GMRES_SOLVER OFELI::GMRES_SOLVER OFELI</field>
    <field name="text">GMRes Method</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::BICG_SOLVER</field>
    <field name="url">group__OFELI.html#ggad0624a8576d3ca1d4af97479546930eaa41ec787e98688b25af3e9d111dc403f7</field>
    <field name="keywords">BICG_SOLVER OFELI::BICG_SOLVER OFELI BICG_SOLVER OFELI::BICG_SOLVER OFELI</field>
    <field name="text">BiCG Method</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::DIRECT_SOLVER</field>
    <field name="url">group__OFELI.html#ggad0624a8576d3ca1d4af97479546930eaa8b17dcef7858d58588a474eac2a062b6</field>
    <field name="keywords">DIRECT_SOLVER OFELI::DIRECT_SOLVER OFELI DIRECT_SOLVER OFELI::DIRECT_SOLVER OFELI</field>
    <field name="text">Direct solver</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::CGS_SOLVER</field>
    <field name="url">group__OFELI.html#ggad0624a8576d3ca1d4af97479546930eaaac7e0112b78acf6f9fa9ed21a988fea5</field>
    <field name="keywords">CGS_SOLVER OFELI::CGS_SOLVER OFELI CGS_SOLVER OFELI::CGS_SOLVER OFELI</field>
    <field name="text">CGS Metod</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::CG_SOLVER</field>
    <field name="url">group__OFELI.html#ggad0624a8576d3ca1d4af97479546930eaac66d74335d7f7e25037d46473c9dbc84</field>
    <field name="keywords">CG_SOLVER OFELI::CG_SOLVER OFELI CG_SOLVER OFELI::CG_SOLVER OFELI</field>
    <field name="text">CG Method</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::BICG_STAB_SOLVER</field>
    <field name="url">group__OFELI.html#ggad0624a8576d3ca1d4af97479546930eaaf8f6427a5f6372d6ab37229ae6a54a47</field>
    <field name="keywords">BICG_STAB_SOLVER OFELI::BICG_STAB_SOLVER OFELI BICG_STAB_SOLVER OFELI::BICG_STAB_SOLVER OFELI</field>
    <field name="text">BiCGStab Method</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::IOField::OUT</field>
    <field name="url">group__OFELI.html#ggad8aff9e545a5f496a179a16667431478ac72cb4ba9e379a25e80f157177dbe2b8</field>
    <field name="keywords">OUT OFELI::IOField::OUT IOField</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::IOField::IN</field>
    <field name="url">group__OFELI.html#ggad8aff9e545a5f496a179a16667431478af3180515f5867a29932df1dc207b31ad</field>
    <field name="keywords">IN OFELI::IOField::IN IOField</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::SSOR_PREC</field>
    <field name="url">group__OFELI.html#ggadac1c2aa74e98e485c02f73279b71a38a095982f146b7710bb7e767efcdad4777</field>
    <field name="keywords">SSOR_PREC OFELI::SSOR_PREC OFELI SSOR_PREC OFELI::SSOR_PREC OFELI</field>
    <field name="text">SSOR preconditioner</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::DILU_PREC</field>
    <field name="url">group__OFELI.html#ggadac1c2aa74e98e485c02f73279b71a38a3ae9f68ad4f36c3958a792106d2ddbe7</field>
    <field name="keywords">DILU_PREC OFELI::DILU_PREC OFELI DILU_PREC OFELI::DILU_PREC OFELI</field>
    <field name="text">DILU Diagonal Incomplete factorization preconditioner</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::DIAG_PREC</field>
    <field name="url">group__OFELI.html#ggadac1c2aa74e98e485c02f73279b71a38a4268260ca0a19ecd998e62462ccde34e</field>
    <field name="keywords">DIAG_PREC OFELI::DIAG_PREC OFELI DIAG_PREC OFELI::DIAG_PREC OFELI</field>
    <field name="text">Diagonal preconditioner</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::ILU_PREC</field>
    <field name="url">group__OFELI.html#ggadac1c2aa74e98e485c02f73279b71a38a4a328187223e216450bbcecbc37b2701</field>
    <field name="keywords">ILU_PREC OFELI::ILU_PREC OFELI ILU_PREC OFELI::ILU_PREC OFELI</field>
    <field name="text">ILU Incomplete factorization preconditioner</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::IDENT_PREC</field>
    <field name="url">group__OFELI.html#ggadac1c2aa74e98e485c02f73279b71a38abee1df09df17f316a75a98ad36679bf6</field>
    <field name="keywords">IDENT_PREC OFELI::IDENT_PREC OFELI IDENT_PREC OFELI::IDENT_PREC OFELI</field>
    <field name="text">Identity No preconditioning</field>
  </doc>
  <doc>
    <field name="type">group</field>
    <field name="name">Physics</field>
    <field name="url">group__Physics.html</field>
    <field name="keywords">Physical properties of media</field>
    <field name="text">Physical properties of materials and media</field>
  </doc>
  <doc>
    <field name="type">group</field>
    <field name="name">Porous</field>
    <field name="url">group__Porous.html</field>
    <field name="keywords">Porous Media problems</field>
    <field name="text">Porous Media equation classes</field>
  </doc>
  <doc>
    <field name="type">group</field>
    <field name="name">Shape</field>
    <field name="url">group__Shape.html</field>
    <field name="keywords">Shape Function</field>
    <field name="text">Shape function classes</field>
  </doc>
  <doc>
    <field name="type">group</field>
    <field name="name">Solid</field>
    <field name="url">group__Solid.html</field>
    <field name="keywords">Solid Mechanics</field>
    <field name="text">Solid Mechanics finite element equations</field>
  </doc>
  <doc>
    <field name="type">group</field>
    <field name="name">Solver</field>
    <field name="url">group__Solver.html</field>
    <field name="keywords">Solver</field>
    <field name="text">Solver functions and classes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const Muscl3DT &amp;m)</field>
    <field name="url">group__Solver.html#ga0e680bb7c5a6e6a0583ced44a9d51325</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output mesh data as calculated in class Muscl3DT Output mesh data as calculated in class Muscl3DT Output mesh data as calculated in class Muscl3DT</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TIME_LOOP</field>
    <field name="args">(ts, t, ft, n)</field>
    <field name="url">group__Solver.html#ga1c947decc678e4aefcbe712a62a9805d</field>
    <field name="keywords">TIME_LOOP</field>
    <field name="text">A macro to loop on time steps to integrate on time ts Time step t Initial time value updated at each time step ft Final time value n Time step index</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const EigenProblemSolver &amp;es)</field>
    <field name="url">group__Solver.html#ga21d2f936e471da338712cef4d96405ca</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output eigenproblem information Output eigenproblem information Output eigenproblem information Output eigenproblem information</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const ODESolver &amp;de)</field>
    <field name="url">group__Solver.html#ga2d412d67f3804d00223120371bcdfa48</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output differential system information Output differential system information Output differential system information Output differential system information</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::GS</field>
    <field name="args">(const SpMatrix&lt; T_ &gt; &amp;A, const Vect&lt; T_ &gt; &amp;b, Vect&lt; T_ &gt; &amp;x, real_t omega, int max_it, real_t toler)</field>
    <field name="url">group__Solver.html#ga36eb96776e21d95d9ca9bd46dbe6172a</field>
    <field name="keywords">GS OFELI::GS OFELI</field>
    <field name="text">Gauss-Seidel solver function Gauss-Seidel solver function This function uses the relaxed Gauss-Seidel algorithm to solve a linear system with a sparse matrix The global variable Verbosity enables choosing output message level Verbosity 2 No output message Verbosity 1 Notify executing the function GS Verbosity 2 Notify convergence with number of performed iterations or divergence Verbosity 3 Output each iteration number and residual Verbosity 6 Print final solution if convergence Verbosity 1 0 Print obtained solution at each iteration A Problem matrix Instance of class SpMatrix b Right-hand side vector class Vect x Vect instance containing initial solution guess in input and solution of the linear system in output If iterations have succeeded omega Relaxation parameter max_it Maximum number of iterations toler Tolerance for convergence measured in relative weighted 2 Norm Number of performed iterations Data type real_t float complex&lt;real_t&gt; Rachid Touzani GNU Lesser Public License Gauss-Seidel solver function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SSOR</field>
    <field name="args">(const M_ &amp;A, const Vect&lt; T_ &gt; &amp;b, Vect&lt; T_ &gt; &amp;x, int max_it, real_t toler)</field>
    <field name="url">group__Solver.html#ga427b162d903d81fad84633c855c87b1f</field>
    <field name="keywords">SSOR OFELI::SSOR OFELI</field>
    <field name="text">SSOR solver function SSOR solver function A Problem matrix Instance of abstract class M_ b Right-hand side vector class Vect x Vect instance containing initial solution guess in input and solution of the linear system in output If iterations have succeeded max_it Maximum number of iterations toler Tolerance for convergence measured in relative weighted 2 Norm Number of performed iterations Template Arguments T_ data type double float M_ Matrix storage class Rachid Touzani GNU Lesser Public License SSOR solver function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::CGS</field>
    <field name="args">(const SpMatrix&lt; T_ &gt; &amp;A, const Prec&lt; T_ &gt; &amp;P, const Vect&lt; T_ &gt; &amp;b, Vect&lt; T_ &gt; &amp;x, int max_it, real_t toler)</field>
    <field name="url">group__Solver.html#ga53ad098c8be7154f0109504838c7f0d0</field>
    <field name="keywords">CGS OFELI::CGS OFELI</field>
    <field name="text">Conjugate Gradient Squared solver function Conjugate Gradient Squared solver function This function uses the preconditioned Conjugate Gradient Squared algorithm to solve a linear system with a sparse matrix The global variable Verbosity enables choosing output message level Verbosity 2 No output message Verbosity 1 Notify executing the function CGS Verbosity 2 Notify convergence with number of performed iterations or divergence Verbosity 3 Output each iteration number and residual Verbosity 6 Print final solution if convergence Verbosity 1 0 Print obtained solution at each iteration A Problem matrix Instance of class SpMatrix P Preconditioner Instance of class Prec b Right-hand side vector class Vect x Vect instance containing initial solution guess in input and solution of the linear system in output If iterations have succeeded max_it Maximum number of iterations toler Tolerance for convergence measured in relative weighted 2 Norm Number of performed iterations Data type real_t float complex&lt;real_t&gt; Rachid Touzani GNU Lesser Public License Conjugate Gradient Squared solver function</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">TimeLoop</field>
    <field name="url">group__Solver.html#ga547b16cb61ca40e320cbfa84962c8b01</field>
    <field name="keywords">TimeLoop</field>
    <field name="text">A macro to loop on time steps to integrate on time OFELI::NbTimeSteps int OFELI::theFinalTime OFELI::theTimeStep OFELI::theTime OFELI::theTimeStep theStep theTime OFELI::theFinalTime OFELI::theTimeStep OFELI::theTime OFELI::theTimeStep OFELI::theStep It uses the following global variables defined in OFELI theStep theTime theTimeStep theFinalTime</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::CG</field>
    <field name="args">(const SpMatrix&lt; T_ &gt; &amp;A, int prec, const Vect&lt; T_ &gt; &amp;b, Vect&lt; T_ &gt; &amp;x, int max_it, real_t toler)</field>
    <field name="url">group__Solver.html#ga554b9f066a4a2a36773eff4c3f9a4d71</field>
    <field name="keywords">CG OFELI::CG OFELI</field>
    <field name="text">Conjugate gradient solver function Conjugate gradient solver function This function uses the preconditioned Conjugate Gradient algorithm to solve a linear system with a sparse matrix The global variable Verbosity enables choosing output message level Verbosity 2 No output message Verbosity 1 Notify executing the function CG Verbosity 2 Notify convergence with number of performed iterations or divergence Verbosity 3 Output each iteration number and residual Verbosity 6 Print final solution if convergence Verbosity 1 0 Print obtained solution at each iteration A Problem matrix Instance of abstract class SpMatrix prec Enum variable selecting a preconditioner among the values IDENT_PREC DIAG_PREC ILU_PREC or SSOR_PREC b Right-hand side vector class Vect x Vect instance containing initial solution guess in input and solution of the linear system in output If iterations have succeeded max_it Maximum number of iterations toler Tolerance for convergence measured in relative weighted 2 Norm Number of performed iterations Data type double float complex&lt;double&gt; Rachid Touzani GNU Lesser Public License Conjugate gradient solver function This function uses the preconditioned Conjugate Gradient algorithm to solve a linear system with a sparse matrix The global variable Verbosity enables choosing output message level Verbosity 2 No output message Verbosity 1 Notify executing the function CG Verbosity 2 Notify convergence with number of performed iterations or divergence Verbosity 3 Output each iteration number and residual Verbosity 6 Print final solution if convergence Verbosity 1 0 Print obtained solution at each iteration A Problem matrix Instance of abstract class SpMatrix prec Enum variable selecting a preconditioner among the values IDENT_PREC DIAG_PREC ILU_PREC or SSOR_PREC b Right-hand side vector class Vect x Vect instance containing initial solution guess in input and solution of the linear system in output If iterations have succeeded max_it Maximum number of iterations toler Tolerance for convergence measured in relative weighted 2 Norm Number of performed iterations Data type double float complex&lt;double&gt; Rachid Touzani GNU Lesser Public License Conjugate gradient solver function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::GMRes</field>
    <field name="args">(const SpMatrix&lt; T_ &gt; &amp;A, const Prec&lt; T_ &gt; &amp;P, const Vect&lt; T_ &gt; &amp;b, Vect&lt; T_ &gt; &amp;x, size_t m, int max_it, real_t toler)</field>
    <field name="url">group__Solver.html#ga570d4a25d1945a14819ddd01bc640aef</field>
    <field name="keywords">GMRes OFELI::GMRes OFELI</field>
    <field name="text">GMRes solver function GMRes solver function This function uses the preconditioned GMRES algorithm to solve a linear system with a sparse matrix The global variable Verbosity enables choosing output message level Verbosity 2 No output message Verbosity 1 Notify executing the function CMRes Verbosity 2 Notify convergence with number of performed iterations or divergence Verbosity 3 Output each iteration number and residual Verbosity 6 Print final solution if convergence Verbosity 1 0 Print obtained solution at each iteration A Problem matrix Instance of class SpMatrix P Preconditioner Instance of class Prec b Right-hand side vector class Vect x Vect instance containing initial solution guess in input and solution of the linear system in output If iterations have succeeded m Number of subspaces to generate for iterations max_it Maximum number of iterations toler Tolerance for convergence measured in relative weighted 2 Norm Number of performed iterations Data type double float complex&lt;double&gt; Rachid Touzani GNU Lesser Public License GMRes solver function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::GMRes</field>
    <field name="args">(const SpMatrix&lt; T_ &gt; &amp;A, int prec, const Vect&lt; T_ &gt; &amp;b, Vect&lt; T_ &gt; &amp;x, size_t m, int max_it, real_t toler)</field>
    <field name="url">group__Solver.html#ga5f3f9683290c78a85df05aadeeef1cdf</field>
    <field name="keywords">GMRes OFELI::GMRes OFELI</field>
    <field name="text">GMRes solver function GMRes solver function This function uses the preconditioned GMRES algorithm to solve a linear system with a sparse matrix The global variable Verbosity enables choosing output message level Verbosity 2 No output message Verbosity 1 Notify executing the function CG Verbosity 2 Notify convergence with number of performed iterations or divergence Verbosity 3 Output each iteration number and residual Verbosity 6 Print final solution if convergence Verbosity 1 0 Print obtained solution at each iteration A Problem matrix Instance of class SpMatrix prec Enum variable selecting a preconditioner among the values IDENT_PREC DIAG_PREC ILU_PREC or SSOR_PREC b Right-hand side vector class Vect x Vect instance containing initial solution guess in input and solution of the linear system in output If iterations have succeeded m Number of subspaces to generate for iterations max_it Maximum number of iterations toler Tolerance for convergence measured in relative weighted 2 Norm Number of performed iterations Data type double float complex&lt;double&gt; Rachid Touzani GNU Lesser Public License GMRes solver function This function uses the preconditioned GMRES algorithm to solve a linear system with a sparse matrix The global variable Verbosity enables choosing output message level Verbosity 2 No output message Verbosity 1 Notify executing the function CG Verbosity 2 Notify convergence with number of performed iterations or divergence Verbosity 3 Output each iteration number and residual Verbosity 6 Print final solution if convergence Verbosity 1 0 Print obtained solution at each iteration A Problem matrix Instance of class SpMatrix prec Enum variable selecting a preconditioner among the values IDENT_PREC DIAG_PREC ILU_PREC or SSOR_PREC b Right-hand side vector class Vect x Vect instance containing initial solution guess in input and solution of the linear system in output If iterations have succeeded m Number of subspaces to generate for iterations max_it Maximum number of iterations toler Tolerance for convergence measured in relative weighted 2 Norm Number of performed iterations Data type double float complex&lt;double&gt; Rachid Touzani GNU Lesser Public License GMRes solver function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Jacobi</field>
    <field name="args">(const SpMatrix&lt; T_ &gt; &amp;A, const Vect&lt; T_ &gt; &amp;b, Vect&lt; T_ &gt; &amp;x, real_t omega, int max_it, real_t toler)</field>
    <field name="url">group__Solver.html#ga65b2c70702a6ba24616a93c1188a0d9d</field>
    <field name="keywords">Jacobi OFELI::Jacobi OFELI</field>
    <field name="text">Jacobi solver function Jacobi solver function A Problem matrix Instance of class SpMatrix b Right-hand side vector class Vect x Vect instance containing initial solution guess in input and solution of the linear system in output If iterations have succeeded omega Relaxation parameter max_it Maximum number of iterations toler Tolerance for convergence measured in relative weighted 2 Norm Number of performed iterations Data type real_t float complex&lt;real_t&gt; Matrix storage class Rachid Touzani GNU Lesser Public License Jacobi solver function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BiCG</field>
    <field name="args">(const SpMatrix&lt; T_ &gt; &amp;A, const Prec&lt; T_ &gt; &amp;P, const Vect&lt; T_ &gt; &amp;b, Vect&lt; T_ &gt; &amp;x, int max_it, real_t &amp;toler)</field>
    <field name="url">group__Solver.html#ga68a53e63d5e90baf075adbccba8fded2</field>
    <field name="keywords">BiCG OFELI::BiCG OFELI</field>
    <field name="text">Biconjugate gradient solver function Biconjugate gradient solver function This function uses the preconditioned Biconjugate Conjugate Gradient algorithm to solve a linear system with a sparse matrix The global variable Verbosity enables choosing output message level Verbosity 2 No output message Verbosity 1 Notify executing the function BiCG Verbosity 2 Notify convergence with number of performed iterations or divergence Verbosity 3 Output each iteration number and residual Verbosity 6 Print final solution if convergence Verbosity 1 0 Print obtained solution at each iteration A Problem matrix Instance of class SpMatrix P Preconditioner Instance of class Prec b Right-hand side vector class Vect x Vect instance containing initial solution guess in input and solution of the linear system in output If iterations have succeeded max_it Maximum number of iterations toler in Tolerance for convergence measured in relative weighted 2 Norm Number of performed iterations Data type double float complex&lt;double&gt; Rachid Touzani GNU Lesser Public License Biconjugate gradient solver function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, TimeStepping &amp;ts)</field>
    <field name="url">group__Solver.html#ga727240803a7e200f1cf34eaf0d071698</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output differential system information Output differential system information Rachid Touzani GNU Lesser Public License Output differential system information Rachid Touzani GNU Lesser Public License Output differential system information</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Schur</field>
    <field name="args">(SkMatrix&lt; T_ &gt; &amp;A, SpMatrix&lt; T_ &gt; &amp;U, SpMatrix&lt; T_ &gt; &amp;L, SpMatrix&lt; T_ &gt; &amp;D, Vect&lt; T_ &gt; &amp;b, Vect&lt; T_ &gt; &amp;c)</field>
    <field name="url">group__Solver.html#ga86daf449b352504b085c354af030b1c2</field>
    <field name="keywords">Schur OFELI::Schur OFELI</field>
    <field name="text">Solve a linear system of equations with a 2 x2-block matrix The linear system is of the form A Instance of class SkMatrix class for the first diagonal block The matrix must be invertible and factorizable Do not use SpMatrix class where A U L D are instances of matrix classes U Instance of class SpMatrix for the upper triangle block The matrix can be rectangular L Instance of class SpMatrix for the lower triangle block The matrix can be rectangular D Instance of class SpMatrix for the second diagonal block The matrix must be factorizable Do not use SpMatrix class b Vector Instance of class Vect that contains the first block of right-hand side on input and the first block of the solution on output b must have the same size as the dimension of A c Vect instance that contains the second block of right-hand side on output and the first block of the solution on output c must have the same size as the dimension of D Template Argument data type real_t float Rachid Touzani GNU Lesser Public License Solve a linear system of equations with a 2 x2-block matrix</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::CG</field>
    <field name="args">(const SpMatrix&lt; T_ &gt; &amp;A, const Prec&lt; T_ &gt; &amp;P, const Vect&lt; T_ &gt; &amp;b, Vect&lt; T_ &gt; &amp;x, int max_it, real_t toler)</field>
    <field name="url">group__Solver.html#ga9eb542b51d6a2ac952e2b2bbd5f21138</field>
    <field name="keywords">CG OFELI::CG OFELI</field>
    <field name="text">Conjugate gradient solver function Conjugate gradient solver function This function uses the preconditioned Conjugate Gradient algorithm to solve a linear system with a sparse matrix The global variable Verbosity enables choosing output message level Verbosity 2 No output message Verbosity 1 Notify executing the function CG Verbosity 2 Notify convergence with number of performed iterations or divergence Verbosity 3 Output each iteration number and residual Verbosity 6 Print final solution if convergence Verbosity 1 0 Print obtained solution at each iteration A Problem matrix Instance of class SpMatrix P Preconditioner Instance of class Prec b Right-hand side vector class Vect x Vect instance containing initial solution guess in input and solution of the linear system in output If iterations have succeeded max_it Maximum number of iterations toler Tolerance for convergence measured in relative weighted 2 Norm Number of performed iterations Data type double float complex&lt;double&gt; Rachid Touzani GNU Lesser Public License Conjugate gradient solver function</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MAX_NB_MESHES</field>
    <field name="url">group__Solver.html#gab48dd23d597898aefaab6415cc7e33cc</field>
    <field name="keywords">MAX_NB_MESHES</field>
    <field name="text">Maximum number of meshes Maximum number of meshes Useful for coupled problems</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BiCG</field>
    <field name="args">(const SpMatrix&lt; T_ &gt; &amp;A, int prec, const Vect&lt; T_ &gt; &amp;b, Vect&lt; T_ &gt; &amp;x, int max_it, real_t toler)</field>
    <field name="url">group__Solver.html#gaba5d7c89c2832ad701cc3f0c750928fb</field>
    <field name="keywords">BiCG OFELI::BiCG OFELI</field>
    <field name="text">Biconjugate gradient solver function Biconjugate gradient solver function This function uses the preconditioned Biconjugate Conjugate Gradient algorithm to solve a linear system with a sparse matrix The global variable Verbosity enables choosing output message level Verbosity 2 No output message Verbosity 1 Notify executing the function CG Verbosity 2 Notify convergence with number of performed iterations or divergence Verbosity 3 Output each iteration number and residual Verbosity 6 Print final solution if convergence Verbosity 1 0 Print obtained solution at each iteration A Problem matrix Instance of class SpMatrix prec Enum variable selecting a preconditioner among the values IDENT_PREC DIAG_PREC ILU_PREC or SSOR_PREC b Right-hand side vector class Vect x Vect instance containing initial solution guess in input and solution of the linear system in output If iterations have succeeded max_it Maximum number of iterations toler in Tolerance for convergence measured in relative weighted 2 Norm Number of performed iterations Data type double float complex&lt;double&gt; Rachid Touzani GNU Lesser Public License Biconjugate gradient solver function This function uses the preconditioned Biconjugate Conjugate Gradient algorithm to solve a linear system with a sparse matrix The global variable Verbosity enables choosing output message level Verbosity 2 No output message Verbosity 1 Notify executing the function CG Verbosity 2 Notify convergence with number of performed iterations or divergence Verbosity 3 Output each iteration number and residual Verbosity 6 Print final solution if convergence Verbosity 1 0 Print obtained solution at each iteration A Problem matrix Instance of class SpMatrix prec Enum variable selecting a preconditioner among the values IDENT_PREC DIAG_PREC ILU_PREC or SSOR_PREC b Right-hand side vector class Vect x Vect instance containing initial solution guess in input and solution of the linear system in output If iterations have succeeded max_it Maximum number of iterations toler in Tolerance for convergence measured in relative weighted 2 Norm Number of performed iterations Data type double float complex&lt;double&gt; Rachid Touzani GNU Lesser Public License Biconjugate gradient solver function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Richardson</field>
    <field name="args">(const M_ &amp;A, const Vect&lt; T_ &gt; &amp;b, Vect&lt; T_ &gt; &amp;x, real_t omega, int max_it, real_t toler, int verbose)</field>
    <field name="url">group__Solver.html#gac3e56edcd67f3f8eddb9717c36c4157f</field>
    <field name="keywords">Richardson OFELI::Richardson OFELI</field>
    <field name="text">Richardson solver function Richardson solver function A Problem matrix problem Instance of abstract class M_ b Right-hand side vector class Vect x Vect instance containing initial solution guess in input and solution of the linear system in output If iterations have succeeded omega Relaxation parameter max_it Maximum number of iterations toler Tolerance for convergence measured in relative weighted 2 Norm verbose Information output parameter 0 No output 1 Output iteration information 2 and greater Output iteration information and solution at each iteration nb_it Number of performed iterations Data type real_t float complex&lt;real_t&gt; Matrix storage class Rachid Touzani GNU Lesser Public License Richardson solver function</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">MAX_NB_INPUT_FIELDS</field>
    <field name="url">group__Solver.html#gad155031b7f2e178b109f9238b845c6ae</field>
    <field name="keywords">MAX_NB_INPUT_FIELDS</field>
    <field name="text">Maximum number of fields for an equation Maximum number of fields for an equation Useful for coupled problems</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::CGS</field>
    <field name="args">(const SpMatrix&lt; T_ &gt; &amp;A, int prec, const Vect&lt; T_ &gt; &amp;b, Vect&lt; T_ &gt; &amp;x, int max_it, real_t toler)</field>
    <field name="url">group__Solver.html#gafa2aac234cefc34242a77a8c846741c5</field>
    <field name="keywords">CGS OFELI::CGS OFELI</field>
    <field name="text">Conjugate Gradient Squared solver function Conjugate Gradient Squared solver function This function uses the preconditioned Conjugate Gradient Squared algorithm to solve a linear system with a sparse matrix The global variable Verbosity enables choosing output message level Verbosity 2 No output message Verbosity 1 Notify executing the function CG Verbosity 2 Notify convergence with number of performed iterations or divergence Verbosity 3 Output each iteration number and residual Verbosity 6 Print final solution if convergence Verbosity 1 0 Print obtained solution at each iteration A Problem matrix Instance of class SpMatrix prec Enum variable selecting a preconditioner among the values IDENT_PREC DIAG_PREC ILU_PREC or SSOR_PREC b Right-hand side vector class Vect x Vect instance containing initial solution guess in input and solution of the linear system in output If iterations have succeeded max_it Maximum number of iterations toler Tolerance for convergence measured in relative weighted 2 Norm Number of performed iterations Data type real_t float complex&lt;real_t&gt; Rachid Touzani GNU Lesser Public License Conjugate Gradient Squared solver function This function uses the preconditioned Conjugate Gradient Squared algorithm to solve a linear system with a sparse matrix The global variable Verbosity enables choosing output message level Verbosity 2 No output message Verbosity 1 Notify executing the function CG Verbosity 2 Notify convergence with number of performed iterations or divergence Verbosity 3 Output each iteration number and residual Verbosity 6 Print final solution if convergence Verbosity 1 0 Print obtained solution at each iteration A Problem matrix Instance of class SpMatrix prec Enum variable selecting a preconditioner among the values IDENT_PREC DIAG_PREC ILU_PREC or SSOR_PREC b Right-hand side vector class Vect x Vect instance containing initial solution guess in input and solution of the linear system in output If iterations have succeeded max_it Maximum number of iterations toler Tolerance for convergence measured in relative weighted 2 Norm Number of performed iterations Data type real_t float complex&lt;real_t&gt; Rachid Touzani GNU Lesser Public License Conjugate Gradient Squared solver function</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">IterationLoop</field>
    <field name="url">group__Solver.html#gaff4a1d20c7ff88bae1a718059aab02dd</field>
    <field name="keywords">IterationLoop</field>
    <field name="text">A macro to loop on iterations for an iterative procedure It uses the following global variables defined in OFELI theIteration MaxNbIterations Converged The variable theIteration must be zeroed before using this macro</field>
  </doc>
  <doc>
    <field name="type">group</field>
    <field name="name">Therm</field>
    <field name="url">group__Therm.html</field>
    <field name="keywords">Heat Transfer</field>
    <field name="text">Heat Transfer equations</field>
  </doc>
  <doc>
    <field name="type">group</field>
    <field name="name">Util</field>
    <field name="url">group__Util.html</field>
    <field name="keywords">Utilities</field>
    <field name="text">Utility functions and classes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::areClose</field>
    <field name="args">(const Point2D&lt; real_t &gt; &amp;a, const Point2D&lt; real_t &gt; &amp;b, real_t toler=OFELI_TOLERANCE)</field>
    <field name="url">group__Util.html#ga025e5ec2b64e4e8f380ebdf49e65f1e9</field>
    <field name="keywords">areClose OFELI::areClose OFELI</field>
    <field name="text">Return true if both instances of class Point2D&lt;real_t&gt; are distant with less then toler Default OFELI_EPSMCH Return true if both instances of class Point2D&lt;real_t&gt; are distant with less then toler Default OFELI_EPSMCH Return true if both instances of class Point2D&lt;real_t&gt; are distant with less then toler Default OFELI_EPSMCH Return true if both instances of class Point2D&lt;real_t&gt; are distant with less then toler Default OFELI_EPSMCH</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::QuickSort</field>
    <field name="args">(std::vector&lt; T_ &gt; &amp;a, int begin, int end)</field>
    <field name="url">group__Util.html#ga0537c31de11778392ea8cfd10669d83a</field>
    <field name="keywords">QuickSort OFELI::QuickSort OFELI</field>
    <field name="text">Function to sort a vector Function to sort a vector qksort uses the famous quick sorting algorithm a Vector to sort begin index of starting iterator end index of ending iterator The calling program must provide an overloading of the operator for the type T_ Rachid Touzani GNU Lesser Public License Function to sort a vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Abs</field>
    <field name="args">(complex_t a)</field>
    <field name="url">group__Util.html#ga05890aa3f761cc5390e93535b020db78</field>
    <field name="keywords">Abs OFELI::Abs OFELI</field>
    <field name="text">Return modulus of complex number a Return modulus of complex number a Return modulus of complex number a Return modulus of complex number a</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator*</field>
    <field name="args">(const SpaceTime &amp;a, const SpaceTime &amp;b)</field>
    <field name="url">group__Util.html#ga05cfe1b28a1df84b3c041687962a0a65</field>
    <field name="keywords">operator* OFELI::operator* OFELI</field>
    <field name="text">Operator Operator Return inner scalar product of points a and b Rachid Touzani GNU Lesser Public License Operator Return inner scalar product of points a and b Rachid Touzani GNU Lesser Public License Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Kronecker</field>
    <field name="args">(int i, int j)</field>
    <field name="url">group__Util.html#ga0861d18665802b79b083521aea0e4507</field>
    <field name="keywords">Kronecker OFELI::Kronecker OFELI</field>
    <field name="text">Return Kronecker delta of i and j Return Kronecker delta of i and j Return Kronecker delta of i and j</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Abs</field>
    <field name="args">(real_t a)</field>
    <field name="url">group__Util.html#ga08ed15a6c93054999158e50c01e250d1</field>
    <field name="keywords">Abs OFELI::Abs OFELI</field>
    <field name="text">Return absolute value of a Return absolute value of a Return absolute value of a</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">OFELI_SIXTH</field>
    <field name="url">group__Util.html#ga0bb87759823330c86a251e85d632dc8f</field>
    <field name="keywords">OFELI_SIXTH</field>
    <field name="text">Value of 1 with 2 8 digits</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::stringTo</field>
    <field name="args">(const std::string &amp;s)</field>
    <field name="url">group__Util.html#ga0bf36e2bd6efefdc0636c8f7b795b21d</field>
    <field name="keywords">stringTo OFELI::stringTo OFELI</field>
    <field name="text">Function to convert a string to a template type parameter Function to convert a string to a template type parameter Function to convert a string to a template type parameter</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Sqr</field>
    <field name="args">(T_ x)</field>
    <field name="url">group__Util.html#ga0e608840c25efd68c3f1be0d5a97a3b8</field>
    <field name="keywords">Sqr OFELI::Sqr OFELI</field>
    <field name="text">Return square of value x Return square of value x Return square of value x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::saveGnuplot</field>
    <field name="args">(string input_file, string output_file, string mesh_file, int f=1)</field>
    <field name="url">group__Util.html#ga0f2611ffed2f6fd7621b83cf8c161e95</field>
    <field name="keywords">saveGnuplot OFELI::saveGnuplot OFELI</field>
    <field name="text">Save a vector to an input Gnuplot file Save a vector to an input Gnuplot file Gnuplot is a command-line driven program for producing 2 D and 3 D plots It is under the GNU General Public License Available information can be found in the site input_file Input file OFELI XML file containing a field output_file Output file gnuplot format file mesh_file File containing mesh data f Field is stored each f time step Default 1 Rachid Touzani GNU Lesser Public License Save a vector to an input Gnuplot file</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::clear</field>
    <field name="args">(vector&lt; T_ &gt; &amp;v)</field>
    <field name="url">group__Util.html#ga114f756d953a75cd724709142c58af43</field>
    <field name="keywords">clear OFELI::clear OFELI</field>
    <field name="text">Assign 0 to all entries of a vector Assign 0 to all entries of a vector v Vector to clear Assign 0 to all entries of a vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Arg</field>
    <field name="args">(complex_t x)</field>
    <field name="url">group__Util.html#ga16f2ad4ccc28cbd6c848097662391168</field>
    <field name="keywords">Arg OFELI::Arg OFELI</field>
    <field name="text">Return argument of complex number x Return argument of complex number x Return argument of complex number x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::getGmsh</field>
    <field name="args">(string file, Mesh &amp;mesh, size_t nb_dof=1)</field>
    <field name="url">group__Util.html#ga1ae294a11eb216a36bc862c514070c65</field>
    <field name="keywords">getGmsh OFELI::getGmsh OFELI</field>
    <field name="text">Construct an instance of class Mesh from a mesh file stored in Gmsh format Construct an instance of class Mesh from a mesh file stored in Gmsh format Gmsh is a free mesh generator that can be downloaded from the site file Name of a file written in the Gmsh format mesh Mesh instance created by the function nb_dof Number of degrees of freedom for each node This information is not provided in general by mesh generators Its default value here is 1 Rachid Touzani GNU Lesser Public License Construct an instance of class Mesh from a mesh file stored in Gmsh format</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::areClose</field>
    <field name="args">(const SpaceTime &amp;a, const SpaceTime &amp;b, real_t toler=OFELI_TOLERANCE)</field>
    <field name="url">group__Util.html#ga1bfb89076d4bad7331959826ac8a52c3</field>
    <field name="keywords">areClose OFELI::areClose OFELI</field>
    <field name="text">Return true if both instances of class Point&lt;double&gt; are distant with less then toler Return true if both instances of class Point&lt;double&gt; are distant with less then toler Rachid Touzani GNU Lesser Public License Return true if both instances of class Point&lt;double&gt; are distant with less then toler Rachid Touzani GNU Lesser Public License Return true if both instances of class Point&lt;double&gt; are distant with less then toler</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator-</field>
    <field name="args">(const Point2D&lt; T_ &gt; &amp;a, const T_ &amp;x)</field>
    <field name="url">group__Util.html#ga1c31c8f848ac9a29043f49ad9d99a3b8</field>
    <field name="keywords">operator- OFELI::operator- OFELI</field>
    <field name="text">Operator Operator Translate a by x Rachid Touzani GNU Lesser Public License Operator Translate a by x Rachid Touzani GNU Lesser Public License Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::getBamg</field>
    <field name="args">(string file, Mesh &amp;mesh, size_t nb_dof=1)</field>
    <field name="url">group__Util.html#ga1c7ed037a01ddc6ee4683825009c6b84</field>
    <field name="keywords">getBamg OFELI::getBamg OFELI</field>
    <field name="text">Construct an instance of class Mesh from a mesh file stored in Bamg format Construct an instance of class Mesh from a mesh file stored in Bamg format file Name of a file written in the Bamg format Bamg is a 2 D mesh generator It allows to construct adapted meshes from a given metric It was developed at INRIA France Available information can be found in the site mesh Mesh instance created by the function nb_dof Number of degrees of freedom for each node This information is not provided in general by mesh generators Its default value here is 1 Rachid Touzani GNU Lesser Public License Construct an instance of class Mesh from a mesh file stored in Bamg format</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::saveMatlab</field>
    <field name="args">(const string &amp;file, const Mesh &amp;mesh)</field>
    <field name="url">group__Util.html#ga1c88c1371931c9b7eefc21a0c78ad1e9</field>
    <field name="keywords">saveMatlab OFELI::saveMatlab OFELI</field>
    <field name="text">This function outputs a Mesh instance in a file in Matlab format This function outputs a Mesh instance in a file in Matlab format Matlab is a language of scientific computing including visualization It is developed by MathWorks Available information can be found in the site file Output file in Matlab format mesh Mesh instance to save Rachid Touzani GNU Lesser Public License This function outputs a Mesh instance in a file in Matlab format</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator/</field>
    <field name="args">(const Point2D&lt; T_ &gt; &amp;b, const T_ &amp;a)</field>
    <field name="url">group__Util.html#ga1d0b7ef258483898e6ba74077d2342ea</field>
    <field name="keywords">operator/ OFELI::operator/ OFELI</field>
    <field name="text">Operator Operator Return point b divided by constant a Rachid Touzani GNU Lesser Public License Operator Return point b divided by constant a Rachid Touzani GNU Lesser Public License Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator-</field>
    <field name="args">(const SpaceTime &amp;a)</field>
    <field name="url">group__Util.html#ga1d2561971fa6409442c02add31df11b8</field>
    <field name="keywords">operator- OFELI::operator- OFELI</field>
    <field name="text">Unary Operator Unary Operator Return minus a Rachid Touzani GNU Lesser Public License Unary Operator Return minus a Rachid Touzani GNU Lesser Public License Unary Operator</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">VLG</field>
    <field name="url">group__Util.html#ga1e837274c3efc8f41f0eb0519aaeb6b2</field>
    <field name="keywords">VLG</field>
    <field name="text">Very large number A real number for penalty</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Axpy</field>
    <field name="args">(size_t n, T_ a, T_ *x, T_ *y)</field>
    <field name="url">group__Util.html#ga1f1e3c8ab6d85d14518ff7424f4f99cc</field>
    <field name="keywords">Axpy OFELI::Axpy OFELI</field>
    <field name="text">Multiply array x by a and add result to y Multiply array x by a and add result to y n is the arrays size Multiply array x by a and add result to y n is the arrays size Multiply array x by a and add result to y</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">OFELI_SQRT2</field>
    <field name="url">group__Util.html#ga1f3b9c8f2fdd51eecd842d17df2eee0f</field>
    <field name="keywords">OFELI_SQRT2</field>
    <field name="text">Value of sqrt(2) with 2 8 digits</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::ErrorMax</field>
    <field name="args">(const vector&lt; real_t &gt; &amp;x, const vector&lt; real_t &gt; &amp;y)</field>
    <field name="url">group__Util.html#ga20876746277833e3c5b4b8b3587c89b2</field>
    <field name="keywords">ErrorMax OFELI::ErrorMax OFELI</field>
    <field name="text">Return absolute Max error between vectors x and y Return absolute Max error between vectors x and y Return absolute Max error between vectors x and y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const std::list&lt; T_ &gt; &amp;l)</field>
    <field name="url">group__Util.html#ga22ce9aaa733b05c0b3905d5c316dcaa9</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output a vector instance Output a vector instance Rachid Touzani GNU Lesser Public License Output a vector instance Rachid Touzani GNU Lesser Public License Output a vector instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator*</field>
    <field name="args">(const int &amp;a, const SpaceTime &amp;b)</field>
    <field name="url">group__Util.html#ga2765655f10bf7aea123500bb66a16785</field>
    <field name="keywords">operator* OFELI::operator* OFELI</field>
    <field name="text">Operator Operator Return point b divided by integer constant a Rachid Touzani GNU Lesser Public License Operator Return point b divided by integer constant a Rachid Touzani GNU Lesser Public License Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator+</field>
    <field name="args">(const Point&lt; T_ &gt; &amp;a, const T_ &amp;x)</field>
    <field name="url">group__Util.html#ga287f9c7889f571daa5f67083d096bad0</field>
    <field name="keywords">operator+ OFELI::operator+ OFELI</field>
    <field name="text">Operator Operator Translate a by x Rachid Touzani GNU Lesser Public License Operator Translate a by x Rachid Touzani GNU Lesser Public License Operator</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">LIGHT_SPEED</field>
    <field name="url">group__Util.html#ga2f3addaba3e40cfb6e78224398707712</field>
    <field name="keywords">LIGHT_SPEED</field>
    <field name="text">Speed of light in SI units</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::saveGnuplot</field>
    <field name="args">(const string &amp;file, const Mesh &amp;mesh)</field>
    <field name="url">group__Util.html#ga314c8c3aa821a9cee7679ba74ac0befc</field>
    <field name="keywords">saveGnuplot OFELI::saveGnuplot OFELI</field>
    <field name="text">This function outputs a Mesh instance in a file in Gmsh format This function outputs a Mesh instance in a file in Gmsh format Gnuplot is a command-line driven program for producing 2 D and 3 D plots It is under the GNU General Public License Available information can be found in the site file Output file in Gnuplot format mesh Mesh instance to save Rachid Touzani GNU Lesser Public License This function outputs a Mesh instance in a file in Gmsh format Gnuplot is a command-line driven program for producing 2 D and 3 D plots It is under the GNU General Public License Available information can be found in the site file Output file in Gnuplot format mesh Mesh instance to save Rachid Touzani GNU Lesser Public License This function outputs a Mesh instance in a file in Gmsh format</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Axpy</field>
    <field name="args">(T_ a, const vector&lt; T_ &gt; &amp;x, vector&lt; T_ &gt; &amp;y)</field>
    <field name="url">group__Util.html#ga3522099fc7a9baeb716885d1b1c6b928</field>
    <field name="keywords">Axpy OFELI::Axpy OFELI</field>
    <field name="text">Multiply vector x by a and add result to y Multiply vector x by a and add result to y x and y are instances of class vector&lt;T_&gt; Multiply vector x by a and add result to y x and y are instances of class vector&lt;T_&gt; Multiply vector x by a and add result to y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Log</field>
    <field name="args">(complex_t x)</field>
    <field name="url">group__Util.html#ga365f51e045b9f2217c38d216fd635e75</field>
    <field name="keywords">Log OFELI::Log OFELI</field>
    <field name="text">Return principal determination of logarithm of complex number x Return principal determination of logarithm of complex number x Return principal determination of logarithm of complex number x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator-</field>
    <field name="args">(const SpaceTime &amp;a, const SpaceTime &amp;b)</field>
    <field name="url">group__Util.html#ga386e00cca424ea8512eda9fc44559205</field>
    <field name="keywords">operator- OFELI::operator- OFELI</field>
    <field name="text">Operator Operator Return point a minus point b Rachid Touzani GNU Lesser Public License Operator Return point a minus point b Rachid Touzani GNU Lesser Public License Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Equal</field>
    <field name="args">(real_t x, real_t y, real_t toler=OFELI_EPSMCH)</field>
    <field name="url">group__Util.html#ga3876dcdcbf31582a7a19910b6bbb0d01</field>
    <field name="keywords">Equal OFELI::Equal OFELI</field>
    <field name="text">Function to return true if numbers x and y are close up to a given tolerance toler Function to return true if numbers x and y are close up to a given tolerance toler Default value of tolerance is the constant OFELI_EPSMCH Function to return true if numbers x and y are close up to a given tolerance toler</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::areClose</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;a, const Point&lt; real_t &gt; &amp;b, real_t toler=OFELI_TOLERANCE)</field>
    <field name="url">group__Util.html#ga3b38bae613da4884353e634e5bab9d31</field>
    <field name="keywords">areClose OFELI::areClose OFELI</field>
    <field name="text">Return true if both instances of class Point&lt;double&gt; are distant with less then toler Return true if both instances of class Point&lt;double&gt; are distant with less then toler Rachid Touzani GNU Lesser Public License Return true if both instances of class Point&lt;double&gt; are distant with less then toler</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator+</field>
    <field name="args">(const SpaceTime &amp;a, const SpaceTime &amp;b)</field>
    <field name="url">group__Util.html#ga3d514a2f87c024023fc1adb44e5ccdd1</field>
    <field name="keywords">operator+ OFELI::operator+ OFELI</field>
    <field name="text">Operator Operator Return sum of two points a and b Rachid Touzani GNU Lesser Public License Operator Return sum of two points a and b Rachid Touzani GNU Lesser Public License Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Dot</field>
    <field name="args">(const Point&lt; T_ &gt; &amp;x, const Point&lt; T_ &gt; &amp;y)</field>
    <field name="url">group__Util.html#ga40e3a890d86d09f82f0fe3c1f4dcd886</field>
    <field name="keywords">Dot OFELI::Dot OFELI</field>
    <field name="text">Return dot product of x and y Return dot product of x and y Return dot product of x and y Return dot product of x and y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::saveGmsh</field>
    <field name="args">(const string &amp;file, const Mesh &amp;mesh)</field>
    <field name="url">group__Util.html#ga439b96397c0dce42a51e6f9928ec130a</field>
    <field name="keywords">saveGmsh OFELI::saveGmsh OFELI</field>
    <field name="text">This function outputs a Mesh instance in a file in Gmsh format This function outputs a Mesh instance in a file in Gmsh format Gmsh is a free mesh generator that can be downloaded from the site file Output file in Gmsh format mesh Mesh instance to save Rachid Touzani GNU Lesser Public License This function outputs a Mesh instance in a file in Gmsh format Gmsh is a free mesh generator that can be downloaded from the site file Output file in Gmsh format mesh Mesh instance to save Rachid Touzani GNU Lesser Public License This function outputs a Mesh instance in a file in Gmsh format</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator+</field>
    <field name="args">(const Point2D&lt; T_ &gt; &amp;a, const Point2D&lt; T_ &gt; &amp;b)</field>
    <field name="url">group__Util.html#ga450b0d1fb660b5b7bf2415d9c94c9f04</field>
    <field name="keywords">operator+ OFELI::operator+ OFELI</field>
    <field name="text">Operator Operator Return sum of two points a and b Rachid Touzani GNU Lesser Public License Operator Return sum of two points a and b Rachid Touzani GNU Lesser Public License Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;</field>
    <field name="args">(const SpaceTime &amp;a, const SpaceTime &amp;b)</field>
    <field name="url">group__Util.html#ga487fda53d9ab7b3e78381fcd7469a2e2</field>
    <field name="keywords">operator&lt; OFELI::operator&lt; OFELI</field>
    <field name="text">Comparison operator Returns true if all components of first vector are lower than those of second one Comparison operator Returns true if all components of first vector are lower than those of second one Return minus a Rachid Touzani GNU Lesser Public License Comparison operator Returns true if all components of first vector are lower than those of second one Return minus a Rachid Touzani GNU Lesser Public License Comparison operator Returns true if all components of first vector are lower than those of second one</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SqrDistance</field>
    <field name="args">(const Point2D&lt; real_t &gt; &amp;a, const Point2D&lt; real_t &gt; &amp;b)</field>
    <field name="url">group__Util.html#ga48a42ee356ff6844e98c14f0a3b1f203</field>
    <field name="keywords">SqrDistance OFELI::SqrDistance OFELI</field>
    <field name="text">Return squared euclidean distance between points a and b Return squared euclidean distance between points a and b Rachid Touzani GNU Lesser Public License Return squared euclidean distance between points a and b Rachid Touzani GNU Lesser Public License Return squared euclidean distance between points a and b</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::exprep</field>
    <field name="args">(real_t x)</field>
    <field name="url">group__Util.html#ga491e375d2e6242002ab45478351b4040</field>
    <field name="keywords">exprep OFELI::exprep OFELI</field>
    <field name="text">Compute the exponential function with avoiding over and underflows Compute the exponential function with avoiding over and underflows Compute the exponential function with avoiding over and underflows</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator==</field>
    <field name="args">(const SpaceTime &amp;a, const SpaceTime &amp;b)</field>
    <field name="url">group__Util.html#ga4aa1055930aec2e60a0c1e989ebf4f17</field>
    <field name="keywords">operator== OFELI::operator== OFELI</field>
    <field name="text">Operator Operator Return true if a b false if not Rachid Touzani GNU Lesser Public License Operator Return true if a b false if not Rachid Touzani GNU Lesser Public License Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator*</field>
    <field name="args">(const real_t &amp;a, const SpaceTime &amp;b)</field>
    <field name="url">group__Util.html#ga4b0833d1dabb397bd04e327801f9db45</field>
    <field name="keywords">operator* OFELI::operator* OFELI</field>
    <field name="text">Operator Operator Return point b premultiplied by constant a Rachid Touzani GNU Lesser Public License Operator Return point b premultiplied by constant a Rachid Touzani GNU Lesser Public License Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator*</field>
    <field name="args">(const Point&lt; T_ &gt; &amp;b, const int &amp;a)</field>
    <field name="url">group__Util.html#ga4c9761d8180cff8c32ea0f7c6bea8a79</field>
    <field name="keywords">operator* OFELI::operator* OFELI</field>
    <field name="text">Operator Operator Return point b postmultiplied by constant a Rachid Touzani GNU Lesser Public License Operator Return point b postmultiplied by constant a Rachid Touzani GNU Lesser Public License Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::getMesh</field>
    <field name="args">(string file, ExternalFileFormat form, Mesh &amp;mesh, size_t nb_dof=1)</field>
    <field name="url">group__Util.html#ga4df8f4860ce8e1d3480cd8b4be385699</field>
    <field name="keywords">getMesh OFELI::getMesh OFELI</field>
    <field name="text">Construct an instance of class Mesh from a mesh file stored in an external file format Construct an instance of class Mesh from a mesh file stored in an external file format file Input mesh file name form Format of the mesh file This one can be chosen among the enumerated values GMSH Mesh generator Gmsh see site MATLAB Matlab file see site EASYMESH Easymesh is a 2 D mesh generator see site GAMBIT Gambit is a mesh generator associated to Fluent BAMG Mesh generator Bamg see site NETGEN Netgen is a 3 D mesh generator see site TETGEN Tetgen is a 3 D mesh generator see site TRIANGLE_FF Triangle is a 2 D mesh generator see site mesh Mesh instance created by the function nb_dof Number of degrees of freedom for each node This information is not provided in general by mesh generators Its default value here is 1 Rachid Touzani GNU Lesser Public License Construct an instance of class Mesh from a mesh file stored in an external file format</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::clear</field>
    <field name="args">(Vect&lt; T_ &gt; &amp;v)</field>
    <field name="url">group__Util.html#ga4e68d121dc7952ec9a54c7a18f8d0d2d</field>
    <field name="keywords">clear OFELI::clear OFELI</field>
    <field name="text">Assign 0 to all entries of a vector Assign 0 to all entries of a vector v Vector to clear Assign 0 to all entries of a vector v Vector to clear Assign 0 to all entries of a vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator-</field>
    <field name="args">(const Point&lt; T_ &gt; &amp;a)</field>
    <field name="url">group__Util.html#ga584ca846931febbb9a14f0ebbe100c51</field>
    <field name="keywords">operator- OFELI::operator- OFELI</field>
    <field name="text">Unary Operator Unary Operator Return minus a Rachid Touzani GNU Lesser Public License Unary Operator Return minus a Rachid Touzani GNU Lesser Public License Unary Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Distance</field>
    <field name="args">(const SpaceTime &amp;a, const SpaceTime &amp;b)</field>
    <field name="url">group__Util.html#ga592e80c6ff4a723cce1d9b2cd223bc18</field>
    <field name="keywords">Distance OFELI::Distance OFELI</field>
    <field name="text">Return euclidean distance between points a and b Return euclidean distance between points a and b Rachid Touzani GNU Lesser Public License Return euclidean distance between points a and b Rachid Touzani GNU Lesser Public License Return euclidean distance between points a and b</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator*</field>
    <field name="args">(const Point&lt; T_ &gt; &amp;a, const Point&lt; T_ &gt; &amp;b)</field>
    <field name="url">group__Util.html#ga59967354fc7f13d7c6c0f21cfb035172</field>
    <field name="keywords">operator* OFELI::operator* OFELI</field>
    <field name="text">Operator Operator Return inner scalar product of points a and b Rachid Touzani GNU Lesser Public License Operator Return inner scalar product of points a and b Rachid Touzani GNU Lesser Public License Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::out_complex</field>
    <field name="args">(complex_t z)</field>
    <field name="url">group__Util.html#ga59eb409d42989d222155ddae256ffd84</field>
    <field name="keywords">out_complex OFELI::out_complex OFELI</field>
    <field name="text">Return string to conveniently display a complex number Return string to conveniently display a complex number z Complex number Return string to conveniently display a complex number</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Sgn</field>
    <field name="args">(real_t a, real_t b)</field>
    <field name="url">group__Util.html#ga5a8c09e3b27a4a08a60b02054d901cd3</field>
    <field name="keywords">Sgn OFELI::Sgn OFELI</field>
    <field name="text">Return if b 0 if not Return if b 0 if not Return if b 0 if not Return if b 0 if not</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::saveField</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;v, const Grid &amp;g, string output_file, int opt)</field>
    <field name="url">group__Util.html#ga5b3a2e3d67035b6cd7ef6049349b9c45</field>
    <field name="keywords">saveField OFELI::saveField OFELI</field>
    <field name="text">Save a vector to an output file in a given file format for a structured grid data Save a vector to an output file in a given file format for a structured grid data v Vect instance to save g Grid instance output_file Output file where to save the vector opt Option to choose file format to save This is to be chosen among enumerated values GMSH VTK Rachid Touzani GNU Lesser Public License Save a vector to an output file in a given file format for a structured grid data v Vect instance to save g Grid instance output_file Output file where to save the vector opt Option to choose file format to save This is to be chosen among enumerated values GMSH VTK Rachid Touzani GNU Lesser Public License Save a vector to an output file in a given file format for a structured grid data</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Abs2</field>
    <field name="args">(real_t a)</field>
    <field name="url">group__Util.html#ga5d4cd266517d60587a686838e01b896e</field>
    <field name="keywords">Abs2 OFELI::Abs2 OFELI</field>
    <field name="text">Return square of real number a Return square of real number a Return square of real number a Return square of real number a</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const std::pair&lt; T_, T_ &gt; &amp;a)</field>
    <field name="url">group__Util.html#ga5d587567b886a4fcd6e47e05b4ad630c</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output a pair instance Output a pair instance Rachid Touzani GNU Lesser Public License Output a pair instance Rachid Touzani GNU Lesser Public License Output a pair instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const std::string &amp;c)</field>
    <field name="url">group__Util.html#ga5dfe8f6a951e5d050e92d5f0576e8f21</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output a string Output a string Rachid Touzani GNU Lesser Public License Output a string Rachid Touzani GNU Lesser Public License Output a string</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator*</field>
    <field name="args">(const Point2D&lt; T_ &gt; &amp;b, const T_ &amp;a)</field>
    <field name="url">group__Util.html#ga5fb203fb6e6492703d2ee83bd29ac71b</field>
    <field name="keywords">operator* OFELI::operator* OFELI</field>
    <field name="text">Operator Operator Return point b postmultiplied by constant a Rachid Touzani GNU Lesser Public License Operator Return point b postmultiplied by constant a Rachid Touzani GNU Lesser Public License Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::getTetgen</field>
    <field name="args">(string file, Mesh &amp;mesh, size_t nb_dof=1)</field>
    <field name="url">group__Util.html#ga628ee53dcb902ee67c107a977cb70ec4</field>
    <field name="keywords">getTetgen OFELI::getTetgen OFELI</field>
    <field name="text">Construct an instance of class Mesh from a mesh file stored in Tetgen format Construct an instance of class Mesh from a mesh file stored in Tetgen format Tetgen is a free three-dimensional mesh generator that can be downloaded in the site file Name of a file written in the Tetgen format mesh Mesh instance created by the function nb_dof Number of degrees of freedom for each node This information is not provided in general by mesh generators Its default value here is 1 Rachid Touzani GNU Lesser Public License Construct an instance of class Mesh from a mesh file stored in Tetgen format</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">OFELI_PI</field>
    <field name="url">group__Util.html#ga638e722176be8883c42ad8299ce849c2</field>
    <field name="keywords">OFELI_PI</field>
    <field name="text">Value of Pi with 2 8 digits</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Error2</field>
    <field name="args">(const vector&lt; real_t &gt; &amp;x, const vector&lt; real_t &gt; &amp;y)</field>
    <field name="url">group__Util.html#ga68510e3019f8089ad1fe139a079e142d</field>
    <field name="keywords">Error2 OFELI::Error2 OFELI</field>
    <field name="text">Return absolute L2 error between vectors x and y Return absolute L2 error between vectors x and y Return absolute L2 error between vectors x and y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::qksort</field>
    <field name="args">(std::vector&lt; T_ &gt; &amp;a, int begin, int end)</field>
    <field name="url">group__Util.html#ga6b566af8e802c04236ed2e05562627d3</field>
    <field name="keywords">qksort OFELI::qksort OFELI</field>
    <field name="text">Function to sort a vector Function to sort a vector qksort uses the famous quick sorting algorithm a Vector to sort begin index of starting index default value is 0 end index of ending index default value is the vector size 1 Rachid Touzani GNU Lesser Public License Function to sort a vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Distance</field>
    <field name="args">(const Point2D&lt; real_t &gt; &amp;a, const Point2D&lt; real_t &gt; &amp;b)</field>
    <field name="url">group__Util.html#ga6ba18a3721056997053682a51bf05322</field>
    <field name="keywords">Distance OFELI::Distance OFELI</field>
    <field name="text">Return euclidean distance between points a and b Return euclidean distance between points a and b Rachid Touzani GNU Lesser Public License Return euclidean distance between points a and b Rachid Touzani GNU Lesser Public License Return euclidean distance between points a and b</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator*</field>
    <field name="args">(const T_ &amp;a, const Point&lt; T_ &gt; &amp;b)</field>
    <field name="url">group__Util.html#ga6bb1ae5c2ac16daea2799c33cd386cc4</field>
    <field name="keywords">operator* OFELI::operator* OFELI</field>
    <field name="text">Operator Operator Return point b premultiplied by constant a Rachid Touzani GNU Lesser Public License Operator Return point b premultiplied by constant a Rachid Touzani GNU Lesser Public License Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Max</field>
    <field name="args">(int a, int b, int c)</field>
    <field name="url">group__Util.html#ga6e623f45aa8421c5cf22c5d07b01bd43</field>
    <field name="keywords">Max OFELI::Max OFELI</field>
    <field name="text">Return maximum value of integer numbers a b and c Return maximum value of integer numbers a b and c Return maximum value of integer numbers a b and c Return maximum value of integer numbers a b and c</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::banner</field>
    <field name="args">(const string &amp;prog=&quot; &quot;)</field>
    <field name="url">group__Util.html#ga70c2092e3f957175dd689beaf7c1625b</field>
    <field name="keywords">banner OFELI::banner OFELI</field>
    <field name="text">Outputs a banner as header of any developed program prog Calling program name Enables writing a copyright notice accompanying the program Rachid Touzani GNU Lesser Public License Outputs a banner as header of any developed program</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Discrepancy</field>
    <field name="args">(Vect&lt; complex_t &gt; &amp;x, const Vect&lt; complex_t &gt; &amp;y, int n, int type=1)</field>
    <field name="url">group__Util.html#ga71f50821958f3c80ba19dc2689f4811f</field>
    <field name="keywords">Discrepancy OFELI::Discrepancy OFELI</field>
    <field name="text">Return discrepancy between 2 vectors x and y x First vector Instance of class Vect On output x is assigned the vector y y Second vector Instance of class Vect n Type of norm 1 Weighted 1 Norm 2 Weighted 2 Norm 0 Max-Norm type Discrepancy type 0 Absolute 1 Relative Default Computed discrepancy value Return discrepancy between 2 vectors x and y x First vector Instance of class Vect On output x is assigned the vector y y Second vector Instance of class Vect n Type of norm 1 Weighted 1 Norm 2 Weighted 2 Norm 0 Max-Norm type Discrepancy type 0 Absolute 1 Relative Default Computed discrepancy value Return discrepancy between 2 vectors x and y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::saveGmsh</field>
    <field name="args">(Mesh &amp;mesh, string input_file, string output_file, int f=1)</field>
    <field name="url">group__Util.html#ga7226592a5cde4d114d9d8118e2c0f254</field>
    <field name="keywords">saveGmsh OFELI::saveGmsh OFELI</field>
    <field name="text">Save a vector to an output Gmsh file Save a vector to an output Gmsh file Gmsh is a free mesh generator and postprocessor that can be downloaded from the site mesh Reference to Mesh instance input_file Input file OFELI XML file containing a field output_file Output file Gmsh format file f Field is stored each f time step Default 1 Rachid Touzani GNU Lesser Public License Save a vector to an output Gmsh file Gmsh is a free mesh generator and postprocessor that can be downloaded from the site mesh Reference to Mesh instance input_file Input file OFELI XML file containing a field output_file Output file Gmsh format file f Field is stored each f time step Default 1 Rachid Touzani GNU Lesser Public License Save a vector to an output Gmsh file</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Max</field>
    <field name="args">(real_t a, real_t b, real_t c, real_t d)</field>
    <field name="url">group__Util.html#ga722c49f32e3b9929654ca323358c38c6</field>
    <field name="keywords">Max OFELI::Max OFELI</field>
    <field name="text">Return maximum value of integer numbers a b c and d Return maximum value of integer numbers a b c and d Return maximum value of integer numbers a b c and d Return maximum value of integer numbers a b c and d</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(std::ostream &amp;s, const SpaceTime &amp;a)</field>
    <field name="url">group__Util.html#ga73ea9774f9964daf860aaca4e21a1d59</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output space-time point coordinates Output space-time point coordinates Rachid Touzani GNU Lesser Public License Output space-time point coordinates Rachid Touzani GNU Lesser Public License Output space-time point coordinates</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator*</field>
    <field name="args">(const SpaceTime &amp;b, const real_t &amp;a)</field>
    <field name="url">group__Util.html#ga769e623b2bfdaaa2a4376be24f54e9c2</field>
    <field name="keywords">operator* OFELI::operator* OFELI</field>
    <field name="text">Operator Operator Return point b multiplied by constant a Operator Return point b multiplied by constant a Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator-</field>
    <field name="args">(const SpaceTime &amp;a, const real_t &amp;x)</field>
    <field name="url">group__Util.html#ga78ae21d691fe57654b6685bfc7ce81f9</field>
    <field name="keywords">operator- OFELI::operator- OFELI</field>
    <field name="text">Operator Operator Translate a by x Rachid Touzani GNU Lesser Public License Operator Translate a by x Rachid Touzani GNU Lesser Public License Operator</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">OFELI_EPSMCH</field>
    <field name="url">group__Util.html#ga7909ce3190d0028c9d0b1848f4eeeb5f</field>
    <field name="keywords">OFELI_EPSMCH</field>
    <field name="text">Value of Machine Epsilon</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Nrm2</field>
    <field name="args">(size_t n, real_t *x)</field>
    <field name="url">group__Util.html#ga7da94570b300315a5309b69269f16a84</field>
    <field name="keywords">Nrm2 OFELI::Nrm2 OFELI</field>
    <field name="text">Return 2 norm of array x Return 2 norm of array x n is Array length x Array to treat Return 2 norm of array x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator/</field>
    <field name="args">(const SpaceTime &amp;b, const real_t &amp;a)</field>
    <field name="url">group__Util.html#ga7eb8934fa3b56b0b4fbb024f18e925a5</field>
    <field name="keywords">operator/ OFELI::operator/ OFELI</field>
    <field name="text">Operator Operator Return point b divided by constant a Rachid Touzani GNU Lesser Public License Operator Return point b divided by constant a Rachid Touzani GNU Lesser Public License Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::saveGnuplot</field>
    <field name="args">(Mesh &amp;mesh, string input_file, string output_file, int f=1)</field>
    <field name="url">group__Util.html#ga7edcfcc66a8d9bda0e166b957b0fae8a</field>
    <field name="keywords">saveGnuplot OFELI::saveGnuplot OFELI</field>
    <field name="text">Save a vector to an input Gnuplot file Save a vector to an input Gnuplot file Gnuplot is a command-line driven program for producing 2 D and 3 D plots It is under the GNU General Public License Available information can be found in the site mesh Reference to Mesh instance input_file Input file OFELI XML file containing a field output_file Output file gnuplot format file f Field is stored each f time step Default 1 Rachid Touzani GNU Lesser Public License Save a vector to an input Gnuplot file Gnuplot is a command-line driven program for producing 2 D and 3 D plots It is under the GNU General Public License Available information can be found in the site mesh Reference to Mesh instance input_file Input file OFELI XML file containing a field output_file Output file gnuplot format file f Field is stored each f time step Default 1 Rachid Touzani GNU Lesser Public License Save a vector to an input Gnuplot file</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const Tabulation &amp;t)</field>
    <field name="url">group__Util.html#ga7fa97f8e4c3b393ac7da4f9a9608a52f</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output Tabulated function data Output Tabulated function data Output Tabulated function data Output Tabulated function data</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Copy</field>
    <field name="args">(size_t n, T_ *x, T_ *y)</field>
    <field name="url">group__Util.html#ga7fdea537191eeb55189826f5f07edbaa</field>
    <field name="keywords">Copy OFELI::Copy OFELI</field>
    <field name="text">Copy array x to y n is the arrays size Copy array x to y n is the arrays size Copy array x to y n is the arrays size Copy array x to y n is the arrays size</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Max</field>
    <field name="args">(int a, int b, int c, int d)</field>
    <field name="url">group__Util.html#ga801704e69f3d089e52762d6033f0964a</field>
    <field name="keywords">Max OFELI::Max OFELI</field>
    <field name="text">Return maximum value of integer numbers a b c and d Return maximum value of integer numbers a b c and d Return maximum value of integer numbers a b c and d Return maximum value of integer numbers a b c and d</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">OFELI_ONEOVERPI</field>
    <field name="url">group__Util.html#ga8023ce38a826ddf909ba6fa9d63102b6</field>
    <field name="keywords">OFELI_ONEOVERPI</field>
    <field name="text">Value of 1 with 2 8 digits</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">OFELI_TWELVETH</field>
    <field name="url">group__Util.html#ga81ae81ad719d4d81033db1bdb7f58d6b</field>
    <field name="keywords">OFELI_TWELVETH</field>
    <field name="text">Value of 1 with 2 8 digits</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::saveTecplot</field>
    <field name="args">(const string &amp;file, const Mesh &amp;mesh)</field>
    <field name="url">group__Util.html#ga81e5a48f04ee8a35eb48b03dd795342e</field>
    <field name="keywords">saveTecplot OFELI::saveTecplot OFELI</field>
    <field name="text">This function outputs a Mesh instance in a file in Tecplot format This function outputs a Mesh instance in a file in Tecplot format Tecplot is high quality post graphical commercial processing program developed by Amtec Available information can be found in the site file Output file in Tecplot format mesh Mesh instance to save Rachid Touzani GNU Lesser Public License This function outputs a Mesh instance in a file in Tecplot format Tecplot is high quality post graphical commercial processing program developed by Amtec Available information can be found in the site file Output file in Tecplot format mesh Mesh instance to save Rachid Touzani GNU Lesser Public License This function outputs a Mesh instance in a file in Tecplot format</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::saveTecplot</field>
    <field name="args">(string input_file, string output_file, string mesh_file, int f=1)</field>
    <field name="url">group__Util.html#ga82040d9ed48020c38dcd545ee9d300f2</field>
    <field name="keywords">saveTecplot OFELI::saveTecplot OFELI</field>
    <field name="text">Save a vector to an output file to an input Tecplot file Save a vector to an output file to an input Tecplot file Tecplot is high quality post graphical commercial processing program developed by Amtec Available information can be found in the site input_file Input file OFELI XML file containing a field output_file Output file gnuplot format file mesh_file File containing mesh data f Field is stored each f time step Default 1 Rachid Touzani GNU Lesser Public License Save a vector to an output file to an input Tecplot file</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">OFELI_E</field>
    <field name="url">group__Util.html#ga82bf57e3f0c3c4eab49c7a6cbbd66660</field>
    <field name="keywords">OFELI_E</field>
    <field name="text">Value of e or exp with 2 8 digits</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Conjg</field>
    <field name="args">(real_t a)</field>
    <field name="url">group__Util.html#ga87522edc935d4d9881f64e3c7efbaee4</field>
    <field name="keywords">Conjg OFELI::Conjg OFELI</field>
    <field name="text">Return complex conjugate of real number a Return complex conjugate of real number a Return complex conjugate of real number a</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const vector&lt; T_ &gt; &amp;v)</field>
    <field name="url">group__Util.html#ga87cacc2a83c2c644779d479ff36f0b8a</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output a vector instance Output a vector instance Rachid Touzani GNU Lesser Public License Output a vector instance Rachid Touzani GNU Lesser Public License Output a vector instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::getNetgen</field>
    <field name="args">(string file, Mesh &amp;mesh, size_t nb_dof=1)</field>
    <field name="url">group__Util.html#ga8ea5493c43b1f4fe0897ec523dd9f18f</field>
    <field name="keywords">getNetgen OFELI::getNetgen OFELI</field>
    <field name="text">Construct an instance of class Mesh from a mesh file stored in Netgen format Construct an instance of class Mesh from a mesh file stored in Netgen format Netgen is a tetrahedral mesh generator that can be downloaded from the site file Name of a file written in the Netgen format mesh Mesh instance created by the function nb_dof Number of degrees of freedom for each node This information is not provided in general by mesh generators default 1 Rachid Touzani GNU Lesser Public License Construct an instance of class Mesh from a mesh file stored in Netgen format</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">OFELI_SQRT3</field>
    <field name="url">group__Util.html#ga9145d9742719ab29bb37f4b3954cb43d</field>
    <field name="keywords">OFELI_SQRT3</field>
    <field name="text">Value of sqrt(3) with 2 8 digits</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator-</field>
    <field name="args">(const Point&lt; T_ &gt; &amp;a, const Point&lt; T_ &gt; &amp;b)</field>
    <field name="url">group__Util.html#ga92006b2922f410e9c196bb48e29d167d</field>
    <field name="keywords">operator- OFELI::operator- OFELI</field>
    <field name="text">Operator Operator Return point a minus point b Rachid Touzani GNU Lesser Public License Operator Return point a minus point b Rachid Touzani GNU Lesser Public License Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Abs2</field>
    <field name="args">(complex_t a)</field>
    <field name="url">group__Util.html#ga9316f5c420694e0ef052c15fd7838822</field>
    <field name="keywords">Abs2 OFELI::Abs2 OFELI</field>
    <field name="text">Return square of modulus of complex number a Return square of modulus of complex number a Return square of modulus of complex number a</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator*</field>
    <field name="args">(const T_ &amp;a, const Point2D&lt; T_ &gt; &amp;b)</field>
    <field name="url">group__Util.html#ga9487dd0217e32c5e76aeb783cde52bbf</field>
    <field name="keywords">operator* OFELI::operator* OFELI</field>
    <field name="text">Operator Operator Return point b premultiplied by constant a Rachid Touzani GNU Lesser Public License Operator Return point b premultiplied by constant a Rachid Touzani GNU Lesser Public License Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::saveVTK</field>
    <field name="args">(Mesh &amp;mesh, string input_file, string output_file, int f=1)</field>
    <field name="url">group__Util.html#ga948dbe46928eafeb6f27608fd8a11bac</field>
    <field name="keywords">saveVTK OFELI::saveVTK OFELI</field>
    <field name="text">Save a vector to an output VTK file Save a vector to an output VTK file The Visualization ToolKit VTK is an open source freely available software system for 3 D computer graphics Available information can be found in the site mesh Reference to Mesh instance input_file Input file OFELI XML file containing a field output_file Output file VTK format file f Field is stored each f time step Default 1 Rachid Touzani GNU Lesser Public License Save a vector to an output VTK file The Visualization ToolKit VTK is an open source freely available software system for 3 D computer graphics Available information can be found in the site mesh Reference to Mesh instance input_file Input file OFELI XML file containing a field output_file Output file VTK format file f Field is stored each f time step Default 1 Rachid Touzani GNU Lesser Public License Save a vector to an output VTK file</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::getEasymesh</field>
    <field name="args">(string file, Mesh &amp;mesh, size_t nb_dof=1)</field>
    <field name="url">group__Util.html#ga9521258cd402bc03434680840008d0ba</field>
    <field name="keywords">getEasymesh OFELI::getEasymesh OFELI</field>
    <field name="text">Construct an instance of class Mesh from a mesh file stored in Easymesh format Construct an instance of class Mesh from a mesh file stored in Easymesh format file Name of a file without extension written in Easymesh format Actually the function Easymesh2MDF attempts to read mesh data from files file.e file.n and file.s produced by Easymesh Easymesh is a free program that generates 2 D unstructured Delaunay and constrained Delaunay triangulations in general domains It can be downloaded from the site mesh Mesh instance created by the function nb_dof Number of degrees of freedom for each node This information is not provided in general by mesh generators Its default value here is 1 Rachid Touzani GNU Lesser Public License Construct an instance of class Mesh from a mesh file stored in Easymesh format</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Assign</field>
    <field name="args">(vector&lt; T_ &gt; &amp;v, const T_ &amp;a)</field>
    <field name="url">group__Util.html#ga95c3924a3fe4285f2cb621e078972ffb</field>
    <field name="keywords">Assign OFELI::Assign OFELI</field>
    <field name="text">Assign the value a to all entries of a vector v Assign the value a to all entries of a vector v Assign the value a to all entries of a vector v</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Min</field>
    <field name="args">(real_t a, real_t b, real_t c, real_t d)</field>
    <field name="url">group__Util.html#ga961bd36d732f9a145e892013ec2c835e</field>
    <field name="keywords">Min OFELI::Min OFELI</field>
    <field name="text">Return minimum value of real numbers a b c and d Return minimum value of real numbers a b c and d Return minimum value of real numbers a b c and d Return minimum value of real numbers a b c and d</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::out_complex</field>
    <field name="args">(real_t x, real_t y)</field>
    <field name="url">group__Util.html#ga964634dadc51c4019d409e308c1e29cd</field>
    <field name="keywords">out_complex OFELI::out_complex OFELI</field>
    <field name="text">Return string to conviently display a complex number Return string to conviently display a complex number x Real part y Imaginary part Return string to conviently display a complex number x Real part y Imaginary part Return string to conviently display a complex number</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Nrm2</field>
    <field name="args">(const vector&lt; real_t &gt; &amp;x)</field>
    <field name="url">group__Util.html#ga9718ed2d01f3bab8f8ede281b487b926</field>
    <field name="keywords">Nrm2 OFELI::Nrm2 OFELI</field>
    <field name="text">Return 2 norm of vector x Return 2 norm of vector x Return 2 norm of vector x Return 2 norm of vector x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator-</field>
    <field name="args">(const Point2D&lt; T_ &gt; &amp;a, const Point2D&lt; T_ &gt; &amp;b)</field>
    <field name="url">group__Util.html#ga9b27ec5896102b032284516ecc5f0c20</field>
    <field name="keywords">operator- OFELI::operator- OFELI</field>
    <field name="text">Operator Operator Return point a minus point b Rachid Touzani GNU Lesser Public License Operator Return point a minus point b Rachid Touzani GNU Lesser Public License Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::saveTecplot</field>
    <field name="args">(Mesh &amp;mesh, string input_file, string output_file, int f=1)</field>
    <field name="url">group__Util.html#ga9ca0d2f0adcf5bca42ad8c75beec6edd</field>
    <field name="keywords">saveTecplot OFELI::saveTecplot OFELI</field>
    <field name="text">Save a vector to an output file to an input Tecplot file Save a vector to an output file to an input Tecplot file Tecplot is high quality post graphical commercial processing program developed by Amtec Available information can be found in the site mesh Reference to Mesh instance input_file Input file OFELI XML file containing a field output_file Output file gnuplot format file f Field is stored each f time step Default 1 Rachid Touzani GNU Lesser Public License Save a vector to an output file to an input Tecplot file Tecplot is high quality post graphical commercial processing program developed by Amtec Available information can be found in the site mesh Reference to Mesh instance input_file Input file OFELI XML file containing a field output_file Output file gnuplot format file f Field is stored each f time step Default 1 Rachid Touzani GNU Lesser Public License Save a vector to an output file to an input Tecplot file</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Sgn</field>
    <field name="args">(real_t a)</field>
    <field name="url">group__Util.html#ga9cea09d745dfd5da9d06a67fdea3bafb</field>
    <field name="keywords">Sgn OFELI::Sgn OFELI</field>
    <field name="text">Return sign of a 1 or 1 Return sign of a 1 or 1 Return sign of a 1 or 1</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">CATCH_EXCEPTION</field>
    <field name="url">group__Util.html#ga9ed8a2986962bb8b00ad9d33d25a4858</field>
    <field name="keywords">CATCH_EXCEPTION</field>
    <field name="text">OFELIException e std::cout e what endl runtime_error e std::cout e what endl std::cout endl This macro can be inserted after a try loop to catch a thrown exception</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">OFELI_THIRD</field>
    <field name="url">group__Util.html#gaa009da974a8bb52a638c4b85b2f124f9</field>
    <field name="keywords">OFELI_THIRD</field>
    <field name="text">Value of 1 with 2 8 digits</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::RErrorMax</field>
    <field name="args">(const vector&lt; real_t &gt; &amp;x, const vector&lt; real_t &gt; &amp;y)</field>
    <field name="url">group__Util.html#gaa28405c60ab4ae7cc1405b3fa3240659</field>
    <field name="keywords">RErrorMax OFELI::RErrorMax OFELI</field>
    <field name="text">Return relative Max error between vectors x and y Return relative Max error between vectors x and y Return relative Max error between vectors x and y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::saveVTK</field>
    <field name="args">(const string &amp;file, const Mesh &amp;mesh)</field>
    <field name="url">group__Util.html#gaa493ea0fe59c8bbac65b3e12897ad6ba</field>
    <field name="keywords">saveVTK OFELI::saveVTK OFELI</field>
    <field name="text">This function outputs a Mesh instance in a file in VTK format This function outputs a Mesh instance in a file in VTK format The Visualization ToolKit VTK is an open source freely available software system for 3 D computer graphics Available information can be found in the site file Output file in VTK format mesh Mesh instance to save Rachid Touzani GNU Lesser Public License This function outputs a Mesh instance in a file in VTK format The Visualization ToolKit VTK is an open source freely available software system for 3 D computer graphics Available information can be found in the site file Output file in VTK format mesh Mesh instance to save Rachid Touzani GNU Lesser Public License This function outputs a Mesh instance in a file in VTK format</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator/</field>
    <field name="args">(const Point&lt; T_ &gt; &amp;b, const T_ &amp;a)</field>
    <field name="url">group__Util.html#gaa64aee4644015713524bb9ea0caf8759</field>
    <field name="keywords">operator/ OFELI::operator/ OFELI</field>
    <field name="text">Operator Operator Return point b divided by constant a Rachid Touzani GNU Lesser Public License Operator Return point b divided by constant a Rachid Touzani GNU Lesser Public License Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::BSpline</field>
    <field name="args">(size_t n, size_t t, Vect&lt; Point&lt; real_t &gt; &gt; &amp;control, Vect&lt; Point&lt; real_t &gt; &gt; &amp;output, size_t num_output)</field>
    <field name="url">group__Util.html#gaa8476a1f0fa096e5c289ae6ccdc459d3</field>
    <field name="keywords">BSpline OFELI::BSpline OFELI</field>
    <field name="text">Function to perform a B-spline interpolation Function to perform a B-spline interpolation This program is adapted from a free program ditributed by Keith Vertanen in 1 9 9 4 n Number of control points minus 1 t Degree of the polynomial plus 1 control Control point array made up of Point stucture output Vector in which the calculated spline points are to be put num_output How many points on the spline are to be calculated Condition n+2 t No curve results if n+2 t Control vector contains the number of points specified by n Output array is the proper size to hold num_output point structures Rachid Touzani GNU Lesser Public License Function to perform a B-spline interpolation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::RError2</field>
    <field name="args">(const vector&lt; real_t &gt; &amp;x, const vector&lt; real_t &gt; &amp;y)</field>
    <field name="url">group__Util.html#gaa8b3a360fc31a64f13a136795868f14f</field>
    <field name="keywords">RError2 OFELI::RError2 OFELI</field>
    <field name="text">Return absolute L 2 error between vectors x and y Return absolute L 2 error between vectors x and y Return absolute L 2 error between vectors x and y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator-</field>
    <field name="args">(const Point&lt; T_ &gt; &amp;a, const T_ &amp;x)</field>
    <field name="url">group__Util.html#gaa982fd221d6004c44510ae4ab262729e</field>
    <field name="keywords">operator- OFELI::operator- OFELI</field>
    <field name="text">Operator Operator Translate a by x Rachid Touzani GNU Lesser Public License Operator Translate a by x Rachid Touzani GNU Lesser Public License Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SqrDistance</field>
    <field name="args">(const SpaceTime &amp;a, const SpaceTime &amp;b)</field>
    <field name="url">group__Util.html#gaabf0ce90ce590741fcb973a249197b5c</field>
    <field name="keywords">SqrDistance OFELI::SqrDistance OFELI</field>
    <field name="text">Return squared euclidean distance between points a and b Return squared euclidean distance between points a and b Rachid Touzani GNU Lesser Public License Return squared euclidean distance between points a and b Rachid Touzani GNU Lesser Public License Return squared euclidean distance between points a and b</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::saveField</field>
    <field name="args">(const Vect&lt; real_t &gt; &amp;v, const Mesh &amp;mesh, string output_file, int opt)</field>
    <field name="url">group__Util.html#gaac3a2ea38893ab4a0074c65b8e012c82</field>
    <field name="keywords">saveField OFELI::saveField OFELI</field>
    <field name="text">Save a vector to an output file in a given file format Save a vector to an output file in a given file format Case where the vector does not contain mesh information v Vect instance to save mesh Mesh instance output_file Output file where to save the vector opt Option to choose file format to save This is to be chosen among enumerated values GMSH GNUPLOT MATLAB TECPLOT VTK Rachid Touzani GNU Lesser Public License Save a vector to an output file in a given file format Case where the vector does not contain mesh information v Vect instance to save mesh Mesh instance output_file Output file where to save the vector opt Option to choose file format to save This is to be chosen among enumerated values GMSH GNUPLOT MATLAB TECPLOT VTK Rachid Touzani GNU Lesser Public License Save a vector to an output file in a given file format</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator*</field>
    <field name="args">(const Point2D&lt; T_ &gt; &amp;b, const int &amp;a)</field>
    <field name="url">group__Util.html#gaae7bb3d125783b6613ab34bcc123a8b0</field>
    <field name="keywords">operator* OFELI::operator* OFELI</field>
    <field name="text">Operator Operator Return point b postmultiplied by constant a Rachid Touzani GNU Lesser Public License Operator Return point b postmultiplied by constant a Rachid Touzani GNU Lesser Public License Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator*</field>
    <field name="args">(const Point&lt; T_ &gt; &amp;b, const T_ &amp;a)</field>
    <field name="url">group__Util.html#gab05ce756e0e473cd7a36bfe324dbb18b</field>
    <field name="keywords">operator* OFELI::operator* OFELI</field>
    <field name="text">Operator Operator Return point b multiplied by constant a Operator Return point b multiplied by constant a Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator==</field>
    <field name="args">(const Point2D&lt; T_ &gt; &amp;a, const Point2D&lt; T_ &gt; &amp;b)</field>
    <field name="url">group__Util.html#gab1396ce3d22c336e66da25ce5bf95e51</field>
    <field name="keywords">operator== OFELI::operator== OFELI</field>
    <field name="text">Operator Operator Return true if a b false if not Rachid Touzani GNU Lesser Public License Operator Return true if a b false if not Rachid Touzani GNU Lesser Public License Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Scale</field>
    <field name="args">(T_ a, const vector&lt; T_ &gt; &amp;x, vector&lt; T_ &gt; &amp;y)</field>
    <field name="url">group__Util.html#gab1612da30bd970a11338b2f644944270</field>
    <field name="keywords">Scale OFELI::Scale OFELI</field>
    <field name="text">Mutiply vector x by a and save result in vector y Mutiply vector x by a and save result in vector y x and y are instances of class vector&lt;T_&gt; Mutiply vector x by a and save result in vector y x and y are instances of class vector&lt;T_&gt; Mutiply vector x by a and save result in vector y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator==</field>
    <field name="args">(const Point&lt; T_ &gt; &amp;a, const Point&lt; T_ &gt; &amp;b)</field>
    <field name="url">group__Util.html#gab334355b2809c4cce395850150ca2f73</field>
    <field name="keywords">operator== OFELI::operator== OFELI</field>
    <field name="text">Operator Operator Return true if a b false if not Rachid Touzani GNU Lesser Public License Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Xpy</field>
    <field name="args">(size_t n, T_ *x, T_ *y)</field>
    <field name="url">group__Util.html#gab46294f1be0ab914be80f99f966af836</field>
    <field name="keywords">Xpy OFELI::Xpy OFELI</field>
    <field name="text">Add array x to y Add array x to y Add array x to y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Distance</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;a, const Point&lt; real_t &gt; &amp;b)</field>
    <field name="url">group__Util.html#gab481c7689fc34a38313ea03afe0a0057</field>
    <field name="keywords">Distance OFELI::Distance OFELI</field>
    <field name="text">Return euclidean distance between points a and b Return euclidean distance between points a and b Rachid Touzani GNU Lesser Public License Return euclidean distance between points a and b</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Xpy</field>
    <field name="args">(const vector&lt; T_ &gt; &amp;x, vector&lt; T_ &gt; &amp;y)</field>
    <field name="url">group__Util.html#gab528044d8a2a238bda1c54dee9e0b2b6</field>
    <field name="keywords">Xpy OFELI::Xpy OFELI</field>
    <field name="text">Add vector x to y Add vector x to y x and y are instances of class vector&lt;T_&gt; Add vector x to y x and y are instances of class vector&lt;T_&gt; Add vector x to y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Abs</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;p)</field>
    <field name="url">group__Util.html#gab826b7c64138601293cd22b7cb126c84</field>
    <field name="keywords">Abs OFELI::Abs OFELI</field>
    <field name="text">Return norm of vector a Return norm of vector a Return norm of vector a Return norm of vector a</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(std::ostream &amp;s, const Point&lt; T_ &gt; &amp;a)</field>
    <field name="url">group__Util.html#gaba59ffe5b23a7661e41c705930558f26</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output point coordinates Output point coordinates Rachid Touzani GNU Lesser Public License Output point coordinates Rachid Touzani GNU Lesser Public License Output point coordinates</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::saveGmsh</field>
    <field name="args">(string input_file, string output_file, string mesh_file, int f=1)</field>
    <field name="url">group__Util.html#gabb26146b574bb931fbe04c8ed01f1fc5</field>
    <field name="keywords">saveGmsh OFELI::saveGmsh OFELI</field>
    <field name="text">Save a vector to an output Gmsh file Save a vector to an output Gmsh file Gmsh is a free mesh generator and postprocessor that can be downloaded from the site input_file Input file OFELI XML file containing a field output_file Output file Gmsh format file mesh_file File containing mesh data f Field is stored each f time step Default 1 Rachid Touzani GNU Lesser Public License Save a vector to an output Gmsh file</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">OFELI_GAUSS2</field>
    <field name="url">group__Util.html#gabb6c8d19592d61d30e1afaea6b08e461</field>
    <field name="keywords">OFELI_GAUSS2</field>
    <field name="text">Value of 1 3 with 3 2 digits</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Min</field>
    <field name="args">(real_t a, real_t b, real_t c)</field>
    <field name="url">group__Util.html#gabba700bd4adb73e09290b38e7e942fda</field>
    <field name="keywords">Min OFELI::Min OFELI</field>
    <field name="text">Return minimum value of real numbers a b and c Return minimum value of real numbers a b and c Return minimum value of real numbers a b and c Return minimum value of real numbers a b and c</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">OFELI_IMAG</field>
    <field name="url">group__Util.html#gabc62695fed9872c4959b89dd05367568</field>
    <field name="keywords">OFELI_IMAG</field>
    <field name="text">Unit imaginary number i</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::getMatlab</field>
    <field name="args">(string file, Mesh &amp;mesh, size_t nb_dof=1)</field>
    <field name="url">group__Util.html#gabcca38541b1a04e2356905cb681e5503</field>
    <field name="keywords">getMatlab OFELI::getMatlab OFELI</field>
    <field name="text">Construct an instance of class Mesh from a Matlab mesh data Construct an instance of class Mesh from a Matlab mesh data Matlab is a language of scientific computing including visualization It is developed by MathWorks Available information can be found in the site file Name of a file created by Matlab by executing the script file Matlab2OFELI.m mesh Mesh instance created by the function nb_dof Number of degrees of freedom for each node This information is not provided in general by mesh generators Its default value here is 1 Rachid Touzani GNU Lesser Public License Construct an instance of class Mesh from a Matlab mesh data</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Dot</field>
    <field name="args">(const vector&lt; real_t &gt; &amp;x, const vector&lt; real_t &gt; &amp;y)</field>
    <field name="url">group__Util.html#gabf958d091d1d938bb714e296b0895237</field>
    <field name="keywords">Dot OFELI::Dot OFELI</field>
    <field name="text">Return dot product of vectors x and y Return dot product of vectors x and y x and y are instances of class vector&lt;double&gt; Return dot product of vectors x and y x and y are instances of class vector&lt;double&gt; Return dot product of vectors x and y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Discrepancy</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;x, const Vect&lt; real_t &gt; &amp;y, int n, int type=1)</field>
    <field name="url">group__Util.html#gac04603e34a1bc5b8a632041df151b6cb</field>
    <field name="keywords">Discrepancy OFELI::Discrepancy OFELI</field>
    <field name="text">Return discrepancy between 2 vectors x and y x First vector Instance of class Vect On output x is assigned the vector y y Second vector Instance of class Vect n Type of norm 1 Weighted 1 Norm 2 Weighted 2 Norm 0 Max-Norm type Discrepancy type 0 Absolute 1 Relative Default Computed discrepancy value Return discrepancy between 2 vectors x and y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::getGambit</field>
    <field name="args">(string file, Mesh &amp;mesh, size_t nb_dof=1)</field>
    <field name="url">group__Util.html#gac102ffb2560ac2199889a61d9e0fc199</field>
    <field name="keywords">getGambit OFELI::getGambit OFELI</field>
    <field name="text">Construct an instance of class Mesh from a mesh file stored in Gambit neutral format Construct an instance of class Mesh from a mesh file stored in Gambit neutral format Gambit is a commercial mesh generator associated to the CFD code Fluent Informations about Gambit can be found in the site file Name of a file written in the Gambit neutral format mesh Mesh instance created by the function nb_dof Number of degrees of freedom for each node This information is not provided in general by mesh generators Its default value here is 1 Rachid Touzani GNU Lesser Public License Construct an instance of class Mesh from a mesh file stored in Gambit neutral format</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SqrDistance</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;a, const Point&lt; real_t &gt; &amp;b)</field>
    <field name="url">group__Util.html#gac16aefa7baaded1b711c9b1502efd87f</field>
    <field name="keywords">SqrDistance OFELI::SqrDistance OFELI</field>
    <field name="text">Return squared euclidean distance between points a and b Return squared euclidean distance between points a and b Rachid Touzani GNU Lesser Public License Return squared euclidean distance between points a and b</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Max</field>
    <field name="args">(real_t a, real_t b, real_t c)</field>
    <field name="url">group__Util.html#gac2ff7fd69a14f64439f7824c8ae863c1</field>
    <field name="keywords">Max OFELI::Max OFELI</field>
    <field name="text">Return maximum value of real numbers a b and c Return maximum value of real numbers a b and c Return maximum value of real numbers a b and c</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::saveMesh</field>
    <field name="args">(const string &amp;file, const Mesh &amp;mesh, ExternalFileFormat form)</field>
    <field name="url">group__Util.html#gac5360ac2fb798dbf75867f577fabf584</field>
    <field name="keywords">saveMesh OFELI::saveMesh OFELI</field>
    <field name="text">This function saves mesh data a file for a given external format This function saves mesh data a file for a given external format file File where to store mesh mesh Mesh instance to save form Format of the mesh file This one can be chosen among the enumerated values GMSH Mesh generator and graphical postprocessor Gmsh GNUPLOT Well known graphics software MATLAB Matlab file TECPLOT Commercial graphics software VTK Graphics format for the free postprocessor ParaView Rachid Touzani GNU Lesser Public License This function saves mesh data a file for a given external format</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator+</field>
    <field name="args">(const SpaceTime &amp;a, const real_t &amp;x)</field>
    <field name="url">group__Util.html#gac5d128d6c29e2c90eef4fc35ec4b5c4a</field>
    <field name="keywords">operator+ OFELI::operator+ OFELI</field>
    <field name="text">Operator Operator Translate a by x Rachid Touzani GNU Lesser Public License Operator Translate a by x Rachid Touzani GNU Lesser Public License Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Scale</field>
    <field name="args">(T_ a, vector&lt; T_ &gt; &amp;x)</field>
    <field name="url">group__Util.html#gac5fe0746c6ea3e261528f8277ce0d5fa</field>
    <field name="keywords">Scale OFELI::Scale OFELI</field>
    <field name="text">Mutiply vector x by a Mutiply vector x by a x is an instance of class vector&lt;T_&gt; Mutiply vector x by a x is an instance of class vector&lt;T_&gt; Mutiply vector x by a</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator*</field>
    <field name="args">(const SpaceTime &amp;b, const int &amp;a)</field>
    <field name="url">group__Util.html#gac72f782172a3c402978646fe102241b1</field>
    <field name="keywords">operator* OFELI::operator* OFELI</field>
    <field name="text">Operator Operator Return point b postmultiplied by constant a Rachid Touzani GNU Lesser Public License Operator Return point b postmultiplied by constant a Rachid Touzani GNU Lesser Public License Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator*</field>
    <field name="args">(const Point2D&lt; T_ &gt; &amp;b, const Point2D&lt; T_ &gt; &amp;a)</field>
    <field name="url">group__Util.html#gac7c12a1594b3b151010885b77da571a5</field>
    <field name="keywords">operator* OFELI::operator* OFELI</field>
    <field name="text">Operator Operator Return point b postmultiplied by integer constant a Rachid Touzani GNU Lesser Public License Operator Return point b postmultiplied by integer constant a Rachid Touzani GNU Lesser Public License Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Conjg</field>
    <field name="args">(complex_t a)</field>
    <field name="url">group__Util.html#gac9f3134776987b68e52815c39e4587be</field>
    <field name="keywords">Conjg OFELI::Conjg OFELI</field>
    <field name="text">Return complex conjugate of complex number a Return complex conjugate of complex number a Return complex conjugate of complex number a Return complex conjugate of complex number a</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator*</field>
    <field name="args">(const int &amp;a, const Point2D&lt; T_ &gt; &amp;b)</field>
    <field name="url">group__Util.html#gacafe9eacc77a656733dbe844271e762f</field>
    <field name="keywords">operator* OFELI::operator* OFELI</field>
    <field name="text">Operator Return point b divided by integer constant a Rachid Touzani GNU Lesser Public License Operator Return point b divided by integer constant a Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Min</field>
    <field name="args">(const T_ &amp;a, const T_ &amp;b)</field>
    <field name="url">group__Util.html#gacdedb66eae003989d80fbb4ec3d942ba</field>
    <field name="keywords">Min OFELI::Min OFELI</field>
    <field name="text">Return minimum value of elements a and b Return minimum value of elements a and b Return minimum value of elements a and b</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator+</field>
    <field name="args">(const Point&lt; T_ &gt; &amp;a, const Point&lt; T_ &gt; &amp;b)</field>
    <field name="url">group__Util.html#gace92b07689adff31f8942f4df8de6170</field>
    <field name="keywords">operator+ OFELI::operator+ OFELI</field>
    <field name="text">Operator Operator Return sum of two points a and b Rachid Touzani GNU Lesser Public License Operator Return sum of two points a and b Rachid Touzani GNU Lesser Public License Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator-</field>
    <field name="args">(const Point2D&lt; T_ &gt; &amp;a)</field>
    <field name="url">group__Util.html#gacf5ae2727348dd6a359792667bc95303</field>
    <field name="keywords">operator- OFELI::operator- OFELI</field>
    <field name="text">Unary Operator Unary Operator Return minus a Rachid Touzani GNU Lesser Public License Unary Operator Return minus a Rachid Touzani GNU Lesser Public License Unary Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator*</field>
    <field name="args">(const int &amp;a, const Point&lt; T_ &gt; &amp;b)</field>
    <field name="url">group__Util.html#gadc7b1b71eb13b1240a62d57321b05ede</field>
    <field name="keywords">operator* OFELI::operator* OFELI</field>
    <field name="text">Operator Operator Return point b divided by integer constant a Rachid Touzani GNU Lesser Public License Operator Return point b divided by integer constant a Rachid Touzani GNU Lesser Public License Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const complex_t &amp;x)</field>
    <field name="url">group__Util.html#gae1155d1e92496b3a0d7e1fbfa37b6b3d</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output a complex number Output a complex number Rachid Touzani GNU Lesser Public License Output a complex number Rachid Touzani GNU Lesser Public License Output a complex number</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;</field>
    <field name="args">(const Point&lt; size_t &gt; &amp;a, const Point&lt; size_t &gt; &amp;b)</field>
    <field name="url">group__Util.html#gae1f5fe43c2340a7fb9e7ce273c2879db</field>
    <field name="keywords">operator&lt; OFELI::operator&lt; OFELI</field>
    <field name="text">Comparison operator Returns true if all components of first vector are lower than those of second one Comparison operator Returns true if all components of first vector are lower than those of second one Return minus a Rachid Touzani GNU Lesser Public License Comparison operator Returns true if all components of first vector are lower than those of second one</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::itoc</field>
    <field name="args">(int i)</field>
    <field name="url">group__Util.html#gae58d6e30612ceca75cbf08e56ec103bc</field>
    <field name="keywords">itoc OFELI::itoc OFELI</field>
    <field name="text">Function to convert an integer to a character Function to convert an integer to a character Function to convert an integer to a character</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator+</field>
    <field name="args">(const Point2D&lt; T_ &gt; &amp;a, const T_ &amp;x)</field>
    <field name="url">group__Util.html#gae92de71619ddcb9f4cc77bb7cf8ccc50</field>
    <field name="keywords">operator+ OFELI::operator+ OFELI</field>
    <field name="text">Operator Operator Translate a by x Rachid Touzani GNU Lesser Public License Operator Translate a by x Rachid Touzani GNU Lesser Public License Operator</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::toString</field>
    <field name="args">(const T_ x)</field>
    <field name="url">group__Util.html#gaec8971db41b1d3da34d0836800aeb02c</field>
    <field name="keywords">toString OFELI::toString OFELI</field>
    <field name="text">Function to convert any value to a string Function to convert any value to a string Function to convert any value to a string</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::getTriangle</field>
    <field name="args">(string file, Mesh &amp;mesh, size_t nb_dof=1)</field>
    <field name="url">group__Util.html#gaed4d9f94c771f6448c1b787429a9e9af</field>
    <field name="keywords">getTriangle OFELI::getTriangle OFELI</field>
    <field name="text">Construct an instance of class Mesh from a mesh file stored in Triangle format Construct an instance of class Mesh from a mesh file stored in Triangle format TRIANGLE is a C program that can generate meshes Delaunay triangulations and Voronoi diagrams for 2 D pointsets that can be downloaded in the site file Name of a file written in the Tetgen format mesh Mesh instance created by the function nb_dof Number of degrees of freedom for each node This information is not provided in general by mesh generators Its default value here is 1 Rachid Touzani GNU Lesser Public License Construct an instance of class Mesh from a mesh file stored in Triangle format</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Min</field>
    <field name="args">(int a, int b, int c, int d)</field>
    <field name="url">group__Util.html#gaeddf4f977caf32a9f7ec438162144bfe</field>
    <field name="keywords">Min OFELI::Min OFELI</field>
    <field name="text">Return minimum value of integer numbers a b c and d Return minimum value of integer numbers a b c and d Return minimum value of integer numbers a b c and d Return minimum value of integer numbers a b c and d</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::saveVTK</field>
    <field name="args">(string input_file, string output_file, string mesh_file, int f=1)</field>
    <field name="url">group__Util.html#gaf137513b259b00549f20a1415675e9f6</field>
    <field name="keywords">saveVTK OFELI::saveVTK OFELI</field>
    <field name="text">Save a vector to an output VTK file Save a vector to an output VTK file The Visualization ToolKit VTK is an open source freely available software system for 3 D computer graphics Available information can be found in the site input_file Input file OFELI XML file containing a field output_file Output file VTK format file mesh_file File containing mesh data f Field is stored each f time step Default 1 Rachid Touzani GNU Lesser Public License Save a vector to an output VTK file</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Min</field>
    <field name="args">(int a, int b, int c)</field>
    <field name="url">group__Util.html#gaf19dd808250d4b4933dca2b6bce26109</field>
    <field name="keywords">Min OFELI::Min OFELI</field>
    <field name="text">Return minimum value of integer numbers a b and c Return minimum value of integer numbers a b and c Return minimum value of integer numbers a b and c Return minimum value of integer numbers a b and c</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(std::ostream &amp;s, const Point2D&lt; T_ &gt; &amp;a)</field>
    <field name="url">group__Util.html#gaf8b0bdf9b36caa8f787962c6894b4033</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output point coordinates Output point coordinates Rachid Touzani GNU Lesser Public License Output point coordinates Rachid Touzani GNU Lesser Public License Output point coordinates</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Max</field>
    <field name="args">(const T_ &amp;a, const T_ &amp;b)</field>
    <field name="url">group__Util.html#gaf9593d7c3fb3ede50368c8c49b9116c6</field>
    <field name="keywords">Max OFELI::Max OFELI</field>
    <field name="text">Return maximum value of elements a and b Return maximum value of elements a and b Return maximum value of elements a and b Return maximum value of elements a and b</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Scale</field>
    <field name="args">(T_ a, const Vect&lt; T_ &gt; &amp;x, Vect&lt; T_ &gt; &amp;y)</field>
    <field name="url">group__Util.html#gaf971d6eba6564906ce1d92b33ae03f92</field>
    <field name="keywords">Scale OFELI::Scale OFELI</field>
    <field name="text">Mutiply vector x by a and save result in vector y Mutiply vector x by a and save result in vector y x and y are instances of class Vect&lt;T_&gt; Mutiply vector x by a and save result in vector y x and y are instances of class Vect&lt;T_&gt; Mutiply vector x by a and save result in vector y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::saveField</field>
    <field name="args">(Vect&lt; real_t &gt; &amp;v, string output_file, int opt)</field>
    <field name="url">group__Util.html#gaf976ac43ad838a605531989a2f0956a7</field>
    <field name="keywords">saveField OFELI::saveField OFELI</field>
    <field name="text">Save a vector to an output file in a given file format Save a vector to an output file in a given file format Case where the vector contains mesh information v Vect instance to save output_file Output file where to save the vector opt Option to choose file format to save This is to be chosen among enumerated values GMSH GNUPLOT MATLAB TECPLOT VTK Rachid Touzani GNU Lesser Public License Save a vector to an output file in a given file format</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::qksort</field>
    <field name="args">(std::vector&lt; T_ &gt; &amp;a, int begin, int end, C_ compare)</field>
    <field name="url">group__Util.html#gafc523446bc621715dbbddcc05e1c3471</field>
    <field name="keywords">qksort OFELI::qksort OFELI</field>
    <field name="text">Function to sort a vector according to a key function Function to sort a vector according to a key function qksort uses the famous quick sorting algorithm a Vector to sort begin index of starting index 0 for the beginning of the vector end index of ending index compare A function object that implements the ordering The user must provide this function that returns a boolean function that is true if the first argument is less than the second and false if not Rachid Touzani GNU Lesser Public License Function to sort a vector according to a key function qksort uses the famous quick sorting algorithm a Vector to sort begin index of starting index 0 for the beginning of the vector end index of ending index compare A function object that implements the ordering The user must provide this function that returns a boolean function that is true if the first argument is less than the second and false if not Rachid Touzani GNU Lesser Public License Function to sort a vector according to a key function</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Nrm2</field>
    <field name="args">(const Point&lt; T_ &gt; &amp;a)</field>
    <field name="url">group__Util.html#gafd87dda93e983bbfe420c5ee09c16fcd</field>
    <field name="keywords">Nrm2 OFELI::Nrm2 OFELI</field>
    <field name="text">Return 2 norm of a Return 2 norm of a Return 2 norm of a Return 2 norm of a</field>
  </doc>
  <doc>
    <field name="type">define</field>
    <field name="name">OFELI_TOLERANCE</field>
    <field name="url">group__Util.html#gafdb762bd8a6d2684026764bf68a48bd5</field>
    <field name="keywords">OFELI_TOLERANCE</field>
    <field name="text">Default tolerance for an iterative process OFELI_EPSMCH 1 0 0 0 0</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Dot</field>
    <field name="args">(size_t n, T_ *x, T_ *y)</field>
    <field name="url">group__Util.html#gaff20c7be52ccebbff0d5b38deef26cba</field>
    <field name="keywords">Dot OFELI::Dot OFELI</field>
    <field name="text">Return dot product of arrays x and y Return dot product of arrays x and y n is the arrays size Return dot product of arrays x and y n is the arrays size Return dot product of arrays x and y</field>
  </doc>
  <doc>
    <field name="type">group</field>
    <field name="name">VectMat</field>
    <field name="url">group__VectMat.html</field>
    <field name="keywords">Vector and Matrix</field>
    <field name="text">Vector and matrix classes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator*</field>
    <field name="args">(const LocalMatrix&lt; T_, NR_, NC_ &gt; &amp;A, const LocalVect&lt; T_, NC_ &gt; &amp;x)</field>
    <field name="url">group__VectMat.html#ga084de8aa3489a9c1ce4dce709e98cad6</field>
    <field name="keywords">operator* OFELI::operator* OFELI</field>
    <field name="text">Operator Multiply matrix A by vector x Operator Multiply matrix A by vector x This function performs a matrix-vector product and returns resulting vector as a reference to LocalVect instance A*x Operator Multiply matrix A by vector x This function performs a matrix-vector product and returns resulting vector as a reference to LocalVect instance A*x Operator Multiply matrix A by vector x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&gt;&gt;</field>
    <field name="args">(istream &amp;s, Vect&lt; T_ &gt; &amp;v)</field>
    <field name="url">group__VectMat.html#ga08a0782b32f51ea4450832c727c9527e</field>
    <field name="keywords">operator&gt;&gt; OFELI::operator&gt;&gt; OFELI</field>
    <field name="text">Read vector from input stream</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator*</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;x, const T_ &amp;a)</field>
    <field name="url">group__VectMat.html#ga127c6f972e65e11d89609d0180d2c548</field>
    <field name="keywords">operator* OFELI::operator* OFELI</field>
    <field name="text">Operator Postmultiplication of vector by constant x*a Operator Postmultiplication of vector by constant x*a Operator Postmultiplication of vector by constant</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Axpy</field>
    <field name="args">(T_ a, const LocalVect&lt; T_, N_ &gt; &amp;x, LocalVect&lt; T_, N_ &gt; &amp;y)</field>
    <field name="url">group__VectMat.html#ga19a8d405362e1652850543257e6600b6</field>
    <field name="keywords">Axpy OFELI::Axpy OFELI</field>
    <field name="text">Add a*x to vector y Add a*x to vector y Add a*x to vector y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator*</field>
    <field name="args">(const SpMatrix&lt; T_ &gt; &amp;A, const Vect&lt; T_ &gt; &amp;b)</field>
    <field name="url">group__VectMat.html#ga1b449ad0ff199290abe764a3fcef0eeb</field>
    <field name="keywords">operator* OFELI::operator* OFELI</field>
    <field name="text">Operator Multiply vector by matrix and return resulting vector Operator Multiply vector by matrix and return resulting vector A SpMatrix instance to multiply by vector b Vect instance Vect instance containing A*b Rachid Touzani GNU Lesser Public License Operator Multiply vector by matrix and return resulting vector A SpMatrix instance to multiply by vector b Vect instance Vect instance containing A*b Rachid Touzani GNU Lesser Public License Operator Multiply vector by matrix and return resulting vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const SpMatrix&lt; T_ &gt; &amp;A)</field>
    <field name="url">group__VectMat.html#ga1d20996cf55e733064d4e40f013e0fcf</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output matrix in output stream Output matrix in output stream Rachid Touzani GNU Lesser Public License Output matrix in output stream Rachid Touzani GNU Lesser Public License Output matrix in output stream</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const LocalMatrix&lt; T_, NR_, NC_ &gt; &amp;A)</field>
    <field name="url">group__VectMat.html#ga240aafc28edb676b2c621519166a3a12</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output vector in output stream Output vector in output stream Output vector in output stream Output vector in output stream</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator*</field>
    <field name="args">(T_ a, const BMatrix&lt; T_ &gt; &amp;A)</field>
    <field name="url">group__VectMat.html#ga27c0b04d7b5c1fc615d74274f1a86193</field>
    <field name="keywords">operator* OFELI::operator* OFELI</field>
    <field name="text">Operator Premultiplication of matrix by constant Operator Premultiplication of matrix by constant a*A Operator Premultiplication of matrix by constant a*A Operator Premultiplication of matrix by constant</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator+</field>
    <field name="args">(const LocalVect&lt; T_, N_ &gt; &amp;x, const LocalVect&lt; T_, N_ &gt; &amp;y)</field>
    <field name="url">group__VectMat.html#ga36244e6a8d762a4115b2e2e9dacf0194</field>
    <field name="keywords">operator+ OFELI::operator+ OFELI</field>
    <field name="text">Operator Add two vectors Operator Add two vectors x+y Operator Add two vectors x+y Operator Add two vectors</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const DSMatrix&lt; T_ &gt; &amp;a)</field>
    <field name="url">group__VectMat.html#ga36fd3bbcd0ba4beadc546b56e0ef3606</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output matrix in output stream Output matrix in output stream Output matrix in output stream Output matrix in output stream</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator/</field>
    <field name="args">(T_ a, const LocalMatrix&lt; T_, NR_, NC_ &gt; &amp;x)</field>
    <field name="url">group__VectMat.html#ga3f575256ac26166df4f48374946e03bd</field>
    <field name="keywords">operator/ OFELI::operator/ OFELI</field>
    <field name="text">Operator Divide matrix x by scalar a Operator Divide matrix x by scalar a x/a Operator Divide matrix x by scalar a</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator-</field>
    <field name="args">(const LocalVect&lt; T_, N_ &gt; &amp;x, const LocalVect&lt; T_, N_ &gt; &amp;y)</field>
    <field name="url">group__VectMat.html#ga4a55c1765023630121f459c154fe4fc8</field>
    <field name="keywords">operator- OFELI::operator- OFELI</field>
    <field name="text">Operator Subtract two vectors Operator Subtract two vectors x-y Operator Subtract two vectors x-y Operator Subtract two vectors</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator*</field>
    <field name="args">(const BMatrix&lt; T_ &gt; &amp;A, const Vect&lt; T_ &gt; &amp;b)</field>
    <field name="url">group__VectMat.html#ga50122213347a9bf85a2f6425080b7af1</field>
    <field name="keywords">operator* OFELI::operator* OFELI</field>
    <field name="text">Operator Multiply vector by matrix and return resulting vector Operator Multiply vector by matrix and return resulting vector A BMatrix instance to multiply by vector b Vect instance Vect instance containing A*b Operator Multiply vector by matrix and return resulting vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator*</field>
    <field name="args">(const vector&lt; real_t &gt; &amp;x, const vector&lt; real_t &gt; &amp;y)</field>
    <field name="url">group__VectMat.html#ga508256a0288378ff639133d284e2c23c</field>
    <field name="keywords">operator* OFELI::operator* OFELI</field>
    <field name="text">Operator Dot product of 2 vector instances Operator Dot product of 2 vector instances x.y Operator Dot product of 2 vector instances x.y Operator Dot product of 2 vector instances</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator*</field>
    <field name="args">(const DMatrix&lt; T_ &gt; &amp;A, const Vect&lt; T_ &gt; &amp;b)</field>
    <field name="url">group__VectMat.html#ga5adae9eb674e130026049ce91c0e0593</field>
    <field name="keywords">operator* OFELI::operator* OFELI</field>
    <field name="text">Operator Multiply vector by matrix and return resulting vector Operator Multiply vector by matrix and return resulting vector A DMatrix instance to multiply by vector b Vect instance Vect instance containing A*b Operator Multiply vector by matrix and return resulting vector A DMatrix instance to multiply by vector b Vect instance Vect instance containing A*b Operator Multiply vector by matrix and return resulting vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator/</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;x, const T_ &amp;a)</field>
    <field name="url">group__VectMat.html#ga648e28ab23c2ade853ca47937074d30b</field>
    <field name="keywords">operator/ OFELI::operator/ OFELI</field>
    <field name="text">Operator Divide vector entries by constant x/a Operator Divide vector entries by constant x/a Operator Divide vector entries by constant</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const BMatrix&lt; T_ &gt; &amp;a)</field>
    <field name="url">group__VectMat.html#ga6c62c07a2af795151ce9c41d64d7a73b</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output matrix in output stream Output matrix in output stream Output matrix in output stream Output matrix in output stream</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const LocalVect&lt; T_, N_ &gt; &amp;v)</field>
    <field name="url">group__VectMat.html#ga6fed371a1bbbbf641737fdbbfbe30ab8</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output vector in output stream Output vector in output stream Output vector in output stream Output vector in output stream</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator*</field>
    <field name="args">(const SkSMatrix&lt; T_ &gt; &amp;A, const Vect&lt; T_ &gt; &amp;b)</field>
    <field name="url">group__VectMat.html#ga7a72a5ad503fbcdd03a321908b3f864e</field>
    <field name="keywords">operator* OFELI::operator* OFELI</field>
    <field name="text">Operator Multiply vector by matrix and return resulting vector Operator Multiply vector by matrix and return resulting vector A SkSMatrix instance to multiply by vector b Vect instance Vect instance containing A*b Rachid Touzani GNU Lesser Public License Operator Multiply vector by matrix and return resulting vector A SkSMatrix instance to multiply by vector b Vect instance Vect instance containing A*b Rachid Touzani GNU Lesser Public License Operator Multiply vector by matrix and return resulting vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator+</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;x, const Vect&lt; T_ &gt; &amp;y)</field>
    <field name="url">group__VectMat.html#ga7bc4b7a626777423adf380fea1e55850</field>
    <field name="keywords">operator+ OFELI::operator+ OFELI</field>
    <field name="text">Operator Addition of two instances of class Vect x y Operator Addition of two instances of class Vect x y Operator Addition of two instances of class Vect</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Dot</field>
    <field name="args">(const LocalVect&lt; T_, N_ &gt; &amp;a, const LocalVect&lt; T_, N_ &gt; &amp;b)</field>
    <field name="url">group__VectMat.html#ga7cbb5d9cdcb292a3cdaf2faff201cbf7</field>
    <field name="keywords">Dot OFELI::Dot OFELI</field>
    <field name="text">Calculate dot product of 2 vectors instances of class LocalVect Calculate dot product of 2 vectors instances of class LocalVect Dot product Calculate dot product of 2 vectors instances of class LocalVect</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const SkMatrix&lt; T_ &gt; &amp;a)</field>
    <field name="url">group__VectMat.html#ga820edecb3c44fd43367b9b6981559b29</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output matrix in output stream Output matrix in output stream Rachid Touzani GNU Lesser Public License Rachid Touzani GNU Lesser Public License Output matrix in output stream Rachid Touzani GNU Lesser Public License Rachid Touzani GNU Lesser Public License Output matrix in output stream</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator+</field>
    <field name="args">(const LocalMatrix&lt; T_, NR_, NC_ &gt; &amp;x, const LocalMatrix&lt; T_, NR_, NC_ &gt; &amp;y)</field>
    <field name="url">group__VectMat.html#ga8a68d416faa4433b188ce5a2b05c22f9</field>
    <field name="keywords">operator+ OFELI::operator+ OFELI</field>
    <field name="text">Operator Add matrix x to y Operator Add matrix x to y x+y Operator Add matrix x to y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Scale</field>
    <field name="args">(T_ a, const LocalVect&lt; T_, N_ &gt; &amp;x, LocalVect&lt; T_, N_ &gt; &amp;y)</field>
    <field name="url">group__VectMat.html#ga8d63ccd7e0ab106b06a4d6c57f0840f4</field>
    <field name="keywords">Scale OFELI::Scale OFELI</field>
    <field name="text">Multiply vector x by constant a and store result in y Multiply vector x by constant a and store result in y Multiply vector x by constant a and store result in y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator*</field>
    <field name="args">(const DSMatrix&lt; T_ &gt; &amp;A, const Vect&lt; T_ &gt; &amp;b)</field>
    <field name="url">group__VectMat.html#ga92884cc05520b129e70a1dcaa6eabfda</field>
    <field name="keywords">operator* OFELI::operator* OFELI</field>
    <field name="text">Operator Multiply vector by matrix and return resulting vector Operator Multiply vector by matrix and return resulting vector A DSMatrix instance to multiply by vector b Vect instance Vect instance containing A*b Operator Multiply vector by matrix and return resulting vector A DSMatrix instance to multiply by vector b Vect instance Vect instance containing A*b Operator Multiply vector by matrix and return resulting vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator*</field>
    <field name="args">(T_ a, const TrMatrix&lt; T_ &gt; &amp;A)</field>
    <field name="url">group__VectMat.html#ga93dc215996d477ddb47147805f78034a</field>
    <field name="keywords">operator* OFELI::operator* OFELI</field>
    <field name="text">Operator Premultiplication of matrix by constant Operator Premultiplication of matrix by constant a*A Rachid Touzani GNU Lesser Public License Operator Premultiplication of matrix by constant a*A Rachid Touzani GNU Lesser Public License Operator Premultiplication of matrix by constant</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator*</field>
    <field name="args">(const SkMatrix&lt; T_ &gt; &amp;A, const Vect&lt; T_ &gt; &amp;b)</field>
    <field name="url">group__VectMat.html#ga9ba0483fad00bb733f9aa869c69c928b</field>
    <field name="keywords">operator* OFELI::operator* OFELI</field>
    <field name="text">Operator Multiply vector by matrix and return resulting vector Operator Multiply vector by matrix and return resulting vector A SkMatrix instance to multiply by vector b Vect instance Vect instance containing A*b Rachid Touzani GNU Lesser Public License Operator Multiply vector by matrix and return resulting vector A SkMatrix instance to multiply by vector b Vect instance Vect instance containing A*b Rachid Touzani GNU Lesser Public License Operator Multiply vector by matrix and return resulting vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Copy</field>
    <field name="args">(const LocalVect&lt; T_, N_ &gt; &amp;x, LocalVect&lt; T_, N_ &gt; &amp;y)</field>
    <field name="url">group__VectMat.html#ga9c31f50fbe5c6d9744af53d7be3cc8fe</field>
    <field name="keywords">Copy OFELI::Copy OFELI</field>
    <field name="text">Copy vector x into vector y Copy vector x into vector y Copy vector x into vector y</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const TrMatrix&lt; T_ &gt; &amp;A)</field>
    <field name="url">group__VectMat.html#ga9d2c1a99f02603c3017c26fcf30bc704</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output matrix in output stream Output matrix in output stream Rachid Touzani GNU Lesser Public License Output matrix in output stream Rachid Touzani GNU Lesser Public License Output matrix in output stream</field>
  </doc>
  <doc>
    <field name="type">friend</field>
    <field name="name">OFELI::SpMatrix::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const SpMatrix&lt; TT_ &gt; &amp;A)</field>
    <field name="url">group__VectMat.html#gaa73f6bb9d73f883c039843bf8a4dd9c1</field>
    <field name="keywords">operator&lt;&lt; OFELI::SpMatrix::operator&lt;&lt; SpMatrix&lt; T_ &gt; operator&lt;&lt; OFELI::SpMatrix&lt; real_t &gt;::operator&lt;&lt; SpMatrix&lt; real_t &gt;</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Imag</field>
    <field name="args">(const Vect&lt; complex_t &gt; &amp;x, Vect&lt; real_t &gt; &amp;y)</field>
    <field name="url">group__VectMat.html#gabb5a303608d0555a2dd2446eb4894716</field>
    <field name="keywords">Imag OFELI::Imag OFELI</field>
    <field name="text">Calculate imaginary part of complex vector x Vector with complex value entries y Vector containing imaginary parts of entries of x Calculate imaginary part of complex vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Modulus</field>
    <field name="args">(const Vect&lt; complex_t &gt; &amp;x, Vect&lt; real_t &gt; &amp;y)</field>
    <field name="url">group__VectMat.html#gac1eb3ae315102610a26910707bd86d83</field>
    <field name="keywords">Modulus OFELI::Modulus OFELI</field>
    <field name="text">Calculate modulus of complex vector x Vector with complex value entries y Vector containing moduli of entries of x Calculate modulus of complex vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const DMatrix&lt; T_ &gt; &amp;a)</field>
    <field name="url">group__VectMat.html#gac652825feef82b2171376c2c1c9c0a47</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output matrix in output stream Output matrix in output stream Output matrix in output stream Output matrix in output stream</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const SkSMatrix&lt; T_ &gt; &amp;a)</field>
    <field name="url">group__VectMat.html#gac7e0300740234538a3e11d3564a0debf</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output matrix in output stream Output matrix in output stream Rachid Touzani GNU Lesser Public License Output matrix in output stream Rachid Touzani GNU Lesser Public License Output matrix in output stream</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator/</field>
    <field name="args">(T_ a, const LocalVect&lt; T_, N_ &gt; &amp;x)</field>
    <field name="url">group__VectMat.html#gac885dafce75b4320b0e23fb7f6e06261</field>
    <field name="keywords">operator/ OFELI::operator/ OFELI</field>
    <field name="text">Operator Division of vector by constant Operator Division of vector by constant x/a Operator Division of vector by constant x/a Operator Division of vector by constant</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator*</field>
    <field name="args">(T_ a, const LocalVect&lt; T_, N_ &gt; &amp;x)</field>
    <field name="url">group__VectMat.html#gacbbe20ea10614b174ae8e9796a451262</field>
    <field name="keywords">operator* OFELI::operator* OFELI</field>
    <field name="text">Operator Premultiplication of vector by constant Operator Premultiplication of vector by constant a*x Operator Premultiplication of vector by constant a*x Operator Premultiplication of vector by constant</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Real</field>
    <field name="args">(const Vect&lt; complex_t &gt; &amp;x, Vect&lt; real_t &gt; &amp;y)</field>
    <field name="url">group__VectMat.html#gacbfa8f87f2f5cd8c799f4e3045e6a0f6</field>
    <field name="keywords">Real OFELI::Real OFELI</field>
    <field name="text">Calculate real part of complex vector x Vector with complex value entries y Vector containing real parts of entries of x Calculate real part of complex vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator*</field>
    <field name="args">(const T_ &amp;a, const Vect&lt; T_ &gt; &amp;x)</field>
    <field name="url">group__VectMat.html#gacbfdab5136305a77a764ff9a37e9e74a</field>
    <field name="keywords">operator* OFELI::operator* OFELI</field>
    <field name="text">Operator Premultiplication of vector by constant a*x Operator Premultiplication of vector by constant a*x Operator Premultiplication of vector by constant</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator-</field>
    <field name="args">(const LocalMatrix&lt; T_, NR_, NC_ &gt; &amp;x, const LocalMatrix&lt; T_, NR_, NC_ &gt; &amp;y)</field>
    <field name="url">group__VectMat.html#gacc54bf1f984a8907fe824b6f824861f2</field>
    <field name="keywords">operator- OFELI::operator- OFELI</field>
    <field name="text">Operator Subtract matrix y from x Operator Subtract matrix y from x x-y Operator Subtract matrix y from x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Dot</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;x, const Vect&lt; T_ &gt; &amp;y)</field>
    <field name="url">group__VectMat.html#gadfa3e7cc1abdd004ed294ce30d3600f6</field>
    <field name="keywords">Dot OFELI::Dot OFELI</field>
    <field name="text">Calculate dot product of two vectors Dot inner or scalar product Calculate dot scalar product of two vectors Calculate dot product of two vectors Dot inner or scalar product Calculate dot scalar product of two vectors Calculate dot product of two vectors</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator*</field>
    <field name="args">(const TrMatrix&lt; T_ &gt; &amp;A, const Vect&lt; T_ &gt; &amp;b)</field>
    <field name="url">group__VectMat.html#gae2251a5544159d9616b5f55542df0896</field>
    <field name="keywords">operator* OFELI::operator* OFELI</field>
    <field name="text">Operator Multiply vector by matrix and return resulting vector Operator Multiply vector by matrix and return resulting vector A TrMatrix instance to multiply by vector b Vect instance Vect instance containing A*b Rachid Touzani GNU Lesser Public License Operator Multiply vector by matrix and return resulting vector A TrMatrix instance to multiply by vector b Vect instance Vect instance containing A*b Rachid Touzani GNU Lesser Public License Operator Multiply vector by matrix and return resulting vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator&lt;&lt;</field>
    <field name="args">(ostream &amp;s, const Vect&lt; T_ &gt; &amp;v)</field>
    <field name="url">group__VectMat.html#gae6382bd7c2a01d42459f1eadc95b9c3d</field>
    <field name="keywords">operator&lt;&lt; OFELI::operator&lt;&lt; OFELI</field>
    <field name="text">Output vector in output stream Level of vector output depends on the global variable Verbosity If Verbosity 0 this function outputs vector size only If Verbosity 0 this function outputs vector size vector name value of time and number of components If Verbosity 1 this function outputs in addition the first 1 0 entries in vector If Verbosity 2 this function outputs in addition the first 5 0 entries in vector If Verbosity 3 this function outputs in addition the first 1 0 0 entries in vector If Verbosity 4 this function outputs all vector entries Rachid Touzani GNU Lesser Public License Output vector in output stream Level of vector output depends on the global variable Verbosity If Verbosity 0 this function outputs vector size only If Verbosity 0 this function outputs vector size vector name value of time and number of components If Verbosity 1 this function outputs in addition the first 1 0 entries in vector If Verbosity 2 this function outputs in addition the first 5 0 entries in vector If Verbosity 3 this function outputs in addition the first 1 0 0 entries in vector If Verbosity 4 this function outputs all vector entries Rachid Touzani GNU Lesser Public License Output vector in output stream</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Scale</field>
    <field name="args">(T_ a, LocalVect&lt; T_, N_ &gt; &amp;x)</field>
    <field name="url">group__VectMat.html#gae761e0628003346efe609e8cf6f6cc8d</field>
    <field name="keywords">Scale OFELI::Scale OFELI</field>
    <field name="text">Multiply vector x by constant a and store result in x Multiply vector x by constant a and store result in x Multiply vector x by constant a and store result in x Multiply vector x by constant a and store result in x</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator*</field>
    <field name="args">(T_ a, const LocalMatrix&lt; T_, NR_, NC_ &gt; &amp;x)</field>
    <field name="url">group__VectMat.html#gae8edb4e3262a7b2e3b2d535719462871</field>
    <field name="keywords">operator* OFELI::operator* OFELI</field>
    <field name="text">Operator Multiply matrix x by scalar a Operator Multiply matrix x by scalar a a*x Operator Multiply matrix x by scalar a a*x Operator Multiply matrix x by scalar a</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::operator-</field>
    <field name="args">(const Vect&lt; T_ &gt; &amp;x, const Vect&lt; T_ &gt; &amp;y)</field>
    <field name="url">group__VectMat.html#gaf78966ddda7686c2268bf1cd8f63bc5a</field>
    <field name="keywords">operator- OFELI::operator- OFELI</field>
    <field name="text">Operator Difference between two vectors of class Vect x y Operator Difference between two vectors of class Vect x y Operator Difference between two vectors of class Vect</field>
  </doc>
  <doc>
    <field name="type">namespace</field>
    <field name="name">OFELI</field>
    <field name="url">namespaceOFELI.html</field>
    <field name="keywords">OFELI</field>
    <field name="text">A namespace to group all library classes functions Namespace OFELI groups all OFELI library classes functions and global variables</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">OFELI::NormType</field>
    <field name="url">namespaceOFELI.html#ad4bb8dabdbf8ad75e34220cc666b59ca</field>
    <field name="keywords">NormType OFELI::NormType OFELI</field>
    <field name="text">Choose type of vector norm to compute</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::NORM1</field>
    <field name="url">namespaceOFELI.html#ad4bb8dabdbf8ad75e34220cc666b59caa0fe773bdf4cdbb94dc2622997b736d50</field>
    <field name="keywords">NORM1 OFELI::NORM1 OFELI NORM1 OFELI::NORM1 OFELI</field>
    <field name="text">1 norm</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::NORM2</field>
    <field name="url">namespaceOFELI.html#ad4bb8dabdbf8ad75e34220cc666b59caa51b1c45b92b9057915da5c2366182ef0</field>
    <field name="keywords">NORM2 OFELI::NORM2 OFELI NORM2 OFELI::NORM2 OFELI</field>
    <field name="text">2 norm</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::WNORM1</field>
    <field name="url">namespaceOFELI.html#ad4bb8dabdbf8ad75e34220cc666b59caa96ddade5b1b865cd2f7f8a1c94e56c3d</field>
    <field name="keywords">WNORM1 OFELI::WNORM1 OFELI WNORM1 OFELI::WNORM1 OFELI</field>
    <field name="text">Weighted 1 norm Discrete L1-Norm</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::NORM_MAX</field>
    <field name="url">namespaceOFELI.html#ad4bb8dabdbf8ad75e34220cc666b59caac76980114e6ef692d209332f25898345</field>
    <field name="keywords">NORM_MAX OFELI::NORM_MAX OFELI NORM_MAX OFELI::NORM_MAX OFELI</field>
    <field name="text">Max-norm Infinity norm</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">OFELI::WNORM2</field>
    <field name="url">namespaceOFELI.html#ad4bb8dabdbf8ad75e34220cc666b59caacb56a81b6b9b07d58d4c043496434e0d</field>
    <field name="keywords">WNORM2 OFELI::WNORM2 OFELI WNORM2 OFELI::WNORM2 OFELI</field>
    <field name="text">Weighted 2 norm Discrete L2-Norm</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">output.h</field>
    <field name="url">output_8h.html</field>
    <field name="keywords">output.h</field>
    <field name="text">File that contains some output utility functions</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">qksort.h</field>
    <field name="url">qksort_8h.html</field>
    <field name="keywords">qksort.h</field>
    <field name="text">File that contains template quick sorting function</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">saveField.h</field>
    <field name="url">saveField_8h.html</field>
    <field name="keywords">saveField.h</field>
    <field name="text">Prototypes for functions to save mesh in various file formats</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">saveMesh.h</field>
    <field name="url">saveMesh_8h.html</field>
    <field name="keywords">saveMesh.h</field>
    <field name="text">Prototypes for functions to save mesh in various file formats</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Point</field>
    <field name="url">structOFELI_1_1Point.html</field>
    <field name="keywords">Point Point&lt; int &gt; Point&lt; real_t &gt; Point&lt; size_t &gt;</field>
    <field name="text">Defines a point with arbitrary type coordinates Operators and are overloaded T_ Data type double float complex&lt;double&gt; Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point::operator,</field>
    <field name="args">(const Point&lt; T_ &gt; &amp;p) const</field>
    <field name="url">structOFELI_1_1Point.html#a048c37255db04ef77791be88aea10180</field>
    <field name="keywords">operator, OFELI::Point::operator, Point&lt; T_ &gt; operator, OFELI::Point&lt; real_t &gt;::operator, Point&lt; real_t &gt; operator, OFELI::Point&lt; size_t &gt;::operator, Point&lt; size_t &gt; operator, OFELI::Point&lt; int &gt;::operator, Point&lt; int &gt;</field>
    <field name="text">Return Dot scalar product of two vectors A typical use of this operator is double a p q where p and q are 2 instances of Point&lt;double&gt; p Point instance by which the current instance is multiplied</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point::Point</field>
    <field name="args">(T_ a, T_ b)</field>
    <field name="url">structOFELI_1_1Point.html#a04b5110a71aa5b6898df9685db07b05f</field>
    <field name="keywords">Point OFELI::Point::Point Point&lt; T_ &gt; Point OFELI::Point&lt; real_t &gt;::Point Point&lt; real_t &gt; Point OFELI::Point&lt; size_t &gt;::Point Point&lt; size_t &gt; Point OFELI::Point&lt; int &gt;::Point Point&lt; int &gt;</field>
    <field name="text">Constructor that assigns a and b to first and second coordinates respectively</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point::operator[]</field>
    <field name="args">(size_t i)</field>
    <field name="url">structOFELI_1_1Point.html#a1527071fae7fa1cabc15f3b17e256c16</field>
    <field name="keywords">operator[] OFELI::Point::operator[] Point&lt; T_ &gt; operator[] OFELI::Point&lt; real_t &gt;::operator[] Point&lt; real_t &gt; operator[] OFELI::Point&lt; size_t &gt;::operator[] Point&lt; size_t &gt; operator[] OFELI::Point&lt; int &gt;::operator[] Point&lt; int &gt;</field>
    <field name="text">Operator Non constant version Values i 0 1 2 correspond to x y and z respectively</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point::Point</field>
    <field name="args">(T_ a, T_ b, T_ c)</field>
    <field name="url">structOFELI_1_1Point.html#a262428068397a4fc4dd5e2114aa6f934</field>
    <field name="keywords">Point OFELI::Point::Point Point&lt; T_ &gt; Point OFELI::Point&lt; real_t &gt;::Point Point&lt; real_t &gt; Point OFELI::Point&lt; size_t &gt;::Point Point&lt; size_t &gt; Point OFELI::Point&lt; int &gt;::Point Point&lt; int &gt;</field>
    <field name="text">Constructor that assigns a b and c to first second and third coordinates respectively</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point::Point</field>
    <field name="args">(T_ a)</field>
    <field name="url">structOFELI_1_1Point.html#a285884bad11d65cafbaf29b7a45f34a7</field>
    <field name="keywords">Point OFELI::Point::Point Point&lt; T_ &gt; Point OFELI::Point&lt; real_t &gt;::Point Point&lt; real_t &gt; Point OFELI::Point&lt; size_t &gt;::Point Point&lt; size_t &gt; Point OFELI::Point&lt; int &gt;::Point Point&lt; int &gt;</field>
    <field name="text">Constructor that assigns a to first coordinate</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point::operator-=</field>
    <field name="args">(const Point&lt; T_ &gt; &amp;p)</field>
    <field name="url">structOFELI_1_1Point.html#a2e82e2b46e194164059079b85155ec99</field>
    <field name="keywords">operator-= OFELI::Point::operator-= Point&lt; T_ &gt; operator-= OFELI::Point&lt; real_t &gt;::operator-= Point&lt; real_t &gt; operator-= OFELI::Point&lt; size_t &gt;::operator-= Point&lt; size_t &gt; operator-= OFELI::Point&lt; int &gt;::operator-= Point&lt; int &gt;</field>
    <field name="text">Operator Subtract point p from current instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point::operator=</field>
    <field name="args">(const T_ &amp;a)</field>
    <field name="url">structOFELI_1_1Point.html#a367f7960cf87ba5082f23661af8dca61</field>
    <field name="keywords">operator= OFELI::Point::operator= Point&lt; T_ &gt; operator= OFELI::Point&lt; real_t &gt;::operator= Point&lt; real_t &gt; operator= OFELI::Point&lt; size_t &gt;::operator= Point&lt; size_t &gt; operator= OFELI::Point&lt; int &gt;::operator= Point&lt; int &gt;</field>
    <field name="text">Operator Assign constant a to current instance coordinates</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point::operator+=</field>
    <field name="args">(const T_ &amp;a)</field>
    <field name="url">structOFELI_1_1Point.html#a377b9cea6e38965257b8d5d11aee4501</field>
    <field name="keywords">operator+= OFELI::Point::operator+= Point&lt; T_ &gt; operator+= OFELI::Point&lt; real_t &gt;::operator+= Point&lt; real_t &gt; operator+= OFELI::Point&lt; size_t &gt;::operator+= Point&lt; size_t &gt; operator+= OFELI::Point&lt; int &gt;::operator+= Point&lt; int &gt;</field>
    <field name="text">Operator Add constant a to current instance coordinates</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">OFELI::Point::x</field>
    <field name="url">structOFELI_1_1Point.html#a4333b1040efe8cd32f7c76bfc2269e0d</field>
    <field name="keywords">x OFELI::Point::x Point&lt; T_ &gt; x OFELI::Point&lt; real_t &gt;::x Point&lt; real_t &gt; x OFELI::Point&lt; size_t &gt;::x Point&lt; size_t &gt; x OFELI::Point&lt; int &gt;::x Point&lt; int &gt;</field>
    <field name="text">Point coordinates</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point::Point</field>
    <field name="args">(const Point&lt; T_ &gt; &amp;p)</field>
    <field name="url">structOFELI_1_1Point.html#a45c9461a79a79f8d1b8048153bcb1690</field>
    <field name="keywords">Point OFELI::Point::Point Point&lt; T_ &gt; Point OFELI::Point&lt; real_t &gt;::Point Point&lt; real_t &gt; Point OFELI::Point&lt; size_t &gt;::Point Point&lt; size_t &gt; Point OFELI::Point&lt; int &gt;::Point Point&lt; int &gt;</field>
    <field name="text">Copy constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point::Norm</field>
    <field name="args">() const</field>
    <field name="url">structOFELI_1_1Point.html#a471500ba016dcd9a5c4664b21f7db080</field>
    <field name="keywords">Norm OFELI::Point::Norm Point&lt; T_ &gt; Norm OFELI::Point&lt; real_t &gt;::Norm Point&lt; real_t &gt; Norm OFELI::Point&lt; size_t &gt;::Norm Point&lt; size_t &gt; Norm OFELI::Point&lt; int &gt;::Norm Point&lt; int &gt;</field>
    <field name="text">Return norm length of vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point::operator()</field>
    <field name="args">(size_t i) const</field>
    <field name="url">structOFELI_1_1Point.html#a4c803ac5c9a58584fcc3b3f20b98a126</field>
    <field name="keywords">operator() OFELI::Point::operator() Point&lt; T_ &gt; operator() OFELI::Point&lt; real_t &gt;::operator() Point&lt; real_t &gt; operator() OFELI::Point&lt; size_t &gt;::operator() Point&lt; size_t &gt; operator() OFELI::Point&lt; int &gt;::operator() Point&lt; int &gt;</field>
    <field name="text">Operator Constant version Values i 1 2 3 correspond to x y and z respectively</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point::operator()</field>
    <field name="args">(size_t i)</field>
    <field name="url">structOFELI_1_1Point.html#a521ccbffbfc8f6ceabb86a09da68f864</field>
    <field name="keywords">operator() OFELI::Point::operator() Point&lt; T_ &gt; operator() OFELI::Point&lt; real_t &gt;::operator() Point&lt; real_t &gt; operator() OFELI::Point&lt; size_t &gt;::operator() Point&lt; size_t &gt; operator() OFELI::Point&lt; int &gt;::operator() Point&lt; int &gt;</field>
    <field name="text">Operator Non constant version Values i 1 2 3 correspond to x y and z respectively</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point::Director</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;p) const</field>
    <field name="url">structOFELI_1_1Point.html#a68442d4f5b53982d7eb5ec6786390493</field>
    <field name="keywords">Director OFELI::Point::Director Point&lt; T_ &gt; Director OFELI::Point&lt; real_t &gt;::Director Point&lt; real_t &gt; Director OFELI::Point&lt; size_t &gt;::Director Point&lt; size_t &gt; Director OFELI::Point&lt; int &gt;::Director Point&lt; int &gt;</field>
    <field name="text">Return Director Normalized vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point::operator==</field>
    <field name="args">(const Point&lt; T_ &gt; &amp;p)</field>
    <field name="url">structOFELI_1_1Point.html#a6bfbffd75a16c4341412f1de1e1212e8</field>
    <field name="keywords">operator== OFELI::Point::operator== Point&lt; T_ &gt; operator== OFELI::Point&lt; real_t &gt;::operator== Point&lt; real_t &gt; operator== OFELI::Point&lt; size_t &gt;::operator== Point&lt; size_t &gt; operator== OFELI::Point&lt; int &gt;::operator== Point&lt; int &gt;</field>
    <field name="text">Operator Return true if current instance is equal to p false otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point::operator*=</field>
    <field name="args">(const T_ &amp;a)</field>
    <field name="url">structOFELI_1_1Point.html#a71034b2228d3aa7c47c57f9d618a8c62</field>
    <field name="keywords">operator*= OFELI::Point::operator*= Point&lt; T_ &gt; operator*= OFELI::Point&lt; real_t &gt;::operator*= Point&lt; real_t &gt; operator*= OFELI::Point&lt; size_t &gt;::operator*= Point&lt; size_t &gt; operator*= OFELI::Point&lt; int &gt;::operator*= Point&lt; int &gt;</field>
    <field name="text">Operator Multiply constant a by current instance coordinates</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point::NNorm</field>
    <field name="args">() const</field>
    <field name="url">structOFELI_1_1Point.html#a8263af708590a9caae427a5282b0b9f6</field>
    <field name="keywords">NNorm OFELI::Point::NNorm Point&lt; T_ &gt; NNorm OFELI::Point&lt; real_t &gt;::NNorm Point&lt; real_t &gt; NNorm OFELI::Point&lt; size_t &gt;::NNorm Point&lt; size_t &gt; NNorm OFELI::Point&lt; int &gt;::NNorm Point&lt; int &gt;</field>
    <field name="text">Return squared euclidean norm of vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point::operator+=</field>
    <field name="args">(const Point&lt; T_ &gt; &amp;p)</field>
    <field name="url">structOFELI_1_1Point.html#a992b5870c6926b4d641acc713aeae038</field>
    <field name="keywords">operator+= OFELI::Point::operator+= Point&lt; T_ &gt; operator+= OFELI::Point&lt; real_t &gt;::operator+= Point&lt; real_t &gt; operator+= OFELI::Point&lt; size_t &gt;::operator+= Point&lt; size_t &gt; operator+= OFELI::Point&lt; int &gt;::operator+= Point&lt; int &gt;</field>
    <field name="text">Operator Add point p to current instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point::operator-=</field>
    <field name="args">(const T_ &amp;a)</field>
    <field name="url">structOFELI_1_1Point.html#a9ab81b77b1c91503f6662060dbda4969</field>
    <field name="keywords">operator-= OFELI::Point::operator-= Point&lt; T_ &gt; operator-= OFELI::Point&lt; real_t &gt;::operator-= Point&lt; real_t &gt; operator-= OFELI::Point&lt; size_t &gt;::operator-= Point&lt; size_t &gt; operator-= OFELI::Point&lt; int &gt;::operator-= Point&lt; int &gt;</field>
    <field name="text">Operator Subtract constant a from current instance coordinates</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point::operator!=</field>
    <field name="args">(const Point&lt; T_ &gt; &amp;p)</field>
    <field name="url">structOFELI_1_1Point.html#aa358b827f5cbde84892c00944feecddc</field>
    <field name="keywords">operator!= OFELI::Point::operator!= Point&lt; T_ &gt; operator!= OFELI::Point&lt; real_t &gt;::operator!= Point&lt; real_t &gt; operator!= OFELI::Point&lt; size_t &gt;::operator!= Point&lt; size_t &gt; operator!= OFELI::Point&lt; int &gt;::operator!= Point&lt; int &gt;</field>
    <field name="text">Operator Return false if current instance is equal to p true otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point::isCloseTo</field>
    <field name="args">(const Point&lt; real_t &gt; &amp;a, real_t toler=OFELI_TOLERANCE) const</field>
    <field name="url">structOFELI_1_1Point.html#aadfb6f988b54d139519153f072ff39d8</field>
    <field name="keywords">isCloseTo OFELI::Point::isCloseTo Point&lt; T_ &gt; isCloseTo OFELI::Point&lt; real_t &gt;::isCloseTo Point&lt; real_t &gt; isCloseTo OFELI::Point&lt; size_t &gt;::isCloseTo Point&lt; size_t &gt; isCloseTo OFELI::Point&lt; int &gt;::isCloseTo Point&lt; int &gt;</field>
    <field name="text">Return true if current point is close to instance a up to tolerance toler Default value for toler is the OFELI_TOLERANCE constant</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point::operator/=</field>
    <field name="args">(const T_ &amp;a)</field>
    <field name="url">structOFELI_1_1Point.html#ac447802b1626e907d5bcb48251b9683e</field>
    <field name="keywords">operator/= OFELI::Point::operator/= Point&lt; T_ &gt; operator/= OFELI::Point&lt; real_t &gt;::operator/= Point&lt; real_t &gt; operator/= OFELI::Point&lt; size_t &gt;::operator/= Point&lt; size_t &gt; operator/= OFELI::Point&lt; int &gt;::operator/= Point&lt; int &gt;</field>
    <field name="text">Operator Divide current instance coordinates by a</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point::Point</field>
    <field name="args">()</field>
    <field name="url">structOFELI_1_1Point.html#ae08c5f0c5b4c75a3e0f33dada5f2fcba</field>
    <field name="keywords">Point OFELI::Point::Point Point&lt; T_ &gt; Point OFELI::Point&lt; real_t &gt;::Point Point&lt; real_t &gt; Point OFELI::Point&lt; size_t &gt;::Point Point&lt; size_t &gt; Point OFELI::Point&lt; int &gt;::Point Point&lt; int &gt;</field>
    <field name="text">Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point::Normalize</field>
    <field name="args">()</field>
    <field name="url">structOFELI_1_1Point.html#af279e0f0ff720ee54d6733674dfda50a</field>
    <field name="keywords">Normalize OFELI::Point::Normalize Point&lt; T_ &gt; Normalize OFELI::Point&lt; real_t &gt;::Normalize Point&lt; real_t &gt; Normalize OFELI::Point&lt; size_t &gt;::Normalize Point&lt; size_t &gt; Normalize OFELI::Point&lt; int &gt;::Normalize Point&lt; int &gt;</field>
    <field name="text">Normalize vector Divide vector components by its 2 norm</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point::operator[]</field>
    <field name="args">(size_t i) const</field>
    <field name="url">structOFELI_1_1Point.html#af31a0b730772ebb128e3ca20ee860a05</field>
    <field name="keywords">operator[] OFELI::Point::operator[] Point&lt; T_ &gt; operator[] OFELI::Point&lt; real_t &gt;::operator[] Point&lt; real_t &gt; operator[] OFELI::Point&lt; size_t &gt;::operator[] Point&lt; size_t &gt; operator[] OFELI::Point&lt; int &gt;::operator[] Point&lt; int &gt;</field>
    <field name="text">Operator Constant version Values i 0 1 2 correspond to x y and z respectively</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::Point2D</field>
    <field name="url">structOFELI_1_1Point2D.html</field>
    <field name="keywords">Point2D</field>
    <field name="text">Defines a 2 D point with arbitrary type coordinates Operators and are overloaded The actual T_ Data type double float complex&lt;double&gt; Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point2D::Point2D</field>
    <field name="args">(const Point2D&lt; T_ &gt; &amp;pt)</field>
    <field name="url">structOFELI_1_1Point2D.html#a11c6958d52919d7934215496d906d7b7</field>
    <field name="keywords">Point2D OFELI::Point2D::Point2D Point2D&lt; T_ &gt;</field>
    <field name="text">Copy constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point2D::operator[]</field>
    <field name="args">(size_t i)</field>
    <field name="url">structOFELI_1_1Point2D.html#a1527071fae7fa1cabc15f3b17e256c16</field>
    <field name="keywords">operator[] OFELI::Point2D::operator[] Point2D&lt; T_ &gt;</field>
    <field name="text">Operator Non constant version Values i 0 1 correspond to x and y respectively</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point2D::operator-=</field>
    <field name="args">(const T_ &amp;a)</field>
    <field name="url">structOFELI_1_1Point2D.html#a17b7ecb4032da52b21024b002da6ad08</field>
    <field name="keywords">operator-= OFELI::Point2D::operator-= Point2D&lt; T_ &gt;</field>
    <field name="text">Operator Subtract constant a from current instance coordinates</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point2D::operator-=</field>
    <field name="args">(const Point2D&lt; T_ &gt; &amp;p)</field>
    <field name="url">structOFELI_1_1Point2D.html#a1c3b039763005210df87f182bbc4f925</field>
    <field name="keywords">operator-= OFELI::Point2D::operator-= Point2D&lt; T_ &gt;</field>
    <field name="text">Operator Subtract point p from current instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point2D::operator=</field>
    <field name="args">(const Point2D&lt; T_ &gt; &amp;p)</field>
    <field name="url">structOFELI_1_1Point2D.html#a21298f80eceb6b6af0e531409630244b</field>
    <field name="keywords">operator= OFELI::Point2D::operator= Point2D&lt; T_ &gt;</field>
    <field name="text">Operator Assign point p to current instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point2D::operator==</field>
    <field name="args">(const Point2D&lt; T_ &gt; &amp;p)</field>
    <field name="url">structOFELI_1_1Point2D.html#a2c038c8b549218a489ba5b0141825aca</field>
    <field name="keywords">operator== OFELI::Point2D::operator== Point2D&lt; T_ &gt;</field>
    <field name="text">Operator Return true if current instance is equal to p false otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point2D::isCloseTo</field>
    <field name="args">(const Point2D&lt; real_t &gt; &amp;a, real_t toler=OFELI_TOLERANCE) const</field>
    <field name="url">structOFELI_1_1Point2D.html#a2ef1a08e7b52b8998408900a972befb4</field>
    <field name="keywords">isCloseTo OFELI::Point2D::isCloseTo Point2D&lt; T_ &gt;</field>
    <field name="text">Return true if current point is close to instance a up to tolerance toler</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">OFELI::Point2D::x</field>
    <field name="url">structOFELI_1_1Point2D.html#a4333b1040efe8cd32f7c76bfc2269e0d</field>
    <field name="keywords">x OFELI::Point2D::x Point2D&lt; T_ &gt;</field>
    <field name="text">First coordinate of point</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point2D::Norm</field>
    <field name="args">() const</field>
    <field name="url">structOFELI_1_1Point2D.html#a471500ba016dcd9a5c4664b21f7db080</field>
    <field name="keywords">Norm OFELI::Point2D::Norm Point2D&lt; T_ &gt;</field>
    <field name="text">Return norm length of vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point2D::operator()</field>
    <field name="args">(size_t i) const</field>
    <field name="url">structOFELI_1_1Point2D.html#a4c803ac5c9a58584fcc3b3f20b98a126</field>
    <field name="keywords">operator() OFELI::Point2D::operator() Point2D&lt; T_ &gt;</field>
    <field name="text">Operator() Constant version Values i 1 2 correspond to x and y respectively</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point2D::operator()</field>
    <field name="args">(size_t i)</field>
    <field name="url">structOFELI_1_1Point2D.html#a521ccbffbfc8f6ceabb86a09da68f864</field>
    <field name="keywords">operator() OFELI::Point2D::operator() Point2D&lt; T_ &gt;</field>
    <field name="text">Operator() Non constant version Values i 1 2 correspond to x and y respectively</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point2D::operator+=</field>
    <field name="args">(const Point2D&lt; T_ &gt; &amp;p)</field>
    <field name="url">structOFELI_1_1Point2D.html#a7e08b984b15b5acf6daf7e5c12a521a8</field>
    <field name="keywords">operator+= OFELI::Point2D::operator+= Point2D&lt; T_ &gt;</field>
    <field name="text">Operator Add point p to current instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point2D::NNorm</field>
    <field name="args">() const</field>
    <field name="url">structOFELI_1_1Point2D.html#a8263af708590a9caae427a5282b0b9f6</field>
    <field name="keywords">NNorm OFELI::Point2D::NNorm Point2D&lt; T_ &gt;</field>
    <field name="text">Return squared norm length of vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point2D::operator*=</field>
    <field name="args">(const T_ &amp;a)</field>
    <field name="url">structOFELI_1_1Point2D.html#a87fa65efa7a6189bc6a6cd5f123ce757</field>
    <field name="keywords">operator*= OFELI::Point2D::operator*= Point2D&lt; T_ &gt;</field>
    <field name="text">Operator Multiply constant a by current instance coordinates</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point2D::operator/=</field>
    <field name="args">(const T_ &amp;a)</field>
    <field name="url">structOFELI_1_1Point2D.html#a8c500c95db299216a2a2cfd500bcd777</field>
    <field name="keywords">operator/= OFELI::Point2D::operator/= Point2D&lt; T_ &gt;</field>
    <field name="text">Operator Divide current instance coordinates by a</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point2D::operator!=</field>
    <field name="args">(const Point2D&lt; T_ &gt; &amp;p)</field>
    <field name="url">structOFELI_1_1Point2D.html#a9f850fd7935d8521282f5cb797d087d1</field>
    <field name="keywords">operator!= OFELI::Point2D::operator!= Point2D&lt; T_ &gt;</field>
    <field name="text">Operator Return false if current instance is equal to p true otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point2D::CrossProduct</field>
    <field name="args">(const Point2D&lt; real_t &gt; &amp;lp, const Point2D&lt; real_t &gt; &amp;rp)</field>
    <field name="url">structOFELI_1_1Point2D.html#aa18602f1454937213300610795f5da35</field>
    <field name="keywords">CrossProduct OFELI::Point2D::CrossProduct Point2D&lt; T_ &gt;</field>
    <field name="text">Return Cross product of two vectors lp and rp</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point2D::operator=</field>
    <field name="args">(const T_ &amp;a)</field>
    <field name="url">structOFELI_1_1Point2D.html#aade3332a19b4d05d4f54f1a84aea7f9a</field>
    <field name="keywords">operator= OFELI::Point2D::operator= Point2D&lt; T_ &gt;</field>
    <field name="text">Operator Assign constant a to current instance coordinates</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point2D::Point2D</field>
    <field name="args">(const Point&lt; T_ &gt; &amp;pt)</field>
    <field name="url">structOFELI_1_1Point2D.html#ab3b0cc014f5ccef282cd54b9085635ae</field>
    <field name="keywords">Point2D OFELI::Point2D::Point2D Point2D&lt; T_ &gt;</field>
    <field name="text">Copy constructor from class Point</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">OFELI::Point2D::y</field>
    <field name="url">structOFELI_1_1Point2D.html#ab4943c75e718fe503722ac7d26c746a6</field>
    <field name="keywords">y OFELI::Point2D::y Point2D&lt; T_ &gt;</field>
    <field name="text">Second coordinate of point</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point2D::operator+=</field>
    <field name="args">(const T_ &amp;a)</field>
    <field name="url">structOFELI_1_1Point2D.html#aca6446380c87d5290f80e102b730239b</field>
    <field name="keywords">operator+= OFELI::Point2D::operator+= Point2D&lt; T_ &gt;</field>
    <field name="text">Operator Add constant a to current instance coordinates</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point2D::Point2D</field>
    <field name="args">(T_ a, T_ b=T_(0))</field>
    <field name="url">structOFELI_1_1Point2D.html#ace93105f5063438a225d827c99bd8dee</field>
    <field name="keywords">Point2D OFELI::Point2D::Point2D Point2D&lt; T_ &gt;</field>
    <field name="text">Constructor that assigns a b to x y and y coordinates respectively Default value for b is 0</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point2D::Point2D</field>
    <field name="args">()</field>
    <field name="url">structOFELI_1_1Point2D.html#adbb78b7f84456558171243549b03928c</field>
    <field name="keywords">Point2D OFELI::Point2D::Point2D Point2D&lt; T_ &gt;</field>
    <field name="text">Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point2D::Director</field>
    <field name="args">(const Point2D&lt; real_t &gt; &amp;p) const</field>
    <field name="url">structOFELI_1_1Point2D.html#aec0feb0ff2e137d9fc857dceacada148</field>
    <field name="keywords">Director OFELI::Point2D::Director Point2D&lt; T_ &gt;</field>
    <field name="text">Return Director Normalized vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point2D::operator[]</field>
    <field name="args">(size_t i) const</field>
    <field name="url">structOFELI_1_1Point2D.html#af31a0b730772ebb128e3ca20ee860a05</field>
    <field name="keywords">operator[] OFELI::Point2D::operator[] Point2D&lt; T_ &gt;</field>
    <field name="text">Operator Constant version Values i 0 1 correspond to x and y respectively</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::Point2D::Point2D</field>
    <field name="args">(T_ *a)</field>
    <field name="url">structOFELI_1_1Point2D.html#af4fe236e24901a462df66f9439064cb8</field>
    <field name="keywords">Point2D OFELI::Point2D::Point2D Point2D&lt; T_ &gt;</field>
    <field name="text">Initialize point coordinates with C-array a</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">OFELI::SpaceTime</field>
    <field name="url">structOFELI_1_1SpaceTime.html</field>
    <field name="keywords">SpaceTime</field>
    <field name="text">Defines a space-time point Operators and are overloaded Rachid Touzani GNU Lesser Public License</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpaceTime::operator+=</field>
    <field name="args">(const SpaceTime &amp;p)</field>
    <field name="url">structOFELI_1_1SpaceTime.html#a04cc8d6b427e7385c292d41d68ea0b0a</field>
    <field name="keywords">operator+= OFELI::SpaceTime::operator+= SpaceTime</field>
    <field name="text">Operator Add point p to current instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpaceTime::Director</field>
    <field name="args">(const SpaceTime &amp;p) const</field>
    <field name="url">structOFELI_1_1SpaceTime.html#a0f38cbcef7ce4b53b59015ae6376b9bd</field>
    <field name="keywords">Director OFELI::SpaceTime::Director SpaceTime</field>
    <field name="text">Return Director Normalized vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpaceTime::SpaceTime</field>
    <field name="args">()</field>
    <field name="url">structOFELI_1_1SpaceTime.html#a2d41d4956f4fa38d1e1b1d1ba84a6a0c</field>
    <field name="keywords">SpaceTime OFELI::SpaceTime::SpaceTime SpaceTime</field>
    <field name="text">Default constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpaceTime::operator/=</field>
    <field name="args">(const real_t &amp;a)</field>
    <field name="url">structOFELI_1_1SpaceTime.html#a4141e386b04ddc5a3cac63a6f017c3d2</field>
    <field name="keywords">operator/= OFELI::SpaceTime::operator/= SpaceTime</field>
    <field name="text">Operator Divide current instance coordinates by a</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpaceTime::Norm</field>
    <field name="args">() const</field>
    <field name="url">structOFELI_1_1SpaceTime.html#a471500ba016dcd9a5c4664b21f7db080</field>
    <field name="keywords">Norm OFELI::SpaceTime::Norm SpaceTime</field>
    <field name="text">Return norm length of vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpaceTime::operator()</field>
    <field name="args">(size_t i)</field>
    <field name="url">structOFELI_1_1SpaceTime.html#a4f687e4702095ab2c38b0ceb9b12bc70</field>
    <field name="keywords">operator() OFELI::SpaceTime::operator() SpaceTime</field>
    <field name="text">Operator Non constant version Values i 1 2 3 4 correspond to x y z and t respectively</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpaceTime::operator*=</field>
    <field name="args">(const real_t &amp;a)</field>
    <field name="url">structOFELI_1_1SpaceTime.html#a58918890ff9efe2692c5f0cc4347161c</field>
    <field name="keywords">operator*= OFELI::SpaceTime::operator*= SpaceTime</field>
    <field name="text">Operator Multiply constant a by current instance coordinates</field>
  </doc>
  <doc>
    <field name="type">variable</field>
    <field name="name">OFELI::SpaceTime::x</field>
    <field name="url">structOFELI_1_1SpaceTime.html#a7c5aa893d5a34875a59d0df299e1674b</field>
    <field name="keywords">x OFELI::SpaceTime::x SpaceTime</field>
    <field name="text">Coordinates</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpaceTime::operator()</field>
    <field name="args">(size_t i) const</field>
    <field name="url">structOFELI_1_1SpaceTime.html#a824c6376b90979808e7c031e726e9698</field>
    <field name="keywords">operator() OFELI::SpaceTime::operator() SpaceTime</field>
    <field name="text">Operator Constant version Values i 1 2 3 4 correspond to x y z and t respectively</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpaceTime::NNorm</field>
    <field name="args">() const</field>
    <field name="url">structOFELI_1_1SpaceTime.html#a8263af708590a9caae427a5282b0b9f6</field>
    <field name="keywords">NNorm OFELI::SpaceTime::NNorm SpaceTime</field>
    <field name="text">Return squared euclidean norm of vector</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpaceTime::operator-=</field>
    <field name="args">(const SpaceTime &amp;p)</field>
    <field name="url">structOFELI_1_1SpaceTime.html#a8e5a4476e248a74ab0ff31a19c8cc5bc</field>
    <field name="keywords">operator-= OFELI::SpaceTime::operator-= SpaceTime</field>
    <field name="text">Operator Subtract point p from current instance</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpaceTime::operator==</field>
    <field name="args">(const SpaceTime &amp;p)</field>
    <field name="url">structOFELI_1_1SpaceTime.html#aadf7d597be9c26f5369c0c9c6d814fea</field>
    <field name="keywords">operator== OFELI::SpaceTime::operator== SpaceTime</field>
    <field name="text">Operator Return true if current instance is equal to p false otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpaceTime::operator-=</field>
    <field name="args">(const real_t &amp;a)</field>
    <field name="url">structOFELI_1_1SpaceTime.html#abed9153b45af7133cf65beae05ef1419</field>
    <field name="keywords">operator-= OFELI::SpaceTime::operator-= SpaceTime</field>
    <field name="text">Operator Subtract constant a from current instance coordinates</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpaceTime::isCloseTo</field>
    <field name="args">(const SpaceTime &amp;a, real_t toler=OFELI_TOLERANCE) const</field>
    <field name="url">structOFELI_1_1SpaceTime.html#ac51c96ea50fb6de4ea06b2cbce23ce3b</field>
    <field name="keywords">isCloseTo OFELI::SpaceTime::isCloseTo SpaceTime</field>
    <field name="text">Return true if current point is close to instance a up to tolerance toler Default value for toler is the OFELI_TOLERANCE constant</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpaceTime::operator+=</field>
    <field name="args">(const real_t &amp;a)</field>
    <field name="url">structOFELI_1_1SpaceTime.html#acf6b9471d227b6a24f52cd6bf3dceb01</field>
    <field name="keywords">operator+= OFELI::SpaceTime::operator+= SpaceTime</field>
    <field name="text">Operator Add constant a to current instance coordinates</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpaceTime::SpaceTime</field>
    <field name="args">(real_t a, real_t b, real_t c, real_t d)</field>
    <field name="url">structOFELI_1_1SpaceTime.html#adc3eb1c4a75019d267aac0edf34e4dad</field>
    <field name="keywords">SpaceTime OFELI::SpaceTime::SpaceTime SpaceTime</field>
    <field name="text">Constructor that assigns a b c and d to first second third coordinates and time respectively</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpaceTime::operator!=</field>
    <field name="args">(const SpaceTime &amp;p)</field>
    <field name="url">structOFELI_1_1SpaceTime.html#ae07491de1f7b693884577e589d807e3c</field>
    <field name="keywords">operator!= OFELI::SpaceTime::operator!= SpaceTime</field>
    <field name="text">Operator Return false if current instance is equal to p true otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpaceTime::operator[]</field>
    <field name="args">(size_t i)</field>
    <field name="url">structOFELI_1_1SpaceTime.html#ae345ba91b08c2be0eda4c9e34e326dff</field>
    <field name="keywords">operator[] OFELI::SpaceTime::operator[] SpaceTime</field>
    <field name="text">Operator Non constant version Values i 0 1 2 3 correspond to x y z and t respectively</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpaceTime::SpaceTime</field>
    <field name="args">(const SpaceTime &amp;p)</field>
    <field name="url">structOFELI_1_1SpaceTime.html#ae827990096e18ffe223848947b18f256</field>
    <field name="keywords">SpaceTime OFELI::SpaceTime::SpaceTime SpaceTime</field>
    <field name="text">Copy constructor</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpaceTime::Normalize</field>
    <field name="args">()</field>
    <field name="url">structOFELI_1_1SpaceTime.html#af279e0f0ff720ee54d6733674dfda50a</field>
    <field name="keywords">Normalize OFELI::SpaceTime::Normalize SpaceTime</field>
    <field name="text">Normalize vector Divide vector components by its 2 norm</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpaceTime::operator[]</field>
    <field name="args">(size_t i) const</field>
    <field name="url">structOFELI_1_1SpaceTime.html#af8128c752b3290ed52d52470145ee08d</field>
    <field name="keywords">operator[] OFELI::SpaceTime::operator[] SpaceTime</field>
    <field name="text">Operator Constant version Values i 0 1 2 correspond to x y z and t respectively</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">OFELI::SpaceTime::operator,</field>
    <field name="args">(const SpaceTime &amp;p) const</field>
    <field name="url">structOFELI_1_1SpaceTime.html#afc20c718873b2f31cc8f2542012451a5</field>
    <field name="keywords">operator, OFELI::SpaceTime::operator, SpaceTime</field>
    <field name="text">Return Dot scalar product of two vectors A typical use of this operator is double a p q where p and q are 2 instances of SpaceTime p Point instance by which the current instance is multiplied</field>
  </doc>
  <doc>
    <field name="type">file</field>
    <field name="name">util.h</field>
    <field name="url">util_8h.html</field>
    <field name="keywords">util.h</field>
    <field name="text">File that contains various utility functions</field>
  </doc>
</add>
